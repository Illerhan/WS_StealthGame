;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_VertexID              0   x           0   VERTID    uint   x   
; SV_InstanceID            0   x           1   INSTID    uint   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xyzw        0     NONE   float   xyzw
; TEXCOORD                 1   xyz         1     NONE    uint   xyz 
; TEXCOORD                 2   xyzw        2     NONE     int   xyzw
; SV_Position              0   xyzw        3      POS   float   xyzw
;
; shader hash: fb57bba778ed2b8536de93d20b5e8441
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_VertexID              0                              
; SV_InstanceID            0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1        nointerpolation       
; TEXCOORD                 2        nointerpolation       
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer $Globals
; {
;
;   struct $Globals
;   {
;
;       uint GPUSceneFrameNumber;                     ; Offset:    0
;       uint4 PageConstants;                          ; Offset:   16
;       uint MaxNodes;                                ; Offset:   32
;       uint MaxVisibleClusters;                      ; Offset:   36
;       uint RenderFlags;                             ; Offset:   40
;       float RayTracingCutError;                     ; Offset:   44
;       uint DebugFlags;                              ; Offset:   48
;       float2 HZBViewSize;                           ; Offset:   52
;       float2 HZBSize;                               ; Offset:   64
;       float4 DepthOfFieldParams;                    ; Offset:   80
;       uint bSceneLightingChannelsValid;             ; Offset:   96
;       uint MaxCandidateClusters;                    ; Offset:  100
;       uint ActiveRasterizerBin;                     ; Offset:  104
;       float2 HardwareViewportSize;                  ; Offset:  112
;       uint VisualizeModeBitMask;                    ; Offset:  120
;   
;   } $Globals;                                       ; Offset:    0 Size:   124
;
; }
;
; Resource bind info for GPUScenePrimitiveSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for GPUSceneInstanceSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for InViews
; {
;
;   struct hostlayout.struct.FPackedNaniteView
;   {
;
;       row_major float4x4 SVPositionToTranslatedWorld;; Offset:    0
;       row_major float4x4 ViewToTranslatedWorld;     ; Offset:   64
;       row_major float4x4 TranslatedWorldToView;     ; Offset:  128
;       row_major float4x4 TranslatedWorldToClip;     ; Offset:  192
;       row_major float4x4 TranslatedWorldToSubpixelClip;; Offset:  256
;       row_major float4x4 ViewToClip;                ; Offset:  320
;       row_major float4x4 ClipToRelativeWorld;       ; Offset:  384
;       row_major float4x4 PrevTranslatedWorldToView; ; Offset:  448
;       row_major float4x4 PrevTranslatedWorldToClip; ; Offset:  512
;       row_major float4x4 PrevViewToClip;            ; Offset:  576
;       row_major float4x4 PrevClipToRelativeWorld;   ; Offset:  640
;       int4 ViewRect;                                ; Offset:  704
;       float4 ViewSizeAndInvSize;                    ; Offset:  720
;       float4 ClipSpaceScaleOffset;                  ; Offset:  736
;       float3 RelativePreViewTranslation;            ; Offset:  752
;       float ViewTilePositionX;                      ; Offset:  764
;       float3 RelativePrevPreViewTranslation;        ; Offset:  768
;       float ViewTilePositionY;                      ; Offset:  780
;       float3 RelativeWorldCameraOrigin;             ; Offset:  784
;       float ViewTilePositionZ;                      ; Offset:  796
;       float3 DrawDistanceOriginTranslatedWorld;     ; Offset:  800
;       float RangeBasedCullingDistance;              ; Offset:  812
;       float3 ViewForward;                           ; Offset:  816
;       float NearPlane;                              ; Offset:  828
;       float4 TranslatedGlobalClipPlane;             ; Offset:  832
;       float3 MatrixTilePosition;                    ; Offset:  848
;       float Padding1;                               ; Offset:  860
;       float2 LODScales;                             ; Offset:  864
;       float MinBoundsRadiusSq;                      ; Offset:  872
;       uint StreamingPriorityCategory_AndFlags;      ; Offset:  876
;       int4 TargetLayerIdX_AndMipLevelY_AndNumMipLevelsZ;; Offset:  880
;       int4 HZBTestViewRect;                         ; Offset:  896
;   
;   } $Element;                                       ; Offset:    0 Size:   912
;
; }
;
; Resource bind info for RasterizerBinHeaders
; {
;
;   uint4 $Element;                                   ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for RasterizerBinData
; {
;
;   uint2 $Element;                                   ; Offset:    0 Size:     8
;
; }
;
; Resource bind info for InTotalPrevDrawClusters
; {
;
;   uint2 $Element;                                   ; Offset:    0 Size:     8
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; $Globals                          cbuffer      NA          NA     CB0            cb0     1
; GPUScenePrimitiveSceneData        texture  struct         r/o      T0             t0     1
; GPUSceneInstanceSceneData         texture  struct         r/o      T1             t1     1
; ClusterPageData                   texture    byte         r/o      T2             t2     1
; VisibleClustersSWHW               texture    byte         r/o      T3             t3     1
; InViews                           texture  struct         r/o      T4             t4     1
; RasterizerBinHeaders              texture  struct         r/o      T5             t5     1
; RasterizerBinData                 texture  struct         r/o      T6             t6     1
; InTotalPrevDrawClusters           texture  struct         r/o      T7             t7     1
; InClusterOffsetSWHW               texture     u32         buf      T8             t8     1
;
;
; ViewId state:
;
; Number of inputs: 5, outputs: 16
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 4 }
;   output 1 depends on inputs: { 0, 4 }
;   output 2 depends on inputs: { 0, 4 }
;   output 3 depends on inputs: { 0, 4 }
;   output 4 depends on inputs: { 0, 4 }
;   output 5 depends on inputs: { 4 }
;   output 8 depends on inputs: { 4 }
;   output 9 depends on inputs: { 4 }
;   output 10 depends on inputs: { 4 }
;   output 11 depends on inputs: { 4 }
;   output 12 depends on inputs: { 0, 4 }
;   output 13 depends on inputs: { 0, 4 }
;   output 14 depends on inputs: { 0, 4 }
;   output 15 depends on inputs: { 0, 4 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%struct.ByteAddressBuffer = type { i32 }
%"hostlayout.class.StructuredBuffer<FPackedNaniteView>" = type { %hostlayout.struct.FPackedNaniteView }
%hostlayout.struct.FPackedNaniteView = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x i32>, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <3 x float>, float, <2 x float>, float, i32, <4 x i32>, <4 x i32> }
%"class.StructuredBuffer<vector<unsigned int, 4> >" = type { <4 x i32> }
%"class.StructuredBuffer<vector<unsigned int, 2> >" = type { <2 x i32> }
%"class.Buffer<unsigned int>" = type { i32 }
%"$Globals" = type { i32, <4 x i32>, i32, i32, i32, float, i32, <2 x float>, <2 x float>, <4 x float>, i32, i32, i32, <2 x float>, i32 }

define void @HWRasterizeVS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 13, i32 124 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %12 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call i32 @dx.op.loadInput.i32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = alloca [3 x i32], align 4
  %15 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %11, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %16 = extractvalue %dx.types.CBufRet.i32 %15, 2
  %17 = and i32 %16, 4096
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %37, !dx.controlflow.hints !39

; <label>:19                                      ; preds = %0
  %20 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %11, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %21 = extractvalue %dx.types.CBufRet.i32 %20, 2
  %22 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %23 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %22, i32 %21, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %24 = extractvalue %dx.types.ResRet.i32 %23, 2
  %25 = extractvalue %dx.types.ResRet.i32 %23, 0
  %26 = extractvalue %dx.types.ResRet.i32 %23, 1
  %27 = xor i32 %12, -1
  %28 = add i32 %24, %27
  %29 = add i32 %28, %25
  %30 = add i32 %29, %26
  %31 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 12, i32 8 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=8>
  %32 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %31, i32 %30, i32 0, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %33 = extractvalue %dx.types.ResRet.i32 %32, 0
  %34 = extractvalue %dx.types.ResRet.i32 %32, 1
  %35 = lshr i32 %34, 16
  %36 = and i32 %34, 65535
  br label %37

; <label>:37                                      ; preds = %19, %0
  %38 = phi i32 [ %33, %19 ], [ %12, %0 ]
  %39 = phi i32 [ %35, %19 ], [ undef, %0 ]
  %40 = phi i32 [ %36, %19 ], [ undef, %0 ]
  %41 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %11, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %42 = extractvalue %dx.types.CBufRet.i32 %41, 2
  %43 = and i32 %42, 8192
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %50, label %45, !dx.controlflow.hints !40

; <label>:45                                      ; preds = %37
  %46 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 12, i32 8 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=8>
  %47 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %46, i32 0, i32 0, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %48 = extractvalue %dx.types.ResRet.i32 %47, 1
  %49 = add i32 %48, %38
  br label %50

; <label>:50                                      ; preds = %45, %37
  %51 = phi i32 [ %49, %45 ], [ %38, %37 ]
  %52 = and i32 %42, 2048
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %59, label %54, !dx.controlflow.hints !41

; <label>:54                                      ; preds = %50
  %55 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %56 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %55, i32 5, i32 undef)  ; BufferLoad(srv,index,wot)
  %57 = extractvalue %dx.types.ResRet.i32 %56, 0
  %58 = add i32 %57, %51
  br label %59

; <label>:59                                      ; preds = %54, %50
  %60 = phi i32 [ %58, %54 ], [ %51, %50 ]
  %61 = extractvalue %dx.types.CBufRet.i32 %41, 1
  %62 = xor i32 %60, -1
  %63 = add i32 %61, %62
  %64 = udiv i32 %13, 3
  %65 = mul i32 %64, -3
  %66 = add i32 %65, %13
  %67 = shl i32 %63, 3
  %68 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %69 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %68, i32 %67, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %70 = extractvalue %dx.types.ResRet.i32 %69, 0
  %71 = extractvalue %dx.types.ResRet.i32 %69, 1
  %72 = lshr i32 %70, 4
  %73 = and i32 %72, 4095
  %74 = lshr i32 %70, 16
  %75 = and i32 %71, 16777215
  %76 = lshr i32 %71, 24
  %77 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %11, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %78 = extractvalue %dx.types.CBufRet.i32 %77, 0
  %79 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %80 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %79, i32 %75, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %81 = extractvalue %dx.types.ResRet.f32 %80, 0
  %82 = bitcast float %81 to i32
  %83 = and i32 %82, 1048575
  %84 = mul nuw nsw i32 %83, 41
  %85 = add nuw nsw i32 %84, 1
  %86 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %87 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %86, i32 %85, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %88 = extractvalue %dx.types.ResRet.f32 %87, 0
  %89 = extractvalue %dx.types.ResRet.f32 %87, 1
  %90 = extractvalue %dx.types.ResRet.f32 %87, 2
  %91 = add i32 %78, %75
  %92 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %79, i32 %91, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %93 = extractvalue %dx.types.ResRet.f32 %92, 0
  %94 = extractvalue %dx.types.ResRet.f32 %92, 1
  %95 = extractvalue %dx.types.ResRet.f32 %92, 2
  %96 = extractvalue %dx.types.ResRet.f32 %92, 3
  %97 = bitcast float %93 to i32
  %98 = bitcast float %94 to i32
  %99 = bitcast float %95 to i32
  %100 = bitcast float %96 to i32
  %101 = shl i32 %78, 1
  %102 = add i32 %101, %75
  %103 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %79, i32 %102, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %104 = extractvalue %dx.types.ResRet.f32 %103, 0
  %105 = extractvalue %dx.types.ResRet.f32 %103, 1
  %106 = extractvalue %dx.types.ResRet.f32 %103, 2
  %107 = and i32 %97, 65535
  %108 = uitofp i32 %107 to float
  %109 = lshr i32 %97, 16
  %110 = uitofp i32 %109 to float
  %111 = and i32 %98, 32767
  %112 = uitofp i32 %111 to float
  %113 = fadd fast float %108, -3.276800e+04
  %114 = fadd fast float %110, -3.276800e+04
  %115 = fadd fast float %112, -1.638400e+04
  %116 = fmul fast float %115, 0x3F06A0F8E0000000
  %117 = and i32 %98, 32768
  %118 = icmp ne i32 %117, 0
  %119 = fadd fast float %113, %114
  %120 = fmul fast float %119, 0x3F00002000000000
  %121 = fsub fast float %113, %114
  %122 = fmul fast float %121, 0x3F00002000000000
  %123 = call float @dx.op.unary.f32(i32 6, float %120)  ; FAbs(value)
  %124 = call float @dx.op.unary.f32(i32 6, float %122)  ; FAbs(value)
  %125 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %123, float %124)  ; Dot2(ax,ay,bx,by)
  %126 = fsub fast float 2.000000e+00, %125
  %127 = call float @dx.op.dot3.f32(i32 55, float %120, float %122, float %126, float %120, float %122, float %126)  ; Dot3(ax,ay,az,bx,by,bz)
  %128 = call float @dx.op.unary.f32(i32 25, float %127)  ; Rsqrt(value)
  %129 = fmul fast float %128, %120
  %130 = fmul fast float %128, %122
  %131 = fmul fast float %128, %126
  %132 = fadd fast float %131, 1.000000e+00
  %133 = fdiv fast float 1.000000e+00, %132
  %134 = fmul fast float %130, %129
  %135 = fmul fast float %134, %133
  %136 = fsub fast float -0.000000e+00, %135
  %137 = fmul fast float %129, %129
  %138 = fmul fast float %137, %133
  %139 = fsub fast float 1.000000e+00, %138
  %140 = fmul fast float %130, %130
  %141 = fmul fast float %140, %133
  %142 = fsub fast float 1.000000e+00, %141
  %143 = fmul fast float %116, %116
  %144 = fsub fast float 1.000000e+00, %143
  %145 = call float @dx.op.unary.f32(i32 24, float %144)  ; Sqrt(value)
  %146 = select i1 %118, float %116, float %145
  %147 = select i1 %118, float %145, float %116
  %148 = fmul fast float %139, %146
  %149 = fmul fast float %146, %136
  %150 = fmul fast float %146, %129
  %151 = fmul fast float %147, %136
  %152 = fmul fast float %142, %147
  %153 = fmul fast float %130, %147
  %154 = fsub fast float -0.000000e+00, %153
  %155 = fadd fast float %148, %151
  %156 = fadd fast float %149, %152
  %157 = fsub fast float %154, %150
  %158 = fmul fast float %157, %130
  %159 = fmul fast float %156, %131
  %160 = fsub fast float %158, %159
  %161 = fmul fast float %155, %131
  %162 = fmul fast float %157, %129
  %163 = fsub fast float %161, %162
  %164 = fmul fast float %156, %129
  %165 = fmul fast float %155, %130
  %166 = fsub fast float %164, %165
  %167 = lshr i32 %100, 16
  %168 = shl i32 %167, 23
  %169 = add i32 %168, -125829120
  %170 = bitcast i32 %169 to float
  %171 = lshr i32 %99, 16
  %172 = and i32 %99, 65535
  %173 = and i32 %100, 65535
  %174 = uitofp i32 %172 to float
  %175 = uitofp i32 %171 to float
  %176 = uitofp i32 %173 to float
  %177 = fadd fast float %174, -3.276800e+04
  %178 = fadd fast float %175, -3.276800e+04
  %179 = fadd fast float %176, -3.276800e+04
  %180 = fmul fast float %170, %177
  %181 = fmul fast float %170, %178
  %182 = fmul fast float %170, %179
  %183 = fmul fast float %155, %180
  %184 = fmul fast float %156, %180
  %185 = fmul fast float %157, %180
  %186 = fmul fast float %160, %181
  %187 = fmul fast float %163, %181
  %188 = fmul fast float %166, %181
  %189 = fmul fast float %129, %182
  %190 = fmul fast float %130, %182
  %191 = fmul fast float %131, %182
  %192 = and i32 %82, 1048576
  %193 = icmp ne i32 %192, 0
  %194 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 524, i32 912 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=912>
  %195 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %194, i32 %73, i32 192, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %196 = extractvalue %dx.types.ResRet.f32 %195, 0
  %197 = extractvalue %dx.types.ResRet.f32 %195, 1
  %198 = extractvalue %dx.types.ResRet.f32 %195, 2
  %199 = extractvalue %dx.types.ResRet.f32 %195, 3
  %200 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %194, i32 %73, i32 208, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %201 = extractvalue %dx.types.ResRet.f32 %200, 0
  %202 = extractvalue %dx.types.ResRet.f32 %200, 1
  %203 = extractvalue %dx.types.ResRet.f32 %200, 2
  %204 = extractvalue %dx.types.ResRet.f32 %200, 3
  %205 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %194, i32 %73, i32 224, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %206 = extractvalue %dx.types.ResRet.f32 %205, 0
  %207 = extractvalue %dx.types.ResRet.f32 %205, 1
  %208 = extractvalue %dx.types.ResRet.f32 %205, 2
  %209 = extractvalue %dx.types.ResRet.f32 %205, 3
  %210 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %194, i32 %73, i32 240, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %211 = extractvalue %dx.types.ResRet.f32 %210, 0
  %212 = extractvalue %dx.types.ResRet.f32 %210, 1
  %213 = extractvalue %dx.types.ResRet.f32 %210, 2
  %214 = extractvalue %dx.types.ResRet.f32 %210, 3
  %215 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %194, i32 %73, i32 704, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %216 = extractvalue %dx.types.ResRet.i32 %215, 0
  %217 = extractvalue %dx.types.ResRet.i32 %215, 1
  %218 = extractvalue %dx.types.ResRet.i32 %215, 2
  %219 = extractvalue %dx.types.ResRet.i32 %215, 3
  %220 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %194, i32 %73, i32 736, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %221 = extractvalue %dx.types.ResRet.f32 %220, 0
  %222 = extractvalue %dx.types.ResRet.f32 %220, 1
  %223 = extractvalue %dx.types.ResRet.f32 %220, 2
  %224 = extractvalue %dx.types.ResRet.f32 %220, 3
  %225 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %194, i32 %73, i32 752, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %226 = extractvalue %dx.types.ResRet.f32 %225, 0
  %227 = extractvalue %dx.types.ResRet.f32 %225, 1
  %228 = extractvalue %dx.types.ResRet.f32 %225, 2
  %229 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %194, i32 %73, i32 764, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %230 = extractvalue %dx.types.ResRet.f32 %229, 0
  %231 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %194, i32 %73, i32 780, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %232 = extractvalue %dx.types.ResRet.f32 %231, 0
  %233 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %194, i32 %73, i32 796, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %234 = extractvalue %dx.types.ResRet.f32 %233, 0
  %235 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %194, i32 %73, i32 876, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %236 = extractvalue %dx.types.ResRet.i32 %235, 0
  %237 = lshr i32 %236, 2
  %238 = and i32 %237, 16
  %239 = icmp ne i32 %238, 0
  %240 = xor i1 %193, %239
  %241 = extractvalue %dx.types.CBufRet.i32 %77, 1
  %242 = call i32 @dx.op.binary.i32(i32 40, i32 %74, i32 %241)  ; UMin(a,b)
  %243 = shl i32 %242, 17
  %244 = sub nsw i32 %74, %241
  %245 = call i32 @dx.op.binary.i32(i32 37, i32 %244, i32 0)  ; IMax(a,b)
  %246 = shl i32 %245, 15
  %247 = add i32 %246, %243
  %248 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %249 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %248, i32 %247, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %250 = extractvalue %dx.types.ResRet.i32 %249, 0
  %251 = shl i32 %250, 4
  %252 = shl nuw nsw i32 %76, 4
  %253 = or i32 %247, %252
  %254 = add nsw i32 %253, 16
  %255 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %248, i32 %254, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %256 = extractvalue %dx.types.ResRet.i32 %255, 0
  %257 = extractvalue %dx.types.ResRet.i32 %255, 1
  %258 = add i32 %254, %251
  %259 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %248, i32 %258, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %260 = extractvalue %dx.types.ResRet.i32 %259, 0
  %261 = extractvalue %dx.types.ResRet.i32 %259, 1
  %262 = extractvalue %dx.types.ResRet.i32 %259, 2
  %263 = extractvalue %dx.types.ResRet.i32 %259, 3
  %264 = lshr i32 %256, 9
  %265 = and i32 %257, 255
  %266 = and i32 %263, 15
  %267 = lshr i32 %263, 9
  %268 = and i32 %267, 31
  %269 = lshr i32 %263, 14
  %270 = and i32 %269, 31
  %271 = lshr i32 %263, 19
  %272 = and i32 %271, 31
  %273 = sub i32 %40, %39
  %274 = select i1 %18, i32 %273, i32 %265
  %275 = icmp ult i32 %64, %274
  br i1 %275, label %276, label %448, !dx.controlflow.hints !42

; <label>:276                                     ; preds = %59
  %277 = select i1 %18, i32 %39, i32 0
  %278 = lshr i32 %257, 8
  %279 = add i32 %64, %277
  %280 = add nuw nsw i32 %266, 10
  %281 = mul i32 %280, %279
  %282 = add i32 %278, %247
  %283 = ashr i32 %281, 5
  %284 = shl nsw i32 %283, 2
  %285 = add i32 %282, %284
  %286 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %248, i32 %285, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %287 = extractvalue %dx.types.ResRet.i32 %286, 0
  %288 = and i32 %281, 31
  %289 = lshr i32 %287, %288
  %290 = icmp eq i32 %288, 0
  br i1 %290, label %296, label %291

; <label>:291                                     ; preds = %276
  %292 = extractvalue %dx.types.ResRet.i32 %286, 1
  %293 = sub i32 0, %281
  %294 = and i32 %293, 31
  %295 = shl i32 %292, %294
  br label %296

; <label>:296                                     ; preds = %291, %276
  %297 = phi i32 [ %295, %291 ], [ 0, %276 ]
  %298 = or i32 %297, %289
  %299 = shl i32 1, %266
  %300 = add i32 %299, -1
  %301 = and i32 %298, %300
  %302 = lshr i32 %298, %266
  %303 = and i32 %302, 31
  %304 = add nuw nsw i32 %266, 5
  %305 = lshr i32 %298, %304
  %306 = and i32 %305, 31
  %307 = add i32 %303, %301
  %308 = add i32 %306, %301
  %309 = select i1 %240, i32 %308, i32 %307
  %310 = select i1 %240, i32 %307, i32 %308
  %311 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i32 0, i32 0
  store i32 %301, i32* %311, align 4
  %312 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i32 0, i32 1
  store i32 %309, i32* %312, align 4
  %313 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i32 0, i32 2
  store i32 %310, i32* %313, align 4
  %314 = shl i32 %63, 7
  %315 = add i32 %314, 128
  %316 = or i32 %315, %279
  %317 = getelementptr [3 x i32], [3 x i32]* %14, i32 0, i32 %66
  %318 = load i32, i32* %317, align 4, !tbaa !43
  %319 = add nuw nsw i32 %268, %270
  %320 = add nuw nsw i32 %319, %272
  %321 = mul i32 %318, %320
  %322 = add i32 %264, %247
  %323 = lshr i32 %321, 5
  %324 = shl nuw nsw i32 %323, 2
  %325 = add i32 %322, %324
  %326 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %248, i32 %325, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %327 = extractvalue %dx.types.ResRet.i32 %326, 0
  %328 = extractvalue %dx.types.ResRet.i32 %326, 1
  %329 = extractvalue %dx.types.ResRet.i32 %326, 2
  %330 = and i32 %321, 31
  %331 = lshr i32 %327, %330
  %332 = icmp eq i32 %330, 0
  br i1 %332, label %337, label %333

; <label>:333                                     ; preds = %296
  %334 = sub i32 0, %321
  %335 = and i32 %334, 31
  %336 = shl i32 %328, %335
  br label %337

; <label>:337                                     ; preds = %333, %296
  %338 = phi i32 [ %336, %333 ], [ 0, %296 ]
  %339 = or i32 %338, %331
  %340 = lshr i32 %328, %330
  br i1 %332, label %345, label %341

; <label>:341                                     ; preds = %337
  %342 = sub i32 0, %321
  %343 = and i32 %342, 31
  %344 = shl i32 %329, %343
  br label %345

; <label>:345                                     ; preds = %341, %337
  %346 = phi i32 [ %344, %341 ], [ 0, %337 ]
  %347 = or i32 %346, %340
  %348 = shl i32 1, %268
  %349 = add i32 %348, -1
  %350 = and i32 %339, %349
  %351 = lshr i32 %339, %268
  %352 = icmp eq i32 %268, 0
  br i1 %352, label %357, label %353

; <label>:353                                     ; preds = %345
  %354 = sub nsw i32 0, %267
  %355 = and i32 %354, 31
  %356 = shl i32 %347, %355
  br label %357

; <label>:357                                     ; preds = %353, %345
  %358 = phi i32 [ %356, %353 ], [ 0, %345 ]
  %359 = or i32 %358, %351
  %360 = shl i32 1, %270
  %361 = add i32 %360, -1
  %362 = and i32 %359, %361
  %363 = lshr i32 %359, %270
  %364 = icmp eq i32 %270, 0
  br i1 %364, label %370, label %365

; <label>:365                                     ; preds = %357
  %366 = lshr i32 %347, %268
  %367 = sub nsw i32 0, %269
  %368 = and i32 %367, 31
  %369 = shl i32 %366, %368
  br label %370

; <label>:370                                     ; preds = %365, %357
  %371 = phi i32 [ %369, %365 ], [ 0, %357 ]
  %372 = or i32 %371, %363
  %373 = shl i32 1, %272
  %374 = add i32 %373, -1
  %375 = and i32 %372, %374
  %376 = shl i32 %263, 19
  %377 = and i32 %376, 260046848
  %378 = sub nsw i32 1132462080, %377
  %379 = bitcast i32 %378 to float
  %380 = add i32 %350, %260
  %381 = add i32 %362, %261
  %382 = add i32 %375, %262
  %383 = sitofp i32 %380 to float
  %384 = sitofp i32 %381 to float
  %385 = sitofp i32 %382 to float
  %386 = fmul fast float %383, %379
  %387 = fmul fast float %384, %379
  %388 = fmul fast float %385, %379
  %389 = fsub fast float %88, %230
  %390 = fsub fast float %89, %232
  %391 = fsub fast float %90, %234
  %392 = fmul fast float %389, 2.097152e+06
  %393 = fmul fast float %390, 2.097152e+06
  %394 = fmul fast float %391, 2.097152e+06
  %395 = fmul fast float %183, %386
  %396 = call float @dx.op.tertiary.f32(i32 46, float %387, float %186, float %395)  ; FMad(a,b,c)
  %397 = call float @dx.op.tertiary.f32(i32 46, float %388, float %189, float %396)  ; FMad(a,b,c)
  %398 = fadd fast float %226, %104
  %399 = fadd fast float %398, %392
  %400 = fadd fast float %399, %397
  %401 = fmul fast float %184, %386
  %402 = call float @dx.op.tertiary.f32(i32 46, float %387, float %187, float %401)  ; FMad(a,b,c)
  %403 = call float @dx.op.tertiary.f32(i32 46, float %388, float %190, float %402)  ; FMad(a,b,c)
  %404 = fadd fast float %227, %105
  %405 = fadd fast float %404, %393
  %406 = fadd fast float %405, %403
  %407 = fmul fast float %185, %386
  %408 = call float @dx.op.tertiary.f32(i32 46, float %387, float %188, float %407)  ; FMad(a,b,c)
  %409 = call float @dx.op.tertiary.f32(i32 46, float %388, float %191, float %408)  ; FMad(a,b,c)
  %410 = fadd fast float %228, %106
  %411 = fadd fast float %410, %394
  %412 = fadd fast float %411, %409
  %413 = fmul fast float %400, %196
  %414 = call float @dx.op.tertiary.f32(i32 46, float %406, float %201, float %413)  ; FMad(a,b,c)
  %415 = call float @dx.op.tertiary.f32(i32 46, float %412, float %206, float %414)  ; FMad(a,b,c)
  %416 = fadd fast float %415, %211
  %417 = fmul fast float %400, %197
  %418 = call float @dx.op.tertiary.f32(i32 46, float %406, float %202, float %417)  ; FMad(a,b,c)
  %419 = call float @dx.op.tertiary.f32(i32 46, float %412, float %207, float %418)  ; FMad(a,b,c)
  %420 = fadd fast float %419, %212
  %421 = fmul fast float %400, %198
  %422 = call float @dx.op.tertiary.f32(i32 46, float %406, float %203, float %421)  ; FMad(a,b,c)
  %423 = call float @dx.op.tertiary.f32(i32 46, float %412, float %208, float %422)  ; FMad(a,b,c)
  %424 = fadd fast float %423, %213
  %425 = fmul fast float %400, %199
  %426 = call float @dx.op.tertiary.f32(i32 46, float %406, float %204, float %425)  ; FMad(a,b,c)
  %427 = call float @dx.op.tertiary.f32(i32 46, float %412, float %209, float %426)  ; FMad(a,b,c)
  %428 = fadd fast float %427, %214
  %429 = fmul fast float %416, %221
  %430 = fmul fast float %420, %222
  %431 = fmul fast float %428, %223
  %432 = fmul fast float %428, %224
  %433 = fadd fast float %431, %429
  %434 = fadd fast float %432, %430
  %435 = fmul fast float %428, 5.000000e-01
  %436 = fadd fast float %433, %428
  %437 = fsub fast float %428, %434
  %438 = fmul fast float %437, 5.000000e-01
  %439 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %440 = extractvalue %dx.types.CBufRet.f32 %439, 0
  %441 = extractvalue %dx.types.CBufRet.f32 %439, 1
  %442 = fmul fast float %440, 5.000000e-01
  %443 = fmul fast float %442, %436
  %444 = fmul fast float %438, %441
  %445 = and i32 %237, 2
  %446 = icmp ne i32 %445, 0
  %447 = select i1 %446, float %424, float %435
  br label %448

; <label>:448                                     ; preds = %370, %59
  %449 = phi float [ 0.000000e+00, %59 ], [ %433, %370 ]
  %450 = phi float [ 0.000000e+00, %59 ], [ %434, %370 ]
  %451 = phi float [ 0.000000e+00, %59 ], [ %447, %370 ]
  %452 = phi float [ 1.000000e+00, %59 ], [ %428, %370 ]
  %453 = phi i32 [ undef, %59 ], [ %316, %370 ]
  %454 = phi float [ undef, %59 ], [ %443, %370 ]
  %455 = phi float [ undef, %59 ], [ %444, %370 ]
  %456 = phi float [ undef, %59 ], [ %424, %370 ]
  %457 = phi float [ undef, %59 ], [ %428, %370 ]
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %454)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %455)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %456)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %457)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.i32(i32 5, i32 1, i32 0, i8 0, i32 %453)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.i32(i32 5, i32 1, i32 0, i8 1, i32 %73)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.i32(i32 5, i32 1, i32 0, i8 2, i32 0)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.i32(i32 5, i32 2, i32 0, i8 0, i32 %216)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.i32(i32 5, i32 2, i32 0, i8 1, i32 %217)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.i32(i32 5, i32 2, i32 0, i8 2, i32 %218)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.i32(i32 5, i32 2, i32 0, i8 3, i32 %219)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %449)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %450)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %451)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %452)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind
declare void @dx.op.storeOutput.i32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!21}
!dx.entryPoints = !{!22}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"vs", i32 6, i32 6}
!4 = !{!5, null, !19, null}
!5 = !{!6, !8, !9, !10, !11, !13, !14, !16, !17}
!6 = !{i32 0, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 12, i32 0, !7}
!7 = !{i32 1, i32 16}
!8 = !{i32 1, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 12, i32 0, !7}
!9 = !{i32 2, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 2, i32 1, i32 11, i32 0, null}
!10 = !{i32 3, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 3, i32 1, i32 11, i32 0, null}
!11 = !{i32 4, %"hostlayout.class.StructuredBuffer<FPackedNaniteView>"* undef, !"", i32 0, i32 4, i32 1, i32 12, i32 0, !12}
!12 = !{i32 1, i32 912}
!13 = !{i32 5, %"class.StructuredBuffer<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 12, i32 0, !7}
!14 = !{i32 6, %"class.StructuredBuffer<vector<unsigned int, 2> >"* undef, !"", i32 0, i32 6, i32 1, i32 12, i32 0, !15}
!15 = !{i32 1, i32 8}
!16 = !{i32 7, %"class.StructuredBuffer<vector<unsigned int, 2> >"* undef, !"", i32 0, i32 7, i32 1, i32 12, i32 0, !15}
!17 = !{i32 8, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 8, i32 1, i32 10, i32 0, !18}
!18 = !{i32 0, i32 5}
!19 = !{!20}
!20 = !{i32 0, %"$Globals"* undef, !"", i32 0, i32 0, i32 1, i32 124, null}
!21 = !{[7 x i32] [i32 5, i32 16, i32 61471, i32 0, i32 0, i32 0, i32 65343]}
!22 = !{void ()* @HWRasterizeVS, !"HWRasterizeVS", !23, !4, !38}
!23 = !{!24, !29, null}
!24 = !{!25, !28}
!25 = !{i32 0, !"SV_VertexID", i8 5, i8 1, !26, i8 0, i32 1, i8 1, i32 0, i8 0, !27}
!26 = !{i32 0}
!27 = !{i32 3, i32 1}
!28 = !{i32 1, !"SV_InstanceID", i8 5, i8 2, !26, i8 0, i32 1, i8 1, i32 1, i8 0, !27}
!29 = !{!30, !32, !35, !37}
!30 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !26, i8 2, i32 1, i8 4, i32 0, i8 0, !31}
!31 = !{i32 3, i32 15}
!32 = !{i32 1, !"TEXCOORD", i8 5, i8 0, !33, i8 1, i32 1, i8 3, i32 1, i8 0, !34}
!33 = !{i32 1}
!34 = !{i32 3, i32 7}
!35 = !{i32 2, !"TEXCOORD", i8 4, i8 0, !36, i8 1, i32 1, i8 4, i32 2, i8 0, !31}
!36 = !{i32 2}
!37 = !{i32 3, !"SV_Position", i8 9, i8 3, !26, i8 4, i32 1, i8 4, i32 3, i8 0, !31}
!38 = !{i32 0, i64 16, i32 5, !26}
!39 = distinct !{!39, !"dx.controlflow.hints", i32 1}
!40 = distinct !{!40, !"dx.controlflow.hints", i32 1}
!41 = distinct !{!41, !"dx.controlflow.hints", i32 1}
!42 = distinct !{!42, !"dx.controlflow.hints", i32 1}
!43 = !{!44, !44, i64 0}
!44 = !{!"int", !45, i64 0}
!45 = !{!"omnipotent char", !46, i64 0}
!46 = !{!"Simple C/C++ TBAA"}
