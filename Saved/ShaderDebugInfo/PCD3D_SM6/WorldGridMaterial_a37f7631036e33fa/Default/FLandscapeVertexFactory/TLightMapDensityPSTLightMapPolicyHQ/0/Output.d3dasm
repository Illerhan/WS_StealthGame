;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float       
; TEXCOORD                 3     zw        0     NONE   float     zw
; TEXCOORD                 1   xyzw        1     NONE   float       
; TEXCOORD                 2   xyzw        2     NONE   float       
; TEXCOORD                 4   xy          3     NONE   float       
; PRIMITIVE_ID             0   x           4     NONE    uint       
; SV_IsFrontFace           0    y          4    FFACE    uint       
; TEXCOORD                 6   xyzw        5     NONE   float   xyz 
; TEXCOORD                 7   xyz         6     NONE   float       
; SV_Position              0   xyzw        7      POS   float       
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader hash: 186e18691abaf931889ce92447a1ef97
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; TEXCOORD                 3                 linear       
; TEXCOORD                 4                 linear       
; PRIMITIVE_ID             0        nointerpolation       
; TEXCOORD                 6                 linear       
; TEXCOORD                 7                 linear       
; SV_Position              0          noperspective       
; SV_IsFrontFace           0        nointerpolation       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer $Globals
; {
;
;   struct $Globals
;   {
;
;       float4 DepthOfFieldParams;                    ; Offset:    0
;       uint bSceneLightingChannelsValid;             ; Offset:   16
;       float2 LightMapResolutionScale;               ; Offset:   20
;       float3 BuiltLightingAndSelectedFlags;         ; Offset:   32
;       float4 LightMapDensityDisplayOptions;         ; Offset:   48
;   
;   } $Globals;                                       ; Offset:    0 Size:    64
;
; }
;
; cbuffer UniformBufferConstants_LightmapDensityPass
; {
;
;   struct UniformBufferConstants_LightmapDensityPass
;   {
;
;       uint BindlessResource_LightmapDensityPass_SceneTextures_SceneColorTexture;; Offset:    0
;       uint PrePadding_LightmapDensityPass_SceneTextures_4;; Offset:    4
;       uint BindlessResource_LightmapDensityPass_SceneTextures_SceneDepthTexture;; Offset:    8
;       uint PrePadding_LightmapDensityPass_SceneTextures_12;; Offset:   12
;       uint BindlessResource_LightmapDensityPass_SceneTextures_GBufferATexture;; Offset:   16
;       uint PrePadding_LightmapDensityPass_SceneTextures_20;; Offset:   20
;       uint BindlessResource_LightmapDensityPass_SceneTextures_GBufferBTexture;; Offset:   24
;       uint PrePadding_LightmapDensityPass_SceneTextures_28;; Offset:   28
;       uint BindlessResource_LightmapDensityPass_SceneTextures_GBufferCTexture;; Offset:   32
;       uint PrePadding_LightmapDensityPass_SceneTextures_36;; Offset:   36
;       uint BindlessResource_LightmapDensityPass_SceneTextures_GBufferDTexture;; Offset:   40
;       uint PrePadding_LightmapDensityPass_SceneTextures_44;; Offset:   44
;       uint BindlessResource_LightmapDensityPass_SceneTextures_GBufferETexture;; Offset:   48
;       uint PrePadding_LightmapDensityPass_SceneTextures_52;; Offset:   52
;       uint BindlessResource_LightmapDensityPass_SceneTextures_GBufferFTexture;; Offset:   56
;       uint PrePadding_LightmapDensityPass_SceneTextures_60;; Offset:   60
;       uint BindlessResource_LightmapDensityPass_SceneTextures_GBufferVelocityTexture;; Offset:   64
;       uint PrePadding_LightmapDensityPass_SceneTextures_68;; Offset:   68
;       uint BindlessResource_LightmapDensityPass_SceneTextures_ScreenSpaceAOTexture;; Offset:   72
;       uint PrePadding_LightmapDensityPass_SceneTextures_76;; Offset:   76
;       uint BindlessResource_LightmapDensityPass_SceneTextures_CustomDepthTexture;; Offset:   80
;       uint PrePadding_LightmapDensityPass_SceneTextures_84;; Offset:   84
;       uint BindlessResource_LightmapDensityPass_SceneTextures_CustomStencilTexture;; Offset:   88
;       uint PrePadding_LightmapDensityPass_SceneTextures_92;; Offset:   92
;       uint BindlessSampler_LightmapDensityPass_SceneTextures_PointClampSampler;; Offset:   96
;       float PrePadding_LightmapDensityPass_100;     ; Offset:  100
;       float PrePadding_LightmapDensityPass_104;     ; Offset:  104
;       float PrePadding_LightmapDensityPass_108;     ; Offset:  108
;       float4 LightmapDensityPass_LightMapDensity;   ; Offset:  112
;       float4 LightmapDensityPass_DensitySelectedColor;; Offset:  128
;       float4 LightmapDensityPass_VertexMappedColor; ; Offset:  144
;       uint BindlessResource_LightmapDensityPass_GridTexture;; Offset:  160
;       uint PrePadding_LightmapDensityPass_164;      ; Offset:  164
;       uint BindlessSampler_LightmapDensityPass_GridTextureSampler;; Offset:  168
;   
;   } UniformBufferConstants_LightmapDensityPass;     ; Offset:    0 Size:   172
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; $Globals                          cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_LightmapDensityPass   cbuffer      NA          NA     CB1            cb1     1
; LightmapDensityPass_GridTextureSampler   sampler      NA          NA      S0             s0     1
; LightmapDensityPass_GridTexture   texture     f32          2d      T0             t0     1
;
;
; ViewId state:
;
; Number of inputs: 32, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 2, 3, 20, 21, 22 }
;   output 1 depends on inputs: { 2, 3, 20, 21, 22 }
;   output 2 depends on inputs: { 2, 3, 20, 21, 22 }
;   output 3 depends on inputs: { 2, 3 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"$Globals" = type { <4 x float>, i32, <2 x float>, <3 x float>, <4 x float> }
%UniformBufferConstants_LightmapDensityPass = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @MainPixelShader() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 13, i32 172 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %6 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 13, i32 64 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 6, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %13 = extractvalue %dx.types.CBufRet.f32 %12, 1
  %14 = extractvalue %dx.types.CBufRet.f32 %12, 2
  %15 = extractvalue %dx.types.CBufRet.f32 %12, 3
  %16 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %17 = extractvalue %dx.types.CBufRet.f32 %16, 0
  %18 = extractvalue %dx.types.CBufRet.f32 %16, 1
  %19 = extractvalue %dx.types.CBufRet.f32 %16, 2
  %20 = extractvalue %dx.types.CBufRet.f32 %16, 3
  %21 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %22 = extractvalue %dx.types.CBufRet.f32 %21, 0
  %23 = extractvalue %dx.types.CBufRet.f32 %21, 1
  %24 = extractvalue %dx.types.CBufRet.f32 %21, 2
  %25 = extractvalue %dx.types.CBufRet.f32 %21, 3
  %26 = fmul fast float %11, 5.000000e-01
  %27 = call float @dx.op.unary.f32(i32 84, float %7)  ; DerivCoarseY(value)
  %28 = call float @dx.op.unary.f32(i32 84, float %8)  ; DerivCoarseY(value)
  %29 = call float @dx.op.unary.f32(i32 84, float %9)  ; DerivCoarseY(value)
  %30 = call float @dx.op.unary.f32(i32 83, float %7)  ; DerivCoarseX(value)
  %31 = call float @dx.op.unary.f32(i32 83, float %8)  ; DerivCoarseX(value)
  %32 = call float @dx.op.unary.f32(i32 83, float %9)  ; DerivCoarseX(value)
  %33 = fmul fast float %31, %29
  %34 = fmul fast float %32, %28
  %35 = fsub fast float %33, %34
  %36 = fmul fast float %32, %27
  %37 = fmul fast float %30, %29
  %38 = fsub fast float %36, %37
  %39 = fmul fast float %30, %28
  %40 = fmul fast float %31, %27
  %41 = fsub fast float %39, %40
  %42 = fmul fast float %35, %35
  %43 = fmul fast float %38, %38
  %44 = fmul fast float %41, %41
  %45 = fadd fast float %43, %44
  %46 = fadd fast float %45, %42
  %47 = call float @dx.op.unary.f32(i32 24, float %46)  ; Sqrt(value)
  %48 = call float @dx.op.binary.f32(i32 35, float %47, float 0x3E45798EE0000000)  ; FMax(a,b)
  %49 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %50 = extractvalue %dx.types.CBufRet.f32 %49, 1
  %51 = extractvalue %dx.types.CBufRet.f32 %49, 2
  %52 = fmul fast float %10, 2.000000e+00
  %53 = fmul fast float %52, %50
  %54 = fmul fast float %11, %51
  %55 = call float @dx.op.unary.f32(i32 83, float %53)  ; DerivCoarseX(value)
  %56 = call float @dx.op.unary.f32(i32 83, float %54)  ; DerivCoarseX(value)
  %57 = call float @dx.op.unary.f32(i32 84, float %53)  ; DerivCoarseY(value)
  %58 = call float @dx.op.unary.f32(i32 84, float %54)  ; DerivCoarseY(value)
  %59 = fmul fast float %58, %55
  %60 = fmul fast float %57, %56
  %61 = fsub fast float %59, %60
  %62 = call float @dx.op.unary.f32(i32 6, float %61)  ; FAbs(value)
  %63 = fdiv fast float %62, %48
  %64 = call float @dx.op.binary.f32(i32 36, float %63, float %15)  ; FMin(a,b)
  %65 = fcmp fast ogt float %64, %14
  br i1 %65, label %66, label %72

; <label>:66                                      ; preds = %0
  %67 = fsub fast float %15, %14
  %68 = fsub fast float %64, %14
  %69 = fdiv fast float %68, %67
  %70 = fsub fast float %15, %64
  %71 = fdiv fast float %70, %67
  br label %78

; <label>:72                                      ; preds = %0
  %73 = fsub fast float %14, %13
  %74 = fsub fast float %64, %13
  %75 = fdiv fast float %74, %73
  %76 = fsub fast float %14, %64
  %77 = fdiv fast float %76, %73
  br label %78

; <label>:78                                      ; preds = %72, %66
  %79 = phi float [ %69, %66 ], [ 0.000000e+00, %72 ]
  %80 = phi float [ %71, %66 ], [ %75, %72 ]
  %81 = phi float [ 0.000000e+00, %66 ], [ %77, %72 ]
  %82 = phi float [ %68, %66 ], [ %74, %72 ]
  %83 = fsub fast float %15, %13
  %84 = fdiv fast float %82, %83
  %85 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %86 = extractvalue %dx.types.CBufRet.f32 %85, 1
  %87 = fmul fast float %86, %79
  %88 = fmul fast float %86, %80
  %89 = fmul fast float %86, %81
  %90 = extractvalue %dx.types.CBufRet.f32 %85, 0
  %91 = fmul fast float %90, %84
  %92 = fadd fast float %91, %87
  %93 = fadd fast float %91, %88
  %94 = fadd fast float %91, %89
  %95 = fadd fast float %90, %86
  %96 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %97 = extractvalue %dx.types.CBufRet.f32 %96, 0
  %98 = fmul fast float %92, %97
  %99 = fmul fast float %93, %97
  %100 = fmul fast float %94, %97
  %101 = fmul fast float %95, %97
  %102 = extractvalue %dx.types.CBufRet.f32 %96, 1
  %103 = fadd fast float %98, %102
  %104 = fadd fast float %99, %102
  %105 = fadd fast float %100, %102
  %106 = fadd fast float %101, %102
  %107 = extractvalue %dx.types.CBufRet.f32 %85, 2
  %108 = fmul fast float %103, %107
  %109 = fmul fast float %104, %107
  %110 = fmul fast float %105, %107
  %111 = fmul fast float %106, %107
  %112 = extractvalue %dx.types.CBufRet.f32 %85, 3
  %113 = fmul fast float %112, %22
  %114 = fmul fast float %112, %23
  %115 = fmul fast float %112, %24
  %116 = fmul fast float %112, %25
  %117 = fadd fast float %108, %113
  %118 = fadd fast float %109, %114
  %119 = fadd fast float %110, %115
  %120 = fadd fast float %116, %111
  %121 = extractvalue %dx.types.CBufRet.f32 %96, 2
  %122 = fsub fast float 1.000000e+00, %121
  %123 = fmul fast float %117, %122
  %124 = fmul fast float %118, %122
  %125 = fmul fast float %119, %122
  %126 = fmul fast float %120, %122
  %127 = fmul fast float %121, %17
  %128 = fmul fast float %121, %18
  %129 = fmul fast float %121, %19
  %130 = fmul fast float %121, %20
  %131 = fadd fast float %123, %127
  %132 = fadd fast float %124, %128
  %133 = fadd fast float %125, %129
  %134 = fadd fast float %126, %130
  %135 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %136 = extractvalue %dx.types.CBufRet.f32 %135, 1
  %137 = extractvalue %dx.types.CBufRet.f32 %135, 2
  %138 = fmul fast float %136, %10
  %139 = fmul fast float %137, %26
  %140 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %141 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %142 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %140, %dx.types.Handle %141, float %138, float %139, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %143 = extractvalue %dx.types.ResRet.f32 %142, 0
  %144 = extractvalue %dx.types.ResRet.f32 %142, 1
  %145 = extractvalue %dx.types.ResRet.f32 %142, 2
  %146 = extractvalue %dx.types.ResRet.f32 %142, 3
  %147 = fmul fast float %143, %131
  %148 = fmul fast float %144, %132
  %149 = fmul fast float %145, %133
  %150 = fmul fast float %146, %134
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %147)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %148)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %149)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %150)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!13}
!dx.entryPoints = !{!14}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"ps", i32 6, i32 6}
!4 = !{!5, null, !8, !11}
!5 = !{!6}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{!9, !10}
!9 = !{i32 0, %"$Globals"* undef, !"", i32 0, i32 0, i32 1, i32 64, null}
!10 = !{i32 1, %UniformBufferConstants_LightmapDensityPass* undef, !"", i32 0, i32 1, i32 1, i32 172, null}
!11 = !{!12}
!12 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!13 = !{[34 x i32] [i32 32, i32 4, i32 0, i32 0, i32 15, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, i32 7, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0]}
!14 = !{void ()* @MainPixelShader, !"MainPixelShader", !15, !4, !39}
!15 = !{!16, !36, null}
!16 = !{!17, !19, !21, !23, !26, !28, !29, !32, !34, !35}
!17 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !18, i8 2, i32 1, i8 2, i32 0, i8 0, null}
!18 = !{i32 0}
!19 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !20, i8 2, i32 1, i8 4, i32 1, i8 0, null}
!20 = !{i32 1}
!21 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !22, i8 2, i32 1, i8 4, i32 2, i8 0, null}
!22 = !{i32 2}
!23 = !{i32 3, !"TEXCOORD", i8 9, i8 0, !24, i8 2, i32 1, i8 2, i32 0, i8 2, !25}
!24 = !{i32 3}
!25 = !{i32 3, i32 3}
!26 = !{i32 4, !"TEXCOORD", i8 9, i8 0, !27, i8 2, i32 1, i8 2, i32 3, i8 0, null}
!27 = !{i32 4}
!28 = !{i32 5, !"PRIMITIVE_ID", i8 5, i8 0, !18, i8 1, i32 1, i8 1, i32 4, i8 0, null}
!29 = !{i32 6, !"TEXCOORD", i8 9, i8 0, !30, i8 2, i32 1, i8 4, i32 5, i8 0, !31}
!30 = !{i32 6}
!31 = !{i32 3, i32 7}
!32 = !{i32 7, !"TEXCOORD", i8 9, i8 0, !33, i8 2, i32 1, i8 3, i32 6, i8 0, null}
!33 = !{i32 7}
!34 = !{i32 8, !"SV_Position", i8 9, i8 3, !18, i8 4, i32 1, i8 4, i32 7, i8 0, null}
!35 = !{i32 9, !"SV_IsFrontFace", i8 5, i8 13, !18, i8 1, i32 1, i8 1, i32 4, i8 1, null}
!36 = !{!37}
!37 = !{i32 0, !"SV_Target", i8 9, i8 16, !18, i8 0, i32 1, i8 4, i32 0, i8 0, !38}
!38 = !{i32 3, i32 15}
!39 = !{i32 5, !18}
