;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: c144799fc8c32845b516418561388ea0
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(8,8,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       uint ScreenProbeTracingOctahedronResolution;  ; Offset:   32
;       uint ScreenProbeLightSampleResolutionXY;      ; Offset:   36
;       uint ScreenProbeGatherOctahedronResolution;   ; Offset:   40
;       uint ScreenProbeGatherOctahedronResolutionWithBorder;; Offset:   44
;       uint ScreenProbeDownsampleFactor;             ; Offset:   48
;       uint2 ScreenProbeViewSize;                    ; Offset:   56
;       uint2 ScreenProbeAtlasViewSize;               ; Offset:   64
;       uint2 ScreenProbeAtlasBufferSize;             ; Offset:   72
;       float ScreenProbeGatherMaxMip;                ; Offset:   80
;       float RelativeSpeedDifferenceToConsiderLightingMoving;; Offset:   84
;       float ScreenTraceNoFallbackThicknessScale;    ; Offset:   88
;       float2 SampleRadianceProbeUVMul;              ; Offset:   96
;       float2 SampleRadianceProbeUVAdd;              ; Offset:  104
;       float2 SampleRadianceAtlasUVMul;              ; Offset:  112
;       uint NumUniformScreenProbes;                  ; Offset:  124
;       uint MaxNumAdaptiveProbes;                    ; Offset:  128
;       int FixedJitterIndex;                         ; Offset:  132
;       uint UseShortRangeAO;                         ; Offset:  440
;       float MaxRoughnessToTrace;                    ; Offset:  448
;       float MaxRoughnessToTraceForFoliage;          ; Offset:  452
;       float InvRoughnessFadeLength;                 ; Offset:  456
;       float FullResolutionJitterWidth;              ; Offset:  464
;       float MaxRoughnessToEvaluateRoughSpecular;    ; Offset:  468
;       uint ApplyMaterialAO;                         ; Offset:  472
;       float MaxAOMultibounceAlbedo;                 ; Offset:  476
;       uint LumenReflectionInputIsSSR;               ; Offset:  480
;       uint DefaultDiffuseIntegrationMethod;         ; Offset:  484
;       uint2 ViewportTileDimensions;                 ; Offset:  488
;       uint2 ViewportTileDimensionsWithOverflow;     ; Offset:  496
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   504
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_BlueNoise
; {
;
;   struct UniformBufferConstants_BlueNoise
;   {
;
;       int3 BlueNoise_Dimensions;                    ; Offset:    0
;       int PrePadding_BlueNoise_12;                  ; Offset:   12
;       int3 BlueNoise_ModuloMasks;                   ; Offset:   16
;       int PrePadding_BlueNoise_28;                  ; Offset:   28
;       uint BindlessResource_BlueNoise_ScalarTexture;; Offset:   32
;       uint PrePadding_BlueNoise_36;                 ; Offset:   36
;       uint BindlessResource_BlueNoise_Vec2Texture;  ; Offset:   40
;   
;   } UniformBufferConstants_BlueNoise;               ; Offset:    0 Size:    44
;
; }
;
; Resource bind info for AdaptiveScreenProbeData
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for IntegrateTileData
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_BlueNoise   cbuffer      NA          NA     CB2            cb2     1
; SceneTexturesStruct_PointClampSampler   sampler      NA          NA      S0             s0     1
; SceneTexturesStruct_SceneDepthTexture   texture     f32          2d      T0             t0     1
; SceneTexturesStruct_GBufferATexture   texture     f32          2d      T1             t1     1
; SceneTexturesStruct_GBufferBTexture   texture     f32          2d      T2             t2     1
; SceneTexturesStruct_GBufferCTexture   texture     f32          2d      T3             t3     1
; BlueNoise_ScalarTexture           texture     f32          2d      T4             t4     1
; BlueNoise_Vec2Texture             texture     f32          2d      T5             t5     1
; ScreenProbeSceneDepth             texture     u32          2d      T6             t6     1
; AdaptiveScreenProbeData           texture  struct         r/o      T7             t7     1
; ScreenTileAdaptiveProbeHeader     texture     u32          2d      T8             t8     1
; ScreenTileAdaptiveProbeIndices    texture     u32          2d      T9             t9     1
; ScreenProbeMoving                 texture     f32          2d     T10            t10     1
; ScreenProbeLightSampleDirection   texture     f32          2d     T11            t11     1
; ScreenProbeLightSampleFlags       texture     u32          2d     T12            t12     1
; ScreenProbeLightSampleRadiance    texture     f32          2d     T13            t13     1
; LightSampleTraceHit               texture     u32          2d     T14            t14     1
; ScreenProbeRadianceSHAmbient      texture     f32          2d     T15            t15     1
; ScreenProbeRadianceSHDirectional   texture     f32          2d     T16            t16     1
; IntegrateTileData                 texture  struct         r/o     T17            t17     1
; RWDiffuseIndirect                     UAV     f32          2d      U0             u0     1
; RWRoughSpecularIndirect               UAV     f32          2d      U1             u1     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<unsigned int>" = type { i32, %"class.Texture2D<unsigned int>::mips_type" }
%"class.Texture2D<unsigned int>::mips_type" = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 3> >" = type { <3 x float>, %"class.Texture2D<vector<float, 3> >::mips_type" }
%"class.Texture2D<vector<float, 3> >::mips_type" = type { i32 }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }
%"class.RWTexture2D<vector<float, 3> >" = type { <3 x float> }
%_RootShaderParameters = type { i32, i32, i32, i32, i32, <2 x i32>, <2 x i32>, <2 x i32>, float, float, float, <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, i32, float, float, float, float, float, i32, float, i32, i32, <2 x i32>, <2 x i32> }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_BlueNoise = type { <3 x i32>, i32, <3 x i32>, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @ScreenProbeIntegrateCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 1 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 13, i32 44 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %26 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %27 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 13, i32 504 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %28 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %29 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 0)  ; ThreadIdInGroup(component)
  %30 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 1)  ; ThreadIdInGroup(component)
  %31 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %32 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %31, i32 %28, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %33 = extractvalue %dx.types.ResRet.i32 %32, 0
  %34 = lshr i32 %33, 16
  %35 = shl i32 %33, 3
  %36 = and i32 %35, 524280
  %37 = shl nuw nsw i32 %34, 3
  %38 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 130)  ; CBufferLoadLegacy(handle,regIndex)
  %39 = extractvalue %dx.types.CBufRet.i32 %38, 0
  %40 = extractvalue %dx.types.CBufRet.i32 %38, 1
  %41 = add i32 %39, %29
  %42 = add i32 %41, %36
  %43 = add i32 %40, %30
  %44 = add i32 %43, %37
  %45 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %46 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %45, i32 0, i32 %42, i32 %44, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %47 = extractvalue %dx.types.ResRet.f32 %46, 0
  %48 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %49 = extractvalue %dx.types.CBufRet.f32 %48, 0
  %50 = fmul fast float %49, %47
  %51 = extractvalue %dx.types.CBufRet.f32 %48, 1
  %52 = fadd fast float %50, %51
  %53 = extractvalue %dx.types.CBufRet.f32 %48, 2
  %54 = fmul fast float %53, %47
  %55 = extractvalue %dx.types.CBufRet.f32 %48, 3
  %56 = fsub fast float %54, %55
  %57 = fdiv fast float 1.000000e+00, %56
  %58 = fadd fast float %52, %57
  %59 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %60 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %59, i32 0, i32 %42, i32 %44, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %61 = extractvalue %dx.types.ResRet.f32 %60, 0
  %62 = extractvalue %dx.types.ResRet.f32 %60, 1
  %63 = extractvalue %dx.types.ResRet.f32 %60, 2
  %64 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %65 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %64, i32 0, i32 %42, i32 %44, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %66 = extractvalue %dx.types.ResRet.f32 %65, 0
  %67 = extractvalue %dx.types.ResRet.f32 %65, 1
  %68 = extractvalue %dx.types.ResRet.f32 %65, 2
  %69 = extractvalue %dx.types.ResRet.f32 %65, 3
  %70 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %71 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %70, i32 0, i32 %42, i32 %44, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %72 = extractvalue %dx.types.ResRet.f32 %71, 0
  %73 = extractvalue %dx.types.ResRet.f32 %71, 1
  %74 = extractvalue %dx.types.ResRet.f32 %71, 2
  %75 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 153)  ; CBufferLoadLegacy(handle,regIndex)
  %76 = extractvalue %dx.types.CBufRet.f32 %75, 0
  %77 = fptoui float %76 to i32
  %78 = add i32 %42, %44
  %79 = add i32 %78, %77
  %80 = and i32 %79, 1
  %81 = icmp ne i32 %80, 0
  %82 = fmul fast float %69, 2.550000e+02
  %83 = fadd fast float %82, 5.000000e-01
  %84 = fptoui float %83 to i32
  %85 = and i32 %84, 15
  %86 = fmul fast float %61, 2.000000e+00
  %87 = fmul fast float %62, 2.000000e+00
  %88 = fmul fast float %63, 2.000000e+00
  %89 = fadd fast float %86, -1.000000e+00
  %90 = fadd fast float %87, -1.000000e+00
  %91 = fadd fast float %88, -1.000000e+00
  %92 = call float @dx.op.dot3.f32(i32 55, float %89, float %90, float %91, float %89, float %90, float %91)  ; Dot3(ax,ay,az,bx,by,bz)
  %93 = call float @dx.op.unary.f32(i32 25, float %92)  ; Rsqrt(value)
  %94 = fmul fast float %93, %89
  %95 = fmul fast float %93, %90
  %96 = fmul fast float %93, %91
  %97 = icmp eq i32 %85, 9
  %98 = select i1 %97, float 0.000000e+00, float %66
  %99 = fmul fast float %67, 0x3FB47AE140000000
  %100 = fsub fast float %72, %99
  %101 = fsub fast float %73, %99
  %102 = fsub fast float %74, %99
  %103 = fmul fast float %98, %100
  %104 = fmul fast float %98, %101
  %105 = fmul fast float %98, %102
  %106 = fadd fast float %103, %99
  %107 = fadd fast float %104, %99
  %108 = fadd fast float %105, %99
  %109 = icmp eq i32 %85, 5
  %110 = or i1 %109, %97
  br i1 %110, label %111, label %132

; <label>:111                                     ; preds = %0
  %112 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 247)  ; CBufferLoadLegacy(handle,regIndex)
  %113 = extractvalue %dx.types.CBufRet.f32 %112, 3
  %114 = fcmp fast ogt float %113, 0.000000e+00
  br i1 %114, label %115, label %119

; <label>:115                                     ; preds = %111
  %116 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 228)  ; CBufferLoadLegacy(handle,regIndex)
  %117 = extractvalue %dx.types.CBufRet.f32 %116, 2
  %118 = fcmp fast ogt float %117, 0.000000e+00
  br label %119

; <label>:119                                     ; preds = %115, %111
  %120 = phi i1 [ false, %111 ], [ %118, %115 ]
  %121 = fcmp fast une float %113, 0.000000e+00
  %122 = select i1 %121, float 1.000000e+00, float %72
  %123 = select i1 %121, float 1.000000e+00, float %73
  %124 = select i1 %121, float 1.000000e+00, float %74
  br i1 %120, label %125, label %132

; <label>:125                                     ; preds = %119
  %126 = uitofp i1 %81 to float
  %127 = xor i1 %81, true
  %128 = uitofp i1 %127 to float
  %129 = fmul fast float %128, %106
  %130 = fmul fast float %128, %107
  %131 = fmul fast float %128, %108
  br label %132

; <label>:132                                     ; preds = %125, %119, %0
  %133 = phi float [ %106, %0 ], [ %129, %125 ], [ %106, %119 ]
  %134 = phi float [ %107, %0 ], [ %130, %125 ], [ %107, %119 ]
  %135 = phi float [ %108, %0 ], [ %131, %125 ], [ %108, %119 ]
  %136 = phi float [ %72, %0 ], [ %126, %125 ], [ %122, %119 ]
  %137 = phi float [ %73, %0 ], [ %126, %125 ], [ %123, %119 ]
  %138 = phi float [ %74, %0 ], [ %126, %125 ], [ %124, %119 ]
  %139 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 138)  ; CBufferLoadLegacy(handle,regIndex)
  %140 = extractvalue %dx.types.CBufRet.f32 %139, 3
  %141 = fmul fast float %140, %133
  %142 = fmul fast float %140, %134
  %143 = fmul fast float %140, %135
  %144 = extractvalue %dx.types.CBufRet.f32 %139, 0
  %145 = extractvalue %dx.types.CBufRet.f32 %139, 1
  %146 = extractvalue %dx.types.CBufRet.f32 %139, 2
  %147 = fadd fast float %141, %144
  %148 = fadd fast float %142, %145
  %149 = fadd fast float %143, %146
  %150 = and i32 %84, 11
  %151 = icmp eq i32 %150, 2
  %152 = icmp eq i32 %85, 0
  br i1 %152, label %1718, label %153

; <label>:153                                     ; preds = %132
  %154 = uitofp i32 %42 to float
  %155 = uitofp i32 %44 to float
  %156 = fadd fast float %154, 5.000000e-01
  %157 = fadd fast float %155, 5.000000e-01
  %158 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %159 = extractvalue %dx.types.CBufRet.f32 %158, 2
  %160 = extractvalue %dx.types.CBufRet.f32 %158, 3
  %161 = fmul fast float %159, %156
  %162 = fmul fast float %160, %157
  %163 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %164 = extractvalue %dx.types.CBufRet.f32 %163, 2
  %165 = extractvalue %dx.types.CBufRet.f32 %163, 3
  %166 = fsub fast float %161, %165
  %167 = fsub fast float %162, %164
  %168 = extractvalue %dx.types.CBufRet.f32 %163, 0
  %169 = extractvalue %dx.types.CBufRet.f32 %163, 1
  %170 = fdiv fast float %166, %168
  %171 = fdiv fast float %167, %169
  %172 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %173 = extractvalue %dx.types.CBufRet.f32 %172, 0
  %174 = extractvalue %dx.types.CBufRet.f32 %172, 1
  %175 = extractvalue %dx.types.CBufRet.f32 %172, 2
  %176 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %177 = extractvalue %dx.types.CBufRet.f32 %176, 0
  %178 = extractvalue %dx.types.CBufRet.f32 %176, 1
  %179 = extractvalue %dx.types.CBufRet.f32 %176, 2
  %180 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %181 = extractvalue %dx.types.CBufRet.f32 %180, 0
  %182 = extractvalue %dx.types.CBufRet.f32 %180, 1
  %183 = extractvalue %dx.types.CBufRet.f32 %180, 2
  %184 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %185 = extractvalue %dx.types.CBufRet.f32 %184, 0
  %186 = extractvalue %dx.types.CBufRet.f32 %184, 1
  %187 = extractvalue %dx.types.CBufRet.f32 %184, 2
  %188 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 65)  ; CBufferLoadLegacy(handle,regIndex)
  %189 = extractvalue %dx.types.CBufRet.f32 %188, 0
  %190 = extractvalue %dx.types.CBufRet.f32 %188, 1
  %191 = extractvalue %dx.types.CBufRet.f32 %188, 2
  %192 = fmul fast float %189, 2.097152e+06
  %193 = fmul fast float %190, 2.097152e+06
  %194 = fmul fast float %191, 2.097152e+06
  %195 = fadd fast float %192, %185
  %196 = fadd fast float %193, %186
  %197 = fadd fast float %194, %187
  %198 = fmul fast float %170, %58
  %199 = fmul fast float %171, %58
  %200 = fmul fast float %173, %198
  %201 = call float @dx.op.tertiary.f32(i32 46, float %199, float %177, float %200)  ; FMad(a,b,c)
  %202 = call float @dx.op.tertiary.f32(i32 46, float %58, float %181, float %201)  ; FMad(a,b,c)
  %203 = fadd fast float %195, %202
  %204 = fmul fast float %174, %198
  %205 = call float @dx.op.tertiary.f32(i32 46, float %199, float %178, float %204)  ; FMad(a,b,c)
  %206 = call float @dx.op.tertiary.f32(i32 46, float %58, float %182, float %205)  ; FMad(a,b,c)
  %207 = fadd fast float %196, %206
  %208 = fmul fast float %175, %198
  %209 = call float @dx.op.tertiary.f32(i32 46, float %199, float %179, float %208)  ; FMad(a,b,c)
  %210 = call float @dx.op.tertiary.f32(i32 46, float %58, float %183, float %209)  ; FMad(a,b,c)
  %211 = fadd fast float %197, %210
  %212 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %213 = extractvalue %dx.types.CBufRet.f32 %212, 0
  %214 = fcmp fast ogt float %213, 0.000000e+00
  br i1 %214, label %215, label %309

; <label>:215                                     ; preds = %153
  %216 = fadd fast float %58, -5.000000e+02
  %217 = fmul fast float %216, 0x3F60624DE0000000
  %218 = call float @dx.op.unary.f32(i32 7, float %217)  ; Saturate(value)
  %219 = fmul fast float %218, 5.000000e-01
  %220 = fsub fast float 1.000000e+00, %219
  %221 = fmul fast float %220, %213
  %222 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %223 = extractvalue %dx.types.CBufRet.i32 %222, 1
  %224 = icmp slt i32 %223, 0
  br i1 %224, label %225, label %228

; <label>:225                                     ; preds = %215
  %226 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %227 = extractvalue %dx.types.CBufRet.i32 %226, 1
  br label %228

; <label>:228                                     ; preds = %225, %215
  %229 = phi i32 [ %227, %225 ], [ %223, %215 ]
  %230 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %25, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %231 = extractvalue %dx.types.CBufRet.i32 %230, 0
  %232 = extractvalue %dx.types.CBufRet.i32 %230, 1
  %233 = extractvalue %dx.types.CBufRet.i32 %230, 2
  %234 = and i32 %231, %42
  %235 = and i32 %232, %44
  %236 = and i32 %233, %229
  %237 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %25, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %238 = extractvalue %dx.types.CBufRet.i32 %237, 1
  %239 = mul i32 %236, %238
  %240 = add i32 %239, %235
  %241 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %242 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %241, i32 0, i32 %234, i32 %240, i32 undef, i32 0, i32 0, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %243 = extractvalue %dx.types.ResRet.f32 %242, 0
  %244 = extractvalue %dx.types.ResRet.f32 %242, 1
  %245 = fmul fast float %243, 2.000000e+00
  %246 = fmul fast float %244, 2.000000e+00
  %247 = fadd fast float %245, -1.000000e+00
  %248 = fadd fast float %246, -1.000000e+00
  %249 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %250 = extractvalue %dx.types.CBufRet.i32 %249, 0
  %251 = uitofp i32 %250 to float
  %252 = fmul fast float %251, %221
  %253 = fmul fast float %252, %247
  %254 = fmul fast float %252, %248
  %255 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %256 = extractvalue %dx.types.CBufRet.f32 %255, 0
  %257 = extractvalue %dx.types.CBufRet.f32 %255, 1
  %258 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 129)  ; CBufferLoadLegacy(handle,regIndex)
  %259 = extractvalue %dx.types.CBufRet.f32 %258, 0
  %260 = extractvalue %dx.types.CBufRet.f32 %258, 1
  %261 = fadd fast float %256, -1.000000e+00
  %262 = fadd fast float %261, %259
  %263 = fadd fast float %257, -1.000000e+00
  %264 = fadd fast float %263, %260
  %265 = fadd fast float %253, %154
  %266 = fadd fast float %254, %155
  %267 = call float @dx.op.binary.f32(i32 35, float %265, float %256)  ; FMax(a,b)
  %268 = call float @dx.op.binary.f32(i32 35, float %266, float %257)  ; FMax(a,b)
  %269 = call float @dx.op.binary.f32(i32 36, float %267, float %262)  ; FMin(a,b)
  %270 = call float @dx.op.binary.f32(i32 36, float %268, float %264)  ; FMin(a,b)
  %271 = fmul fast float %159, %269
  %272 = fmul fast float %160, %270
  %273 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %274 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %45, %dx.types.Handle %273, float %271, float %272, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %275 = extractvalue %dx.types.ResRet.f32 %274, 0
  %276 = fmul fast float %49, %275
  %277 = fadd fast float %276, %51
  %278 = fmul fast float %53, %275
  %279 = fsub fast float %278, %55
  %280 = fdiv fast float 1.000000e+00, %279
  %281 = fadd fast float %277, %280
  %282 = call float @dx.op.dot3.f32(i32 55, float %203, float %207, float %211, float %94, float %95, float %96)  ; Dot3(ax,ay,az,bx,by,bz)
  %283 = fsub fast float %271, %165
  %284 = fsub fast float %272, %164
  %285 = fdiv fast float %283, %168
  %286 = fdiv fast float %284, %169
  %287 = fmul fast float %285, %281
  %288 = fmul fast float %286, %281
  %289 = fmul fast float %173, %287
  %290 = call float @dx.op.tertiary.f32(i32 46, float %288, float %177, float %289)  ; FMad(a,b,c)
  %291 = call float @dx.op.tertiary.f32(i32 46, float %281, float %181, float %290)  ; FMad(a,b,c)
  %292 = fadd fast float %195, %291
  %293 = fmul fast float %174, %287
  %294 = call float @dx.op.tertiary.f32(i32 46, float %288, float %178, float %293)  ; FMad(a,b,c)
  %295 = call float @dx.op.tertiary.f32(i32 46, float %281, float %182, float %294)  ; FMad(a,b,c)
  %296 = fadd fast float %196, %295
  %297 = fmul fast float %175, %287
  %298 = call float @dx.op.tertiary.f32(i32 46, float %288, float %179, float %297)  ; FMad(a,b,c)
  %299 = call float @dx.op.tertiary.f32(i32 46, float %281, float %183, float %298)  ; FMad(a,b,c)
  %300 = fadd fast float %197, %299
  %301 = call float @dx.op.dot4.f32(i32 56, float %292, float %296, float %300, float -1.000000e+00, float %94, float %95, float %96, float %282)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %302 = call float @dx.op.unary.f32(i32 6, float %301)  ; FAbs(value)
  %303 = fdiv fast float %302, %58
  %304 = fmul fast float %303, %303
  %305 = fmul fast float %304, -1.000000e+06
  %306 = call float @dx.op.unary.f32(i32 21, float %305)  ; Exp(value)
  %307 = fcmp fast ogt float %306, 0x3F847AE140000000
  br i1 %307, label %308, label %309

; <label>:308                                     ; preds = %228
  br label %309

; <label>:309                                     ; preds = %308, %228, %153
  %310 = phi float [ %253, %308 ], [ 0.000000e+00, %228 ], [ 0.000000e+00, %153 ]
  %311 = phi float [ %254, %308 ], [ 0.000000e+00, %228 ], [ 0.000000e+00, %153 ]
  %312 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 129)  ; CBufferLoadLegacy(handle,regIndex)
  %313 = extractvalue %dx.types.CBufRet.f32 %312, 0
  %314 = extractvalue %dx.types.CBufRet.f32 %312, 1
  %315 = fadd fast float %313, -1.000000e+00
  %316 = fadd fast float %314, -1.000000e+00
  %317 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %318 = extractvalue %dx.types.CBufRet.f32 %317, 0
  %319 = extractvalue %dx.types.CBufRet.f32 %317, 1
  %320 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %321 = extractvalue %dx.types.CBufRet.i32 %320, 1
  %322 = icmp slt i32 %321, 0
  br i1 %322, label %323, label %326

; <label>:323                                     ; preds = %309
  %324 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %325 = extractvalue %dx.types.CBufRet.i32 %324, 0
  br label %326

; <label>:326                                     ; preds = %323, %309
  %327 = phi i32 [ %325, %323 ], [ %321, %309 ]
  %328 = uitofp i32 %327 to float
  %329 = fmul fast float %328, 1.250000e-01
  %330 = call float @dx.op.unary.f32(i32 22, float %329)  ; Frc(value)
  %331 = call i32 @dx.op.unary.i32(i32 30, i32 %327)  ; Bfrev(value)
  %332 = lshr i32 %331, 16
  %333 = uitofp i32 %332 to float
  %334 = fmul fast float %333, 0x3EF0000000000000
  %335 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %336 = extractvalue %dx.types.CBufRet.i32 %335, 0
  %337 = uitofp i32 %336 to float
  %338 = fmul fast float %337, %330
  %339 = fmul fast float %334, %337
  %340 = fptoui float %338 to i32
  %341 = fptoui float %339 to i32
  %342 = uitofp i32 %340 to float
  %343 = uitofp i32 %341 to float
  %344 = fadd fast float %310, %154
  %345 = fsub fast float %344, %318
  %346 = fsub fast float %345, %342
  %347 = fadd fast float %311, %155
  %348 = fsub fast float %347, %319
  %349 = fsub fast float %348, %343
  %350 = call float @dx.op.binary.f32(i32 35, float %346, float 0.000000e+00)  ; FMax(a,b)
  %351 = call float @dx.op.binary.f32(i32 35, float %349, float 0.000000e+00)  ; FMax(a,b)
  %352 = call float @dx.op.binary.f32(i32 36, float %350, float %315)  ; FMin(a,b)
  %353 = call float @dx.op.binary.f32(i32 36, float %351, float %316)  ; FMin(a,b)
  %354 = fptoui float %352 to i32
  %355 = fptoui float %353 to i32
  %356 = extractvalue %dx.types.CBufRet.i32 %335, 2
  %357 = extractvalue %dx.types.CBufRet.i32 %335, 3
  %358 = add i32 %356, -2
  %359 = add i32 %357, -2
  %360 = udiv i32 %354, %336
  %361 = udiv i32 %355, %336
  %362 = call i32 @dx.op.binary.i32(i32 40, i32 %360, i32 %358)  ; UMin(a,b)
  %363 = call i32 @dx.op.binary.i32(i32 40, i32 %361, i32 %359)  ; UMin(a,b)
  %364 = mul i32 %336, %362
  %365 = mul i32 %336, %363
  %366 = add i32 %354, 1
  %367 = sub i32 %366, %364
  %368 = add i32 %355, 1
  %369 = sub i32 %368, %365
  %370 = uitofp i32 %367 to float
  %371 = uitofp i32 %369 to float
  %372 = add i32 %336, 2
  %373 = uitofp i32 %372 to float
  %374 = fdiv fast float %370, %373
  %375 = fdiv fast float %371, %373
  %376 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %377 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %376, i32 0, i32 %362, i32 %363, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %378 = extractvalue %dx.types.ResRet.i32 %377, 0
  %379 = bitcast i32 %378 to float
  %380 = add i32 %362, 1
  %381 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %376, i32 0, i32 %380, i32 %363, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %382 = extractvalue %dx.types.ResRet.i32 %381, 0
  %383 = bitcast i32 %382 to float
  %384 = add i32 %363, 1
  %385 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %376, i32 0, i32 %362, i32 %384, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %386 = extractvalue %dx.types.ResRet.i32 %385, 0
  %387 = bitcast i32 %386 to float
  %388 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %376, i32 0, i32 %380, i32 %384, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %389 = extractvalue %dx.types.ResRet.i32 %388, 0
  %390 = bitcast i32 %389 to float
  %391 = fsub fast float 1.000000e+00, %375
  %392 = fsub fast float 1.000000e+00, %374
  %393 = fmul fast float %391, %392
  %394 = fmul fast float %391, %374
  %395 = fmul fast float %375, %392
  %396 = fmul fast float %375, %374
  %397 = call float @dx.op.dot3.f32(i32 55, float %203, float %207, float %211, float %94, float %95, float %96)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %322, label %398, label %401

; <label>:398                                     ; preds = %326
  %399 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %400 = extractvalue %dx.types.CBufRet.i32 %399, 0
  br label %401

; <label>:401                                     ; preds = %398, %326
  %402 = phi i32 [ %400, %398 ], [ %321, %326 ]
  %403 = uitofp i32 %402 to float
  %404 = fmul fast float %403, 1.250000e-01
  %405 = call float @dx.op.unary.f32(i32 22, float %404)  ; Frc(value)
  %406 = call i32 @dx.op.unary.i32(i32 30, i32 %402)  ; Bfrev(value)
  %407 = lshr i32 %406, 16
  %408 = uitofp i32 %407 to float
  %409 = fmul fast float %408, 0x3EF0000000000000
  %410 = fmul fast float %337, %405
  %411 = fmul fast float %409, %337
  %412 = fptoui float %410 to i32
  %413 = fptoui float %411 to i32
  %414 = add i32 %39, %364
  %415 = add i32 %414, %412
  %416 = add i32 %40, %365
  %417 = add i32 %416, %413
  %418 = uitofp i32 %415 to float
  %419 = uitofp i32 %417 to float
  %420 = fadd fast float %418, 5.000000e-01
  %421 = fadd fast float %419, 5.000000e-01
  %422 = fmul fast float %420, %159
  %423 = fmul fast float %421, %160
  %424 = fsub fast float %422, %165
  %425 = fsub fast float %423, %164
  %426 = fdiv fast float %424, %168
  %427 = fdiv fast float %425, %169
  %428 = fmul fast float %426, %379
  %429 = fmul fast float %427, %379
  %430 = fmul fast float %173, %428
  %431 = call float @dx.op.tertiary.f32(i32 46, float %429, float %177, float %430)  ; FMad(a,b,c)
  %432 = call float @dx.op.tertiary.f32(i32 46, float %379, float %181, float %431)  ; FMad(a,b,c)
  %433 = fadd fast float %195, %432
  %434 = fmul fast float %174, %428
  %435 = call float @dx.op.tertiary.f32(i32 46, float %429, float %178, float %434)  ; FMad(a,b,c)
  %436 = call float @dx.op.tertiary.f32(i32 46, float %379, float %182, float %435)  ; FMad(a,b,c)
  %437 = fadd fast float %196, %436
  %438 = fmul fast float %175, %428
  %439 = call float @dx.op.tertiary.f32(i32 46, float %429, float %179, float %438)  ; FMad(a,b,c)
  %440 = call float @dx.op.tertiary.f32(i32 46, float %379, float %183, float %439)  ; FMad(a,b,c)
  %441 = fadd fast float %197, %440
  %442 = mul i32 %336, %380
  br i1 %322, label %443, label %446

; <label>:443                                     ; preds = %401
  %444 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %445 = extractvalue %dx.types.CBufRet.i32 %444, 0
  br label %446

; <label>:446                                     ; preds = %443, %401
  %447 = phi i32 [ %445, %443 ], [ %321, %401 ]
  %448 = uitofp i32 %447 to float
  %449 = fmul fast float %448, 1.250000e-01
  %450 = call float @dx.op.unary.f32(i32 22, float %449)  ; Frc(value)
  %451 = call i32 @dx.op.unary.i32(i32 30, i32 %447)  ; Bfrev(value)
  %452 = lshr i32 %451, 16
  %453 = uitofp i32 %452 to float
  %454 = fmul fast float %453, 0x3EF0000000000000
  %455 = fmul fast float %337, %450
  %456 = fmul fast float %454, %337
  %457 = fptoui float %455 to i32
  %458 = fptoui float %456 to i32
  %459 = add i32 %39, %442
  %460 = add i32 %459, %457
  %461 = add i32 %416, %458
  %462 = uitofp i32 %460 to float
  %463 = uitofp i32 %461 to float
  %464 = fadd fast float %462, 5.000000e-01
  %465 = fadd fast float %463, 5.000000e-01
  %466 = fmul fast float %464, %159
  %467 = fmul fast float %465, %160
  %468 = fsub fast float %466, %165
  %469 = fsub fast float %467, %164
  %470 = fdiv fast float %468, %168
  %471 = fdiv fast float %469, %169
  %472 = fmul fast float %470, %383
  %473 = fmul fast float %471, %383
  %474 = fmul fast float %173, %472
  %475 = call float @dx.op.tertiary.f32(i32 46, float %473, float %177, float %474)  ; FMad(a,b,c)
  %476 = call float @dx.op.tertiary.f32(i32 46, float %383, float %181, float %475)  ; FMad(a,b,c)
  %477 = fadd fast float %195, %476
  %478 = fmul fast float %174, %472
  %479 = call float @dx.op.tertiary.f32(i32 46, float %473, float %178, float %478)  ; FMad(a,b,c)
  %480 = call float @dx.op.tertiary.f32(i32 46, float %383, float %182, float %479)  ; FMad(a,b,c)
  %481 = fadd fast float %196, %480
  %482 = fmul fast float %175, %472
  %483 = call float @dx.op.tertiary.f32(i32 46, float %473, float %179, float %482)  ; FMad(a,b,c)
  %484 = call float @dx.op.tertiary.f32(i32 46, float %383, float %183, float %483)  ; FMad(a,b,c)
  %485 = fadd fast float %197, %484
  %486 = mul i32 %336, %384
  br i1 %322, label %487, label %490

; <label>:487                                     ; preds = %446
  %488 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %489 = extractvalue %dx.types.CBufRet.i32 %488, 0
  br label %490

; <label>:490                                     ; preds = %487, %446
  %491 = phi i32 [ %489, %487 ], [ %321, %446 ]
  %492 = uitofp i32 %491 to float
  %493 = fmul fast float %492, 1.250000e-01
  %494 = call float @dx.op.unary.f32(i32 22, float %493)  ; Frc(value)
  %495 = call i32 @dx.op.unary.i32(i32 30, i32 %491)  ; Bfrev(value)
  %496 = lshr i32 %495, 16
  %497 = uitofp i32 %496 to float
  %498 = fmul fast float %497, 0x3EF0000000000000
  %499 = fmul fast float %337, %494
  %500 = fmul fast float %498, %337
  %501 = fptoui float %499 to i32
  %502 = fptoui float %500 to i32
  %503 = add i32 %414, %501
  %504 = add i32 %40, %486
  %505 = add i32 %504, %502
  %506 = uitofp i32 %503 to float
  %507 = uitofp i32 %505 to float
  %508 = fadd fast float %506, 5.000000e-01
  %509 = fadd fast float %507, 5.000000e-01
  %510 = fmul fast float %508, %159
  %511 = fmul fast float %509, %160
  %512 = fsub fast float %510, %165
  %513 = fsub fast float %511, %164
  %514 = fdiv fast float %512, %168
  %515 = fdiv fast float %513, %169
  %516 = fmul fast float %514, %387
  %517 = fmul fast float %515, %387
  %518 = fmul fast float %173, %516
  %519 = call float @dx.op.tertiary.f32(i32 46, float %517, float %177, float %518)  ; FMad(a,b,c)
  %520 = call float @dx.op.tertiary.f32(i32 46, float %387, float %181, float %519)  ; FMad(a,b,c)
  %521 = fadd fast float %195, %520
  %522 = fmul fast float %174, %516
  %523 = call float @dx.op.tertiary.f32(i32 46, float %517, float %178, float %522)  ; FMad(a,b,c)
  %524 = call float @dx.op.tertiary.f32(i32 46, float %387, float %182, float %523)  ; FMad(a,b,c)
  %525 = fadd fast float %196, %524
  %526 = fmul fast float %175, %516
  %527 = call float @dx.op.tertiary.f32(i32 46, float %517, float %179, float %526)  ; FMad(a,b,c)
  %528 = call float @dx.op.tertiary.f32(i32 46, float %387, float %183, float %527)  ; FMad(a,b,c)
  %529 = fadd fast float %197, %528
  br i1 %322, label %530, label %533

; <label>:530                                     ; preds = %490
  %531 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %532 = extractvalue %dx.types.CBufRet.i32 %531, 0
  br label %533

; <label>:533                                     ; preds = %530, %490
  %534 = phi i32 [ %532, %530 ], [ %321, %490 ]
  %535 = uitofp i32 %534 to float
  %536 = fmul fast float %535, 1.250000e-01
  %537 = call float @dx.op.unary.f32(i32 22, float %536)  ; Frc(value)
  %538 = call i32 @dx.op.unary.i32(i32 30, i32 %534)  ; Bfrev(value)
  %539 = lshr i32 %538, 16
  %540 = uitofp i32 %539 to float
  %541 = fmul fast float %540, 0x3EF0000000000000
  %542 = fmul fast float %337, %537
  %543 = fmul fast float %541, %337
  %544 = fptoui float %542 to i32
  %545 = fptoui float %543 to i32
  %546 = add i32 %459, %544
  %547 = add i32 %504, %545
  %548 = uitofp i32 %546 to float
  %549 = uitofp i32 %547 to float
  %550 = fadd fast float %548, 5.000000e-01
  %551 = fadd fast float %549, 5.000000e-01
  %552 = fmul fast float %550, %159
  %553 = fmul fast float %551, %160
  %554 = fsub fast float %552, %165
  %555 = fsub fast float %553, %164
  %556 = fdiv fast float %554, %168
  %557 = fdiv fast float %555, %169
  %558 = fmul fast float %556, %390
  %559 = fmul fast float %557, %390
  %560 = fmul fast float %173, %558
  %561 = call float @dx.op.tertiary.f32(i32 46, float %559, float %177, float %560)  ; FMad(a,b,c)
  %562 = call float @dx.op.tertiary.f32(i32 46, float %390, float %181, float %561)  ; FMad(a,b,c)
  %563 = fadd fast float %195, %562
  %564 = fmul fast float %174, %558
  %565 = call float @dx.op.tertiary.f32(i32 46, float %559, float %178, float %564)  ; FMad(a,b,c)
  %566 = call float @dx.op.tertiary.f32(i32 46, float %390, float %182, float %565)  ; FMad(a,b,c)
  %567 = fadd fast float %196, %566
  %568 = fmul fast float %175, %558
  %569 = call float @dx.op.tertiary.f32(i32 46, float %559, float %179, float %568)  ; FMad(a,b,c)
  %570 = call float @dx.op.tertiary.f32(i32 46, float %390, float %183, float %569)  ; FMad(a,b,c)
  %571 = fadd fast float %197, %570
  %572 = call float @dx.op.dot4.f32(i32 56, float %433, float %437, float %441, float -1.000000e+00, float %94, float %95, float %96, float %397)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %573 = call float @dx.op.unary.f32(i32 6, float %572)  ; FAbs(value)
  %574 = call float @dx.op.dot4.f32(i32 56, float %477, float %481, float %485, float -1.000000e+00, float %94, float %95, float %96, float %397)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %575 = call float @dx.op.unary.f32(i32 6, float %574)  ; FAbs(value)
  %576 = call float @dx.op.dot4.f32(i32 56, float %521, float %525, float %529, float -1.000000e+00, float %94, float %95, float %96, float %397)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %577 = call float @dx.op.unary.f32(i32 6, float %576)  ; FAbs(value)
  %578 = call float @dx.op.dot4.f32(i32 56, float %563, float %567, float %571, float -1.000000e+00, float %94, float %95, float %96, float %397)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %579 = call float @dx.op.unary.f32(i32 6, float %578)  ; FAbs(value)
  %580 = fdiv fast float %573, %58
  %581 = fdiv fast float %575, %58
  %582 = fdiv fast float %577, %58
  %583 = fdiv fast float %579, %58
  %584 = fmul fast float %580, %580
  %585 = fmul fast float %584, -1.000000e+04
  %586 = fmul fast float %581, %581
  %587 = fmul fast float %586, -1.000000e+04
  %588 = fmul fast float %582, %582
  %589 = fmul fast float %588, -1.000000e+04
  %590 = fmul fast float %583, %583
  %591 = fmul fast float %590, -1.000000e+04
  %592 = call float @dx.op.unary.f32(i32 21, float %585)  ; Exp(value)
  %593 = call float @dx.op.unary.f32(i32 21, float %587)  ; Exp(value)
  %594 = call float @dx.op.unary.f32(i32 21, float %589)  ; Exp(value)
  %595 = call float @dx.op.unary.f32(i32 21, float %591)  ; Exp(value)
  %596 = fcmp fast ogt float %379, 0.000000e+00
  %597 = fcmp fast ogt float %383, 0.000000e+00
  %598 = fcmp fast ogt float %387, 0.000000e+00
  %599 = fcmp fast ogt float %390, 0.000000e+00
  %600 = select i1 %596, float %592, float 0.000000e+00
  %601 = select i1 %597, float %593, float 0.000000e+00
  %602 = select i1 %598, float %594, float 0.000000e+00
  %603 = select i1 %599, float %595, float 0.000000e+00
  %604 = fmul fast float %393, %600
  %605 = fmul fast float %394, %601
  %606 = fmul fast float %395, %602
  %607 = fmul fast float %396, %603
  %608 = fcmp fast ugt float %604, 0x3F847AE140000000
  br i1 %608, label %777, label %609

; <label>:609                                     ; preds = %533
  %610 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %611 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %610, i32 0, i32 %362, i32 %363, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %612 = extractvalue %dx.types.ResRet.i32 %611, 0
  %613 = icmp eq i32 %612, 0
  br i1 %613, label %777, label %614

; <label>:614                                     ; preds = %609
  br label %615

; <label>:615                                     ; preds = %674, %614
  %616 = phi i32 [ %771, %674 ], [ %362, %614 ]
  %617 = phi i32 [ %772, %674 ], [ %363, %614 ]
  %618 = phi float [ %773, %674 ], [ %604, %614 ]
  %619 = phi i32 [ %774, %674 ], [ 0, %614 ]
  %620 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %621 = extractvalue %dx.types.CBufRet.i32 %620, 0
  %622 = urem i32 %619, %621
  %623 = udiv i32 %619, %621
  %624 = extractvalue %dx.types.CBufRet.i32 %620, 2
  %625 = extractvalue %dx.types.CBufRet.i32 %620, 3
  %626 = mul i32 %624, %622
  %627 = mul i32 %625, %623
  %628 = add i32 %626, %362
  %629 = add i32 %627, %363
  %630 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %631 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %630, i32 0, i32 %628, i32 %629, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %632 = extractvalue %dx.types.ResRet.i32 %631, 0
  %633 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %634 = extractvalue %dx.types.CBufRet.i32 %633, 3
  %635 = add i32 %634, %632
  %636 = urem i32 %635, %624
  %637 = udiv i32 %635, %624
  %638 = mul i32 %621, %636
  %639 = mul i32 %621, %637
  %640 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %641 = extractvalue %dx.types.CBufRet.i32 %640, 1
  %642 = icmp slt i32 %641, 0
  br i1 %642, label %643, label %646

; <label>:643                                     ; preds = %615
  %644 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %645 = extractvalue %dx.types.CBufRet.i32 %644, 0
  br label %646

; <label>:646                                     ; preds = %643, %615
  %647 = phi i32 [ %645, %643 ], [ %641, %615 ]
  %648 = uitofp i32 %647 to float
  %649 = fmul fast float %648, 1.250000e-01
  %650 = call float @dx.op.unary.f32(i32 22, float %649)  ; Frc(value)
  %651 = call i32 @dx.op.unary.i32(i32 30, i32 %647)  ; Bfrev(value)
  %652 = lshr i32 %651, 16
  %653 = uitofp i32 %652 to float
  %654 = fmul fast float %653, 0x3EF0000000000000
  %655 = uitofp i32 %621 to float
  %656 = fmul fast float %655, %650
  %657 = fmul fast float %654, %655
  %658 = fptoui float %656 to i32
  %659 = fptoui float %657 to i32
  %660 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 130)  ; CBufferLoadLegacy(handle,regIndex)
  %661 = extractvalue %dx.types.CBufRet.i32 %660, 0
  %662 = extractvalue %dx.types.CBufRet.i32 %660, 1
  %663 = add i32 %661, %638
  %664 = add i32 %663, %658
  %665 = add i32 %662, %639
  %666 = add i32 %665, %659
  %667 = icmp ult i32 %635, %634
  br i1 %667, label %674, label %668

; <label>:668                                     ; preds = %646
  %669 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %670 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %669, i32 %632, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %671 = extractvalue %dx.types.ResRet.i32 %670, 0
  %672 = and i32 %671, 65535
  %673 = lshr i32 %671, 16
  br label %674

; <label>:674                                     ; preds = %668, %646
  %675 = phi i32 [ %672, %668 ], [ %664, %646 ]
  %676 = phi i32 [ %673, %668 ], [ %666, %646 ]
  %677 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %678 = extractvalue %dx.types.CBufRet.i32 %677, 0
  %679 = urem i32 %635, %678
  %680 = udiv i32 %635, %678
  %681 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %682 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %681, i32 0, i32 %679, i32 %680, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %683 = extractvalue %dx.types.ResRet.i32 %682, 0
  %684 = bitcast i32 %683 to float
  %685 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %686 = extractvalue %dx.types.CBufRet.f32 %685, 0
  %687 = extractvalue %dx.types.CBufRet.f32 %685, 1
  %688 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 129)  ; CBufferLoadLegacy(handle,regIndex)
  %689 = extractvalue %dx.types.CBufRet.f32 %688, 0
  %690 = extractvalue %dx.types.CBufRet.f32 %688, 1
  %691 = fadd fast float %686, -1.000000e+00
  %692 = fadd fast float %691, %689
  %693 = fadd fast float %687, -1.000000e+00
  %694 = fadd fast float %693, %690
  %695 = uitofp i32 %675 to float
  %696 = uitofp i32 %676 to float
  %697 = call float @dx.op.binary.f32(i32 36, float %695, float %692)  ; FMin(a,b)
  %698 = call float @dx.op.binary.f32(i32 36, float %696, float %694)  ; FMin(a,b)
  %699 = fadd fast float %697, 5.000000e-01
  %700 = fadd fast float %698, 5.000000e-01
  %701 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %702 = extractvalue %dx.types.CBufRet.f32 %701, 2
  %703 = extractvalue %dx.types.CBufRet.f32 %701, 3
  %704 = fmul fast float %702, %699
  %705 = fmul fast float %703, %700
  %706 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %707 = extractvalue %dx.types.CBufRet.f32 %706, 2
  %708 = extractvalue %dx.types.CBufRet.f32 %706, 3
  %709 = fsub fast float %704, %708
  %710 = fsub fast float %705, %707
  %711 = extractvalue %dx.types.CBufRet.f32 %706, 0
  %712 = extractvalue %dx.types.CBufRet.f32 %706, 1
  %713 = fdiv fast float %709, %711
  %714 = fdiv fast float %710, %712
  %715 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %716 = extractvalue %dx.types.CBufRet.f32 %715, 0
  %717 = extractvalue %dx.types.CBufRet.f32 %715, 1
  %718 = extractvalue %dx.types.CBufRet.f32 %715, 2
  %719 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %720 = extractvalue %dx.types.CBufRet.f32 %719, 0
  %721 = extractvalue %dx.types.CBufRet.f32 %719, 1
  %722 = extractvalue %dx.types.CBufRet.f32 %719, 2
  %723 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %724 = extractvalue %dx.types.CBufRet.f32 %723, 0
  %725 = extractvalue %dx.types.CBufRet.f32 %723, 1
  %726 = extractvalue %dx.types.CBufRet.f32 %723, 2
  %727 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %728 = extractvalue %dx.types.CBufRet.f32 %727, 0
  %729 = extractvalue %dx.types.CBufRet.f32 %727, 1
  %730 = extractvalue %dx.types.CBufRet.f32 %727, 2
  %731 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 65)  ; CBufferLoadLegacy(handle,regIndex)
  %732 = extractvalue %dx.types.CBufRet.f32 %731, 0
  %733 = extractvalue %dx.types.CBufRet.f32 %731, 1
  %734 = extractvalue %dx.types.CBufRet.f32 %731, 2
  %735 = fmul fast float %732, 2.097152e+06
  %736 = fmul fast float %733, 2.097152e+06
  %737 = fmul fast float %734, 2.097152e+06
  %738 = fadd fast float %735, %728
  %739 = fadd fast float %736, %729
  %740 = fadd fast float %737, %730
  %741 = fmul fast float %713, %684
  %742 = fmul fast float %714, %684
  %743 = fmul fast float %716, %741
  %744 = call float @dx.op.tertiary.f32(i32 46, float %742, float %720, float %743)  ; FMad(a,b,c)
  %745 = call float @dx.op.tertiary.f32(i32 46, float %684, float %724, float %744)  ; FMad(a,b,c)
  %746 = fadd fast float %738, %745
  %747 = fmul fast float %717, %741
  %748 = call float @dx.op.tertiary.f32(i32 46, float %742, float %721, float %747)  ; FMad(a,b,c)
  %749 = call float @dx.op.tertiary.f32(i32 46, float %684, float %725, float %748)  ; FMad(a,b,c)
  %750 = fadd fast float %739, %749
  %751 = fmul fast float %718, %741
  %752 = call float @dx.op.tertiary.f32(i32 46, float %742, float %722, float %751)  ; FMad(a,b,c)
  %753 = call float @dx.op.tertiary.f32(i32 46, float %684, float %726, float %752)  ; FMad(a,b,c)
  %754 = fadd fast float %740, %753
  %755 = call float @dx.op.dot4.f32(i32 56, float %746, float %750, float %754, float -1.000000e+00, float %94, float %95, float %96, float %397)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %756 = call float @dx.op.unary.f32(i32 6, float %755)  ; FAbs(value)
  %757 = fdiv fast float %756, %58
  %758 = fmul fast float %757, %757
  %759 = fmul fast float %758, -1.000000e+04
  %760 = call float @dx.op.unary.f32(i32 21, float %759)  ; Exp(value)
  %761 = fsub fast float %695, %154
  %762 = fsub fast float %696, %155
  %763 = call float @dx.op.unary.f32(i32 6, float %761)  ; FAbs(value)
  %764 = call float @dx.op.unary.f32(i32 6, float %762)  ; FAbs(value)
  %765 = call float @dx.op.binary.f32(i32 36, float %763, float %764)  ; FMin(a,b)
  %766 = fdiv fast float %765, %655
  %767 = call float @dx.op.unary.f32(i32 7, float %766)  ; Saturate(value)
  %768 = fsub fast float 1.000000e+00, %767
  %769 = fmul fast float %768, %760
  %770 = fcmp fast ogt float %769, %618
  %771 = select i1 %770, i32 %679, i32 %616
  %772 = select i1 %770, i32 %680, i32 %617
  %773 = select i1 %770, float %769, float %618
  %774 = add nuw i32 %619, 1
  %775 = icmp eq i32 %774, %612
  br i1 %775, label %776, label %615

; <label>:776                                     ; preds = %674
  br label %777

; <label>:777                                     ; preds = %776, %609, %533
  %778 = phi i32 [ %362, %609 ], [ %362, %533 ], [ %771, %776 ]
  %779 = phi i32 [ %363, %609 ], [ %363, %533 ], [ %772, %776 ]
  %780 = phi float [ %604, %609 ], [ %604, %533 ], [ %773, %776 ]
  %781 = fcmp fast ugt float %605, 0x3F847AE140000000
  br i1 %781, label %950, label %782

; <label>:782                                     ; preds = %777
  %783 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %784 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %783, i32 0, i32 %380, i32 %363, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %785 = extractvalue %dx.types.ResRet.i32 %784, 0
  %786 = icmp eq i32 %785, 0
  br i1 %786, label %950, label %787

; <label>:787                                     ; preds = %782
  br label %788

; <label>:788                                     ; preds = %847, %787
  %789 = phi i32 [ %944, %847 ], [ %380, %787 ]
  %790 = phi i32 [ %945, %847 ], [ %363, %787 ]
  %791 = phi float [ %946, %847 ], [ %605, %787 ]
  %792 = phi i32 [ %947, %847 ], [ 0, %787 ]
  %793 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %794 = extractvalue %dx.types.CBufRet.i32 %793, 0
  %795 = urem i32 %792, %794
  %796 = udiv i32 %792, %794
  %797 = extractvalue %dx.types.CBufRet.i32 %793, 2
  %798 = extractvalue %dx.types.CBufRet.i32 %793, 3
  %799 = mul i32 %797, %795
  %800 = mul i32 %798, %796
  %801 = add i32 %799, %380
  %802 = add i32 %800, %363
  %803 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %804 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %803, i32 0, i32 %801, i32 %802, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %805 = extractvalue %dx.types.ResRet.i32 %804, 0
  %806 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %807 = extractvalue %dx.types.CBufRet.i32 %806, 3
  %808 = add i32 %807, %805
  %809 = urem i32 %808, %797
  %810 = udiv i32 %808, %797
  %811 = mul i32 %794, %809
  %812 = mul i32 %794, %810
  %813 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %814 = extractvalue %dx.types.CBufRet.i32 %813, 1
  %815 = icmp slt i32 %814, 0
  br i1 %815, label %816, label %819

; <label>:816                                     ; preds = %788
  %817 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %818 = extractvalue %dx.types.CBufRet.i32 %817, 0
  br label %819

; <label>:819                                     ; preds = %816, %788
  %820 = phi i32 [ %818, %816 ], [ %814, %788 ]
  %821 = uitofp i32 %820 to float
  %822 = fmul fast float %821, 1.250000e-01
  %823 = call float @dx.op.unary.f32(i32 22, float %822)  ; Frc(value)
  %824 = call i32 @dx.op.unary.i32(i32 30, i32 %820)  ; Bfrev(value)
  %825 = lshr i32 %824, 16
  %826 = uitofp i32 %825 to float
  %827 = fmul fast float %826, 0x3EF0000000000000
  %828 = uitofp i32 %794 to float
  %829 = fmul fast float %828, %823
  %830 = fmul fast float %827, %828
  %831 = fptoui float %829 to i32
  %832 = fptoui float %830 to i32
  %833 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 130)  ; CBufferLoadLegacy(handle,regIndex)
  %834 = extractvalue %dx.types.CBufRet.i32 %833, 0
  %835 = extractvalue %dx.types.CBufRet.i32 %833, 1
  %836 = add i32 %834, %811
  %837 = add i32 %836, %831
  %838 = add i32 %835, %812
  %839 = add i32 %838, %832
  %840 = icmp ult i32 %808, %807
  br i1 %840, label %847, label %841

; <label>:841                                     ; preds = %819
  %842 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %843 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %842, i32 %805, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %844 = extractvalue %dx.types.ResRet.i32 %843, 0
  %845 = and i32 %844, 65535
  %846 = lshr i32 %844, 16
  br label %847

; <label>:847                                     ; preds = %841, %819
  %848 = phi i32 [ %845, %841 ], [ %837, %819 ]
  %849 = phi i32 [ %846, %841 ], [ %839, %819 ]
  %850 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %851 = extractvalue %dx.types.CBufRet.i32 %850, 0
  %852 = urem i32 %808, %851
  %853 = udiv i32 %808, %851
  %854 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %855 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %854, i32 0, i32 %852, i32 %853, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %856 = extractvalue %dx.types.ResRet.i32 %855, 0
  %857 = bitcast i32 %856 to float
  %858 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %859 = extractvalue %dx.types.CBufRet.f32 %858, 0
  %860 = extractvalue %dx.types.CBufRet.f32 %858, 1
  %861 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 129)  ; CBufferLoadLegacy(handle,regIndex)
  %862 = extractvalue %dx.types.CBufRet.f32 %861, 0
  %863 = extractvalue %dx.types.CBufRet.f32 %861, 1
  %864 = fadd fast float %859, -1.000000e+00
  %865 = fadd fast float %864, %862
  %866 = fadd fast float %860, -1.000000e+00
  %867 = fadd fast float %866, %863
  %868 = uitofp i32 %848 to float
  %869 = uitofp i32 %849 to float
  %870 = call float @dx.op.binary.f32(i32 36, float %868, float %865)  ; FMin(a,b)
  %871 = call float @dx.op.binary.f32(i32 36, float %869, float %867)  ; FMin(a,b)
  %872 = fadd fast float %870, 5.000000e-01
  %873 = fadd fast float %871, 5.000000e-01
  %874 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %875 = extractvalue %dx.types.CBufRet.f32 %874, 2
  %876 = extractvalue %dx.types.CBufRet.f32 %874, 3
  %877 = fmul fast float %875, %872
  %878 = fmul fast float %876, %873
  %879 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %880 = extractvalue %dx.types.CBufRet.f32 %879, 2
  %881 = extractvalue %dx.types.CBufRet.f32 %879, 3
  %882 = fsub fast float %877, %881
  %883 = fsub fast float %878, %880
  %884 = extractvalue %dx.types.CBufRet.f32 %879, 0
  %885 = extractvalue %dx.types.CBufRet.f32 %879, 1
  %886 = fdiv fast float %882, %884
  %887 = fdiv fast float %883, %885
  %888 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %889 = extractvalue %dx.types.CBufRet.f32 %888, 0
  %890 = extractvalue %dx.types.CBufRet.f32 %888, 1
  %891 = extractvalue %dx.types.CBufRet.f32 %888, 2
  %892 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %893 = extractvalue %dx.types.CBufRet.f32 %892, 0
  %894 = extractvalue %dx.types.CBufRet.f32 %892, 1
  %895 = extractvalue %dx.types.CBufRet.f32 %892, 2
  %896 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %897 = extractvalue %dx.types.CBufRet.f32 %896, 0
  %898 = extractvalue %dx.types.CBufRet.f32 %896, 1
  %899 = extractvalue %dx.types.CBufRet.f32 %896, 2
  %900 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %901 = extractvalue %dx.types.CBufRet.f32 %900, 0
  %902 = extractvalue %dx.types.CBufRet.f32 %900, 1
  %903 = extractvalue %dx.types.CBufRet.f32 %900, 2
  %904 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 65)  ; CBufferLoadLegacy(handle,regIndex)
  %905 = extractvalue %dx.types.CBufRet.f32 %904, 0
  %906 = extractvalue %dx.types.CBufRet.f32 %904, 1
  %907 = extractvalue %dx.types.CBufRet.f32 %904, 2
  %908 = fmul fast float %905, 2.097152e+06
  %909 = fmul fast float %906, 2.097152e+06
  %910 = fmul fast float %907, 2.097152e+06
  %911 = fadd fast float %908, %901
  %912 = fadd fast float %909, %902
  %913 = fadd fast float %910, %903
  %914 = fmul fast float %886, %857
  %915 = fmul fast float %887, %857
  %916 = fmul fast float %889, %914
  %917 = call float @dx.op.tertiary.f32(i32 46, float %915, float %893, float %916)  ; FMad(a,b,c)
  %918 = call float @dx.op.tertiary.f32(i32 46, float %857, float %897, float %917)  ; FMad(a,b,c)
  %919 = fadd fast float %911, %918
  %920 = fmul fast float %890, %914
  %921 = call float @dx.op.tertiary.f32(i32 46, float %915, float %894, float %920)  ; FMad(a,b,c)
  %922 = call float @dx.op.tertiary.f32(i32 46, float %857, float %898, float %921)  ; FMad(a,b,c)
  %923 = fadd fast float %912, %922
  %924 = fmul fast float %891, %914
  %925 = call float @dx.op.tertiary.f32(i32 46, float %915, float %895, float %924)  ; FMad(a,b,c)
  %926 = call float @dx.op.tertiary.f32(i32 46, float %857, float %899, float %925)  ; FMad(a,b,c)
  %927 = fadd fast float %913, %926
  %928 = call float @dx.op.dot4.f32(i32 56, float %919, float %923, float %927, float -1.000000e+00, float %94, float %95, float %96, float %397)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %929 = call float @dx.op.unary.f32(i32 6, float %928)  ; FAbs(value)
  %930 = fdiv fast float %929, %58
  %931 = fmul fast float %930, %930
  %932 = fmul fast float %931, -1.000000e+04
  %933 = call float @dx.op.unary.f32(i32 21, float %932)  ; Exp(value)
  %934 = fsub fast float %868, %154
  %935 = fsub fast float %869, %155
  %936 = call float @dx.op.unary.f32(i32 6, float %934)  ; FAbs(value)
  %937 = call float @dx.op.unary.f32(i32 6, float %935)  ; FAbs(value)
  %938 = call float @dx.op.binary.f32(i32 36, float %936, float %937)  ; FMin(a,b)
  %939 = fdiv fast float %938, %828
  %940 = call float @dx.op.unary.f32(i32 7, float %939)  ; Saturate(value)
  %941 = fsub fast float 1.000000e+00, %940
  %942 = fmul fast float %941, %933
  %943 = fcmp fast ogt float %942, %791
  %944 = select i1 %943, i32 %852, i32 %789
  %945 = select i1 %943, i32 %853, i32 %790
  %946 = select i1 %943, float %942, float %791
  %947 = add nuw i32 %792, 1
  %948 = icmp eq i32 %947, %785
  br i1 %948, label %949, label %788

; <label>:949                                     ; preds = %847
  br label %950

; <label>:950                                     ; preds = %949, %782, %777
  %951 = phi i32 [ %380, %782 ], [ %380, %777 ], [ %944, %949 ]
  %952 = phi i32 [ %363, %782 ], [ %363, %777 ], [ %945, %949 ]
  %953 = phi float [ %605, %782 ], [ %605, %777 ], [ %946, %949 ]
  %954 = fcmp fast ugt float %606, 0x3F847AE140000000
  br i1 %954, label %1123, label %955

; <label>:955                                     ; preds = %950
  %956 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %957 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %956, i32 0, i32 %362, i32 %384, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %958 = extractvalue %dx.types.ResRet.i32 %957, 0
  %959 = icmp eq i32 %958, 0
  br i1 %959, label %1123, label %960

; <label>:960                                     ; preds = %955
  br label %961

; <label>:961                                     ; preds = %1020, %960
  %962 = phi i32 [ %1117, %1020 ], [ %362, %960 ]
  %963 = phi i32 [ %1118, %1020 ], [ %384, %960 ]
  %964 = phi float [ %1119, %1020 ], [ %606, %960 ]
  %965 = phi i32 [ %1120, %1020 ], [ 0, %960 ]
  %966 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %967 = extractvalue %dx.types.CBufRet.i32 %966, 0
  %968 = urem i32 %965, %967
  %969 = udiv i32 %965, %967
  %970 = extractvalue %dx.types.CBufRet.i32 %966, 2
  %971 = extractvalue %dx.types.CBufRet.i32 %966, 3
  %972 = mul i32 %970, %968
  %973 = mul i32 %971, %969
  %974 = add i32 %972, %362
  %975 = add i32 %973, %384
  %976 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %977 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %976, i32 0, i32 %974, i32 %975, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %978 = extractvalue %dx.types.ResRet.i32 %977, 0
  %979 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %980 = extractvalue %dx.types.CBufRet.i32 %979, 3
  %981 = add i32 %980, %978
  %982 = urem i32 %981, %970
  %983 = udiv i32 %981, %970
  %984 = mul i32 %967, %982
  %985 = mul i32 %967, %983
  %986 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %987 = extractvalue %dx.types.CBufRet.i32 %986, 1
  %988 = icmp slt i32 %987, 0
  br i1 %988, label %989, label %992

; <label>:989                                     ; preds = %961
  %990 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %991 = extractvalue %dx.types.CBufRet.i32 %990, 0
  br label %992

; <label>:992                                     ; preds = %989, %961
  %993 = phi i32 [ %991, %989 ], [ %987, %961 ]
  %994 = uitofp i32 %993 to float
  %995 = fmul fast float %994, 1.250000e-01
  %996 = call float @dx.op.unary.f32(i32 22, float %995)  ; Frc(value)
  %997 = call i32 @dx.op.unary.i32(i32 30, i32 %993)  ; Bfrev(value)
  %998 = lshr i32 %997, 16
  %999 = uitofp i32 %998 to float
  %1000 = fmul fast float %999, 0x3EF0000000000000
  %1001 = uitofp i32 %967 to float
  %1002 = fmul fast float %1001, %996
  %1003 = fmul fast float %1000, %1001
  %1004 = fptoui float %1002 to i32
  %1005 = fptoui float %1003 to i32
  %1006 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 130)  ; CBufferLoadLegacy(handle,regIndex)
  %1007 = extractvalue %dx.types.CBufRet.i32 %1006, 0
  %1008 = extractvalue %dx.types.CBufRet.i32 %1006, 1
  %1009 = add i32 %1007, %984
  %1010 = add i32 %1009, %1004
  %1011 = add i32 %1008, %985
  %1012 = add i32 %1011, %1005
  %1013 = icmp ult i32 %981, %980
  br i1 %1013, label %1020, label %1014

; <label>:1014                                    ; preds = %992
  %1015 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1016 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1015, i32 %978, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1017 = extractvalue %dx.types.ResRet.i32 %1016, 0
  %1018 = and i32 %1017, 65535
  %1019 = lshr i32 %1017, 16
  br label %1020

; <label>:1020                                    ; preds = %1014, %992
  %1021 = phi i32 [ %1018, %1014 ], [ %1010, %992 ]
  %1022 = phi i32 [ %1019, %1014 ], [ %1012, %992 ]
  %1023 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1024 = extractvalue %dx.types.CBufRet.i32 %1023, 0
  %1025 = urem i32 %981, %1024
  %1026 = udiv i32 %981, %1024
  %1027 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %1028 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1027, i32 0, i32 %1025, i32 %1026, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1029 = extractvalue %dx.types.ResRet.i32 %1028, 0
  %1030 = bitcast i32 %1029 to float
  %1031 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %1032 = extractvalue %dx.types.CBufRet.f32 %1031, 0
  %1033 = extractvalue %dx.types.CBufRet.f32 %1031, 1
  %1034 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 129)  ; CBufferLoadLegacy(handle,regIndex)
  %1035 = extractvalue %dx.types.CBufRet.f32 %1034, 0
  %1036 = extractvalue %dx.types.CBufRet.f32 %1034, 1
  %1037 = fadd fast float %1032, -1.000000e+00
  %1038 = fadd fast float %1037, %1035
  %1039 = fadd fast float %1033, -1.000000e+00
  %1040 = fadd fast float %1039, %1036
  %1041 = uitofp i32 %1021 to float
  %1042 = uitofp i32 %1022 to float
  %1043 = call float @dx.op.binary.f32(i32 36, float %1041, float %1038)  ; FMin(a,b)
  %1044 = call float @dx.op.binary.f32(i32 36, float %1042, float %1040)  ; FMin(a,b)
  %1045 = fadd fast float %1043, 5.000000e-01
  %1046 = fadd fast float %1044, 5.000000e-01
  %1047 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %1048 = extractvalue %dx.types.CBufRet.f32 %1047, 2
  %1049 = extractvalue %dx.types.CBufRet.f32 %1047, 3
  %1050 = fmul fast float %1048, %1045
  %1051 = fmul fast float %1049, %1046
  %1052 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %1053 = extractvalue %dx.types.CBufRet.f32 %1052, 2
  %1054 = extractvalue %dx.types.CBufRet.f32 %1052, 3
  %1055 = fsub fast float %1050, %1054
  %1056 = fsub fast float %1051, %1053
  %1057 = extractvalue %dx.types.CBufRet.f32 %1052, 0
  %1058 = extractvalue %dx.types.CBufRet.f32 %1052, 1
  %1059 = fdiv fast float %1055, %1057
  %1060 = fdiv fast float %1056, %1058
  %1061 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %1062 = extractvalue %dx.types.CBufRet.f32 %1061, 0
  %1063 = extractvalue %dx.types.CBufRet.f32 %1061, 1
  %1064 = extractvalue %dx.types.CBufRet.f32 %1061, 2
  %1065 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %1066 = extractvalue %dx.types.CBufRet.f32 %1065, 0
  %1067 = extractvalue %dx.types.CBufRet.f32 %1065, 1
  %1068 = extractvalue %dx.types.CBufRet.f32 %1065, 2
  %1069 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %1070 = extractvalue %dx.types.CBufRet.f32 %1069, 0
  %1071 = extractvalue %dx.types.CBufRet.f32 %1069, 1
  %1072 = extractvalue %dx.types.CBufRet.f32 %1069, 2
  %1073 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %1074 = extractvalue %dx.types.CBufRet.f32 %1073, 0
  %1075 = extractvalue %dx.types.CBufRet.f32 %1073, 1
  %1076 = extractvalue %dx.types.CBufRet.f32 %1073, 2
  %1077 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 65)  ; CBufferLoadLegacy(handle,regIndex)
  %1078 = extractvalue %dx.types.CBufRet.f32 %1077, 0
  %1079 = extractvalue %dx.types.CBufRet.f32 %1077, 1
  %1080 = extractvalue %dx.types.CBufRet.f32 %1077, 2
  %1081 = fmul fast float %1078, 2.097152e+06
  %1082 = fmul fast float %1079, 2.097152e+06
  %1083 = fmul fast float %1080, 2.097152e+06
  %1084 = fadd fast float %1081, %1074
  %1085 = fadd fast float %1082, %1075
  %1086 = fadd fast float %1083, %1076
  %1087 = fmul fast float %1059, %1030
  %1088 = fmul fast float %1060, %1030
  %1089 = fmul fast float %1062, %1087
  %1090 = call float @dx.op.tertiary.f32(i32 46, float %1088, float %1066, float %1089)  ; FMad(a,b,c)
  %1091 = call float @dx.op.tertiary.f32(i32 46, float %1030, float %1070, float %1090)  ; FMad(a,b,c)
  %1092 = fadd fast float %1084, %1091
  %1093 = fmul fast float %1063, %1087
  %1094 = call float @dx.op.tertiary.f32(i32 46, float %1088, float %1067, float %1093)  ; FMad(a,b,c)
  %1095 = call float @dx.op.tertiary.f32(i32 46, float %1030, float %1071, float %1094)  ; FMad(a,b,c)
  %1096 = fadd fast float %1085, %1095
  %1097 = fmul fast float %1064, %1087
  %1098 = call float @dx.op.tertiary.f32(i32 46, float %1088, float %1068, float %1097)  ; FMad(a,b,c)
  %1099 = call float @dx.op.tertiary.f32(i32 46, float %1030, float %1072, float %1098)  ; FMad(a,b,c)
  %1100 = fadd fast float %1086, %1099
  %1101 = call float @dx.op.dot4.f32(i32 56, float %1092, float %1096, float %1100, float -1.000000e+00, float %94, float %95, float %96, float %397)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1102 = call float @dx.op.unary.f32(i32 6, float %1101)  ; FAbs(value)
  %1103 = fdiv fast float %1102, %58
  %1104 = fmul fast float %1103, %1103
  %1105 = fmul fast float %1104, -1.000000e+04
  %1106 = call float @dx.op.unary.f32(i32 21, float %1105)  ; Exp(value)
  %1107 = fsub fast float %1041, %154
  %1108 = fsub fast float %1042, %155
  %1109 = call float @dx.op.unary.f32(i32 6, float %1107)  ; FAbs(value)
  %1110 = call float @dx.op.unary.f32(i32 6, float %1108)  ; FAbs(value)
  %1111 = call float @dx.op.binary.f32(i32 36, float %1109, float %1110)  ; FMin(a,b)
  %1112 = fdiv fast float %1111, %1001
  %1113 = call float @dx.op.unary.f32(i32 7, float %1112)  ; Saturate(value)
  %1114 = fsub fast float 1.000000e+00, %1113
  %1115 = fmul fast float %1114, %1106
  %1116 = fcmp fast ogt float %1115, %964
  %1117 = select i1 %1116, i32 %1025, i32 %962
  %1118 = select i1 %1116, i32 %1026, i32 %963
  %1119 = select i1 %1116, float %1115, float %964
  %1120 = add nuw i32 %965, 1
  %1121 = icmp eq i32 %1120, %958
  br i1 %1121, label %1122, label %961

; <label>:1122                                    ; preds = %1020
  br label %1123

; <label>:1123                                    ; preds = %1122, %955, %950
  %1124 = phi i32 [ %362, %955 ], [ %362, %950 ], [ %1117, %1122 ]
  %1125 = phi i32 [ %384, %955 ], [ %384, %950 ], [ %1118, %1122 ]
  %1126 = phi float [ %606, %955 ], [ %606, %950 ], [ %1119, %1122 ]
  %1127 = fcmp fast ugt float %607, 0x3F847AE140000000
  br i1 %1127, label %1296, label %1128

; <label>:1128                                    ; preds = %1123
  %1129 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %1130 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1129, i32 0, i32 %380, i32 %384, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1131 = extractvalue %dx.types.ResRet.i32 %1130, 0
  %1132 = icmp eq i32 %1131, 0
  br i1 %1132, label %1296, label %1133

; <label>:1133                                    ; preds = %1128
  br label %1134

; <label>:1134                                    ; preds = %1193, %1133
  %1135 = phi i32 [ %1290, %1193 ], [ %380, %1133 ]
  %1136 = phi i32 [ %1291, %1193 ], [ %384, %1133 ]
  %1137 = phi float [ %1292, %1193 ], [ %607, %1133 ]
  %1138 = phi i32 [ %1293, %1193 ], [ 0, %1133 ]
  %1139 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1140 = extractvalue %dx.types.CBufRet.i32 %1139, 0
  %1141 = urem i32 %1138, %1140
  %1142 = udiv i32 %1138, %1140
  %1143 = extractvalue %dx.types.CBufRet.i32 %1139, 2
  %1144 = extractvalue %dx.types.CBufRet.i32 %1139, 3
  %1145 = mul i32 %1143, %1141
  %1146 = mul i32 %1144, %1142
  %1147 = add i32 %1145, %380
  %1148 = add i32 %1146, %384
  %1149 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %1150 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1149, i32 0, i32 %1147, i32 %1148, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1151 = extractvalue %dx.types.ResRet.i32 %1150, 0
  %1152 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1153 = extractvalue %dx.types.CBufRet.i32 %1152, 3
  %1154 = add i32 %1153, %1151
  %1155 = urem i32 %1154, %1143
  %1156 = udiv i32 %1154, %1143
  %1157 = mul i32 %1140, %1155
  %1158 = mul i32 %1140, %1156
  %1159 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1160 = extractvalue %dx.types.CBufRet.i32 %1159, 1
  %1161 = icmp slt i32 %1160, 0
  br i1 %1161, label %1162, label %1165

; <label>:1162                                    ; preds = %1134
  %1163 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %1164 = extractvalue %dx.types.CBufRet.i32 %1163, 0
  br label %1165

; <label>:1165                                    ; preds = %1162, %1134
  %1166 = phi i32 [ %1164, %1162 ], [ %1160, %1134 ]
  %1167 = uitofp i32 %1166 to float
  %1168 = fmul fast float %1167, 1.250000e-01
  %1169 = call float @dx.op.unary.f32(i32 22, float %1168)  ; Frc(value)
  %1170 = call i32 @dx.op.unary.i32(i32 30, i32 %1166)  ; Bfrev(value)
  %1171 = lshr i32 %1170, 16
  %1172 = uitofp i32 %1171 to float
  %1173 = fmul fast float %1172, 0x3EF0000000000000
  %1174 = uitofp i32 %1140 to float
  %1175 = fmul fast float %1174, %1169
  %1176 = fmul fast float %1173, %1174
  %1177 = fptoui float %1175 to i32
  %1178 = fptoui float %1176 to i32
  %1179 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 130)  ; CBufferLoadLegacy(handle,regIndex)
  %1180 = extractvalue %dx.types.CBufRet.i32 %1179, 0
  %1181 = extractvalue %dx.types.CBufRet.i32 %1179, 1
  %1182 = add i32 %1180, %1157
  %1183 = add i32 %1182, %1177
  %1184 = add i32 %1181, %1158
  %1185 = add i32 %1184, %1178
  %1186 = icmp ult i32 %1154, %1153
  br i1 %1186, label %1193, label %1187

; <label>:1187                                    ; preds = %1165
  %1188 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1189 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1188, i32 %1151, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1190 = extractvalue %dx.types.ResRet.i32 %1189, 0
  %1191 = and i32 %1190, 65535
  %1192 = lshr i32 %1190, 16
  br label %1193

; <label>:1193                                    ; preds = %1187, %1165
  %1194 = phi i32 [ %1191, %1187 ], [ %1183, %1165 ]
  %1195 = phi i32 [ %1192, %1187 ], [ %1185, %1165 ]
  %1196 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1197 = extractvalue %dx.types.CBufRet.i32 %1196, 0
  %1198 = urem i32 %1154, %1197
  %1199 = udiv i32 %1154, %1197
  %1200 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %1201 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1200, i32 0, i32 %1198, i32 %1199, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1202 = extractvalue %dx.types.ResRet.i32 %1201, 0
  %1203 = bitcast i32 %1202 to float
  %1204 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %1205 = extractvalue %dx.types.CBufRet.f32 %1204, 0
  %1206 = extractvalue %dx.types.CBufRet.f32 %1204, 1
  %1207 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 129)  ; CBufferLoadLegacy(handle,regIndex)
  %1208 = extractvalue %dx.types.CBufRet.f32 %1207, 0
  %1209 = extractvalue %dx.types.CBufRet.f32 %1207, 1
  %1210 = fadd fast float %1205, -1.000000e+00
  %1211 = fadd fast float %1210, %1208
  %1212 = fadd fast float %1206, -1.000000e+00
  %1213 = fadd fast float %1212, %1209
  %1214 = uitofp i32 %1194 to float
  %1215 = uitofp i32 %1195 to float
  %1216 = call float @dx.op.binary.f32(i32 36, float %1214, float %1211)  ; FMin(a,b)
  %1217 = call float @dx.op.binary.f32(i32 36, float %1215, float %1213)  ; FMin(a,b)
  %1218 = fadd fast float %1216, 5.000000e-01
  %1219 = fadd fast float %1217, 5.000000e-01
  %1220 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %1221 = extractvalue %dx.types.CBufRet.f32 %1220, 2
  %1222 = extractvalue %dx.types.CBufRet.f32 %1220, 3
  %1223 = fmul fast float %1221, %1218
  %1224 = fmul fast float %1222, %1219
  %1225 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %1226 = extractvalue %dx.types.CBufRet.f32 %1225, 2
  %1227 = extractvalue %dx.types.CBufRet.f32 %1225, 3
  %1228 = fsub fast float %1223, %1227
  %1229 = fsub fast float %1224, %1226
  %1230 = extractvalue %dx.types.CBufRet.f32 %1225, 0
  %1231 = extractvalue %dx.types.CBufRet.f32 %1225, 1
  %1232 = fdiv fast float %1228, %1230
  %1233 = fdiv fast float %1229, %1231
  %1234 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %1235 = extractvalue %dx.types.CBufRet.f32 %1234, 0
  %1236 = extractvalue %dx.types.CBufRet.f32 %1234, 1
  %1237 = extractvalue %dx.types.CBufRet.f32 %1234, 2
  %1238 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %1239 = extractvalue %dx.types.CBufRet.f32 %1238, 0
  %1240 = extractvalue %dx.types.CBufRet.f32 %1238, 1
  %1241 = extractvalue %dx.types.CBufRet.f32 %1238, 2
  %1242 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %1243 = extractvalue %dx.types.CBufRet.f32 %1242, 0
  %1244 = extractvalue %dx.types.CBufRet.f32 %1242, 1
  %1245 = extractvalue %dx.types.CBufRet.f32 %1242, 2
  %1246 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %1247 = extractvalue %dx.types.CBufRet.f32 %1246, 0
  %1248 = extractvalue %dx.types.CBufRet.f32 %1246, 1
  %1249 = extractvalue %dx.types.CBufRet.f32 %1246, 2
  %1250 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 65)  ; CBufferLoadLegacy(handle,regIndex)
  %1251 = extractvalue %dx.types.CBufRet.f32 %1250, 0
  %1252 = extractvalue %dx.types.CBufRet.f32 %1250, 1
  %1253 = extractvalue %dx.types.CBufRet.f32 %1250, 2
  %1254 = fmul fast float %1251, 2.097152e+06
  %1255 = fmul fast float %1252, 2.097152e+06
  %1256 = fmul fast float %1253, 2.097152e+06
  %1257 = fadd fast float %1254, %1247
  %1258 = fadd fast float %1255, %1248
  %1259 = fadd fast float %1256, %1249
  %1260 = fmul fast float %1232, %1203
  %1261 = fmul fast float %1233, %1203
  %1262 = fmul fast float %1235, %1260
  %1263 = call float @dx.op.tertiary.f32(i32 46, float %1261, float %1239, float %1262)  ; FMad(a,b,c)
  %1264 = call float @dx.op.tertiary.f32(i32 46, float %1203, float %1243, float %1263)  ; FMad(a,b,c)
  %1265 = fadd fast float %1257, %1264
  %1266 = fmul fast float %1236, %1260
  %1267 = call float @dx.op.tertiary.f32(i32 46, float %1261, float %1240, float %1266)  ; FMad(a,b,c)
  %1268 = call float @dx.op.tertiary.f32(i32 46, float %1203, float %1244, float %1267)  ; FMad(a,b,c)
  %1269 = fadd fast float %1258, %1268
  %1270 = fmul fast float %1237, %1260
  %1271 = call float @dx.op.tertiary.f32(i32 46, float %1261, float %1241, float %1270)  ; FMad(a,b,c)
  %1272 = call float @dx.op.tertiary.f32(i32 46, float %1203, float %1245, float %1271)  ; FMad(a,b,c)
  %1273 = fadd fast float %1259, %1272
  %1274 = call float @dx.op.dot4.f32(i32 56, float %1265, float %1269, float %1273, float -1.000000e+00, float %94, float %95, float %96, float %397)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1275 = call float @dx.op.unary.f32(i32 6, float %1274)  ; FAbs(value)
  %1276 = fdiv fast float %1275, %58
  %1277 = fmul fast float %1276, %1276
  %1278 = fmul fast float %1277, -1.000000e+04
  %1279 = call float @dx.op.unary.f32(i32 21, float %1278)  ; Exp(value)
  %1280 = fsub fast float %1214, %154
  %1281 = fsub fast float %1215, %155
  %1282 = call float @dx.op.unary.f32(i32 6, float %1280)  ; FAbs(value)
  %1283 = call float @dx.op.unary.f32(i32 6, float %1281)  ; FAbs(value)
  %1284 = call float @dx.op.binary.f32(i32 36, float %1282, float %1283)  ; FMin(a,b)
  %1285 = fdiv fast float %1284, %1174
  %1286 = call float @dx.op.unary.f32(i32 7, float %1285)  ; Saturate(value)
  %1287 = fsub fast float 1.000000e+00, %1286
  %1288 = fmul fast float %1287, %1279
  %1289 = fcmp fast ogt float %1288, %1137
  %1290 = select i1 %1289, i32 %1198, i32 %1135
  %1291 = select i1 %1289, i32 %1199, i32 %1136
  %1292 = select i1 %1289, float %1288, float %1137
  %1293 = add nuw i32 %1138, 1
  %1294 = icmp eq i32 %1293, %1131
  br i1 %1294, label %1295, label %1134

; <label>:1295                                    ; preds = %1193
  br label %1296

; <label>:1296                                    ; preds = %1295, %1128, %1123
  %1297 = phi i32 [ %380, %1128 ], [ %380, %1123 ], [ %1290, %1295 ]
  %1298 = phi i32 [ %384, %1128 ], [ %384, %1123 ], [ %1291, %1295 ]
  %1299 = phi float [ %607, %1128 ], [ %607, %1123 ], [ %1292, %1295 ]
  %1300 = call float @dx.op.dot4.f32(i32 56, float %780, float %953, float %1126, float %1299, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1301 = call float @dx.op.binary.f32(i32 35, float %1300, float 0x3F847AE140000000)  ; FMax(a,b)
  %1302 = fdiv fast float %780, %1301
  %1303 = fdiv fast float %953, %1301
  %1304 = fdiv fast float %1126, %1301
  %1305 = fdiv fast float %1299, %1301
  %1306 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1307 = extractvalue %dx.types.CBufRet.i32 %1306, 1
  %1308 = icmp slt i32 %1307, 0
  br i1 %1308, label %1309, label %1312

; <label>:1309                                    ; preds = %1296
  %1310 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %1311 = extractvalue %dx.types.CBufRet.i32 %1310, 1
  br label %1312

; <label>:1312                                    ; preds = %1309, %1296
  %1313 = phi i32 [ %1311, %1309 ], [ %1307, %1296 ]
  %1314 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %25, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1315 = extractvalue %dx.types.CBufRet.i32 %1314, 0
  %1316 = extractvalue %dx.types.CBufRet.i32 %1314, 1
  %1317 = extractvalue %dx.types.CBufRet.i32 %1314, 2
  %1318 = and i32 %1315, %42
  %1319 = and i32 %1316, %44
  %1320 = and i32 %1317, %1313
  %1321 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %25, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1322 = extractvalue %dx.types.CBufRet.i32 %1321, 1
  %1323 = mul i32 %1320, %1322
  %1324 = add i32 %1323, %1319
  %1325 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1326 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1325, i32 0, i32 %1318, i32 %1324, i32 undef, i32 0, i32 0, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1327 = extractvalue %dx.types.ResRet.f32 %1326, 0
  %1328 = call float @dx.op.binary.f32(i32 36, float %1327, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1329 = call float @dx.op.dot4.f32(i32 56, float %1302, float %1303, float %1304, float %1305, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1330 = fmul fast float %1329, %1328
  %1331 = fadd fast float %953, %780
  %1332 = fadd fast float %1331, %1126
  %1333 = fdiv fast float %1332, %1301
  %1334 = fcmp fast ult float %1330, %1333
  br i1 %1334, label %1335, label %1341

; <label>:1335                                    ; preds = %1312
  %1336 = fdiv fast float %1331, %1301
  %1337 = fcmp fast ult float %1330, %1336
  br i1 %1337, label %1338, label %1341

; <label>:1338                                    ; preds = %1335
  %1339 = fcmp fast ult float %1330, %1302
  br i1 %1339, label %1340, label %1341

; <label>:1340                                    ; preds = %1338
  br label %1341

; <label>:1341                                    ; preds = %1340, %1338, %1335, %1312
  %1342 = phi i32 [ %778, %1340 ], [ %1297, %1312 ], [ %1124, %1335 ], [ %951, %1338 ]
  %1343 = phi i32 [ %779, %1340 ], [ %1298, %1312 ], [ %1125, %1335 ], [ %952, %1338 ]
  %1344 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %1345 = extractvalue %dx.types.CBufRet.i32 %1344, 1
  %1346 = icmp eq i32 %1345, 0
  %1347 = icmp ne i32 %85, 7
  %1348 = and i1 %1347, %1346
  br i1 %1348, label %1349, label %1475

; <label>:1349                                    ; preds = %1341
  %1350 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %1351 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1350, i32 0, i32 %1342, i32 %1343, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1352 = extractvalue %dx.types.ResRet.f32 %1351, 0
  %1353 = extractvalue %dx.types.ResRet.f32 %1351, 1
  %1354 = extractvalue %dx.types.ResRet.f32 %1351, 2
  %1355 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1356 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1355, i32 0, i32 %1342, i32 %1343, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1357 = extractvalue %dx.types.ResRet.f32 %1356, 0
  %1358 = extractvalue %dx.types.ResRet.f32 %1356, 1
  %1359 = extractvalue %dx.types.ResRet.f32 %1356, 2
  %1360 = extractvalue %dx.types.ResRet.f32 %1356, 3
  %1361 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1362 = extractvalue %dx.types.CBufRet.i32 %1361, 0
  %1363 = add i32 %1362, %1342
  %1364 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1355, i32 0, i32 %1363, i32 %1343, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1365 = extractvalue %dx.types.ResRet.f32 %1364, 0
  %1366 = extractvalue %dx.types.ResRet.f32 %1364, 1
  %1367 = extractvalue %dx.types.ResRet.f32 %1364, 2
  %1368 = extractvalue %dx.types.ResRet.f32 %1364, 3
  %1369 = shl i32 %1362, 1
  %1370 = add i32 %1369, %1342
  %1371 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1355, i32 0, i32 %1370, i32 %1343, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1372 = extractvalue %dx.types.ResRet.f32 %1371, 0
  %1373 = extractvalue %dx.types.ResRet.f32 %1371, 1
  %1374 = extractvalue %dx.types.ResRet.f32 %1371, 2
  %1375 = extractvalue %dx.types.ResRet.f32 %1371, 3
  %1376 = mul i32 %1362, 3
  %1377 = add i32 %1376, %1342
  %1378 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1355, i32 0, i32 %1377, i32 %1343, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1379 = extractvalue %dx.types.ResRet.f32 %1378, 0
  %1380 = extractvalue %dx.types.ResRet.f32 %1378, 1
  %1381 = extractvalue %dx.types.ResRet.f32 %1378, 2
  %1382 = extractvalue %dx.types.ResRet.f32 %1378, 3
  %1383 = shl i32 %1362, 2
  %1384 = add i32 %1383, %1342
  %1385 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1355, i32 0, i32 %1384, i32 %1343, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1386 = extractvalue %dx.types.ResRet.f32 %1385, 0
  %1387 = extractvalue %dx.types.ResRet.f32 %1385, 1
  %1388 = extractvalue %dx.types.ResRet.f32 %1385, 2
  %1389 = extractvalue %dx.types.ResRet.f32 %1385, 3
  %1390 = mul i32 %1362, 5
  %1391 = add i32 %1390, %1342
  %1392 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1355, i32 0, i32 %1391, i32 %1343, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1393 = extractvalue %dx.types.ResRet.f32 %1392, 0
  %1394 = extractvalue %dx.types.ResRet.f32 %1392, 1
  %1395 = extractvalue %dx.types.ResRet.f32 %1392, 2
  %1396 = extractvalue %dx.types.ResRet.f32 %1392, 3
  %1397 = fmul fast float %1352, 0x3FEC5BF8A0000000
  %1398 = fmul fast float %1353, 0x3FEC5BF8A0000000
  %1399 = fmul fast float %1354, 0x3FEC5BF8A0000000
  %1400 = fmul fast float %1357, %95
  %1401 = fmul fast float %1372, %95
  %1402 = fmul fast float %1386, %95
  %1403 = fmul fast float %1358, %96
  %1404 = fmul fast float %1373, %96
  %1405 = fmul fast float %1387, %96
  %1406 = fsub fast float %1403, %1400
  %1407 = fsub fast float %1404, %1401
  %1408 = fsub fast float %1405, %1402
  %1409 = fmul fast float %1359, %94
  %1410 = fmul fast float %1374, %94
  %1411 = fmul fast float %1388, %94
  %1412 = fsub fast float %1406, %1409
  %1413 = fsub fast float %1407, %1410
  %1414 = fsub fast float %1408, %1411
  %1415 = fmul fast float %1412, 0x3FF05F8BE0000000
  %1416 = fmul fast float %1413, 0x3FF05F8BE0000000
  %1417 = fmul fast float %1414, 0x3FF05F8BE0000000
  %1418 = fadd fast float %1415, %1397
  %1419 = fadd fast float %1416, %1398
  %1420 = fadd fast float %1417, %1399
  %1421 = fmul fast float %96, %96
  %1422 = fmul fast float %1421, 3.000000e+00
  %1423 = fadd fast float %1422, -1.000000e+00
  %1424 = fmul fast float %1366, %1423
  %1425 = fmul fast float %1380, %1423
  %1426 = fmul fast float %1394, %1423
  %1427 = fmul fast float %94, %94
  %1428 = fmul fast float %95, %95
  %1429 = fsub fast float %1427, %1428
  %1430 = fmul fast float %1368, %1429
  %1431 = fmul fast float %1382, %1429
  %1432 = fmul fast float %1396, %1429
  %1433 = fmul fast float %95, %94
  %1434 = fmul fast float %1433, %1360
  %1435 = fmul fast float %1433, %1375
  %1436 = fmul fast float %1433, %1389
  %1437 = fmul fast float %96, %95
  %1438 = fmul fast float %1437, %1365
  %1439 = fmul fast float %1437, %1379
  %1440 = fmul fast float %1437, %1393
  %1441 = fsub fast float %1434, %1438
  %1442 = fsub fast float %1435, %1439
  %1443 = fsub fast float %1436, %1440
  %1444 = fmul fast float %94, %96
  %1445 = fmul fast float %1444, %1367
  %1446 = fmul fast float %1444, %1381
  %1447 = fmul fast float %1444, %1395
  %1448 = fsub fast float %1441, %1445
  %1449 = fsub fast float %1442, %1446
  %1450 = fsub fast float %1443, %1447
  %1451 = fmul fast float %1448, 2.000000e+00
  %1452 = fmul fast float %1449, 2.000000e+00
  %1453 = fmul fast float %1450, 2.000000e+00
  %1454 = fadd fast float %1451, %1430
  %1455 = fadd fast float %1452, %1431
  %1456 = fadd fast float %1453, %1432
  %1457 = fmul fast float %1454, 0x3FFBB67AE0000000
  %1458 = fmul fast float %1455, 0x3FFBB67AE0000000
  %1459 = fmul fast float %1456, 0x3FFBB67AE0000000
  %1460 = fadd fast float %1457, %1424
  %1461 = fadd fast float %1458, %1425
  %1462 = fadd fast float %1459, %1426
  %1463 = fmul fast float %1460, 0x3FCFB4E500000000
  %1464 = fmul fast float %1461, 0x3FCFB4E500000000
  %1465 = fmul fast float %1462, 0x3FCFB4E500000000
  %1466 = fadd fast float %1418, %1463
  %1467 = fadd fast float %1419, %1464
  %1468 = fadd fast float %1420, %1465
  %1469 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1466)  ; FMax(a,b)
  %1470 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1467)  ; FMax(a,b)
  %1471 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1468)  ; FMax(a,b)
  %1472 = fmul fast float %1469, 0x402921FB60000000
  %1473 = fmul fast float %1470, 0x402921FB60000000
  %1474 = fmul fast float %1471, 0x402921FB60000000
  br label %1475

; <label>:1475                                    ; preds = %1349, %1341
  %1476 = phi float [ %1472, %1349 ], [ 0.000000e+00, %1341 ]
  %1477 = phi float [ %1473, %1349 ], [ 0.000000e+00, %1341 ]
  %1478 = phi float [ %1474, %1349 ], [ 0.000000e+00, %1341 ]
  %1479 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %1480 = extractvalue %dx.types.CBufRet.i32 %1479, 2
  %1481 = icmp eq i32 %1480, 0
  br i1 %1481, label %1499, label %1482

; <label>:1482                                    ; preds = %1475
  %1483 = extractvalue %dx.types.CBufRet.f32 %212, 3
  %1484 = call float @dx.op.binary.f32(i32 36, float %136, float %1483)  ; FMin(a,b)
  %1485 = call float @dx.op.binary.f32(i32 36, float %137, float %1483)  ; FMin(a,b)
  %1486 = call float @dx.op.binary.f32(i32 36, float %138, float %1483)  ; FMin(a,b)
  %1487 = fmul fast float %1484, 0x3F40600000000000
  %1488 = fadd fast float %1487, 0x3FEFFCB940000000
  %1489 = fmul fast float %1485, 0x3F40600000000000
  %1490 = fadd fast float %1489, 0x3FEFFCB940000000
  %1491 = fmul fast float %1486, 0x3F40600000000000
  %1492 = fadd fast float %1491, 0x3FEFFCB940000000
  %1493 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %1488)  ; FMax(a,b)
  %1494 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %1490)  ; FMax(a,b)
  %1495 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %1492)  ; FMax(a,b)
  %1496 = fmul fast float %1493, %1476
  %1497 = fmul fast float %1494, %1477
  %1498 = fmul fast float %1495, %1478
  br label %1499

; <label>:1499                                    ; preds = %1482, %1475
  %1500 = phi float [ %1496, %1482 ], [ %1476, %1475 ]
  %1501 = phi float [ %1497, %1482 ], [ %1477, %1475 ]
  %1502 = phi float [ %1498, %1482 ], [ %1478, %1475 ]
  %1503 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %1504 = extractvalue %dx.types.CBufRet.f32 %1503, 0
  %1505 = extractvalue %dx.types.CBufRet.f32 %1503, 1
  %1506 = extractvalue %dx.types.CBufRet.f32 %1503, 2
  %1507 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %1508 = extractvalue %dx.types.CBufRet.f32 %1507, 0
  %1509 = extractvalue %dx.types.CBufRet.f32 %1507, 1
  %1510 = extractvalue %dx.types.CBufRet.f32 %1507, 2
  %1511 = fmul fast float %1504, 2.097152e+06
  %1512 = fmul fast float %1505, 2.097152e+06
  %1513 = fmul fast float %1506, 2.097152e+06
  %1514 = fsub fast float %203, %1508
  %1515 = fsub fast float %1514, %1511
  %1516 = fsub fast float %207, %1509
  %1517 = fsub fast float %1516, %1512
  %1518 = fsub fast float %211, %1510
  %1519 = fsub fast float %1518, %1513
  %1520 = call float @dx.op.dot3.f32(i32 55, float %1515, float %1517, float %1519, float %1515, float %1517, float %1519)  ; Dot3(ax,ay,az,bx,by,bz)
  %1521 = call float @dx.op.unary.f32(i32 25, float %1520)  ; Rsqrt(value)
  %1522 = fmul fast float %1515, %1521
  %1523 = fmul fast float %1517, %1521
  %1524 = fmul fast float %1519, %1521
  %1525 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1526 = extractvalue %dx.types.CBufRet.i32 %1525, 1
  %1527 = icmp eq i32 %1526, 0
  br i1 %1527, label %1669, label %1528

; <label>:1528                                    ; preds = %1499
  br label %1529

; <label>:1529                                    ; preds = %1657, %1528
  %1530 = phi i32 [ %1664, %1657 ], [ 0, %1528 ]
  %1531 = phi float [ %1658, %1657 ], [ 0.000000e+00, %1528 ]
  %1532 = phi float [ %1659, %1657 ], [ 0.000000e+00, %1528 ]
  %1533 = phi float [ %1660, %1657 ], [ 0.000000e+00, %1528 ]
  %1534 = phi float [ %1661, %1657 ], [ 0.000000e+00, %1528 ]
  %1535 = phi float [ %1662, %1657 ], [ 0.000000e+00, %1528 ]
  %1536 = phi float [ %1663, %1657 ], [ 0.000000e+00, %1528 ]
  %1537 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1538 = extractvalue %dx.types.CBufRet.i32 %1537, 1
  %1539 = icmp eq i32 %1538, 0
  br i1 %1539, label %1657, label %1540

; <label>:1540                                    ; preds = %1529
  br label %1541

; <label>:1541                                    ; preds = %1647, %1540
  %1542 = phi i32 [ %1654, %1647 ], [ 0, %1540 ]
  %1543 = phi float [ %1648, %1647 ], [ %1531, %1540 ]
  %1544 = phi float [ %1649, %1647 ], [ %1532, %1540 ]
  %1545 = phi float [ %1650, %1647 ], [ %1533, %1540 ]
  %1546 = phi float [ %1651, %1647 ], [ %1534, %1540 ]
  %1547 = phi float [ %1652, %1647 ], [ %1535, %1540 ]
  %1548 = phi float [ %1653, %1647 ], [ %1536, %1540 ]
  %1549 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1550 = extractvalue %dx.types.CBufRet.i32 %1549, 1
  %1551 = mul i32 %1550, %1342
  %1552 = mul i32 %1550, %1343
  %1553 = add i32 %1551, %1542
  %1554 = add i32 %1552, %1530
  %1555 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %1556 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1555, i32 0, i32 %1553, i32 %1554, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1557 = extractvalue %dx.types.ResRet.i32 %1556, 0
  %1558 = and i32 %1557, 1073741824
  %1559 = icmp ne i32 %1558, 0
  %1560 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %1561 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1560, i32 0, i32 %1553, i32 %1554, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1562 = extractvalue %dx.types.ResRet.i32 %1561, 0
  %1563 = and i32 %1562, 1
  %1564 = icmp eq i32 %1563, 0
  %1565 = or i1 %1559, %1564
  br i1 %1565, label %1647, label %1566

; <label>:1566                                    ; preds = %1541
  %1567 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1568 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1567, i32 0, i32 %1553, i32 %1554, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1569 = extractvalue %dx.types.ResRet.f32 %1568, 0
  %1570 = extractvalue %dx.types.ResRet.f32 %1568, 1
  %1571 = extractvalue %dx.types.ResRet.f32 %1568, 2
  %1572 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %1573 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1572, i32 0, i32 %1553, i32 %1554, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1574 = extractvalue %dx.types.ResRet.f32 %1573, 0
  %1575 = extractvalue %dx.types.ResRet.f32 %1573, 1
  %1576 = extractvalue %dx.types.ResRet.f32 %1573, 2
  %1577 = call float @dx.op.dot3.f32(i32 55, float %1569, float %1570, float %1571, float %94, float %95, float %96)  ; Dot3(ax,ay,az,bx,by,bz)
  %1578 = call float @dx.op.binary.f32(i32 35, float %1577, float 0.000000e+00)  ; FMax(a,b)
  %1579 = fmul fast float %1578, %1574
  %1580 = fmul fast float %1578, %1575
  %1581 = fmul fast float %1578, %1576
  %1582 = fadd fast float %1579, %1543
  %1583 = fadd fast float %1580, %1544
  %1584 = fadd fast float %1581, %1545
  %1585 = fsub fast float -0.000000e+00, %1522
  %1586 = fsub fast float -0.000000e+00, %1523
  %1587 = fsub fast float -0.000000e+00, %1524
  %1588 = call float @dx.op.dot3.f32(i32 55, float %94, float %95, float %96, float %1585, float %1586, float %1587)  ; Dot3(ax,ay,az,bx,by,bz)
  %1589 = call float @dx.op.unary.f32(i32 7, float %1588)  ; Saturate(value)
  %1590 = call float @dx.op.dot3.f32(i32 55, float %94, float %95, float %96, float %1569, float %1570, float %1571)  ; Dot3(ax,ay,az,bx,by,bz)
  %1591 = call float @dx.op.unary.f32(i32 7, float %1590)  ; Saturate(value)
  %1592 = fsub fast float %1569, %1522
  %1593 = fsub fast float %1570, %1523
  %1594 = fsub fast float %1571, %1524
  %1595 = call float @dx.op.dot3.f32(i32 55, float %1592, float %1593, float %1594, float %1592, float %1593, float %1594)  ; Dot3(ax,ay,az,bx,by,bz)
  %1596 = call float @dx.op.unary.f32(i32 25, float %1595)  ; Rsqrt(value)
  %1597 = fmul fast float %1596, %1592
  %1598 = fmul fast float %1596, %1593
  %1599 = fmul fast float %1596, %1594
  %1600 = call float @dx.op.dot3.f32(i32 55, float %94, float %95, float %96, float %1597, float %1598, float %1599)  ; Dot3(ax,ay,az,bx,by,bz)
  %1601 = call float @dx.op.unary.f32(i32 7, float %1600)  ; Saturate(value)
  %1602 = call float @dx.op.dot3.f32(i32 55, float %1585, float %1586, float %1587, float %1597, float %1598, float %1599)  ; Dot3(ax,ay,az,bx,by,bz)
  %1603 = call float @dx.op.unary.f32(i32 7, float %1602)  ; Saturate(value)
  %1604 = fmul fast float %68, %68
  %1605 = fmul fast float %1604, %1604
  %1606 = fmul fast float %1601, %1605
  %1607 = fsub fast float %1606, %1601
  %1608 = fmul fast float %1607, %1601
  %1609 = fadd fast float %1608, 1.000000e+00
  %1610 = fmul fast float %1609, %1609
  %1611 = fmul fast float %1610, 0x400921FB60000000
  %1612 = fdiv fast float %1605, %1611
  %1613 = call float @dx.op.unary.f32(i32 24, float %1605)  ; Sqrt(value)
  %1614 = fsub fast float 1.000000e+00, %1613
  %1615 = fmul fast float %1614, %1589
  %1616 = fadd fast float %1615, %1613
  %1617 = fmul fast float %1616, %1591
  %1618 = fmul fast float %1614, %1591
  %1619 = fadd fast float %1618, %1613
  %1620 = fmul fast float %1619, %1589
  %1621 = fadd fast float %1617, %1620
  %1622 = fdiv fast float 5.000000e-01, %1621
  %1623 = fsub fast float 1.000000e+00, %1603
  %1624 = fmul fast float %1623, %1623
  %1625 = fmul fast float %1624, %1624
  %1626 = fmul fast float %1625, %1623
  %1627 = fmul fast float %148, 5.000000e+01
  %1628 = call float @dx.op.unary.f32(i32 7, float %1627)  ; Saturate(value)
  %1629 = fmul fast float %1628, %1626
  %1630 = fsub fast float 1.000000e+00, %1626
  %1631 = fmul fast float %1630, %147
  %1632 = fmul fast float %1630, %148
  %1633 = fmul fast float %1630, %149
  %1634 = fadd fast float %1631, %1629
  %1635 = fadd fast float %1632, %1629
  %1636 = fadd fast float %1633, %1629
  %1637 = fmul fast float %1622, %1612
  %1638 = fmul fast float %1637, %1574
  %1639 = fmul fast float %1638, %1634
  %1640 = fmul fast float %1637, %1575
  %1641 = fmul fast float %1640, %1635
  %1642 = fmul fast float %1637, %1576
  %1643 = fmul fast float %1642, %1636
  %1644 = fadd fast float %1639, %1546
  %1645 = fadd fast float %1641, %1547
  %1646 = fadd fast float %1643, %1548
  br label %1647

; <label>:1647                                    ; preds = %1566, %1541
  %1648 = phi float [ %1543, %1541 ], [ %1582, %1566 ]
  %1649 = phi float [ %1544, %1541 ], [ %1583, %1566 ]
  %1650 = phi float [ %1545, %1541 ], [ %1584, %1566 ]
  %1651 = phi float [ %1546, %1541 ], [ %1644, %1566 ]
  %1652 = phi float [ %1547, %1541 ], [ %1645, %1566 ]
  %1653 = phi float [ %1548, %1541 ], [ %1646, %1566 ]
  %1654 = add i32 %1542, 1
  %1655 = icmp ult i32 %1654, %1550
  br i1 %1655, label %1541, label %1656

; <label>:1656                                    ; preds = %1647
  br label %1657

; <label>:1657                                    ; preds = %1656, %1529
  %1658 = phi float [ %1531, %1529 ], [ %1648, %1656 ]
  %1659 = phi float [ %1532, %1529 ], [ %1649, %1656 ]
  %1660 = phi float [ %1533, %1529 ], [ %1650, %1656 ]
  %1661 = phi float [ %1534, %1529 ], [ %1651, %1656 ]
  %1662 = phi float [ %1535, %1529 ], [ %1652, %1656 ]
  %1663 = phi float [ %1536, %1529 ], [ %1653, %1656 ]
  %1664 = add i32 %1530, 1
  %1665 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1666 = extractvalue %dx.types.CBufRet.i32 %1665, 1
  %1667 = icmp ult i32 %1664, %1666
  br i1 %1667, label %1529, label %1668

; <label>:1668                                    ; preds = %1657
  br label %1669

; <label>:1669                                    ; preds = %1668, %1499
  %1670 = phi float [ 0.000000e+00, %1499 ], [ %1658, %1668 ]
  %1671 = phi float [ 0.000000e+00, %1499 ], [ %1659, %1668 ]
  %1672 = phi float [ 0.000000e+00, %1499 ], [ %1660, %1668 ]
  %1673 = phi float [ 0.000000e+00, %1499 ], [ %1661, %1668 ]
  %1674 = phi float [ 0.000000e+00, %1499 ], [ %1662, %1668 ]
  %1675 = phi float [ 0.000000e+00, %1499 ], [ %1663, %1668 ]
  %1676 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %1677 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1676, i32 0, i32 %1342, i32 %1343, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1678 = extractvalue %dx.types.ResRet.f32 %1677, 0
  %1679 = call float @dx.op.binary.f32(i32 35, float %1678, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1680 = fadd fast float %1670, %1500
  %1681 = fadd fast float %1671, %1501
  %1682 = fadd fast float %1672, %1502
  %1683 = fmul fast float %1680, 0x3FD45F3060000000
  %1684 = fmul fast float %1681, 0x3FD45F3060000000
  %1685 = fmul fast float %1682, 0x3FD45F3060000000
  %1686 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1686, i32 %42, i32 %44, i32 undef, float %1683, float %1684, float %1685, float %1679, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %1687 = fmul fast float %1500, 0x3FD45F3060000000
  %1688 = fmul fast float %1501, 0x3FD45F3060000000
  %1689 = fmul fast float %1502, 0x3FD45F3060000000
  %1690 = call float @dx.op.binary.f32(i32 35, float %68, float 0x3F847AE140000000)  ; FMax(a,b)
  %1691 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %1692 = extractvalue %dx.types.CBufRet.f32 %1691, 1
  %1693 = extractvalue %dx.types.CBufRet.f32 %1691, 0
  %1694 = select i1 %151, float %1692, float %1693
  %1695 = fsub fast float %1694, %1690
  %1696 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %1697 = extractvalue %dx.types.CBufRet.f32 %1696, 2
  %1698 = fmul fast float %1697, %1695
  %1699 = call float @dx.op.unary.f32(i32 7, float %1698)  ; Saturate(value)
  %1700 = icmp eq i32 %85, 4
  br i1 %1700, label %1710, label %1701

; <label>:1701                                    ; preds = %1669
  %1702 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %1703 = extractvalue %dx.types.CBufRet.i32 %1702, 0
  %1704 = icmp eq i32 %1703, 0
  br i1 %1704, label %1705, label %1710

; <label>:1705                                    ; preds = %1701
  %1706 = fsub fast float 1.000000e+00, %1699
  %1707 = fmul fast float %1706, %1687
  %1708 = fmul fast float %1706, %1688
  %1709 = fmul fast float %1706, %1689
  br label %1710

; <label>:1710                                    ; preds = %1705, %1701, %1669
  %1711 = phi float [ %1687, %1669 ], [ %1707, %1705 ], [ %1687, %1701 ]
  %1712 = phi float [ %1688, %1669 ], [ %1708, %1705 ], [ %1688, %1701 ]
  %1713 = phi float [ %1689, %1669 ], [ %1709, %1705 ], [ %1689, %1701 ]
  %1714 = fadd fast float %1711, %1673
  %1715 = fadd fast float %1712, %1674
  %1716 = fadd fast float %1713, %1675
  %1717 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 777 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<3xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1717, i32 %42, i32 %44, i32 undef, float %1714, float %1715, float %1716, float %1714, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %1721

; <label>:1718                                    ; preds = %132
  %1719 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1719, i32 %42, i32 %44, i32 undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %1720 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 777 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<3xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1720, i32 %42, i32 %44, i32 undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %1721

; <label>:1721                                    ; preds = %1718, %1710
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadIdInGroup.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.unary.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!36}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !27, !30, !34}
!5 = !{!6, !8, !9, !10, !11, !12, !13, !15, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{i32 2, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !7}
!10 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!11 = !{i32 4, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i32 0, !7}
!12 = !{i32 5, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 2, i32 0, !7}
!13 = !{i32 6, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !14}
!14 = !{i32 0, i32 5}
!15 = !{i32 7, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 7, i32 1, i32 12, i32 0, !16}
!16 = !{i32 1, i32 4}
!17 = !{i32 8, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 8, i32 1, i32 2, i32 0, !14}
!18 = !{i32 9, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 9, i32 1, i32 2, i32 0, !14}
!19 = !{i32 10, %"class.Texture2D<float>"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !7}
!20 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !7}
!21 = !{i32 12, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 12, i32 1, i32 2, i32 0, !14}
!22 = !{i32 13, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !7}
!23 = !{i32 14, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 14, i32 1, i32 2, i32 0, !14}
!24 = !{i32 15, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 15, i32 1, i32 2, i32 0, !7}
!25 = !{i32 16, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 16, i32 1, i32 2, i32 0, !7}
!26 = !{i32 17, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 17, i32 1, i32 12, i32 0, !16}
!27 = !{!28, !29}
!28 = !{i32 0, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!29 = !{i32 1, %"class.RWTexture2D<vector<float, 3> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!30 = !{!31, !32, !33}
!31 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 504, null}
!32 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!33 = !{i32 2, %UniformBufferConstants_BlueNoise* undef, !"", i32 0, i32 2, i32 1, i32 44, null}
!34 = !{!35}
!35 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!36 = !{void ()* @ScreenProbeIntegrateCS, !"ScreenProbeIntegrateCS", null, !4, !37}
!37 = !{i32 0, i64 16, i32 4, !38, i32 5, !39}
!38 = !{i32 8, i32 8, i32 1}
!39 = !{i32 0}
