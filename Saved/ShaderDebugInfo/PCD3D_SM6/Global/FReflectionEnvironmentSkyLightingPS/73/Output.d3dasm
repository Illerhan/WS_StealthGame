;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xy w
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader hash: ea945fdaf1714452c8801c26905575a4
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_ReflectionCaptureSM5
; {
;
;   struct hostlayout.UniformBufferConstants_ReflectionCaptureSM5
;   {
;
;       float4 ReflectionCaptureSM5_PositionAndRadius[341];; Offset:    0
;       float4 ReflectionCaptureSM5_TilePosition[341];; Offset: 5456
;       float4 ReflectionCaptureSM5_CaptureProperties[341];; Offset:10912
;       float4 ReflectionCaptureSM5_CaptureOffsetAndAverageBrightness[341];; Offset:16368
;       row_major float4x4 ReflectionCaptureSM5_BoxTransform[341];; Offset:21824
;       float4 ReflectionCaptureSM5_BoxScales[341];   ; Offset:43648
;   
;   } UniformBufferConstants_ReflectionCaptureSM5;    ; Offset:    0 Size: 49104
;
; }
;
; cbuffer UniformBufferConstants_ReflectionStruct
; {
;
;   struct UniformBufferConstants_ReflectionStruct
;   {
;
;       float4 ReflectionStruct_SkyLightParameters;   ; Offset:    0
;       uint BindlessResource_ReflectionStruct_SkyLightCubemap;; Offset:   16
;       uint PrePadding_ReflectionStruct_20;          ; Offset:   20
;       uint BindlessSampler_ReflectionStruct_SkyLightCubemapSampler;; Offset:   24
;       uint PrePadding_ReflectionStruct_28;          ; Offset:   28
;       uint BindlessResource_ReflectionStruct_SkyLightBlendDestinationCubemap;; Offset:   32
;       uint PrePadding_ReflectionStruct_36;          ; Offset:   36
;       uint BindlessSampler_ReflectionStruct_SkyLightBlendDestinationCubemapSampler;; Offset:   40
;       uint PrePadding_ReflectionStruct_44;          ; Offset:   44
;       uint BindlessResource_ReflectionStruct_ReflectionCubemap;; Offset:   48
;       uint PrePadding_ReflectionStruct_52;          ; Offset:   52
;       uint BindlessSampler_ReflectionStruct_ReflectionCubemapSampler;; Offset:   56
;       uint PrePadding_ReflectionStruct_60;          ; Offset:   60
;       uint BindlessResource_ReflectionStruct_PreIntegratedGF;; Offset:   64
;       uint PrePadding_ReflectionStruct_68;          ; Offset:   68
;       uint BindlessSampler_ReflectionStruct_PreIntegratedGFSampler;; Offset:   72
;   
;   } UniformBufferConstants_ReflectionStruct;        ; Offset:    0 Size:    76
;
; }
;
; cbuffer UniformBufferConstants_ForwardLightData
; {
;
;   struct hostlayout.UniformBufferConstants_ForwardLightData
;   {
;
;       uint ForwardLightData_NumLocalLights;         ; Offset:    0
;       uint ForwardLightData_NumReflectionCaptures;  ; Offset:    4
;       uint ForwardLightData_HasDirectionalLight;    ; Offset:    8
;       uint ForwardLightData_NumGridCells;           ; Offset:   12
;       int3 ForwardLightData_CulledGridSize;         ; Offset:   16
;       uint ForwardLightData_MaxCulledLightsPerCell; ; Offset:   28
;       uint ForwardLightData_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_ForwardLightData_36;          ; Offset:   36
;       uint PrePadding_ForwardLightData_40;          ; Offset:   40
;       uint PrePadding_ForwardLightData_44;          ; Offset:   44
;       float3 ForwardLightData_LightGridZParams;     ; Offset:   48
;       float PrePadding_ForwardLightData_60;         ; Offset:   60
;       float3 ForwardLightData_DirectionalLightDirection;; Offset:   64
;       float ForwardLightData_DirectionalLightSourceRadius;; Offset:   76
;       float3 ForwardLightData_DirectionalLightColor;; Offset:   80
;       float ForwardLightData_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint ForwardLightData_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_ForwardLightData_100;         ; Offset:  100
;       float2 ForwardLightData_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint ForwardLightData_NumDirectionalLightCascades;; Offset:  112
;       int ForwardLightData_DirectionalLightVSM;     ; Offset:  116
;       int PrePadding_ForwardLightData_120;          ; Offset:  120
;       int PrePadding_ForwardLightData_124;          ; Offset:  124
;       float4 ForwardLightData_CascadeEndDepths;     ; Offset:  128
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 ForwardLightData_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float ForwardLightData_DirectionalLightDepthBias;; Offset:  480
;       uint ForwardLightData_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint ForwardLightData_SimpleLightsEndIndex;   ; Offset:  488
;       uint ForwardLightData_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint ForwardLightData_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_ForwardLightData_500;         ; Offset:  500
;       uint PrePadding_ForwardLightData_504;         ; Offset:  504
;       uint PrePadding_ForwardLightData_508;         ; Offset:  508
;       float4 ForwardLightData_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint ForwardLightData_DirectLightingShowFlag; ; Offset:  592
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_604;; Offset:  604
;       float ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_ForwardLightData_644;         ; Offset:  644
;       uint PrePadding_ForwardLightData_648;         ; Offset:  648
;       uint PrePadding_ForwardLightData_652;         ; Offset:  652
;       uint BindlessResource_ForwardLightData_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_ForwardLightData_660;         ; Offset:  660
;       uint BindlessSampler_ForwardLightData_ShadowmapSampler;; Offset:  664
;       uint PrePadding_ForwardLightData_668;         ; Offset:  668
;       uint BindlessResource_ForwardLightData_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_ForwardLightData_676;         ; Offset:  676
;       uint BindlessSampler_ForwardLightData_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_ForwardLightData_684;         ; Offset:  684
;       uint BindlessResource_ForwardLightData_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_ForwardLightData_692;         ; Offset:  692
;       uint BindlessResource_ForwardLightData_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_ForwardLightData_700;         ; Offset:  700
;       uint BindlessResource_ForwardLightData_CulledLightDataGrid;; Offset:  704
;   
;   } UniformBufferConstants_ForwardLightData;        ; Offset:    0 Size:   708
;
; }
;
; Resource bind info for View_SkyIrradianceEnvironmentMap
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; UniformBufferConstants_View       cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_ReflectionCaptureSM5   cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_ReflectionStruct   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_ForwardLightData   cbuffer      NA          NA     CB3            cb3     1
; D3DStaticPointClampedSampler      sampler      NA          NA      S0   s1,space1000     1
; ReflectionStruct_SkyLightCubemapSampler   sampler      NA          NA      S1             s0     1
; ReflectionStruct_SkyLightBlendDestinationCubemapSampler   sampler      NA          NA      S2             s1     1
; ReflectionStruct_ReflectionCubemapSampler   sampler      NA          NA      S3             s2     1
; PreIntegratedGFSampler            sampler      NA          NA      S4             s3     1
; ScreenSpaceReflectionsSampler     sampler      NA          NA      S5             s4     1
; AmbientOcclusionSampler           sampler      NA          NA      S6             s5     1
; View_SkyIrradianceEnvironmentMap   texture  struct         r/o      T0             t0     1
; ReflectionStruct_SkyLightCubemap   texture     f32        cube      T1             t1     1
; ReflectionStruct_SkyLightBlendDestinationCubemap   texture     f32        cube      T2             t2     1
; ReflectionStruct_ReflectionCubemap   texture     f32   cubearray      T3             t3     1
; ForwardLightData_NumCulledLightsGrid   texture     u32         buf      T4             t4     1
; ForwardLightData_CulledLightDataGrid   texture     u32         buf      T5             t5     1
; SceneDepthTexture                 texture     f32          2d      T6             t6     1
; GBufferATexture                   texture     f32          2d      T7             t7     1
; GBufferBTexture                   texture     f32          2d      T8             t8     1
; GBufferCTexture                   texture     f32          2d      T9             t9     1
; GBufferDTexture                   texture     f32          2d     T10            t10     1
; GBufferFTexture                   texture     f32          2d     T11            t11     1
; PreIntegratedGF                   texture     f32          2d     T12            t12     1
; ScreenSpaceReflectionsTexture     texture     f32          2d     T13            t13     1
; AmbientOcclusionTexture           texture     f32          2d     T14            t14     1
;
;
; ViewId state:
;
; Number of inputs: 4, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 3 }
;   output 1 depends on inputs: { 0, 1, 3 }
;   output 2 depends on inputs: { 0, 1, 3 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.TextureCubeArray<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%hostlayout.UniformBufferConstants_ReflectionCaptureSM5 = type { [341 x <4 x float>], [341 x <4 x float>], [341 x <4 x float>], [341 x <4 x float>], [341 x [4 x <4 x float>]], [341 x <4 x float>] }
%UniformBufferConstants_ReflectionStruct = type { <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%hostlayout.UniformBufferConstants_ForwardLightData = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @ReflectionEnvironmentSkyLighting() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 1000, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 13, i32 708 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %28 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 13, i32 76 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %29 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 13, i32 76 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %30 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 13, i32 76 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %31 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 13, i32 76 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %32 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 13, i32 76 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %33 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 13, i32 76 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %34 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 13, i32 76 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %35 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 13, i32 49104 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %36 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 13, i32 49104 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %37 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %38 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %39 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %40 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %41 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %42 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %43 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %44 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %45 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %46 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %47 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %48 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %49 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %50 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %51 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %52 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %53 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %54 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %55 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %56 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %57 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %58 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %59 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %60 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %61 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %62 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %63 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %64 = extractvalue %dx.types.CBufRet.i32 %63, 1
  %65 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %66 = extractvalue %dx.types.CBufRet.i32 %65, 3
  %67 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %68 = extractvalue %dx.types.CBufRet.i32 %67, 0
  %69 = extractvalue %dx.types.CBufRet.i32 %67, 1
  %70 = extractvalue %dx.types.CBufRet.i32 %67, 2
  %71 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %72 = extractvalue %dx.types.CBufRet.i32 %71, 0
  %73 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %74 = extractvalue %dx.types.CBufRet.f32 %73, 0
  %75 = extractvalue %dx.types.CBufRet.f32 %73, 1
  %76 = extractvalue %dx.types.CBufRet.f32 %73, 2
  %77 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %78 = extractvalue %dx.types.CBufRet.f32 %77, 2
  %79 = extractvalue %dx.types.CBufRet.f32 %77, 3
  %80 = fmul fast float %78, %60
  %81 = fmul fast float %79, %61
  %82 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %50, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %83 = extractvalue %dx.types.CBufRet.f32 %82, 0
  %84 = extractvalue %dx.types.CBufRet.f32 %82, 1
  %85 = fsub fast float %60, %83
  %86 = fsub fast float %61, %84
  %87 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %50, i32 129)  ; CBufferLoadLegacy(handle,regIndex)
  %88 = extractvalue %dx.types.CBufRet.f32 %87, 2
  %89 = extractvalue %dx.types.CBufRet.f32 %87, 3
  %90 = fmul fast float %85, %88
  %91 = fmul fast float %86, %89
  %92 = fadd fast float %90, -5.000000e-01
  %93 = fadd fast float %91, -5.000000e-01
  %94 = fmul fast float %62, 2.000000e+00
  %95 = fmul fast float %94, %92
  %96 = fmul fast float %62, -2.000000e+00
  %97 = fmul fast float %96, %93
  %98 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %99 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %100 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %98, %dx.types.Handle %99, float %80, float %81, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %101 = extractvalue %dx.types.ResRet.f32 %100, 0
  %102 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %51, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %103 = extractvalue %dx.types.CBufRet.f32 %102, 0
  %104 = fmul fast float %103, %101
  %105 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %51, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %106 = extractvalue %dx.types.CBufRet.f32 %105, 1
  %107 = fadd fast float %104, %106
  %108 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %51, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %109 = extractvalue %dx.types.CBufRet.f32 %108, 2
  %110 = fmul fast float %109, %101
  %111 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %51, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %112 = extractvalue %dx.types.CBufRet.f32 %111, 3
  %113 = fsub fast float %110, %112
  %114 = fdiv fast float 1.000000e+00, %113
  %115 = fadd fast float %107, %114
  %116 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %117 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %118 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %116, %dx.types.Handle %117, float %80, float %81, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %119 = extractvalue %dx.types.ResRet.f32 %118, 0
  %120 = extractvalue %dx.types.ResRet.f32 %118, 1
  %121 = extractvalue %dx.types.ResRet.f32 %118, 2
  %122 = extractvalue %dx.types.ResRet.f32 %118, 3
  %123 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %124 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %125 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %123, %dx.types.Handle %124, float %80, float %81, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %126 = extractvalue %dx.types.ResRet.f32 %125, 0
  %127 = extractvalue %dx.types.ResRet.f32 %125, 1
  %128 = extractvalue %dx.types.ResRet.f32 %125, 2
  %129 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %130 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %131 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %129, %dx.types.Handle %130, float %80, float %81, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %132 = extractvalue %dx.types.ResRet.f32 %131, 0
  %133 = extractvalue %dx.types.ResRet.f32 %131, 1
  %134 = extractvalue %dx.types.ResRet.f32 %131, 2
  %135 = extractvalue %dx.types.ResRet.f32 %131, 3
  %136 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %137 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %138 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %136, %dx.types.Handle %137, float %80, float %81, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %139 = extractvalue %dx.types.ResRet.f32 %138, 0
  %140 = extractvalue %dx.types.ResRet.f32 %138, 1
  %141 = extractvalue %dx.types.ResRet.f32 %138, 2
  %142 = extractvalue %dx.types.ResRet.f32 %138, 3
  %143 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %144 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %145 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %143, %dx.types.Handle %144, float %80, float %81, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %146 = extractvalue %dx.types.ResRet.f32 %145, 0
  %147 = extractvalue %dx.types.ResRet.f32 %145, 1
  %148 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %149 = extractvalue %dx.types.CBufRet.f32 %148, 0
  %150 = extractvalue %dx.types.CBufRet.f32 %148, 1
  %151 = fmul fast float %149, %80
  %152 = fmul fast float %150, %81
  %153 = fptoui float %151 to i32
  %154 = fptoui float %152 to i32
  %155 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 153)  ; CBufferLoadLegacy(handle,regIndex)
  %156 = extractvalue %dx.types.CBufRet.f32 %155, 0
  %157 = fptoui float %156 to i32
  %158 = add i32 %153, %154
  %159 = add i32 %158, %157
  %160 = and i32 %159, 1
  %161 = icmp ne i32 %160, 0
  %162 = fmul fast float %135, 2.550000e+02
  %163 = fadd fast float %162, 5.000000e-01
  %164 = fptoui float %163 to i32
  %165 = and i32 %164, 15
  %166 = fmul fast float %135, 2.550000e+02
  %167 = fadd fast float %166, 5.000000e-01
  %168 = fptoui float %167 to i32
  %169 = fmul fast float %126, 2.000000e+00
  %170 = fmul fast float %127, 2.000000e+00
  %171 = fmul fast float %128, 2.000000e+00
  %172 = fadd fast float %169, -1.000000e+00
  %173 = fadd fast float %170, -1.000000e+00
  %174 = fadd fast float %171, -1.000000e+00
  %175 = and i32 %164, 14
  %176 = icmp eq i32 %175, 2
  %177 = and i32 %164, 14
  %178 = icmp eq i32 %177, 4
  %179 = or i1 %178, %176
  %180 = and i32 %164, 14
  %181 = icmp eq i32 %180, 6
  %182 = or i1 %181, %179
  %183 = and i32 %164, 14
  %184 = icmp eq i32 %183, 8
  %185 = or i1 %184, %182
  %186 = select i1 %185, float %146, float 0.000000e+00
  %187 = select i1 %185, float %147, float 0.000000e+00
  %188 = and i32 %168, 16
  %189 = icmp eq i32 %188, 0
  %190 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %55, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %191 = extractvalue %dx.types.CBufRet.f32 %190, 2
  %192 = fmul fast float %142, 1.600000e+01
  %193 = fadd fast float %192, -8.000000e+00
  %194 = call float @dx.op.unary.f32(i32 21, float %193)  ; Exp(value)
  %195 = fadd fast float %194, -3.906250e-03
  %196 = fmul fast float %195, %191
  %197 = call float @dx.op.dot3.f32(i32 55, float %172, float %173, float %174, float %172, float %173, float %174)  ; Dot3(ax,ay,az,bx,by,bz)
  %198 = call float @dx.op.unary.f32(i32 25, float %197)  ; Rsqrt(value)
  %199 = fmul fast float %198, %172
  %200 = fmul fast float %198, %173
  %201 = fmul fast float %198, %174
  %202 = icmp eq i32 %165, 9
  %203 = select i1 %202, float 0.000000e+00, float %132
  %204 = fmul fast float %133, 0x3FB47AE140000000
  %205 = fsub fast float %139, %204
  %206 = fsub fast float %140, %204
  %207 = fsub fast float %141, %204
  %208 = fmul fast float %203, %205
  %209 = fmul fast float %203, %206
  %210 = fmul fast float %203, %207
  %211 = fadd fast float %208, %204
  %212 = fadd fast float %209, %204
  %213 = fadd fast float %210, %204
  %214 = icmp eq i32 %165, 5
  %215 = icmp eq i32 %165, 9
  %216 = or i1 %214, %215
  br i1 %216, label %217, label %243

; <label>:217                                     ; preds = %0
  %218 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %56, i32 247)  ; CBufferLoadLegacy(handle,regIndex)
  %219 = extractvalue %dx.types.CBufRet.f32 %218, 3
  %220 = fcmp fast ogt float %219, 0.000000e+00
  br i1 %220, label %221, label %225

; <label>:221                                     ; preds = %217
  %222 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %56, i32 228)  ; CBufferLoadLegacy(handle,regIndex)
  %223 = extractvalue %dx.types.CBufRet.f32 %222, 2
  %224 = fcmp fast ogt float %223, 0.000000e+00
  br label %225

; <label>:225                                     ; preds = %221, %217
  %226 = phi i1 [ false, %217 ], [ %224, %221 ]
  %227 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %56, i32 247)  ; CBufferLoadLegacy(handle,regIndex)
  %228 = extractvalue %dx.types.CBufRet.f32 %227, 3
  %229 = fcmp fast une float %228, 0.000000e+00
  %230 = select i1 %229, float 1.000000e+00, float %139
  %231 = select i1 %229, float 1.000000e+00, float %140
  %232 = select i1 %229, float 1.000000e+00, float %141
  br i1 %226, label %233, label %243

; <label>:233                                     ; preds = %225
  %234 = uitofp i1 %161 to float
  %235 = xor i1 %161, true
  %236 = uitofp i1 %235 to float
  %237 = fmul fast float %236, %211
  %238 = fmul fast float %236, %212
  %239 = fmul fast float %236, %213
  %240 = xor i1 %161, true
  %241 = uitofp i1 %240 to float
  %242 = fmul fast float %241, %133
  br label %243

; <label>:243                                     ; preds = %233, %225, %0
  %244 = phi float [ %211, %0 ], [ %237, %233 ], [ %211, %225 ]
  %245 = phi float [ %212, %0 ], [ %238, %233 ], [ %212, %225 ]
  %246 = phi float [ %213, %0 ], [ %239, %233 ], [ %213, %225 ]
  %247 = phi float [ %139, %0 ], [ %234, %233 ], [ %230, %225 ]
  %248 = phi float [ %140, %0 ], [ %234, %233 ], [ %231, %225 ]
  %249 = phi float [ %141, %0 ], [ %234, %233 ], [ %232, %225 ]
  %250 = phi float [ %133, %0 ], [ %242, %233 ], [ %133, %225 ]
  %251 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %54, i32 138)  ; CBufferLoadLegacy(handle,regIndex)
  %252 = extractvalue %dx.types.CBufRet.f32 %251, 3
  %253 = fmul fast float %252, %244
  %254 = fmul fast float %252, %245
  %255 = fmul fast float %252, %246
  %256 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %54, i32 138)  ; CBufferLoadLegacy(handle,regIndex)
  %257 = extractvalue %dx.types.CBufRet.f32 %256, 0
  %258 = extractvalue %dx.types.CBufRet.f32 %256, 1
  %259 = extractvalue %dx.types.CBufRet.f32 %256, 2
  %260 = fadd fast float %253, %257
  %261 = fadd fast float %254, %258
  %262 = fadd fast float %255, %259
  br i1 %189, label %277, label %263

; <label>:263                                     ; preds = %243
  %264 = fmul fast float %119, 2.000000e+00
  %265 = fmul fast float %120, 2.000000e+00
  %266 = fmul fast float %121, 2.000000e+00
  %267 = fadd fast float %264, -1.000000e+00
  %268 = fadd fast float %265, -1.000000e+00
  %269 = fadd fast float %266, -1.000000e+00
  %270 = fmul fast float %122, 2.000000e+00
  %271 = fadd fast float %270, -1.000000e+00
  %272 = call float @dx.op.dot3.f32(i32 55, float %267, float %268, float %269, float %267, float %268, float %269)  ; Dot3(ax,ay,az,bx,by,bz)
  %273 = call float @dx.op.unary.f32(i32 25, float %272)  ; Rsqrt(value)
  %274 = fmul fast float %273, %267
  %275 = fmul fast float %273, %268
  %276 = fmul fast float %273, %269
  br label %277

; <label>:277                                     ; preds = %263, %243
  %278 = phi float [ %274, %263 ], [ 0.000000e+00, %243 ]
  %279 = phi float [ %275, %263 ], [ 0.000000e+00, %243 ]
  %280 = phi float [ %276, %263 ], [ 0.000000e+00, %243 ]
  %281 = phi float [ %271, %263 ], [ 0.000000e+00, %243 ]
  %282 = icmp eq i32 %165, 4
  br i1 %282, label %283, label %419

; <label>:283                                     ; preds = %277
  %284 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 56)  ; CBufferLoadLegacy(handle,regIndex)
  %285 = extractvalue %dx.types.CBufRet.f32 %284, 0
  %286 = extractvalue %dx.types.CBufRet.f32 %284, 1
  %287 = extractvalue %dx.types.CBufRet.f32 %284, 2
  %288 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 57)  ; CBufferLoadLegacy(handle,regIndex)
  %289 = extractvalue %dx.types.CBufRet.f32 %288, 0
  %290 = extractvalue %dx.types.CBufRet.f32 %288, 1
  %291 = extractvalue %dx.types.CBufRet.f32 %288, 2
  %292 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 58)  ; CBufferLoadLegacy(handle,regIndex)
  %293 = extractvalue %dx.types.CBufRet.f32 %292, 0
  %294 = extractvalue %dx.types.CBufRet.f32 %292, 1
  %295 = extractvalue %dx.types.CBufRet.f32 %292, 2
  %296 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 59)  ; CBufferLoadLegacy(handle,regIndex)
  %297 = extractvalue %dx.types.CBufRet.f32 %296, 0
  %298 = extractvalue %dx.types.CBufRet.f32 %296, 1
  %299 = extractvalue %dx.types.CBufRet.f32 %296, 2
  %300 = fmul fast float %115, %95
  %301 = fmul fast float %115, %97
  %302 = fmul fast float %285, %300
  %303 = call float @dx.op.tertiary.f32(i32 46, float %301, float %289, float %302)  ; FMad(a,b,c)
  %304 = call float @dx.op.tertiary.f32(i32 46, float %115, float %293, float %303)  ; FMad(a,b,c)
  %305 = fadd fast float %304, %297
  %306 = fmul fast float %286, %300
  %307 = call float @dx.op.tertiary.f32(i32 46, float %301, float %290, float %306)  ; FMad(a,b,c)
  %308 = call float @dx.op.tertiary.f32(i32 46, float %115, float %294, float %307)  ; FMad(a,b,c)
  %309 = fadd fast float %308, %298
  %310 = fmul fast float %287, %300
  %311 = call float @dx.op.tertiary.f32(i32 46, float %301, float %291, float %310)  ; FMad(a,b,c)
  %312 = call float @dx.op.tertiary.f32(i32 46, float %115, float %295, float %311)  ; FMad(a,b,c)
  %313 = fadd fast float %312, %299
  %314 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %58, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %315 = extractvalue %dx.types.CBufRet.f32 %314, 0
  %316 = extractvalue %dx.types.CBufRet.f32 %314, 1
  %317 = extractvalue %dx.types.CBufRet.f32 %314, 2
  %318 = fsub fast float %305, %315
  %319 = fsub fast float %309, %316
  %320 = fsub fast float %313, %317
  %321 = call float @dx.op.dot3.f32(i32 55, float %318, float %319, float %320, float %318, float %319, float %320)  ; Dot3(ax,ay,az,bx,by,bz)
  %322 = call float @dx.op.unary.f32(i32 25, float %321)  ; Rsqrt(value)
  %323 = fmul fast float %322, %318
  %324 = fsub fast float -0.000000e+00, %323
  %325 = fmul fast float %322, %319
  %326 = fsub fast float -0.000000e+00, %325
  %327 = fmul fast float %322, %320
  %328 = fsub fast float -0.000000e+00, %327
  %329 = call float @dx.op.dot3.f32(i32 55, float %199, float %200, float %201, float %324, float %326, float %328)  ; Dot3(ax,ay,az,bx,by,bz)
  %330 = call float @dx.op.unary.f32(i32 7, float %329)  ; Saturate(value)
  %331 = fmul fast float %330, 5.000000e-01
  %332 = fadd fast float %331, 5.000000e-01
  %333 = fmul fast float %332, %330
  %334 = fadd fast float %333, -1.000000e+00
  %335 = fmul fast float %134, 1.250000e+00
  %336 = fsub fast float 1.250000e+00, %335
  %337 = call float @dx.op.unary.f32(i32 7, float %336)  ; Saturate(value)
  %338 = fmul fast float %334, %337
  %339 = fadd fast float %338, 1.000000e+00
  %340 = fmul fast float %247, 0x3FF1C71C80000000
  %341 = fmul fast float %248, 0x3FF1C71C80000000
  %342 = fmul fast float %249, 0x3FF1C71C80000000
  %343 = fadd fast float %330, -1.000000e+00
  %344 = fmul fast float %343, 0x3FEB333340000000
  %345 = fmul fast float %340, %340
  %346 = fmul fast float %341, %341
  %347 = fmul fast float %342, %342
  %348 = fsub fast float %345, %340
  %349 = fsub fast float %346, %341
  %350 = fsub fast float %347, %342
  %351 = fmul fast float %348, 0x3FE8F5C280000000
  %352 = fmul fast float %349, 0x3FE8F5C280000000
  %353 = fmul fast float %350, 0x3FE8F5C280000000
  %354 = fsub fast float 1.000000e+00, %340
  %355 = fadd fast float %354, %351
  %356 = fsub fast float 1.000000e+00, %341
  %357 = fadd fast float %356, %352
  %358 = fsub fast float 1.000000e+00, %342
  %359 = fadd fast float %358, %353
  %360 = fmul fast float %344, %355
  %361 = fmul fast float %344, %357
  %362 = fmul fast float %344, %359
  %363 = fadd fast float %360, 1.000000e+00
  %364 = fadd fast float %361, 1.000000e+00
  %365 = fadd fast float %362, 1.000000e+00
  %366 = fsub fast float 1.000000e+00, %330
  %367 = fmul fast float %366, %366
  %368 = fmul fast float %367, %367
  %369 = fmul fast float %368, %366
  %370 = fsub fast float 1.000000e+00, %369
  %371 = fmul fast float %370, 0x3FA47AE140000000
  %372 = fadd fast float %371, %369
  %373 = fmul fast float %372, %186
  %374 = fsub fast float 1.000000e+00, %373
  %375 = fmul fast float %186, %203
  %376 = fmul fast float %247, %363
  %377 = fmul fast float %376, %339
  %378 = fmul fast float %248, %364
  %379 = fmul fast float %378, %339
  %380 = fmul fast float %249, %365
  %381 = fmul fast float %380, %339
  %382 = fmul fast float %374, %247
  %383 = fmul fast float %374, %248
  %384 = fmul fast float %374, %249
  %385 = fsub fast float %377, %382
  %386 = fsub fast float %379, %383
  %387 = fsub fast float %381, %384
  %388 = fmul fast float %385, %375
  %389 = fmul fast float %386, %375
  %390 = fmul fast float %387, %375
  %391 = fsub fast float %339, %250
  %392 = fmul fast float %391, %186
  %393 = fadd fast float %392, %250
  %394 = fmul fast float %393, 0x3FB47AE140000000
  %395 = fsub fast float %382, %394
  %396 = fadd fast float %395, %388
  %397 = fsub fast float %383, %394
  %398 = fadd fast float %397, %389
  %399 = fsub fast float %384, %394
  %400 = fadd fast float %399, %390
  %401 = fmul fast float %396, %203
  %402 = fmul fast float %398, %203
  %403 = fmul fast float %400, %203
  %404 = fadd fast float %401, %394
  %405 = fadd fast float %402, %394
  %406 = fadd fast float %403, %394
  %407 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 138)  ; CBufferLoadLegacy(handle,regIndex)
  %408 = extractvalue %dx.types.CBufRet.f32 %407, 3
  %409 = fmul fast float %404, %408
  %410 = fmul fast float %405, %408
  %411 = fmul fast float %406, %408
  %412 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 138)  ; CBufferLoadLegacy(handle,regIndex)
  %413 = extractvalue %dx.types.CBufRet.f32 %412, 0
  %414 = extractvalue %dx.types.CBufRet.f32 %412, 1
  %415 = extractvalue %dx.types.CBufRet.f32 %412, 2
  %416 = fadd fast float %409, %413
  %417 = fadd fast float %410, %414
  %418 = fadd fast float %411, %415
  br label %419

; <label>:419                                     ; preds = %283, %277
  %420 = phi float [ %416, %283 ], [ %260, %277 ]
  %421 = phi float [ %417, %283 ], [ %261, %277 ]
  %422 = phi float [ %418, %283 ], [ %262, %277 ]
  %423 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %424 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %425 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %423, %dx.types.Handle %424, float %80, float %81, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %426 = extractvalue %dx.types.ResRet.f32 %425, 0
  %427 = icmp ne i32 %165, 0
  %428 = icmp ne i32 %165, 7
  %429 = and i1 %427, %428
  br i1 %429, label %430, label %1571

; <label>:430                                     ; preds = %419
  %431 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %432 = extractvalue %dx.types.CBufRet.f32 %431, 1
  %433 = fcmp fast ogt float %432, 0.000000e+00
  br i1 %433, label %434, label %521

; <label>:434                                     ; preds = %430
  %435 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %436 = extractvalue %dx.types.CBufRet.f32 %435, 2
  %437 = fcmp fast ogt float %436, 0.000000e+00
  br i1 %437, label %438, label %521, !dx.controlflow.hints !48

; <label>:438                                     ; preds = %434
  %439 = fmul fast float %199, %199
  %440 = fmul fast float %200, %200
  %441 = fadd fast float %439, %440
  %442 = fmul fast float %201, %201
  %443 = fadd fast float %441, %442
  %444 = call float @dx.op.unary.f32(i32 24, float %443)  ; Sqrt(value)
  %445 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %446 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %445, i32 0, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %447 = extractvalue %dx.types.ResRet.f32 %446, 0
  %448 = extractvalue %dx.types.ResRet.f32 %446, 1
  %449 = extractvalue %dx.types.ResRet.f32 %446, 2
  %450 = extractvalue %dx.types.ResRet.f32 %446, 3
  %451 = call float @dx.op.dot4.f32(i32 56, float %447, float %448, float %449, float %450, float %199, float %200, float %201, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %452 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %453 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %452, i32 1, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %454 = extractvalue %dx.types.ResRet.f32 %453, 0
  %455 = extractvalue %dx.types.ResRet.f32 %453, 1
  %456 = extractvalue %dx.types.ResRet.f32 %453, 2
  %457 = extractvalue %dx.types.ResRet.f32 %453, 3
  %458 = call float @dx.op.dot4.f32(i32 56, float %454, float %455, float %456, float %457, float %199, float %200, float %201, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %459 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %460 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %459, i32 2, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %461 = extractvalue %dx.types.ResRet.f32 %460, 0
  %462 = extractvalue %dx.types.ResRet.f32 %460, 1
  %463 = extractvalue %dx.types.ResRet.f32 %460, 2
  %464 = extractvalue %dx.types.ResRet.f32 %460, 3
  %465 = call float @dx.op.dot4.f32(i32 56, float %461, float %462, float %463, float %464, float %199, float %200, float %201, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %466 = fmul fast float %199, %200
  %467 = fmul fast float %200, %201
  %468 = fmul fast float %201, %201
  %469 = fmul fast float %201, %199
  %470 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %471 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %470, i32 3, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %472 = extractvalue %dx.types.ResRet.f32 %471, 0
  %473 = extractvalue %dx.types.ResRet.f32 %471, 1
  %474 = extractvalue %dx.types.ResRet.f32 %471, 2
  %475 = extractvalue %dx.types.ResRet.f32 %471, 3
  %476 = call float @dx.op.dot4.f32(i32 56, float %472, float %473, float %474, float %475, float %466, float %467, float %468, float %469)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %477 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %478 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %477, i32 4, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %479 = extractvalue %dx.types.ResRet.f32 %478, 0
  %480 = extractvalue %dx.types.ResRet.f32 %478, 1
  %481 = extractvalue %dx.types.ResRet.f32 %478, 2
  %482 = extractvalue %dx.types.ResRet.f32 %478, 3
  %483 = call float @dx.op.dot4.f32(i32 56, float %479, float %480, float %481, float %482, float %466, float %467, float %468, float %469)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %484 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %485 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %484, i32 5, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %486 = extractvalue %dx.types.ResRet.f32 %485, 0
  %487 = extractvalue %dx.types.ResRet.f32 %485, 1
  %488 = extractvalue %dx.types.ResRet.f32 %485, 2
  %489 = extractvalue %dx.types.ResRet.f32 %485, 3
  %490 = call float @dx.op.dot4.f32(i32 56, float %486, float %487, float %488, float %489, float %466, float %467, float %468, float %469)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %491 = fmul fast float %199, %199
  %492 = fmul fast float %200, %200
  %493 = fsub fast float %491, %492
  %494 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %495 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %494, i32 6, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %496 = extractvalue %dx.types.ResRet.f32 %495, 0
  %497 = extractvalue %dx.types.ResRet.f32 %495, 1
  %498 = extractvalue %dx.types.ResRet.f32 %495, 2
  %499 = fmul fast float %496, %493
  %500 = fmul fast float %497, %493
  %501 = fmul fast float %498, %493
  %502 = fadd fast float %476, %451
  %503 = fadd fast float %483, %458
  %504 = fadd fast float %490, %465
  %505 = fadd fast float %502, %499
  %506 = fadd fast float %503, %500
  %507 = fadd fast float %504, %501
  %508 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %505)  ; FMax(a,b)
  %509 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %506)  ; FMax(a,b)
  %510 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %507)  ; FMax(a,b)
  %511 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 187)  ; CBufferLoadLegacy(handle,regIndex)
  %512 = extractvalue %dx.types.CBufRet.f32 %511, 0
  %513 = extractvalue %dx.types.CBufRet.f32 %511, 1
  %514 = extractvalue %dx.types.CBufRet.f32 %511, 2
  %515 = fmul fast float %512, %508
  %516 = fmul fast float %513, %509
  %517 = fmul fast float %514, %510
  %518 = call float @dx.op.dot3.f32(i32 55, float %515, float %516, float %517, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %519 = fmul fast float %518, %444
  %520 = fadd fast float %519, %196
  br label %521

; <label>:521                                     ; preds = %438, %434, %430
  %522 = phi float [ %520, %438 ], [ %196, %434 ], [ %196, %430 ]
  %523 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 56)  ; CBufferLoadLegacy(handle,regIndex)
  %524 = extractvalue %dx.types.CBufRet.f32 %523, 0
  %525 = extractvalue %dx.types.CBufRet.f32 %523, 1
  %526 = extractvalue %dx.types.CBufRet.f32 %523, 2
  %527 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 57)  ; CBufferLoadLegacy(handle,regIndex)
  %528 = extractvalue %dx.types.CBufRet.f32 %527, 0
  %529 = extractvalue %dx.types.CBufRet.f32 %527, 1
  %530 = extractvalue %dx.types.CBufRet.f32 %527, 2
  %531 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 58)  ; CBufferLoadLegacy(handle,regIndex)
  %532 = extractvalue %dx.types.CBufRet.f32 %531, 0
  %533 = extractvalue %dx.types.CBufRet.f32 %531, 1
  %534 = extractvalue %dx.types.CBufRet.f32 %531, 2
  %535 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 59)  ; CBufferLoadLegacy(handle,regIndex)
  %536 = extractvalue %dx.types.CBufRet.f32 %535, 0
  %537 = extractvalue %dx.types.CBufRet.f32 %535, 1
  %538 = extractvalue %dx.types.CBufRet.f32 %535, 2
  %539 = fmul fast float %115, %95
  %540 = fmul fast float %115, %97
  %541 = fmul fast float %524, %539
  %542 = call float @dx.op.tertiary.f32(i32 46, float %540, float %528, float %541)  ; FMad(a,b,c)
  %543 = call float @dx.op.tertiary.f32(i32 46, float %115, float %532, float %542)  ; FMad(a,b,c)
  %544 = fadd fast float %543, %536
  %545 = fmul fast float %525, %539
  %546 = call float @dx.op.tertiary.f32(i32 46, float %540, float %529, float %545)  ; FMad(a,b,c)
  %547 = call float @dx.op.tertiary.f32(i32 46, float %115, float %533, float %546)  ; FMad(a,b,c)
  %548 = fadd fast float %547, %537
  %549 = fmul fast float %526, %539
  %550 = call float @dx.op.tertiary.f32(i32 46, float %540, float %530, float %549)  ; FMad(a,b,c)
  %551 = call float @dx.op.tertiary.f32(i32 46, float %115, float %534, float %550)  ; FMad(a,b,c)
  %552 = fadd fast float %551, %538
  %553 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %554 = extractvalue %dx.types.CBufRet.f32 %553, 0
  %555 = extractvalue %dx.types.CBufRet.f32 %553, 1
  %556 = extractvalue %dx.types.CBufRet.f32 %553, 2
  %557 = fsub fast float %544, %554
  %558 = fsub fast float %548, %555
  %559 = fsub fast float %552, %556
  %560 = call float @dx.op.dot3.f32(i32 55, float %557, float %558, float %559, float %557, float %558, float %559)  ; Dot3(ax,ay,az,bx,by,bz)
  %561 = call float @dx.op.unary.f32(i32 25, float %560)  ; Rsqrt(value)
  %562 = fmul fast float %557, %561
  %563 = fmul fast float %558, %561
  %564 = fmul fast float %559, %561
  %565 = fsub fast float -0.000000e+00, %562
  %566 = fsub fast float -0.000000e+00, %563
  %567 = fsub fast float -0.000000e+00, %564
  %568 = call float @dx.op.unary.f32(i32 6, float %281)  ; FAbs(value)
  %569 = fcmp fast ogt float %568, 0.000000e+00
  br i1 %569, label %570, label %628

; <label>:570                                     ; preds = %521
  %571 = fmul fast float %280, %200
  %572 = fmul fast float %279, %201
  %573 = fsub fast float %571, %572
  %574 = fmul fast float %278, %201
  %575 = fmul fast float %280, %199
  %576 = fsub fast float %574, %575
  %577 = fmul fast float %279, %199
  %578 = fmul fast float %278, %200
  %579 = fsub fast float %577, %578
  %580 = call float @dx.op.dot3.f32(i32 55, float %573, float %576, float %579, float %573, float %576, float %579)  ; Dot3(ax,ay,az,bx,by,bz)
  %581 = call float @dx.op.unary.f32(i32 25, float %580)  ; Rsqrt(value)
  %582 = fmul fast float %581, %573
  %583 = fmul fast float %581, %576
  %584 = fmul fast float %581, %579
  %585 = fcmp fast oge float %281, 0.000000e+00
  %586 = select i1 %585, float %582, float %278
  %587 = select i1 %585, float %583, float %279
  %588 = select i1 %585, float %584, float %280
  %589 = fmul fast float %587, %567
  %590 = fmul fast float %588, %566
  %591 = fsub fast float %589, %590
  %592 = fmul fast float %588, %565
  %593 = fmul fast float %586, %567
  %594 = fsub fast float %592, %593
  %595 = fmul fast float %586, %566
  %596 = fmul fast float %587, %565
  %597 = fsub fast float %595, %596
  %598 = fmul fast float %594, %588
  %599 = fmul fast float %597, %587
  %600 = fmul fast float %597, %586
  %601 = fmul fast float %591, %588
  %602 = fmul fast float %591, %587
  %603 = fmul fast float %594, %586
  %604 = call float @dx.op.unary.f32(i32 6, float %281)  ; FAbs(value)
  %605 = fmul fast float %134, 5.000000e+00
  %606 = call float @dx.op.unary.f32(i32 7, float %605)  ; Saturate(value)
  %607 = fmul fast float %606, %604
  %608 = fsub fast float -0.000000e+00, %199
  %609 = fsub fast float %608, %599
  %610 = fadd fast float %609, %598
  %611 = fsub fast float -0.000000e+00, %200
  %612 = fsub fast float %611, %601
  %613 = fadd fast float %612, %600
  %614 = fsub fast float -0.000000e+00, %201
  %615 = fsub fast float %614, %603
  %616 = fadd fast float %615, %602
  %617 = fmul fast float %610, %607
  %618 = fmul fast float %613, %607
  %619 = fmul fast float %616, %607
  %620 = fadd fast float %617, %199
  %621 = fadd fast float %618, %200
  %622 = fadd fast float %619, %201
  %623 = call float @dx.op.dot3.f32(i32 55, float %620, float %621, float %622, float %620, float %621, float %622)  ; Dot3(ax,ay,az,bx,by,bz)
  %624 = call float @dx.op.unary.f32(i32 25, float %623)  ; Rsqrt(value)
  %625 = fmul fast float %620, %624
  %626 = fmul fast float %621, %624
  %627 = fmul fast float %622, %624
  br label %628

; <label>:628                                     ; preds = %570, %521
  %629 = phi float [ %625, %570 ], [ %199, %521 ]
  %630 = phi float [ %626, %570 ], [ %200, %521 ]
  %631 = phi float [ %627, %570 ], [ %201, %521 ]
  %632 = call float @dx.op.dot3.f32(i32 55, float %565, float %566, float %567, float %629, float %630, float %631)  ; Dot3(ax,ay,az,bx,by,bz)
  %633 = fmul fast float %632, 2.000000e+00
  %634 = fmul fast float %633, %629
  %635 = fmul fast float %633, %630
  %636 = fmul fast float %633, %631
  %637 = call float @dx.op.dot3.f32(i32 55, float %629, float %630, float %631, float %565, float %566, float %567)  ; Dot3(ax,ay,az,bx,by,bz)
  %638 = call float @dx.op.unary.f32(i32 7, float %637)  ; Saturate(value)
  %639 = fmul fast float %134, %134
  %640 = fsub fast float 1.000000e+00, %639
  %641 = fsub fast float 1.000000e+00, %639
  %642 = call float @dx.op.unary.f32(i32 24, float %641)  ; Sqrt(value)
  %643 = fadd fast float %642, %639
  %644 = fmul fast float %643, %640
  %645 = fsub fast float %562, %629
  %646 = fadd fast float %645, %634
  %647 = fsub fast float %563, %630
  %648 = fadd fast float %647, %635
  %649 = fsub fast float %564, %631
  %650 = fadd fast float %649, %636
  %651 = fmul fast float %644, %646
  %652 = fmul fast float %644, %648
  %653 = fmul fast float %644, %650
  %654 = fadd fast float %651, %629
  %655 = fadd fast float %652, %630
  %656 = fadd fast float %653, %631
  %657 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %658 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %659 = call %dx.types.ResRet.f32 @dx.op.sample.f32(i32 60, %dx.types.Handle %657, %dx.types.Handle %658, float %80, float %81, float undef, float undef, i32 0, i32 0, i32 undef, float undef)  ; Sample(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)
  %660 = extractvalue %dx.types.ResRet.f32 %659, 0
  %661 = extractvalue %dx.types.ResRet.f32 %659, 1
  %662 = extractvalue %dx.types.ResRet.f32 %659, 2
  %663 = extractvalue %dx.types.ResRet.f32 %659, 3
  %664 = fsub fast float 1.000000e+00, %663
  %665 = icmp eq i32 %165, 4
  %666 = select i1 %665, float 0.000000e+00, float %660
  %667 = select i1 %665, float 0.000000e+00, float %661
  %668 = select i1 %665, float 0.000000e+00, float %662
  %669 = select i1 %665, float 1.000000e+00, float %664
  %670 = fmul fast float %134, %134
  %671 = fadd fast float %638, %426
  %672 = call float @dx.op.unary.f32(i32 23, float %671)  ; Log(value)
  %673 = fmul fast float %670, %672
  %674 = call float @dx.op.unary.f32(i32 21, float %673)  ; Exp(value)
  %675 = fadd fast float %426, -1.000000e+00
  %676 = fadd fast float %675, %674
  %677 = call float @dx.op.unary.f32(i32 7, float %676)  ; Saturate(value)
  %678 = fmul fast float %669, %677
  %679 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %680 = extractvalue %dx.types.CBufRet.f32 %679, 0
  %681 = extractvalue %dx.types.CBufRet.f32 %679, 1
  %682 = fsub fast float %60, %680
  %683 = fsub fast float %61, %681
  %684 = fptoui float %682 to i32
  %685 = fptoui float %683 to i32
  %686 = fmul fast float %115, %74
  %687 = fadd fast float %686, %75
  %688 = call float @dx.op.unary.f32(i32 23, float %687)  ; Log(value)
  %689 = fmul fast float %688, %76
  %690 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %689)  ; FMax(a,b)
  %691 = fptoui float %690 to i32
  %692 = add nsw i32 %70, -1
  %693 = call i32 @dx.op.binary.i32(i32 40, i32 %691, i32 %692)  ; UMin(a,b)
  %694 = and i32 %72, 31
  %695 = and i32 %72, 31
  %696 = lshr i32 %684, %694
  %697 = lshr i32 %685, %695
  %698 = mul i32 %693, %69
  %699 = add i32 %698, %697
  %700 = mul i32 %699, %68
  %701 = add i32 %696, %66
  %702 = add i32 %701, %700
  %703 = shl i32 %702, 1
  %704 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %705 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %704, i32 %703, i32 undef)  ; BufferLoad(srv,index,wot)
  %706 = extractvalue %dx.types.ResRet.i32 %705, 0
  %707 = call i32 @dx.op.binary.i32(i32 40, i32 %706, i32 %64)  ; UMin(a,b)
  %708 = or i32 %703, 1
  %709 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %710 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %709, i32 %708, i32 undef)  ; BufferLoad(srv,index,wot)
  %711 = extractvalue %dx.types.ResRet.i32 %710, 0
  %712 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %713 = extractvalue %dx.types.CBufRet.f32 %712, 1
  %714 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 196)  ; CBufferLoadLegacy(handle,regIndex)
  %715 = extractvalue %dx.types.CBufRet.f32 %714, 2
  %716 = call float @dx.op.binary.f32(i32 35, float %134, float 0x3F50624DE0000000)  ; FMax(a,b)
  %717 = call float @dx.op.unary.f32(i32 23, float %716)  ; Log(value)
  %718 = fmul fast float %717, 0x3FF3333340000000
  %719 = fadd fast float %715, -2.000000e+00
  %720 = fadd fast float %719, %718
  %721 = icmp eq i32 %707, 0
  br i1 %721, label %954, label %722

; <label>:722                                     ; preds = %945, %628
  %723 = phi float [ %946, %945 ], [ 0.000000e+00, %628 ]
  %724 = phi float [ %947, %945 ], [ 0.000000e+00, %628 ]
  %725 = phi float [ %948, %945 ], [ 0.000000e+00, %628 ]
  %726 = phi float [ %949, %945 ], [ %678, %628 ]
  %727 = phi float [ %950, %945 ], [ 0.000000e+00, %628 ]
  %728 = phi float [ %951, %945 ], [ 1.000000e+00, %628 ]
  %729 = phi i32 [ %952, %945 ], [ 0, %628 ]
  %730 = fcmp fast olt float %726, 0x3F50624DE0000000
  br i1 %730, label %954, label %731, !dx.controlflow.hints !49

; <label>:731                                     ; preds = %722
  %732 = add i32 %729, %711
  %733 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %734 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %733, i32 %732, i32 undef)  ; BufferLoad(srv,index,wot)
  %735 = extractvalue %dx.types.ResRet.i32 %734, 0
  %736 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 %735)  ; CBufferLoadLegacy(handle,regIndex)
  %737 = extractvalue %dx.types.CBufRet.f32 %736, 0
  %738 = extractvalue %dx.types.CBufRet.f32 %736, 1
  %739 = extractvalue %dx.types.CBufRet.f32 %736, 2
  %740 = add i32 %735, 341
  %741 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 %740)  ; CBufferLoadLegacy(handle,regIndex)
  %742 = extractvalue %dx.types.CBufRet.f32 %741, 0
  %743 = extractvalue %dx.types.CBufRet.f32 %741, 1
  %744 = extractvalue %dx.types.CBufRet.f32 %741, 2
  %745 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %746 = extractvalue %dx.types.CBufRet.f32 %745, 0
  %747 = extractvalue %dx.types.CBufRet.f32 %745, 1
  %748 = extractvalue %dx.types.CBufRet.f32 %745, 2
  %749 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %47, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %750 = extractvalue %dx.types.CBufRet.f32 %749, 0
  %751 = extractvalue %dx.types.CBufRet.f32 %749, 1
  %752 = extractvalue %dx.types.CBufRet.f32 %749, 2
  %753 = fadd fast float %750, %737
  %754 = fadd fast float %751, %738
  %755 = fadd fast float %752, %739
  %756 = fsub fast float %742, %746
  %757 = fsub fast float %743, %747
  %758 = fsub fast float %744, %748
  %759 = fmul fast float %756, 2.097152e+06
  %760 = fmul fast float %757, 2.097152e+06
  %761 = fmul fast float %758, 2.097152e+06
  %762 = fadd fast float %753, %759
  %763 = fadd fast float %754, %760
  %764 = fadd fast float %755, %761
  %765 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 %735)  ; CBufferLoadLegacy(handle,regIndex)
  %766 = extractvalue %dx.types.CBufRet.f32 %765, 3
  %767 = add i32 %735, 682
  %768 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 %767)  ; CBufferLoadLegacy(handle,regIndex)
  %769 = extractvalue %dx.types.CBufRet.f32 %768, 0
  %770 = fsub fast float %544, %762
  %771 = fsub fast float %548, %763
  %772 = fsub fast float %552, %764
  %773 = call float @dx.op.dot3.f32(i32 55, float %770, float %771, float %772, float %770, float %771, float %772)  ; Dot3(ax,ay,az,bx,by,bz)
  %774 = call float @dx.op.unary.f32(i32 24, float %773)  ; Sqrt(value)
  %775 = fcmp fast olt float %774, %766
  br i1 %775, label %776, label %945, !dx.controlflow.hints !50

; <label>:776                                     ; preds = %731
  %777 = extractvalue %dx.types.CBufRet.f32 %768, 1
  %778 = add i32 %735, 1023
  %779 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 %778)  ; CBufferLoadLegacy(handle,regIndex)
  %780 = extractvalue %dx.types.CBufRet.f32 %779, 0
  %781 = extractvalue %dx.types.CBufRet.f32 %779, 1
  %782 = extractvalue %dx.types.CBufRet.f32 %779, 2
  %783 = extractvalue %dx.types.CBufRet.f32 %779, 3
  %784 = add i32 %735, 2728
  %785 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 %784)  ; CBufferLoadLegacy(handle,regIndex)
  %786 = extractvalue %dx.types.CBufRet.f32 %785, 0
  %787 = extractvalue %dx.types.CBufRet.f32 %785, 1
  %788 = extractvalue %dx.types.CBufRet.f32 %785, 2
  %789 = extractvalue %dx.types.CBufRet.f32 %785, 3
  %790 = shl i32 %735, 2
  %791 = add i32 %790, 1364
  %792 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 %791)  ; CBufferLoadLegacy(handle,regIndex)
  %793 = extractvalue %dx.types.CBufRet.f32 %792, 0
  %794 = extractvalue %dx.types.CBufRet.f32 %792, 1
  %795 = extractvalue %dx.types.CBufRet.f32 %792, 2
  %796 = add i32 %790, 1365
  %797 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 %796)  ; CBufferLoadLegacy(handle,regIndex)
  %798 = extractvalue %dx.types.CBufRet.f32 %797, 0
  %799 = extractvalue %dx.types.CBufRet.f32 %797, 1
  %800 = extractvalue %dx.types.CBufRet.f32 %797, 2
  %801 = add i32 %790, 1366
  %802 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 %801)  ; CBufferLoadLegacy(handle,regIndex)
  %803 = extractvalue %dx.types.CBufRet.f32 %802, 0
  %804 = extractvalue %dx.types.CBufRet.f32 %802, 1
  %805 = extractvalue %dx.types.CBufRet.f32 %802, 2
  %806 = add i32 %790, 1367
  %807 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 %806)  ; CBufferLoadLegacy(handle,regIndex)
  %808 = extractvalue %dx.types.CBufRet.f32 %807, 0
  %809 = extractvalue %dx.types.CBufRet.f32 %807, 1
  %810 = extractvalue %dx.types.CBufRet.f32 %807, 2
  %811 = fsub fast float %544, %762
  %812 = fsub fast float %548, %763
  %813 = fsub fast float %552, %764
  %814 = fmul fast float %793, %811
  %815 = call float @dx.op.tertiary.f32(i32 46, float %812, float %798, float %814)  ; FMad(a,b,c)
  %816 = call float @dx.op.tertiary.f32(i32 46, float %813, float %803, float %815)  ; FMad(a,b,c)
  %817 = fadd fast float %816, %808
  %818 = fmul fast float %794, %811
  %819 = call float @dx.op.tertiary.f32(i32 46, float %812, float %799, float %818)  ; FMad(a,b,c)
  %820 = call float @dx.op.tertiary.f32(i32 46, float %813, float %804, float %819)  ; FMad(a,b,c)
  %821 = fadd fast float %820, %809
  %822 = fmul fast float %795, %811
  %823 = call float @dx.op.tertiary.f32(i32 46, float %812, float %800, float %822)  ; FMad(a,b,c)
  %824 = call float @dx.op.tertiary.f32(i32 46, float %813, float %805, float %823)  ; FMad(a,b,c)
  %825 = fadd fast float %824, %810
  %826 = fmul fast float %793, %654
  %827 = call float @dx.op.tertiary.f32(i32 46, float %655, float %798, float %826)  ; FMad(a,b,c)
  %828 = call float @dx.op.tertiary.f32(i32 46, float %656, float %803, float %827)  ; FMad(a,b,c)
  %829 = fmul fast float %794, %654
  %830 = call float @dx.op.tertiary.f32(i32 46, float %655, float %799, float %829)  ; FMad(a,b,c)
  %831 = call float @dx.op.tertiary.f32(i32 46, float %656, float %804, float %830)  ; FMad(a,b,c)
  %832 = fmul fast float %795, %654
  %833 = call float @dx.op.tertiary.f32(i32 46, float %655, float %800, float %832)  ; FMad(a,b,c)
  %834 = call float @dx.op.tertiary.f32(i32 46, float %656, float %805, float %833)  ; FMad(a,b,c)
  %835 = fdiv fast float 1.000000e+00, %828
  %836 = fdiv fast float 1.000000e+00, %831
  %837 = fdiv fast float 1.000000e+00, %834
  %838 = fsub fast float -0.000000e+00, %835
  %839 = fsub fast float -0.000000e+00, %836
  %840 = fsub fast float -0.000000e+00, %837
  %841 = fmul fast float %835, %817
  %842 = fmul fast float %836, %821
  %843 = fmul fast float %837, %825
  %844 = fsub fast float %838, %841
  %845 = fsub fast float %839, %842
  %846 = fsub fast float %840, %843
  %847 = fmul fast float %835, %817
  %848 = fmul fast float %836, %821
  %849 = fmul fast float %837, %825
  %850 = fsub fast float %835, %847
  %851 = fsub fast float %836, %848
  %852 = fsub fast float %837, %849
  %853 = call float @dx.op.binary.f32(i32 35, float %844, float %850)  ; FMax(a,b)
  %854 = call float @dx.op.binary.f32(i32 35, float %845, float %851)  ; FMax(a,b)
  %855 = call float @dx.op.binary.f32(i32 35, float %846, float %852)  ; FMax(a,b)
  %856 = call float @dx.op.binary.f32(i32 36, float %854, float %855)  ; FMin(a,b)
  %857 = call float @dx.op.binary.f32(i32 36, float %853, float %856)  ; FMin(a,b)
  %858 = fmul fast float %857, %654
  %859 = fmul fast float %857, %655
  %860 = fmul fast float %857, %656
  %861 = fsub fast float %544, %762
  %862 = fsub fast float %861, %780
  %863 = fadd fast float %862, %858
  %864 = fsub fast float %548, %763
  %865 = fsub fast float %864, %781
  %866 = fadd fast float %865, %859
  %867 = fsub fast float %552, %764
  %868 = fsub fast float %867, %782
  %869 = fadd fast float %868, %860
  %870 = fmul fast float %817, %786
  %871 = fmul fast float %821, %787
  %872 = fmul fast float %825, %788
  %873 = fmul fast float %789, 5.000000e-01
  %874 = fsub fast float %786, %873
  %875 = fsub fast float %787, %873
  %876 = fsub fast float %788, %873
  %877 = fmul fast float %789, 5.000000e-01
  %878 = fsub fast float %786, %877
  %879 = fsub fast float %787, %877
  %880 = fsub fast float %788, %877
  %881 = fsub fast float -0.000000e+00, %878
  %882 = fsub fast float -0.000000e+00, %879
  %883 = fsub fast float -0.000000e+00, %880
  %884 = fadd fast float %870, %878
  %885 = fadd fast float %871, %879
  %886 = fadd fast float %872, %880
  %887 = call float @dx.op.unary.f32(i32 6, float %884)  ; FAbs(value)
  %888 = call float @dx.op.unary.f32(i32 6, float %885)  ; FAbs(value)
  %889 = call float @dx.op.unary.f32(i32 6, float %886)  ; FAbs(value)
  %890 = fcmp fast olt float %870, %881
  %891 = fcmp fast olt float %871, %882
  %892 = fcmp fast olt float %872, %883
  %893 = select i1 %890, float %887, float 0.000000e+00
  %894 = select i1 %891, float %888, float 0.000000e+00
  %895 = select i1 %892, float %889, float 0.000000e+00
  %896 = fsub fast float %870, %874
  %897 = fsub fast float %871, %875
  %898 = fsub fast float %872, %876
  %899 = call float @dx.op.unary.f32(i32 6, float %896)  ; FAbs(value)
  %900 = call float @dx.op.unary.f32(i32 6, float %897)  ; FAbs(value)
  %901 = call float @dx.op.unary.f32(i32 6, float %898)  ; FAbs(value)
  %902 = fcmp fast ogt float %870, %874
  %903 = fcmp fast ogt float %871, %875
  %904 = fcmp fast ogt float %872, %876
  %905 = select i1 %902, float %899, float 0.000000e+00
  %906 = select i1 %903, float %900, float 0.000000e+00
  %907 = select i1 %904, float %901, float 0.000000e+00
  %908 = call float @dx.op.dot3.f32(i32 55, float %893, float %894, float %895, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot3(ax,ay,az,bx,by,bz)
  %909 = call float @dx.op.dot3.f32(i32 55, float %905, float %906, float %907, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot3(ax,ay,az,bx,by,bz)
  %910 = fadd fast float %909, %908
  %911 = fmul fast float %789, 0x3FE6666660000000
  %912 = fdiv fast float %910, %911
  %913 = call float @dx.op.unary.f32(i32 7, float %912)  ; Saturate(value)
  %914 = fmul fast float %913, 2.000000e+00
  %915 = fsub fast float 3.000000e+00, %914
  %916 = fmul fast float %913, %913
  %917 = fmul fast float %916, %915
  %918 = fsub fast float 1.000000e+00, %917
  %919 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 9, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCubeArray<4xF32>
  %920 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %921 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %919, %dx.types.Handle %920, float %863, float %866, float %869, float %777, i32 undef, i32 undef, i32 undef, float %720)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %922 = extractvalue %dx.types.ResRet.f32 %921, 0
  %923 = extractvalue %dx.types.ResRet.f32 %921, 1
  %924 = extractvalue %dx.types.ResRet.f32 %921, 2
  %925 = extractvalue %dx.types.ResRet.f32 %921, 3
  %926 = fmul fast float %925, %918
  %927 = fmul fast float %769, %726
  %928 = fmul fast float %927, %918
  %929 = fmul fast float %928, %922
  %930 = fmul fast float %769, %726
  %931 = fmul fast float %930, %918
  %932 = fmul fast float %931, %923
  %933 = fmul fast float %769, %726
  %934 = fmul fast float %933, %918
  %935 = fmul fast float %934, %924
  %936 = fadd fast float %929, %723
  %937 = fadd fast float %932, %724
  %938 = fadd fast float %935, %725
  %939 = fsub fast float 1.000000e+00, %926
  %940 = fmul fast float %939, %726
  %941 = fmul fast float %783, %728
  %942 = fmul fast float %941, %918
  %943 = fadd fast float %942, %727
  %944 = fmul fast float %917, %728
  br label %945

; <label>:945                                     ; preds = %776, %731
  %946 = phi float [ %936, %776 ], [ %723, %731 ]
  %947 = phi float [ %937, %776 ], [ %724, %731 ]
  %948 = phi float [ %938, %776 ], [ %725, %731 ]
  %949 = phi float [ %940, %776 ], [ %726, %731 ]
  %950 = phi float [ %943, %776 ], [ %727, %731 ]
  %951 = phi float [ %944, %776 ], [ %728, %731 ]
  %952 = add nuw i32 %729, 1
  %953 = icmp ult i32 %952, %707
  br i1 %953, label %722, label %954, !llvm.loop !51

; <label>:954                                     ; preds = %945, %722, %628
  %955 = phi float [ 0.000000e+00, %628 ], [ %723, %722 ], [ %946, %945 ]
  %956 = phi float [ 0.000000e+00, %628 ], [ %724, %722 ], [ %947, %945 ]
  %957 = phi float [ 0.000000e+00, %628 ], [ %725, %722 ], [ %948, %945 ]
  %958 = phi float [ %678, %628 ], [ %726, %722 ], [ %949, %945 ]
  %959 = phi float [ 0.000000e+00, %628 ], [ %727, %722 ], [ %950, %945 ]
  %960 = phi float [ 1.000000e+00, %628 ], [ %728, %722 ], [ %951, %945 ]
  %961 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 160)  ; CBufferLoadLegacy(handle,regIndex)
  %962 = extractvalue %dx.types.CBufRet.f32 %961, 0
  %963 = extractvalue %dx.types.CBufRet.f32 %961, 1
  %964 = extractvalue %dx.types.CBufRet.f32 %961, 2
  %965 = fmul fast float %962, %955
  %966 = fmul fast float %963, %956
  %967 = fmul fast float %964, %957
  %968 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 160)  ; CBufferLoadLegacy(handle,regIndex)
  %969 = extractvalue %dx.types.CBufRet.f32 %968, 0
  %970 = extractvalue %dx.types.CBufRet.f32 %968, 1
  %971 = extractvalue %dx.types.CBufRet.f32 %968, 2
  %972 = call float @dx.op.dot3.f32(i32 55, float %969, float %970, float %971, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %973 = fmul fast float %972, %959
  %974 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %975 = extractvalue %dx.types.CBufRet.f32 %974, 1
  %976 = fcmp fast ogt float %975, 0.000000e+00
  br i1 %976, label %977, label %1058

; <label>:977                                     ; preds = %954
  %978 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %979 = extractvalue %dx.types.CBufRet.f32 %978, 0
  %980 = call float @dx.op.binary.f32(i32 35, float %134, float 0x3F50624DE0000000)  ; FMax(a,b)
  %981 = call float @dx.op.unary.f32(i32 23, float %980)  ; Log(value)
  %982 = fmul fast float %981, 0x3FF3333340000000
  %983 = fadd fast float %979, -2.000000e+00
  %984 = fadd fast float %983, %982
  %985 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %986 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %987 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %985, %dx.types.Handle %986, float %654, float %655, float %656, float undef, i32 undef, i32 undef, i32 undef, float %984)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %988 = extractvalue %dx.types.ResRet.f32 %987, 0
  %989 = extractvalue %dx.types.ResRet.f32 %987, 1
  %990 = extractvalue %dx.types.ResRet.f32 %987, 2
  %991 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %992 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %991, i32 7, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %993 = extractvalue %dx.types.ResRet.f32 %992, 0
  %994 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 187)  ; CBufferLoadLegacy(handle,regIndex)
  %995 = extractvalue %dx.types.CBufRet.f32 %994, 0
  %996 = extractvalue %dx.types.CBufRet.f32 %994, 1
  %997 = extractvalue %dx.types.CBufRet.f32 %994, 2
  %998 = call float @dx.op.dot3.f32(i32 55, float %995, float %996, float %997, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %999 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 187)  ; CBufferLoadLegacy(handle,regIndex)
  %1000 = extractvalue %dx.types.CBufRet.f32 %999, 0
  %1001 = extractvalue %dx.types.CBufRet.f32 %999, 1
  %1002 = extractvalue %dx.types.CBufRet.f32 %999, 2
  %1003 = fmul fast float %1000, %988
  %1004 = fmul fast float %1001, %989
  %1005 = fmul fast float %1002, %990
  %1006 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1007 = extractvalue %dx.types.CBufRet.f32 %1006, 3
  %1008 = fcmp fast ogt float %1007, 0.000000e+00
  br i1 %1008, label %1009, label %1041, !dx.controlflow.hints !53

; <label>:1009                                    ; preds = %977
  %1010 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1011 = extractvalue %dx.types.CBufRet.f32 %1010, 0
  %1012 = call float @dx.op.binary.f32(i32 35, float %134, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1013 = call float @dx.op.unary.f32(i32 23, float %1012)  ; Log(value)
  %1014 = fmul fast float %1013, 0x3FF3333340000000
  %1015 = fadd fast float %1011, -2.000000e+00
  %1016 = fadd fast float %1015, %1014
  %1017 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %1018 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1019 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1017, %dx.types.Handle %1018, float %654, float %655, float %656, float undef, i32 undef, i32 undef, i32 undef, float %1016)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1020 = extractvalue %dx.types.ResRet.f32 %1019, 0
  %1021 = extractvalue %dx.types.ResRet.f32 %1019, 1
  %1022 = extractvalue %dx.types.ResRet.f32 %1019, 2
  %1023 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1024 = extractvalue %dx.types.CBufRet.f32 %1023, 3
  %1025 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 187)  ; CBufferLoadLegacy(handle,regIndex)
  %1026 = extractvalue %dx.types.CBufRet.f32 %1025, 0
  %1027 = extractvalue %dx.types.CBufRet.f32 %1025, 1
  %1028 = extractvalue %dx.types.CBufRet.f32 %1025, 2
  %1029 = fmul fast float %1026, %1020
  %1030 = fmul fast float %1027, %1021
  %1031 = fmul fast float %1028, %1022
  %1032 = fsub fast float %1029, %1003
  %1033 = fsub fast float %1030, %1004
  %1034 = fsub fast float %1031, %1005
  %1035 = fmul fast float %1032, %1024
  %1036 = fmul fast float %1033, %1024
  %1037 = fmul fast float %1034, %1024
  %1038 = fadd fast float %1035, %1003
  %1039 = fadd fast float %1036, %1004
  %1040 = fadd fast float %1037, %1005
  br label %1041

; <label>:1041                                    ; preds = %1009, %977
  %1042 = phi float [ %1038, %1009 ], [ %1003, %977 ]
  %1043 = phi float [ %1039, %1009 ], [ %1004, %977 ]
  %1044 = phi float [ %1040, %1009 ], [ %1005, %977 ]
  %1045 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1046 = extractvalue %dx.types.CBufRet.f32 %1045, 2
  %1047 = fcmp fast olt float %1046, 1.000000e+00
  br i1 %1047, label %1048, label %1058, !dx.controlflow.hints !54

; <label>:1048                                    ; preds = %1041
  %1049 = fmul fast float %1042, %958
  %1050 = fmul fast float %1043, %958
  %1051 = fmul fast float %1044, %958
  %1052 = fadd fast float %1049, %965
  %1053 = fadd fast float %1050, %966
  %1054 = fadd fast float %1051, %967
  %1055 = fmul fast float %993, %960
  %1056 = fmul fast float %1055, %998
  %1057 = fadd fast float %1056, %973
  br label %1058

; <label>:1058                                    ; preds = %1048, %1041, %954
  %1059 = phi float [ 0.000000e+00, %1048 ], [ 0.000000e+00, %954 ], [ %1042, %1041 ]
  %1060 = phi float [ 0.000000e+00, %1048 ], [ 0.000000e+00, %954 ], [ %1043, %1041 ]
  %1061 = phi float [ 0.000000e+00, %1048 ], [ 0.000000e+00, %954 ], [ %1044, %1041 ]
  %1062 = phi float [ %1052, %1048 ], [ %965, %954 ], [ %965, %1041 ]
  %1063 = phi float [ %1053, %1048 ], [ %966, %954 ], [ %966, %1041 ]
  %1064 = phi float [ %1054, %1048 ], [ %967, %954 ], [ %967, %1041 ]
  %1065 = phi float [ %1057, %1048 ], [ %973, %954 ], [ %973, %1041 ]
  %1066 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 198)  ; CBufferLoadLegacy(handle,regIndex)
  %1067 = extractvalue %dx.types.CBufRet.f32 %1066, 0
  %1068 = fmul fast float %1067, %134
  %1069 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 198)  ; CBufferLoadLegacy(handle,regIndex)
  %1070 = extractvalue %dx.types.CBufRet.f32 %1069, 1
  %1071 = fadd fast float %1068, %1070
  %1072 = call float @dx.op.unary.f32(i32 7, float %1071)  ; Saturate(value)
  %1073 = call float @dx.op.unary.f32(i32 7, float %1072)  ; Saturate(value)
  %1074 = fmul fast float %1073, 2.000000e+00
  %1075 = fsub fast float 3.000000e+00, %1074
  %1076 = fmul fast float %1073, %1073
  %1077 = fmul fast float %1076, %1075
  %1078 = call float @dx.op.binary.f32(i32 35, float %1065, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1079 = fdiv fast float %522, %1078
  %1080 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 198)  ; CBufferLoadLegacy(handle,regIndex)
  %1081 = extractvalue %dx.types.CBufRet.f32 %1080, 2
  %1082 = call float @dx.op.binary.f32(i32 36, float %1079, float %1081)  ; FMin(a,b)
  %1083 = fadd fast float %1082, -1.000000e+00
  %1084 = fmul fast float %1077, %1083
  %1085 = fadd fast float %1084, 1.000000e+00
  %1086 = fmul fast float %1085, %1062
  %1087 = fmul fast float %1085, %1063
  %1088 = fmul fast float %1085, %1064
  %1089 = fmul fast float %1059, %958
  %1090 = fmul fast float %1060, %958
  %1091 = fmul fast float %1061, %958
  %1092 = fadd fast float %1086, %1089
  %1093 = fadd fast float %1087, %1090
  %1094 = fadd fast float %1088, %1091
  %1095 = fmul fast float %1092, %713
  %1096 = fmul fast float %1093, %713
  %1097 = fmul fast float %1094, %713
  %1098 = fadd fast float %1095, %666
  %1099 = fadd fast float %1096, %667
  %1100 = fadd fast float %1097, %668
  %1101 = icmp eq i32 %165, 4
  br i1 %1101, label %1102, label %1540, !dx.controlflow.hints !55

; <label>:1102                                    ; preds = %1058
  %1103 = call float @dx.op.dot3.f32(i32 55, float %199, float %200, float %201, float %565, float %566, float %567)  ; Dot3(ax,ay,az,bx,by,bz)
  %1104 = call float @dx.op.unary.f32(i32 7, float %1103)  ; Saturate(value)
  %1105 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1106 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1107 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1105, %dx.types.Handle %1106, float %1104, float %134, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1108 = extractvalue %dx.types.ResRet.f32 %1107, 0
  %1109 = extractvalue %dx.types.ResRet.f32 %1107, 1
  %1110 = fmul fast float %1108, %420
  %1111 = fmul fast float %1108, %421
  %1112 = fmul fast float %1108, %422
  %1113 = fmul fast float %421, 5.000000e+01
  %1114 = call float @dx.op.unary.f32(i32 7, float %1113)  ; Saturate(value)
  %1115 = fsub fast float 1.000000e+00, %186
  %1116 = fmul fast float %1114, %1115
  %1117 = fmul fast float %1116, %1109
  %1118 = fadd fast float %1117, %1110
  %1119 = fadd fast float %1117, %1111
  %1120 = fadd fast float %1117, %1112
  %1121 = fmul fast float %1118, %1098
  %1122 = fmul fast float %1119, %1099
  %1123 = fmul fast float %1120, %1100
  %1124 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1125 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1126 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1124, %dx.types.Handle %1125, float %1104, float %187, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1127 = extractvalue %dx.types.ResRet.f32 %1126, 0
  %1128 = extractvalue %dx.types.ResRet.f32 %1126, 1
  %1129 = fmul fast float %1127, 0x3FA47AE140000000
  %1130 = fadd fast float %1129, %1128
  %1131 = fmul fast float %1130, %186
  %1132 = fsub fast float 1.000000e+00, %1131
  %1133 = fmul fast float %1121, %1132
  %1134 = fmul fast float %1122, %1132
  %1135 = fmul fast float %1123, %1132
  %1136 = fmul fast float %1131, %677
  %1137 = call float @dx.op.dot3.f32(i32 55, float %565, float %566, float %567, float %199, float %200, float %201)  ; Dot3(ax,ay,az,bx,by,bz)
  %1138 = fmul fast float %1137, 2.000000e+00
  %1139 = fmul fast float %1138, %199
  %1140 = fmul fast float %1138, %200
  %1141 = fmul fast float %1138, %201
  %1142 = fadd fast float %1139, %562
  %1143 = fadd fast float %1140, %563
  %1144 = fadd fast float %1141, %564
  %1145 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1146 = extractvalue %dx.types.CBufRet.f32 %1145, 1
  %1147 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 196)  ; CBufferLoadLegacy(handle,regIndex)
  %1148 = extractvalue %dx.types.CBufRet.f32 %1147, 2
  %1149 = call float @dx.op.binary.f32(i32 35, float %187, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1150 = call float @dx.op.unary.f32(i32 23, float %1149)  ; Log(value)
  %1151 = fmul fast float %1150, 0x3FF3333340000000
  %1152 = fadd fast float %1148, -2.000000e+00
  %1153 = fadd fast float %1152, %1151
  %1154 = icmp eq i32 %707, 0
  br i1 %1154, label %1387, label %1155

; <label>:1155                                    ; preds = %1378, %1102
  %1156 = phi float [ %1379, %1378 ], [ 0.000000e+00, %1102 ]
  %1157 = phi float [ %1380, %1378 ], [ 0.000000e+00, %1102 ]
  %1158 = phi float [ %1381, %1378 ], [ 0.000000e+00, %1102 ]
  %1159 = phi float [ %1382, %1378 ], [ %1136, %1102 ]
  %1160 = phi float [ %1383, %1378 ], [ 0.000000e+00, %1102 ]
  %1161 = phi float [ %1384, %1378 ], [ 1.000000e+00, %1102 ]
  %1162 = phi i32 [ %1385, %1378 ], [ 0, %1102 ]
  %1163 = fcmp fast olt float %1159, 0x3F50624DE0000000
  br i1 %1163, label %1387, label %1164, !dx.controlflow.hints !49

; <label>:1164                                    ; preds = %1155
  %1165 = add i32 %1162, %711
  %1166 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1167 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1166, i32 %1165, i32 undef)  ; BufferLoad(srv,index,wot)
  %1168 = extractvalue %dx.types.ResRet.i32 %1167, 0
  %1169 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 %1168)  ; CBufferLoadLegacy(handle,regIndex)
  %1170 = extractvalue %dx.types.CBufRet.f32 %1169, 0
  %1171 = extractvalue %dx.types.CBufRet.f32 %1169, 1
  %1172 = extractvalue %dx.types.CBufRet.f32 %1169, 2
  %1173 = add i32 %1168, 341
  %1174 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 %1173)  ; CBufferLoadLegacy(handle,regIndex)
  %1175 = extractvalue %dx.types.CBufRet.f32 %1174, 0
  %1176 = extractvalue %dx.types.CBufRet.f32 %1174, 1
  %1177 = extractvalue %dx.types.CBufRet.f32 %1174, 2
  %1178 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %1179 = extractvalue %dx.types.CBufRet.f32 %1178, 0
  %1180 = extractvalue %dx.types.CBufRet.f32 %1178, 1
  %1181 = extractvalue %dx.types.CBufRet.f32 %1178, 2
  %1182 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %1183 = extractvalue %dx.types.CBufRet.f32 %1182, 0
  %1184 = extractvalue %dx.types.CBufRet.f32 %1182, 1
  %1185 = extractvalue %dx.types.CBufRet.f32 %1182, 2
  %1186 = fadd fast float %1183, %1170
  %1187 = fadd fast float %1184, %1171
  %1188 = fadd fast float %1185, %1172
  %1189 = fsub fast float %1175, %1179
  %1190 = fsub fast float %1176, %1180
  %1191 = fsub fast float %1177, %1181
  %1192 = fmul fast float %1189, 2.097152e+06
  %1193 = fmul fast float %1190, 2.097152e+06
  %1194 = fmul fast float %1191, 2.097152e+06
  %1195 = fadd fast float %1186, %1192
  %1196 = fadd fast float %1187, %1193
  %1197 = fadd fast float %1188, %1194
  %1198 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 %1168)  ; CBufferLoadLegacy(handle,regIndex)
  %1199 = extractvalue %dx.types.CBufRet.f32 %1198, 3
  %1200 = add i32 %1168, 682
  %1201 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 %1200)  ; CBufferLoadLegacy(handle,regIndex)
  %1202 = extractvalue %dx.types.CBufRet.f32 %1201, 0
  %1203 = fsub fast float %544, %1195
  %1204 = fsub fast float %548, %1196
  %1205 = fsub fast float %552, %1197
  %1206 = call float @dx.op.dot3.f32(i32 55, float %1203, float %1204, float %1205, float %1203, float %1204, float %1205)  ; Dot3(ax,ay,az,bx,by,bz)
  %1207 = call float @dx.op.unary.f32(i32 24, float %1206)  ; Sqrt(value)
  %1208 = fcmp fast olt float %1207, %1199
  br i1 %1208, label %1209, label %1378, !dx.controlflow.hints !50

; <label>:1209                                    ; preds = %1164
  %1210 = extractvalue %dx.types.CBufRet.f32 %1201, 1
  %1211 = add i32 %1168, 1023
  %1212 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 %1211)  ; CBufferLoadLegacy(handle,regIndex)
  %1213 = extractvalue %dx.types.CBufRet.f32 %1212, 0
  %1214 = extractvalue %dx.types.CBufRet.f32 %1212, 1
  %1215 = extractvalue %dx.types.CBufRet.f32 %1212, 2
  %1216 = extractvalue %dx.types.CBufRet.f32 %1212, 3
  %1217 = add i32 %1168, 2728
  %1218 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 %1217)  ; CBufferLoadLegacy(handle,regIndex)
  %1219 = extractvalue %dx.types.CBufRet.f32 %1218, 0
  %1220 = extractvalue %dx.types.CBufRet.f32 %1218, 1
  %1221 = extractvalue %dx.types.CBufRet.f32 %1218, 2
  %1222 = extractvalue %dx.types.CBufRet.f32 %1218, 3
  %1223 = shl i32 %1168, 2
  %1224 = add i32 %1223, 1364
  %1225 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 %1224)  ; CBufferLoadLegacy(handle,regIndex)
  %1226 = extractvalue %dx.types.CBufRet.f32 %1225, 0
  %1227 = extractvalue %dx.types.CBufRet.f32 %1225, 1
  %1228 = extractvalue %dx.types.CBufRet.f32 %1225, 2
  %1229 = add i32 %1223, 1365
  %1230 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 %1229)  ; CBufferLoadLegacy(handle,regIndex)
  %1231 = extractvalue %dx.types.CBufRet.f32 %1230, 0
  %1232 = extractvalue %dx.types.CBufRet.f32 %1230, 1
  %1233 = extractvalue %dx.types.CBufRet.f32 %1230, 2
  %1234 = add i32 %1223, 1366
  %1235 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 %1234)  ; CBufferLoadLegacy(handle,regIndex)
  %1236 = extractvalue %dx.types.CBufRet.f32 %1235, 0
  %1237 = extractvalue %dx.types.CBufRet.f32 %1235, 1
  %1238 = extractvalue %dx.types.CBufRet.f32 %1235, 2
  %1239 = add i32 %1223, 1367
  %1240 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 %1239)  ; CBufferLoadLegacy(handle,regIndex)
  %1241 = extractvalue %dx.types.CBufRet.f32 %1240, 0
  %1242 = extractvalue %dx.types.CBufRet.f32 %1240, 1
  %1243 = extractvalue %dx.types.CBufRet.f32 %1240, 2
  %1244 = fsub fast float %544, %1195
  %1245 = fsub fast float %548, %1196
  %1246 = fsub fast float %552, %1197
  %1247 = fmul fast float %1226, %1244
  %1248 = call float @dx.op.tertiary.f32(i32 46, float %1245, float %1231, float %1247)  ; FMad(a,b,c)
  %1249 = call float @dx.op.tertiary.f32(i32 46, float %1246, float %1236, float %1248)  ; FMad(a,b,c)
  %1250 = fadd fast float %1249, %1241
  %1251 = fmul fast float %1227, %1244
  %1252 = call float @dx.op.tertiary.f32(i32 46, float %1245, float %1232, float %1251)  ; FMad(a,b,c)
  %1253 = call float @dx.op.tertiary.f32(i32 46, float %1246, float %1237, float %1252)  ; FMad(a,b,c)
  %1254 = fadd fast float %1253, %1242
  %1255 = fmul fast float %1228, %1244
  %1256 = call float @dx.op.tertiary.f32(i32 46, float %1245, float %1233, float %1255)  ; FMad(a,b,c)
  %1257 = call float @dx.op.tertiary.f32(i32 46, float %1246, float %1238, float %1256)  ; FMad(a,b,c)
  %1258 = fadd fast float %1257, %1243
  %1259 = fmul fast float %1226, %1142
  %1260 = call float @dx.op.tertiary.f32(i32 46, float %1143, float %1231, float %1259)  ; FMad(a,b,c)
  %1261 = call float @dx.op.tertiary.f32(i32 46, float %1144, float %1236, float %1260)  ; FMad(a,b,c)
  %1262 = fmul fast float %1227, %1142
  %1263 = call float @dx.op.tertiary.f32(i32 46, float %1143, float %1232, float %1262)  ; FMad(a,b,c)
  %1264 = call float @dx.op.tertiary.f32(i32 46, float %1144, float %1237, float %1263)  ; FMad(a,b,c)
  %1265 = fmul fast float %1228, %1142
  %1266 = call float @dx.op.tertiary.f32(i32 46, float %1143, float %1233, float %1265)  ; FMad(a,b,c)
  %1267 = call float @dx.op.tertiary.f32(i32 46, float %1144, float %1238, float %1266)  ; FMad(a,b,c)
  %1268 = fdiv fast float 1.000000e+00, %1261
  %1269 = fdiv fast float 1.000000e+00, %1264
  %1270 = fdiv fast float 1.000000e+00, %1267
  %1271 = fsub fast float -0.000000e+00, %1268
  %1272 = fsub fast float -0.000000e+00, %1269
  %1273 = fsub fast float -0.000000e+00, %1270
  %1274 = fmul fast float %1268, %1250
  %1275 = fmul fast float %1269, %1254
  %1276 = fmul fast float %1270, %1258
  %1277 = fsub fast float %1271, %1274
  %1278 = fsub fast float %1272, %1275
  %1279 = fsub fast float %1273, %1276
  %1280 = fmul fast float %1268, %1250
  %1281 = fmul fast float %1269, %1254
  %1282 = fmul fast float %1270, %1258
  %1283 = fsub fast float %1268, %1280
  %1284 = fsub fast float %1269, %1281
  %1285 = fsub fast float %1270, %1282
  %1286 = call float @dx.op.binary.f32(i32 35, float %1277, float %1283)  ; FMax(a,b)
  %1287 = call float @dx.op.binary.f32(i32 35, float %1278, float %1284)  ; FMax(a,b)
  %1288 = call float @dx.op.binary.f32(i32 35, float %1279, float %1285)  ; FMax(a,b)
  %1289 = call float @dx.op.binary.f32(i32 36, float %1287, float %1288)  ; FMin(a,b)
  %1290 = call float @dx.op.binary.f32(i32 36, float %1286, float %1289)  ; FMin(a,b)
  %1291 = fmul fast float %1290, %1142
  %1292 = fmul fast float %1290, %1143
  %1293 = fmul fast float %1290, %1144
  %1294 = fsub fast float %544, %1195
  %1295 = fsub fast float %1294, %1213
  %1296 = fadd fast float %1295, %1291
  %1297 = fsub fast float %548, %1196
  %1298 = fsub fast float %1297, %1214
  %1299 = fadd fast float %1298, %1292
  %1300 = fsub fast float %552, %1197
  %1301 = fsub fast float %1300, %1215
  %1302 = fadd fast float %1301, %1293
  %1303 = fmul fast float %1250, %1219
  %1304 = fmul fast float %1254, %1220
  %1305 = fmul fast float %1258, %1221
  %1306 = fmul fast float %1222, 5.000000e-01
  %1307 = fsub fast float %1219, %1306
  %1308 = fsub fast float %1220, %1306
  %1309 = fsub fast float %1221, %1306
  %1310 = fmul fast float %1222, 5.000000e-01
  %1311 = fsub fast float %1219, %1310
  %1312 = fsub fast float %1220, %1310
  %1313 = fsub fast float %1221, %1310
  %1314 = fsub fast float -0.000000e+00, %1311
  %1315 = fsub fast float -0.000000e+00, %1312
  %1316 = fsub fast float -0.000000e+00, %1313
  %1317 = fadd fast float %1303, %1311
  %1318 = fadd fast float %1304, %1312
  %1319 = fadd fast float %1305, %1313
  %1320 = call float @dx.op.unary.f32(i32 6, float %1317)  ; FAbs(value)
  %1321 = call float @dx.op.unary.f32(i32 6, float %1318)  ; FAbs(value)
  %1322 = call float @dx.op.unary.f32(i32 6, float %1319)  ; FAbs(value)
  %1323 = fcmp fast olt float %1303, %1314
  %1324 = fcmp fast olt float %1304, %1315
  %1325 = fcmp fast olt float %1305, %1316
  %1326 = select i1 %1323, float %1320, float 0.000000e+00
  %1327 = select i1 %1324, float %1321, float 0.000000e+00
  %1328 = select i1 %1325, float %1322, float 0.000000e+00
  %1329 = fsub fast float %1303, %1307
  %1330 = fsub fast float %1304, %1308
  %1331 = fsub fast float %1305, %1309
  %1332 = call float @dx.op.unary.f32(i32 6, float %1329)  ; FAbs(value)
  %1333 = call float @dx.op.unary.f32(i32 6, float %1330)  ; FAbs(value)
  %1334 = call float @dx.op.unary.f32(i32 6, float %1331)  ; FAbs(value)
  %1335 = fcmp fast ogt float %1303, %1307
  %1336 = fcmp fast ogt float %1304, %1308
  %1337 = fcmp fast ogt float %1305, %1309
  %1338 = select i1 %1335, float %1332, float 0.000000e+00
  %1339 = select i1 %1336, float %1333, float 0.000000e+00
  %1340 = select i1 %1337, float %1334, float 0.000000e+00
  %1341 = call float @dx.op.dot3.f32(i32 55, float %1326, float %1327, float %1328, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot3(ax,ay,az,bx,by,bz)
  %1342 = call float @dx.op.dot3.f32(i32 55, float %1338, float %1339, float %1340, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot3(ax,ay,az,bx,by,bz)
  %1343 = fadd fast float %1342, %1341
  %1344 = fmul fast float %1222, 0x3FE6666660000000
  %1345 = fdiv fast float %1343, %1344
  %1346 = call float @dx.op.unary.f32(i32 7, float %1345)  ; Saturate(value)
  %1347 = fmul fast float %1346, 2.000000e+00
  %1348 = fsub fast float 3.000000e+00, %1347
  %1349 = fmul fast float %1346, %1346
  %1350 = fmul fast float %1349, %1348
  %1351 = fsub fast float 1.000000e+00, %1350
  %1352 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 9, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCubeArray<4xF32>
  %1353 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1354 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1352, %dx.types.Handle %1353, float %1296, float %1299, float %1302, float %1210, i32 undef, i32 undef, i32 undef, float %1153)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1355 = extractvalue %dx.types.ResRet.f32 %1354, 0
  %1356 = extractvalue %dx.types.ResRet.f32 %1354, 1
  %1357 = extractvalue %dx.types.ResRet.f32 %1354, 2
  %1358 = extractvalue %dx.types.ResRet.f32 %1354, 3
  %1359 = fmul fast float %1358, %1351
  %1360 = fmul fast float %1202, %1159
  %1361 = fmul fast float %1360, %1351
  %1362 = fmul fast float %1361, %1355
  %1363 = fmul fast float %1202, %1159
  %1364 = fmul fast float %1363, %1351
  %1365 = fmul fast float %1364, %1356
  %1366 = fmul fast float %1202, %1159
  %1367 = fmul fast float %1366, %1351
  %1368 = fmul fast float %1367, %1357
  %1369 = fadd fast float %1362, %1156
  %1370 = fadd fast float %1365, %1157
  %1371 = fadd fast float %1368, %1158
  %1372 = fsub fast float 1.000000e+00, %1359
  %1373 = fmul fast float %1372, %1159
  %1374 = fmul fast float %1216, %1161
  %1375 = fmul fast float %1374, %1351
  %1376 = fadd fast float %1375, %1160
  %1377 = fmul fast float %1350, %1161
  br label %1378

; <label>:1378                                    ; preds = %1209, %1164
  %1379 = phi float [ %1369, %1209 ], [ %1156, %1164 ]
  %1380 = phi float [ %1370, %1209 ], [ %1157, %1164 ]
  %1381 = phi float [ %1371, %1209 ], [ %1158, %1164 ]
  %1382 = phi float [ %1373, %1209 ], [ %1159, %1164 ]
  %1383 = phi float [ %1376, %1209 ], [ %1160, %1164 ]
  %1384 = phi float [ %1377, %1209 ], [ %1161, %1164 ]
  %1385 = add nuw i32 %1162, 1
  %1386 = icmp ult i32 %1385, %707
  br i1 %1386, label %1155, label %1387, !llvm.loop !51

; <label>:1387                                    ; preds = %1378, %1155, %1102
  %1388 = phi float [ 0.000000e+00, %1102 ], [ %1156, %1155 ], [ %1379, %1378 ]
  %1389 = phi float [ 0.000000e+00, %1102 ], [ %1157, %1155 ], [ %1380, %1378 ]
  %1390 = phi float [ 0.000000e+00, %1102 ], [ %1158, %1155 ], [ %1381, %1378 ]
  %1391 = phi float [ %1136, %1102 ], [ %1159, %1155 ], [ %1382, %1378 ]
  %1392 = phi float [ 0.000000e+00, %1102 ], [ %1160, %1155 ], [ %1383, %1378 ]
  %1393 = phi float [ 1.000000e+00, %1102 ], [ %1161, %1155 ], [ %1384, %1378 ]
  %1394 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 160)  ; CBufferLoadLegacy(handle,regIndex)
  %1395 = extractvalue %dx.types.CBufRet.f32 %1394, 0
  %1396 = extractvalue %dx.types.CBufRet.f32 %1394, 1
  %1397 = extractvalue %dx.types.CBufRet.f32 %1394, 2
  %1398 = fmul fast float %1395, %1388
  %1399 = fmul fast float %1396, %1389
  %1400 = fmul fast float %1397, %1390
  %1401 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 160)  ; CBufferLoadLegacy(handle,regIndex)
  %1402 = extractvalue %dx.types.CBufRet.f32 %1401, 0
  %1403 = extractvalue %dx.types.CBufRet.f32 %1401, 1
  %1404 = extractvalue %dx.types.CBufRet.f32 %1401, 2
  %1405 = call float @dx.op.dot3.f32(i32 55, float %1402, float %1403, float %1404, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1406 = fmul fast float %1405, %1392
  %1407 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1408 = extractvalue %dx.types.CBufRet.f32 %1407, 1
  %1409 = fcmp fast ogt float %1408, 0.000000e+00
  br i1 %1409, label %1410, label %1491

; <label>:1410                                    ; preds = %1387
  %1411 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1412 = extractvalue %dx.types.CBufRet.f32 %1411, 0
  %1413 = call float @dx.op.binary.f32(i32 35, float %187, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1414 = call float @dx.op.unary.f32(i32 23, float %1413)  ; Log(value)
  %1415 = fmul fast float %1414, 0x3FF3333340000000
  %1416 = fadd fast float %1412, -2.000000e+00
  %1417 = fadd fast float %1416, %1415
  %1418 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %1419 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1420 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1418, %dx.types.Handle %1419, float %1142, float %1143, float %1144, float undef, i32 undef, i32 undef, i32 undef, float %1417)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1421 = extractvalue %dx.types.ResRet.f32 %1420, 0
  %1422 = extractvalue %dx.types.ResRet.f32 %1420, 1
  %1423 = extractvalue %dx.types.ResRet.f32 %1420, 2
  %1424 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1425 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1424, i32 7, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1426 = extractvalue %dx.types.ResRet.f32 %1425, 0
  %1427 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 187)  ; CBufferLoadLegacy(handle,regIndex)
  %1428 = extractvalue %dx.types.CBufRet.f32 %1427, 0
  %1429 = extractvalue %dx.types.CBufRet.f32 %1427, 1
  %1430 = extractvalue %dx.types.CBufRet.f32 %1427, 2
  %1431 = call float @dx.op.dot3.f32(i32 55, float %1428, float %1429, float %1430, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1432 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 187)  ; CBufferLoadLegacy(handle,regIndex)
  %1433 = extractvalue %dx.types.CBufRet.f32 %1432, 0
  %1434 = extractvalue %dx.types.CBufRet.f32 %1432, 1
  %1435 = extractvalue %dx.types.CBufRet.f32 %1432, 2
  %1436 = fmul fast float %1433, %1421
  %1437 = fmul fast float %1434, %1422
  %1438 = fmul fast float %1435, %1423
  %1439 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1440 = extractvalue %dx.types.CBufRet.f32 %1439, 3
  %1441 = fcmp fast ogt float %1440, 0.000000e+00
  br i1 %1441, label %1442, label %1474, !dx.controlflow.hints !53

; <label>:1442                                    ; preds = %1410
  %1443 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1444 = extractvalue %dx.types.CBufRet.f32 %1443, 0
  %1445 = call float @dx.op.binary.f32(i32 35, float %187, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1446 = call float @dx.op.unary.f32(i32 23, float %1445)  ; Log(value)
  %1447 = fmul fast float %1446, 0x3FF3333340000000
  %1448 = fadd fast float %1444, -2.000000e+00
  %1449 = fadd fast float %1448, %1447
  %1450 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %1451 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1452 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1450, %dx.types.Handle %1451, float %1142, float %1143, float %1144, float undef, i32 undef, i32 undef, i32 undef, float %1449)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1453 = extractvalue %dx.types.ResRet.f32 %1452, 0
  %1454 = extractvalue %dx.types.ResRet.f32 %1452, 1
  %1455 = extractvalue %dx.types.ResRet.f32 %1452, 2
  %1456 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1457 = extractvalue %dx.types.CBufRet.f32 %1456, 3
  %1458 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 187)  ; CBufferLoadLegacy(handle,regIndex)
  %1459 = extractvalue %dx.types.CBufRet.f32 %1458, 0
  %1460 = extractvalue %dx.types.CBufRet.f32 %1458, 1
  %1461 = extractvalue %dx.types.CBufRet.f32 %1458, 2
  %1462 = fmul fast float %1459, %1453
  %1463 = fmul fast float %1460, %1454
  %1464 = fmul fast float %1461, %1455
  %1465 = fsub fast float %1462, %1436
  %1466 = fsub fast float %1463, %1437
  %1467 = fsub fast float %1464, %1438
  %1468 = fmul fast float %1465, %1457
  %1469 = fmul fast float %1466, %1457
  %1470 = fmul fast float %1467, %1457
  %1471 = fadd fast float %1468, %1436
  %1472 = fadd fast float %1469, %1437
  %1473 = fadd fast float %1470, %1438
  br label %1474

; <label>:1474                                    ; preds = %1442, %1410
  %1475 = phi float [ %1471, %1442 ], [ %1436, %1410 ]
  %1476 = phi float [ %1472, %1442 ], [ %1437, %1410 ]
  %1477 = phi float [ %1473, %1442 ], [ %1438, %1410 ]
  %1478 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1479 = extractvalue %dx.types.CBufRet.f32 %1478, 2
  %1480 = fcmp fast olt float %1479, 1.000000e+00
  br i1 %1480, label %1481, label %1491, !dx.controlflow.hints !54

; <label>:1481                                    ; preds = %1474
  %1482 = fmul fast float %1475, %1391
  %1483 = fmul fast float %1476, %1391
  %1484 = fmul fast float %1477, %1391
  %1485 = fadd fast float %1482, %1398
  %1486 = fadd fast float %1483, %1399
  %1487 = fadd fast float %1484, %1400
  %1488 = fmul fast float %1426, %1393
  %1489 = fmul fast float %1488, %1431
  %1490 = fadd fast float %1489, %1406
  br label %1491

; <label>:1491                                    ; preds = %1481, %1474, %1387
  %1492 = phi float [ 0.000000e+00, %1481 ], [ 0.000000e+00, %1387 ], [ %1475, %1474 ]
  %1493 = phi float [ 0.000000e+00, %1481 ], [ 0.000000e+00, %1387 ], [ %1476, %1474 ]
  %1494 = phi float [ 0.000000e+00, %1481 ], [ 0.000000e+00, %1387 ], [ %1477, %1474 ]
  %1495 = phi float [ %1485, %1481 ], [ %1398, %1387 ], [ %1398, %1474 ]
  %1496 = phi float [ %1486, %1481 ], [ %1399, %1387 ], [ %1399, %1474 ]
  %1497 = phi float [ %1487, %1481 ], [ %1400, %1387 ], [ %1400, %1474 ]
  %1498 = phi float [ %1490, %1481 ], [ %1406, %1387 ], [ %1406, %1474 ]
  %1499 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 198)  ; CBufferLoadLegacy(handle,regIndex)
  %1500 = extractvalue %dx.types.CBufRet.f32 %1499, 0
  %1501 = fmul fast float %1500, %187
  %1502 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 198)  ; CBufferLoadLegacy(handle,regIndex)
  %1503 = extractvalue %dx.types.CBufRet.f32 %1502, 1
  %1504 = fadd fast float %1501, %1503
  %1505 = call float @dx.op.unary.f32(i32 7, float %1504)  ; Saturate(value)
  %1506 = call float @dx.op.unary.f32(i32 7, float %1505)  ; Saturate(value)
  %1507 = fmul fast float %1506, 2.000000e+00
  %1508 = fsub fast float 3.000000e+00, %1507
  %1509 = fmul fast float %1506, %1506
  %1510 = fmul fast float %1509, %1508
  %1511 = call float @dx.op.binary.f32(i32 35, float %1498, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1512 = fdiv fast float %522, %1511
  %1513 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 198)  ; CBufferLoadLegacy(handle,regIndex)
  %1514 = extractvalue %dx.types.CBufRet.f32 %1513, 2
  %1515 = call float @dx.op.binary.f32(i32 36, float %1512, float %1514)  ; FMin(a,b)
  %1516 = fadd fast float %1515, -1.000000e+00
  %1517 = fmul fast float %1510, %1516
  %1518 = fadd fast float %1517, 1.000000e+00
  %1519 = fmul fast float %1518, %1495
  %1520 = fmul fast float %1518, %1496
  %1521 = fmul fast float %1518, %1497
  %1522 = fmul fast float %1492, %1391
  %1523 = fmul fast float %1493, %1391
  %1524 = fmul fast float %1494, %1391
  %1525 = fadd fast float %1519, %1522
  %1526 = fadd fast float %1520, %1523
  %1527 = fadd fast float %1521, %1524
  %1528 = fmul fast float %1525, %1146
  %1529 = fmul fast float %1526, %1146
  %1530 = fmul fast float %1527, %1146
  %1531 = fadd fast float %1528, %1133
  %1532 = fadd fast float %1529, %1134
  %1533 = fadd fast float %1530, %1135
  %1534 = fmul fast float %1531, %664
  %1535 = fmul fast float %1532, %664
  %1536 = fmul fast float %1533, %664
  %1537 = fadd fast float %1534, %660
  %1538 = fadd fast float %1535, %661
  %1539 = fadd fast float %1536, %662
  br label %1558

; <label>:1540                                    ; preds = %1058
  %1541 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1542 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1543 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1541, %dx.types.Handle %1542, float %638, float %134, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1544 = extractvalue %dx.types.ResRet.f32 %1543, 0
  %1545 = extractvalue %dx.types.ResRet.f32 %1543, 1
  %1546 = fmul fast float %1544, %420
  %1547 = fmul fast float %1544, %421
  %1548 = fmul fast float %1544, %422
  %1549 = fmul fast float %421, 5.000000e+01
  %1550 = call float @dx.op.unary.f32(i32 7, float %1549)  ; Saturate(value)
  %1551 = fmul fast float %1550, %1545
  %1552 = fadd fast float %1546, %1551
  %1553 = fadd fast float %1547, %1551
  %1554 = fadd fast float %1548, %1551
  %1555 = fmul fast float %1552, %1098
  %1556 = fmul fast float %1553, %1099
  %1557 = fmul fast float %1554, %1100
  br label %1558

; <label>:1558                                    ; preds = %1540, %1491
  %1559 = phi float [ %1537, %1491 ], [ %1555, %1540 ]
  %1560 = phi float [ %1538, %1491 ], [ %1556, %1540 ]
  %1561 = phi float [ %1539, %1491 ], [ %1557, %1540 ]
  %1562 = fsub fast float -0.000000e+00, %1559
  %1563 = fsub fast float -0.000000e+00, %1560
  %1564 = fsub fast float -0.000000e+00, %1561
  %1565 = call float @dx.op.binary.f32(i32 36, float %1562, float 0.000000e+00)  ; FMin(a,b)
  %1566 = call float @dx.op.binary.f32(i32 36, float %1563, float 0.000000e+00)  ; FMin(a,b)
  %1567 = call float @dx.op.binary.f32(i32 36, float %1564, float 0.000000e+00)  ; FMin(a,b)
  %1568 = fsub fast float -0.000000e+00, %1565
  %1569 = fsub fast float -0.000000e+00, %1566
  %1570 = fsub fast float -0.000000e+00, %1567
  br label %1571

; <label>:1571                                    ; preds = %1558, %419
  %1572 = phi float [ 0.000000e+00, %419 ], [ %1568, %1558 ]
  %1573 = phi float [ 0.000000e+00, %419 ], [ %1569, %1558 ]
  %1574 = phi float [ 0.000000e+00, %419 ], [ %1570, %1558 ]
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %1572)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %1573)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %1574)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sample.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!37}
!dx.entryPoints = !{!38}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"ps", i32 6, i32 6}
!4 = !{!5, null, !24, !29}
!5 = !{!6, !8, !10, !11, !12, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23}
!6 = !{i32 0, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 12, i32 0, !7}
!7 = !{i32 1, i32 16}
!8 = !{i32 1, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 5, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 5, i32 0, !9}
!11 = !{i32 3, %"class.TextureCubeArray<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 9, i32 0, !9}
!12 = !{i32 4, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 4, i32 1, i32 10, i32 0, !13}
!13 = !{i32 0, i32 5}
!14 = !{i32 5, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 5, i32 1, i32 10, i32 0, !13}
!15 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !9}
!16 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !9}
!17 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 2, i32 0, !9}
!18 = !{i32 9, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 2, i32 0, !9}
!19 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !9}
!20 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !9}
!21 = !{i32 12, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 2, i32 0, !9}
!22 = !{i32 13, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !9}
!23 = !{i32 14, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 2, i32 0, !9}
!24 = !{!25, !26, !27, !28}
!25 = !{i32 0, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 0, i32 1, i32 5388, null}
!26 = !{i32 1, %hostlayout.UniformBufferConstants_ReflectionCaptureSM5* undef, !"", i32 0, i32 1, i32 1, i32 49104, null}
!27 = !{i32 2, %UniformBufferConstants_ReflectionStruct* undef, !"", i32 0, i32 2, i32 1, i32 76, null}
!28 = !{i32 3, %hostlayout.UniformBufferConstants_ForwardLightData* undef, !"", i32 0, i32 3, i32 1, i32 708, null}
!29 = !{!30, !31, !32, !33, !34, !35, !36}
!30 = !{i32 0, %struct.SamplerState* undef, !"", i32 1000, i32 1, i32 1, i32 0, null}
!31 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!32 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!33 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!34 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!35 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!36 = !{i32 6, %struct.SamplerState* undef, !"", i32 0, i32 5, i32 1, i32 0, null}
!37 = !{[6 x i32] [i32 4, i32 4, i32 7, i32 7, i32 0, i32 7]}
!38 = !{void ()* @ReflectionEnvironmentSkyLighting, !"ReflectionEnvironmentSkyLighting", !39, !4, !47}
!39 = !{!40, !44, null}
!40 = !{!41}
!41 = !{i32 0, !"SV_Position", i8 9, i8 3, !42, i8 4, i32 1, i8 4, i32 0, i8 0, !43}
!42 = !{i32 0}
!43 = !{i32 3, i32 11}
!44 = !{!45}
!45 = !{i32 0, !"SV_Target", i8 9, i8 16, !42, i8 0, i32 1, i8 4, i32 0, i8 0, !46}
!46 = !{i32 3, i32 15}
!47 = !{i32 0, i64 16, i32 5, !42}
!48 = distinct !{!48, !"dx.controlflow.hints", i32 1}
!49 = distinct !{!49, !"dx.controlflow.hints", i32 1}
!50 = distinct !{!50, !"dx.controlflow.hints", i32 1}
!51 = distinct !{!51, !52}
!52 = !{!"llvm.loop.unroll.disable"}
!53 = distinct !{!53, !"dx.controlflow.hints", i32 1}
!54 = distinct !{!54, !"dx.controlflow.hints", i32 2}
!55 = distinct !{!55, !"dx.controlflow.hints", i32 1}
