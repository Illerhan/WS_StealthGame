;
; Note: shader requires additional functionality:
;       Wave level operations
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: daf3a0aabefc722bbebcbeefe742e38d
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(8,8,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       float ScreenRayLength;                        ; Offset:  112
;       int SMRTRayCount;                             ; Offset:  116
;       int SMRTSamplesPerRay;                        ; Offset:  120
;       float SMRTRayLengthScale;                     ; Offset:  124
;       float SMRTCotMaxRayAngleFromLight;            ; Offset:  128
;       float SMRTTexelDitherScale;                   ; Offset:  132
;       float SMRTExtrapolateSlope;                   ; Offset:  136
;       float SMRTMaxSlopeBias;                       ; Offset:  140
;       uint SMRTAdaptiveRayCount;                    ; Offset:  144
;       int4 ProjectionRect;                          ; Offset:  160
;       float NormalBias;                             ; Offset:  176
;       float SubsurfaceMinSourceRadius;              ; Offset:  180
;       uint InputType;                               ; Offset:  184
;       uint bCullBackfacingPixels;                   ; Offset:  188
;       float3 Light_TranslatedWorldPosition;         ; Offset:  224
;       float Light_InvRadius;                        ; Offset:  236
;       float3 Light_Color;                           ; Offset:  240
;       float Light_FalloffExponent;                  ; Offset:  252
;       float3 Light_Direction;                       ; Offset:  256
;       float Light_SpecularScale;                    ; Offset:  268
;       float3 Light_Tangent;                         ; Offset:  272
;       float Light_SourceRadius;                     ; Offset:  284
;       float2 Light_SpotAngles;                      ; Offset:  288
;       float Light_SoftSourceRadius;                 ; Offset:  296
;       float Light_SourceLength;                     ; Offset:  300
;       float Light_RectLightBarnCosAngle;            ; Offset:  304
;       float Light_RectLightBarnLength;              ; Offset:  308
;       float2 Light_RectLightAtlasUVOffset;          ; Offset:  312
;       float2 Light_RectLightAtlasUVScale;           ; Offset:  320
;       float Light_RectLightAtlasMaxLevel;           ; Offset:  328
;       int LightUniformVirtualShadowMapId;           ; Offset:  336
;       int VisualizeModeId;                          ; Offset:  360
;       int VisualizeVirtualShadowMapId;              ; Offset:  364
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   368
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_VirtualShadowMap
; {
;
;   struct UniformBufferConstants_VirtualShadowMap
;   {
;
;       uint VirtualShadowMap_NumFullShadowMaps;      ; Offset:    0
;       uint VirtualShadowMap_NumSinglePageShadowMaps;; Offset:    4
;       uint VirtualShadowMap_MaxPhysicalPages;       ; Offset:    8
;       uint VirtualShadowMap_NumShadowMapSlots;      ; Offset:   12
;       uint VirtualShadowMap_StaticCachedArrayIndex; ; Offset:   16
;       uint VirtualShadowMap_PhysicalPageRowMask;    ; Offset:   20
;       uint VirtualShadowMap_PhysicalPageRowShift;   ; Offset:   24
;       uint VirtualShadowMap_PackedShadowMaskMaxLightCount;; Offset:   28
;       float4 VirtualShadowMap_RecPhysicalPoolSize;  ; Offset:   32
;       int2 VirtualShadowMap_PhysicalPoolSize;       ; Offset:   48
;       int2 VirtualShadowMap_PhysicalPoolSizePages;  ; Offset:   56
;       uint VirtualShadowMap_bExcludeNonNaniteFromCoarsePages;; Offset:   64
;       float VirtualShadowMap_CoarsePagePixelThresholdDynamic;; Offset:   68
;       float VirtualShadowMap_CoarsePagePixelThresholdStatic;; Offset:   72
;       float VirtualShadowMap_CoarsePagePixelThresholdDynamicNanite;; Offset:   76
;       uint BindlessResource_VirtualShadowMap_ProjectionData;; Offset:   80
;       uint PrePadding_VirtualShadowMap_84;          ; Offset:   84
;       uint BindlessResource_VirtualShadowMap_PageTable;; Offset:   88
;       uint PrePadding_VirtualShadowMap_92;          ; Offset:   92
;       uint BindlessResource_VirtualShadowMap_PageFlags;; Offset:   96
;       uint PrePadding_VirtualShadowMap_100;         ; Offset:  100
;       uint BindlessResource_VirtualShadowMap_PageRectBounds;; Offset:  104
;       uint PrePadding_VirtualShadowMap_108;         ; Offset:  108
;       uint BindlessResource_VirtualShadowMap_PhysicalPagePool;; Offset:  112
;   
;   } UniformBufferConstants_VirtualShadowMap;        ; Offset:    0 Size:   116
;
; }
;
; cbuffer UniformBufferConstants_ForwardLightData
; {
;
;   struct hostlayout.UniformBufferConstants_ForwardLightData
;   {
;
;       uint ForwardLightData_NumLocalLights;         ; Offset:    0
;       uint ForwardLightData_NumReflectionCaptures;  ; Offset:    4
;       uint ForwardLightData_HasDirectionalLight;    ; Offset:    8
;       uint ForwardLightData_NumGridCells;           ; Offset:   12
;       int3 ForwardLightData_CulledGridSize;         ; Offset:   16
;       uint ForwardLightData_MaxCulledLightsPerCell; ; Offset:   28
;       uint ForwardLightData_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_ForwardLightData_36;          ; Offset:   36
;       uint PrePadding_ForwardLightData_40;          ; Offset:   40
;       uint PrePadding_ForwardLightData_44;          ; Offset:   44
;       float3 ForwardLightData_LightGridZParams;     ; Offset:   48
;       float PrePadding_ForwardLightData_60;         ; Offset:   60
;       float3 ForwardLightData_DirectionalLightDirection;; Offset:   64
;       float ForwardLightData_DirectionalLightSourceRadius;; Offset:   76
;       float3 ForwardLightData_DirectionalLightColor;; Offset:   80
;       float ForwardLightData_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint ForwardLightData_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_ForwardLightData_100;         ; Offset:  100
;       float2 ForwardLightData_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint ForwardLightData_NumDirectionalLightCascades;; Offset:  112
;       int ForwardLightData_DirectionalLightVSM;     ; Offset:  116
;       int PrePadding_ForwardLightData_120;          ; Offset:  120
;       int PrePadding_ForwardLightData_124;          ; Offset:  124
;       float4 ForwardLightData_CascadeEndDepths;     ; Offset:  128
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 ForwardLightData_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float ForwardLightData_DirectionalLightDepthBias;; Offset:  480
;       uint ForwardLightData_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint ForwardLightData_SimpleLightsEndIndex;   ; Offset:  488
;       uint ForwardLightData_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint ForwardLightData_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_ForwardLightData_500;         ; Offset:  500
;       uint PrePadding_ForwardLightData_504;         ; Offset:  504
;       uint PrePadding_ForwardLightData_508;         ; Offset:  508
;       float4 ForwardLightData_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint ForwardLightData_DirectLightingShowFlag; ; Offset:  592
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_604;; Offset:  604
;       float ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_ForwardLightData_644;         ; Offset:  644
;       uint PrePadding_ForwardLightData_648;         ; Offset:  648
;       uint PrePadding_ForwardLightData_652;         ; Offset:  652
;       uint BindlessResource_ForwardLightData_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_ForwardLightData_660;         ; Offset:  660
;       uint BindlessSampler_ForwardLightData_ShadowmapSampler;; Offset:  664
;       uint PrePadding_ForwardLightData_668;         ; Offset:  668
;       uint BindlessResource_ForwardLightData_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_ForwardLightData_676;         ; Offset:  676
;       uint BindlessSampler_ForwardLightData_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_ForwardLightData_684;         ; Offset:  684
;       uint BindlessResource_ForwardLightData_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_ForwardLightData_692;         ; Offset:  692
;       uint BindlessResource_ForwardLightData_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_ForwardLightData_700;         ; Offset:  700
;       uint BindlessResource_ForwardLightData_CulledLightDataGrid;; Offset:  704
;   
;   } UniformBufferConstants_ForwardLightData;        ; Offset:    0 Size:   708
;
; }
;
; cbuffer UniformBufferConstants_BlueNoise
; {
;
;   struct UniformBufferConstants_BlueNoise
;   {
;
;       int3 BlueNoise_Dimensions;                    ; Offset:    0
;       int PrePadding_BlueNoise_12;                  ; Offset:   12
;       int3 BlueNoise_ModuloMasks;                   ; Offset:   16
;       int PrePadding_BlueNoise_28;                  ; Offset:   28
;       uint BindlessResource_BlueNoise_ScalarTexture;; Offset:   32
;       uint PrePadding_BlueNoise_36;                 ; Offset:   36
;       uint BindlessResource_BlueNoise_Vec2Texture;  ; Offset:   40
;   
;   } UniformBufferConstants_BlueNoise;               ; Offset:    0 Size:    44
;
; }
;
; Resource bind info for VirtualShadowMap_PageTable
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_VirtualShadowMap   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_ForwardLightData   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_BlueNoise   cbuffer      NA          NA     CB4            cb4     1
; SceneTexturesStruct_PointClampSampler   sampler      NA          NA      S0             s0     1
; SceneTexturesStruct_SceneDepthTexture   texture     f32          2d      T0             t0     1
; SceneTexturesStruct_GBufferATexture   texture     f32          2d      T1             t1     1
; SceneTexturesStruct_GBufferBTexture   texture     f32          2d      T2             t2     1
; SceneTexturesStruct_GBufferDTexture   texture     f32          2d      T3             t3     1
; VirtualShadowMap_ProjectionData   texture    byte         r/o      T4             t4     1
; VirtualShadowMap_PageTable        texture  struct         r/o      T5             t5     1
; VirtualShadowMap_PhysicalPagePool   texture     u32     2darray      T6             t6     1
; ForwardLightData_ForwardLocalLightBuffer   texture     f32         buf      T7             t7     1
; ForwardLightData_NumCulledLightsGrid   texture     u32         buf      T8             t8     1
; ForwardLightData_CulledLightDataGrid   texture     u32         buf      T9             t9     1
; BlueNoise_ScalarTexture           texture     f32          2d     T10            t10     1
; OutShadowMaskBits                     UAV     u32          2d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Texture2DArray<unsigned int>" = type { i32, %"class.Texture2DArray<unsigned int>::mips_type" }
%"class.Texture2DArray<unsigned int>::mips_type" = type { i32 }
%"class.Buffer<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.RWTexture2D<vector<unsigned int, 4> >" = type { <4 x i32> }
%_RootShaderParameters = type { float, i32, i32, float, float, float, float, float, i32, <4 x i32>, float, float, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, float, float, <2 x float>, <2 x float>, float, i32, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_VirtualShadowMap = type { i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x i32>, <2 x i32>, i32, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%hostlayout.UniformBufferConstants_ForwardLightData = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_BlueNoise = type { <3 x i32>, i32, <3 x i32>, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @VirtualShadowMapProjection() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 13, i32 44 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %20 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 13, i32 708 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %21 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 13, i32 116 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %22 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %23 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 13, i32 368 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %24 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %25 = call i32 @dx.op.groupId.i32(i32 94, i32 1)  ; GroupId(component)
  %26 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)  ; FlattenedThreadIdInGroup()
  %27 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %20, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %28 = extractvalue %dx.types.CBufRet.i32 %27, 0
  %29 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %20, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %30 = extractvalue %dx.types.CBufRet.i32 %29, 0
  %31 = extractvalue %dx.types.CBufRet.i32 %29, 1
  %32 = extractvalue %dx.types.CBufRet.i32 %29, 2
  %33 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %20, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %34 = extractvalue %dx.types.CBufRet.i32 %33, 0
  %35 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %20, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %36 = extractvalue %dx.types.CBufRet.f32 %35, 0
  %37 = extractvalue %dx.types.CBufRet.f32 %35, 1
  %38 = extractvalue %dx.types.CBufRet.f32 %35, 2
  %39 = shl i32 %24, 3
  %40 = shl i32 %25, 3
  %41 = and i32 %26, 1431655765
  %42 = lshr i32 %41, 1
  %43 = or i32 %42, %41
  %44 = and i32 %43, 858993459
  %45 = lshr i32 %44, 2
  %46 = or i32 %45, %44
  %47 = and i32 %46, 252645135
  %48 = lshr i32 %47, 4
  %49 = or i32 %48, %47
  %50 = lshr i32 %49, 8
  %51 = and i32 %50, 65280
  %52 = and i32 %49, 255
  %53 = or i32 %51, %52
  %54 = lshr i32 %26, 1
  %55 = and i32 %54, 1431655765
  %56 = lshr i32 %55, 1
  %57 = or i32 %56, %55
  %58 = and i32 %57, 858993459
  %59 = lshr i32 %58, 2
  %60 = or i32 %59, %58
  %61 = and i32 %60, 252645135
  %62 = lshr i32 %61, 4
  %63 = or i32 %62, %61
  %64 = lshr i32 %63, 8
  %65 = and i32 %64, 65280
  %66 = and i32 %63, 255
  %67 = or i32 %65, %66
  %68 = add i32 %53, %39
  %69 = add i32 %67, %40
  %70 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %71 = extractvalue %dx.types.CBufRet.i32 %70, 0
  %72 = extractvalue %dx.types.CBufRet.i32 %70, 1
  %73 = add i32 %68, %71
  %74 = add i32 %69, %72
  %75 = extractvalue %dx.types.CBufRet.i32 %70, 2
  %76 = extractvalue %dx.types.CBufRet.i32 %70, 3
  %77 = icmp uge i32 %73, %75
  %78 = icmp uge i32 %74, %76
  %79 = or i1 %77, %78
  br i1 %79, label %2355, label %80

; <label>:80                                      ; preds = %0
  %81 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %82 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %81, i32 0, i32 %73, i32 %74, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %83 = extractvalue %dx.types.ResRet.f32 %82, 0
  %84 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %85 = extractvalue %dx.types.CBufRet.i32 %84, 2
  %86 = icmp ne i32 %85, 1
  %87 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %88 = extractvalue %dx.types.CBufRet.f32 %87, 0
  %89 = fmul fast float %88, %83
  %90 = extractvalue %dx.types.CBufRet.f32 %87, 1
  %91 = fadd fast float %89, %90
  %92 = extractvalue %dx.types.CBufRet.f32 %87, 2
  %93 = fmul fast float %92, %83
  %94 = extractvalue %dx.types.CBufRet.f32 %87, 3
  %95 = fsub fast float %93, %94
  %96 = fdiv fast float 1.000000e+00, %95
  %97 = fadd fast float %91, %96
  %98 = uitofp i32 %73 to float
  %99 = uitofp i32 %74 to float
  %100 = fadd fast float %98, 5.000000e-01
  %101 = fadd fast float %99, 5.000000e-01
  %102 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %103 = extractvalue %dx.types.CBufRet.f32 %102, 0
  %104 = extractvalue %dx.types.CBufRet.f32 %102, 1
  %105 = extractvalue %dx.types.CBufRet.f32 %102, 2
  %106 = extractvalue %dx.types.CBufRet.f32 %102, 3
  %107 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %108 = extractvalue %dx.types.CBufRet.f32 %107, 0
  %109 = extractvalue %dx.types.CBufRet.f32 %107, 1
  %110 = extractvalue %dx.types.CBufRet.f32 %107, 2
  %111 = extractvalue %dx.types.CBufRet.f32 %107, 3
  %112 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %113 = extractvalue %dx.types.CBufRet.f32 %112, 0
  %114 = extractvalue %dx.types.CBufRet.f32 %112, 1
  %115 = extractvalue %dx.types.CBufRet.f32 %112, 2
  %116 = extractvalue %dx.types.CBufRet.f32 %112, 3
  %117 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %118 = extractvalue %dx.types.CBufRet.f32 %117, 0
  %119 = extractvalue %dx.types.CBufRet.f32 %117, 1
  %120 = extractvalue %dx.types.CBufRet.f32 %117, 2
  %121 = extractvalue %dx.types.CBufRet.f32 %117, 3
  %122 = fmul fast float %103, %100
  %123 = call float @dx.op.tertiary.f32(i32 46, float %101, float %108, float %122)  ; FMad(a,b,c)
  %124 = call float @dx.op.tertiary.f32(i32 46, float %83, float %113, float %123)  ; FMad(a,b,c)
  %125 = fadd fast float %124, %118
  %126 = fmul fast float %104, %100
  %127 = call float @dx.op.tertiary.f32(i32 46, float %101, float %109, float %126)  ; FMad(a,b,c)
  %128 = call float @dx.op.tertiary.f32(i32 46, float %83, float %114, float %127)  ; FMad(a,b,c)
  %129 = fadd fast float %128, %119
  %130 = fmul fast float %105, %100
  %131 = call float @dx.op.tertiary.f32(i32 46, float %101, float %110, float %130)  ; FMad(a,b,c)
  %132 = call float @dx.op.tertiary.f32(i32 46, float %83, float %115, float %131)  ; FMad(a,b,c)
  %133 = fadd fast float %132, %120
  %134 = fmul fast float %106, %100
  %135 = call float @dx.op.tertiary.f32(i32 46, float %101, float %111, float %134)  ; FMad(a,b,c)
  %136 = call float @dx.op.tertiary.f32(i32 46, float %83, float %116, float %135)  ; FMad(a,b,c)
  %137 = fadd fast float %136, %121
  %138 = fdiv fast float %125, %137
  %139 = fdiv fast float %129, %137
  %140 = fdiv fast float %133, %137
  %141 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %142 = extractvalue %dx.types.CBufRet.f32 %141, 0
  %143 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %144 = extractvalue %dx.types.CBufRet.f32 %143, 1
  %145 = fmul fast float %142, %97
  %146 = fmul fast float %145, %144
  %147 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %22, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %148 = extractvalue %dx.types.CBufRet.i32 %147, 0
  %149 = uitofp i32 %148 to float
  %150 = fmul fast float %149, 0x4040551EC0000000
  %151 = fmul fast float %149, 0x4027A147A0000000
  %152 = fadd fast float %150, %100
  %153 = fadd fast float %151, %101
  %154 = call float @dx.op.dot2.f32(i32 54, float %152, float %153, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %155 = call float @dx.op.unary.f32(i32 22, float %154)  ; Frc(value)
  %156 = fmul fast float %155, 0x404A7DD040000000
  %157 = call float @dx.op.unary.f32(i32 22, float %156)  ; Frc(value)
  %158 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %159 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %158, i32 0, i32 %73, i32 %74, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %160 = extractvalue %dx.types.ResRet.f32 %159, 0
  %161 = extractvalue %dx.types.ResRet.f32 %159, 1
  %162 = extractvalue %dx.types.ResRet.f32 %159, 2
  %163 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %164 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %163, i32 0, i32 %73, i32 %74, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %165 = extractvalue %dx.types.ResRet.f32 %164, 3
  %166 = fmul fast float %165, 2.550000e+02
  %167 = fadd fast float %166, 5.000000e-01
  %168 = fptoui float %167 to i32
  %169 = and i32 %168, 15
  %170 = fmul fast float %160, 2.000000e+00
  %171 = fmul fast float %161, 2.000000e+00
  %172 = fmul fast float %162, 2.000000e+00
  %173 = fadd fast float %170, -1.000000e+00
  %174 = fadd fast float %171, -1.000000e+00
  %175 = fadd fast float %172, -1.000000e+00
  %176 = call float @dx.op.dot3.f32(i32 55, float %173, float %174, float %175, float %173, float %174, float %175)  ; Dot3(ax,ay,az,bx,by,bz)
  %177 = call float @dx.op.unary.f32(i32 25, float %176)  ; Rsqrt(value)
  %178 = fmul fast float %177, %173
  %179 = fmul fast float %177, %174
  %180 = fmul fast float %177, %175
  %181 = icmp ne i32 %169, 0
  %182 = icmp eq i32 %169, 7
  %183 = and i32 %168, 14
  %184 = icmp eq i32 %183, 2
  %185 = add nsw i32 %169, -5
  %186 = icmp ult i32 %185, 3
  %187 = or i1 %184, %186
  %188 = icmp eq i32 %169, 9
  %189 = or i1 %188, %187
  %190 = icmp eq i32 %169, 6
  %191 = or i1 %184, %190
  %192 = and i1 %86, %191
  br i1 %192, label %193, label %204

; <label>:193                                     ; preds = %80
  %194 = icmp eq i32 %183, 8
  %195 = and i32 %168, 12
  %196 = icmp eq i32 %195, 4
  %197 = or i1 %196, %184
  %198 = or i1 %194, %197
  %199 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %200 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %199, i32 0, i32 %73, i32 %74, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %201 = extractvalue %dx.types.ResRet.f32 %200, 3
  %202 = select i1 %198, float %201, float 0.000000e+00
  %203 = call float @dx.op.binary.f32(i32 36, float %202, float 0x3FEFAE1480000000)  ; FMin(a,b)
  br label %204

; <label>:204                                     ; preds = %193, %80
  %205 = phi float [ 1.000000e+00, %80 ], [ %203, %193 ]
  %206 = fmul fast float %97, %36
  %207 = fadd fast float %206, %37
  %208 = call float @dx.op.unary.f32(i32 23, float %207)  ; Log(value)
  %209 = fmul fast float %208, %38
  %210 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %209)  ; FMax(a,b)
  %211 = fptoui float %210 to i32
  %212 = add nsw i32 %32, -1
  %213 = call i32 @dx.op.binary.i32(i32 40, i32 %211, i32 %212)  ; UMin(a,b)
  %214 = and i32 %34, 31
  %215 = lshr i32 %68, %214
  %216 = lshr i32 %69, %214
  %217 = mul i32 %213, %31
  %218 = add i32 %217, %216
  %219 = mul i32 %218, %30
  %220 = add i32 %219, %215
  %221 = shl i32 %220, 1
  %222 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %223 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %222, i32 %221, i32 undef)  ; BufferLoad(srv,index,wot)
  %224 = extractvalue %dx.types.ResRet.i32 %223, 0
  %225 = call i32 @dx.op.binary.i32(i32 40, i32 %224, i32 %28)  ; UMin(a,b)
  %226 = or i32 %221, 1
  %227 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %222, i32 %226, i32 undef)  ; BufferLoad(srv,index,wot)
  %228 = extractvalue %dx.types.ResRet.i32 %227, 0
  %229 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %21, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %230 = extractvalue %dx.types.CBufRet.i32 %229, 3
  %231 = call i32 @dx.op.binary.i32(i32 40, i32 %230, i32 %225)  ; UMin(a,b)
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %2345, label %233

; <label>:233                                     ; preds = %204
  br label %234

; <label>:234                                     ; preds = %2337, %233
  %235 = phi i32 [ %2338, %2337 ], [ -1, %233 ]
  %236 = phi i32 [ %2339, %2337 ], [ -1, %233 ]
  %237 = phi i32 [ %2340, %2337 ], [ -1, %233 ]
  %238 = phi i32 [ %2341, %2337 ], [ -1, %233 ]
  %239 = phi i32 [ %2342, %2337 ], [ 0, %233 ]
  %240 = add i32 %239, %228
  %241 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %242 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %241, i32 %240, i32 undef)  ; BufferLoad(srv,index,wot)
  %243 = extractvalue %dx.types.ResRet.i32 %242, 0
  %244 = mul i32 %243, 6
  %245 = add i32 %244, 5
  %246 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 10, i32 1033 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<4xF32>
  %247 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %246, i32 %245, i32 undef)  ; BufferLoad(srv,index,wot)
  %248 = extractvalue %dx.types.ResRet.f32 %247, 2
  %249 = add i32 %244, 3
  %250 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %246, i32 %249, i32 undef)  ; BufferLoad(srv,index,wot)
  %251 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %246, i32 %244, i32 undef)  ; BufferLoad(srv,index,wot)
  %252 = extractvalue %dx.types.ResRet.f32 %251, 0
  %253 = extractvalue %dx.types.ResRet.f32 %251, 1
  %254 = extractvalue %dx.types.ResRet.f32 %251, 2
  %255 = fptosi float %248 to i32
  %256 = icmp eq i32 %255, -1
  br i1 %256, label %2337, label %257

; <label>:257                                     ; preds = %234
  %258 = extractvalue %dx.types.ResRet.f32 %251, 3
  %259 = extractvalue %dx.types.ResRet.f32 %250, 2
  %260 = extractvalue %dx.types.ResRet.f32 %250, 0
  %261 = bitcast float %260 to i32
  %262 = and i32 %261, 65535
  %263 = call float @dx.op.legacyF16ToF32(i32 131, i32 %262)  ; LegacyF16ToF32(value)
  %264 = bitcast float %259 to i32
  %265 = and i32 %264, 65535
  %266 = call float @dx.op.legacyF16ToF32(i32 131, i32 %265)  ; LegacyF16ToF32(value)
  %267 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %268 = extractvalue %dx.types.CBufRet.i32 %267, 2
  %269 = icmp eq i32 %268, 1
  %270 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %271 = extractvalue %dx.types.CBufRet.f32 %270, 0
  %272 = extractvalue %dx.types.CBufRet.f32 %270, 1
  %273 = extractvalue %dx.types.CBufRet.f32 %270, 2
  %274 = fsub fast float %138, %271
  %275 = fsub fast float %139, %272
  %276 = fsub fast float %140, %273
  %277 = fmul fast float %274, %274
  %278 = fmul fast float %275, %275
  %279 = fadd fast float %277, %278
  %280 = fmul fast float %276, %276
  %281 = fadd fast float %279, %280
  %282 = call float @dx.op.unary.f32(i32 24, float %281)  ; Sqrt(value)
  %283 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %284 = extractvalue %dx.types.CBufRet.f32 %283, 0
  %285 = fmul fast float %284, %282
  %286 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 32)  ; CBufferLoadLegacy(handle,regIndex)
  %287 = extractvalue %dx.types.CBufRet.f32 %286, 0
  %288 = fdiv fast float %285, %287
  %289 = call float @dx.op.binary.f32(i32 35, float 0x3F947AE140000000, float %288)  ; FMax(a,b)
  %290 = fsub fast float %252, %138
  %291 = fsub fast float %253, %139
  %292 = fsub fast float %254, %140
  %293 = call float @dx.op.dot3.f32(i32 55, float %290, float %291, float %292, float %290, float %291, float %292)  ; Dot3(ax,ay,az,bx,by,bz)
  %294 = call float @dx.op.unary.f32(i32 25, float %293)  ; Rsqrt(value)
  %295 = fmul fast float %294, %290
  %296 = fmul fast float %294, %291
  %297 = fmul fast float %294, %292
  %298 = fcmp fast oge float %294, %258
  %299 = or i1 %181, %269
  %300 = and i1 %299, %298
  br i1 %300, label %301, label %2271

; <label>:301                                     ; preds = %257
  %302 = extractvalue %dx.types.CBufRet.i32 %267, 3
  %303 = icmp eq i32 %302, 0
  %304 = or i1 %269, %303
  %305 = or i1 %189, %304
  %306 = xor i1 %305, true
  %307 = or i1 %182, %269
  %308 = select i1 %307, float %295, float %178
  %309 = select i1 %307, float %296, float %179
  %310 = select i1 %307, float %297, float %180
  %311 = fmul fast float %308, %289
  %312 = fmul fast float %309, %289
  %313 = fmul fast float %310, %289
  %314 = fadd fast float %311, %138
  %315 = fadd fast float %312, %139
  %316 = fadd fast float %313, %140
  %317 = xor i1 %269, true
  %318 = fcmp fast ogt float %146, 0.000000e+00
  %319 = and i1 %318, %317
  br i1 %319, label %320, label %458

; <label>:320                                     ; preds = %301
  %321 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %322 = extractvalue %dx.types.CBufRet.f32 %321, 0
  %323 = extractvalue %dx.types.CBufRet.f32 %321, 1
  %324 = extractvalue %dx.types.CBufRet.f32 %321, 2
  %325 = extractvalue %dx.types.CBufRet.f32 %321, 3
  %326 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %327 = extractvalue %dx.types.CBufRet.f32 %326, 0
  %328 = extractvalue %dx.types.CBufRet.f32 %326, 1
  %329 = extractvalue %dx.types.CBufRet.f32 %326, 2
  %330 = extractvalue %dx.types.CBufRet.f32 %326, 3
  %331 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %332 = extractvalue %dx.types.CBufRet.f32 %331, 0
  %333 = extractvalue %dx.types.CBufRet.f32 %331, 1
  %334 = extractvalue %dx.types.CBufRet.f32 %331, 2
  %335 = extractvalue %dx.types.CBufRet.f32 %331, 3
  %336 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %337 = extractvalue %dx.types.CBufRet.f32 %336, 0
  %338 = extractvalue %dx.types.CBufRet.f32 %336, 1
  %339 = extractvalue %dx.types.CBufRet.f32 %336, 2
  %340 = extractvalue %dx.types.CBufRet.f32 %336, 3
  %341 = fmul fast float %322, %314
  %342 = call float @dx.op.tertiary.f32(i32 46, float %315, float %327, float %341)  ; FMad(a,b,c)
  %343 = call float @dx.op.tertiary.f32(i32 46, float %316, float %332, float %342)  ; FMad(a,b,c)
  %344 = fadd fast float %343, %337
  %345 = fmul fast float %323, %314
  %346 = call float @dx.op.tertiary.f32(i32 46, float %315, float %328, float %345)  ; FMad(a,b,c)
  %347 = call float @dx.op.tertiary.f32(i32 46, float %316, float %333, float %346)  ; FMad(a,b,c)
  %348 = fadd fast float %347, %338
  %349 = fmul fast float %324, %314
  %350 = call float @dx.op.tertiary.f32(i32 46, float %315, float %329, float %349)  ; FMad(a,b,c)
  %351 = call float @dx.op.tertiary.f32(i32 46, float %316, float %334, float %350)  ; FMad(a,b,c)
  %352 = fadd fast float %351, %339
  %353 = fmul fast float %325, %314
  %354 = call float @dx.op.tertiary.f32(i32 46, float %315, float %330, float %353)  ; FMad(a,b,c)
  %355 = call float @dx.op.tertiary.f32(i32 46, float %316, float %335, float %354)  ; FMad(a,b,c)
  %356 = fadd fast float %355, %340
  %357 = fmul fast float %295, %146
  %358 = fmul fast float %296, %146
  %359 = fmul fast float %297, %146
  %360 = fmul fast float %322, %357
  %361 = call float @dx.op.tertiary.f32(i32 46, float %358, float %327, float %360)  ; FMad(a,b,c)
  %362 = call float @dx.op.tertiary.f32(i32 46, float %359, float %332, float %361)  ; FMad(a,b,c)
  %363 = fmul fast float %323, %357
  %364 = call float @dx.op.tertiary.f32(i32 46, float %358, float %328, float %363)  ; FMad(a,b,c)
  %365 = call float @dx.op.tertiary.f32(i32 46, float %359, float %333, float %364)  ; FMad(a,b,c)
  %366 = fmul fast float %324, %357
  %367 = call float @dx.op.tertiary.f32(i32 46, float %358, float %329, float %366)  ; FMad(a,b,c)
  %368 = call float @dx.op.tertiary.f32(i32 46, float %359, float %334, float %367)  ; FMad(a,b,c)
  %369 = fmul fast float %325, %357
  %370 = call float @dx.op.tertiary.f32(i32 46, float %358, float %330, float %369)  ; FMad(a,b,c)
  %371 = call float @dx.op.tertiary.f32(i32 46, float %359, float %335, float %370)  ; FMad(a,b,c)
  %372 = fadd fast float %362, %344
  %373 = fadd fast float %365, %348
  %374 = fadd fast float %368, %352
  %375 = fadd fast float %371, %356
  %376 = fdiv fast float %344, %356
  %377 = fdiv fast float %348, %356
  %378 = fdiv fast float %352, %356
  %379 = fdiv fast float %372, %375
  %380 = fdiv fast float %373, %375
  %381 = fdiv fast float %374, %375
  %382 = fsub fast float %379, %376
  %383 = fsub fast float %380, %377
  %384 = fsub fast float %381, %378
  %385 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %386 = extractvalue %dx.types.CBufRet.f32 %385, 0
  %387 = extractvalue %dx.types.CBufRet.f32 %385, 1
  %388 = fmul fast float %386, %376
  %389 = fmul fast float %387, %377
  %390 = extractvalue %dx.types.CBufRet.f32 %385, 2
  %391 = extractvalue %dx.types.CBufRet.f32 %385, 3
  %392 = fadd fast float %388, %391
  %393 = fadd fast float %389, %390
  %394 = fmul fast float %386, %382
  %395 = fmul fast float %387, %383
  %396 = fadd fast float %157, -5.000000e-01
  %397 = fmul fast float %396, 2.500000e-01
  %398 = fadd fast float %397, 2.500000e-01
  %399 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %400 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %401 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %399, %dx.types.Handle %400, float %392, float %393, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %402 = extractvalue %dx.types.ResRet.f32 %401, 0
  %403 = fmul fast float %394, %398
  %404 = fmul fast float %395, %398
  %405 = fmul fast float %384, %398
  %406 = fadd fast float %403, %392
  %407 = fadd fast float %404, %393
  %408 = fadd fast float %405, %378
  %409 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %399, %dx.types.Handle %400, float %406, float %407, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %410 = extractvalue %dx.types.ResRet.f32 %409, 0
  %411 = fcmp fast une float %410, %402
  %412 = fcmp fast olt float %408, %410
  %413 = and i1 %411, %412
  br i1 %413, label %453, label %414

; <label>:414                                     ; preds = %320
  %415 = fadd fast float %397, 5.000000e-01
  %416 = fmul fast float %394, %415
  %417 = fmul fast float %395, %415
  %418 = fmul fast float %384, %415
  %419 = fadd fast float %416, %392
  %420 = fadd fast float %417, %393
  %421 = fadd fast float %418, %378
  %422 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %399, %dx.types.Handle %400, float %419, float %420, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %423 = extractvalue %dx.types.ResRet.f32 %422, 0
  %424 = fcmp fast une float %423, %402
  %425 = fcmp fast olt float %421, %423
  %426 = and i1 %424, %425
  br i1 %426, label %453, label %427

; <label>:427                                     ; preds = %414
  %428 = fadd fast float %397, 7.500000e-01
  %429 = fmul fast float %394, %428
  %430 = fmul fast float %395, %428
  %431 = fmul fast float %384, %428
  %432 = fadd fast float %429, %392
  %433 = fadd fast float %430, %393
  %434 = fadd fast float %431, %378
  %435 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %399, %dx.types.Handle %400, float %432, float %433, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %436 = extractvalue %dx.types.ResRet.f32 %435, 0
  %437 = fcmp fast une float %436, %402
  %438 = fcmp fast olt float %434, %436
  %439 = and i1 %437, %438
  br i1 %439, label %453, label %440

; <label>:440                                     ; preds = %427
  %441 = fadd fast float %397, 1.000000e+00
  %442 = fmul fast float %394, %441
  %443 = fmul fast float %395, %441
  %444 = fmul fast float %384, %441
  %445 = fadd fast float %442, %392
  %446 = fadd fast float %443, %393
  %447 = fadd fast float %444, %378
  %448 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %399, %dx.types.Handle %400, float %445, float %446, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %449 = extractvalue %dx.types.ResRet.f32 %448, 0
  %450 = fcmp fast une float %449, %402
  %451 = fcmp fast olt float %447, %449
  %452 = and i1 %450, %451
  br i1 %452, label %453, label %458

; <label>:453                                     ; preds = %440, %427, %414, %320
  %454 = phi float [ %398, %320 ], [ %415, %414 ], [ %428, %427 ], [ %441, %440 ]
  %455 = fadd fast float %454, -3.750000e-01
  %456 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %455)  ; FMax(a,b)
  %457 = fmul fast float %456, %146
  br label %458

; <label>:458                                     ; preds = %453, %440, %301
  %459 = phi float [ %146, %301 ], [ %457, %453 ], [ %146, %440 ]
  %460 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %461 = extractvalue %dx.types.CBufRet.i32 %460, 1
  %462 = icmp sgt i32 %461, 0
  br i1 %462, label %463, label %1582

; <label>:463                                     ; preds = %458
  %464 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %465 = extractvalue %dx.types.CBufRet.i32 %464, 0
  %466 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %467 = extractvalue %dx.types.CBufRet.f32 %466, 3
  %468 = extractvalue %dx.types.CBufRet.f32 %466, 1
  %469 = extractvalue %dx.types.CBufRet.f32 %466, 0
  %470 = fcmp fast ogt float %263, -2.000000e+00
  %471 = fsub fast float %252, %314
  %472 = fsub fast float %253, %315
  %473 = fsub fast float %254, %316
  %474 = call float @dx.op.dot3.f32(i32 55, float %471, float %472, float %473, float %471, float %472, float %473)  ; Dot3(ax,ay,az,bx,by,bz)
  %475 = fadd fast float %474, 1.000000e+00
  %476 = fdiv fast float 1.000000e+00, %475
  %477 = call float @dx.op.unary.f32(i32 25, float %474)  ; Rsqrt(value)
  %478 = fmul fast float %477, %471
  %479 = fmul fast float %477, %472
  %480 = fmul fast float %477, %473
  %481 = fmul fast float %477, %266
  %482 = fmul fast float %266, %266
  %483 = fmul fast float %482, %476
  %484 = call float @dx.op.unary.f32(i32 7, float %483)  ; Saturate(value)
  %485 = call float @dx.op.unary.f32(i32 24, float %484)  ; Sqrt(value)
  %486 = call float @dx.op.dot3.f32(i32 55, float %308, float %309, float %310, float %478, float %479, float %480)  ; Dot3(ax,ay,az,bx,by,bz)
  %487 = fsub fast float -0.000000e+00, %485
  %488 = fcmp fast olt float %486, %487
  %489 = and i1 %488, %306
  br i1 %489, label %2253, label %490

; <label>:490                                     ; preds = %463
  %491 = and i32 %73, 65535
  %492 = shl nuw nsw i32 %491, 8
  %493 = or i32 %492, %491
  %494 = and i32 %493, 16711935
  %495 = shl nuw nsw i32 %494, 4
  %496 = or i32 %495, %494
  %497 = and i32 %496, 252645135
  %498 = shl nuw nsw i32 %497, 2
  %499 = or i32 %498, %497
  %500 = and i32 %499, 858993459
  %501 = shl nuw nsw i32 %500, 1
  %502 = or i32 %501, %500
  %503 = and i32 %502, 1431655765
  %504 = and i32 %74, 65535
  %505 = shl nuw nsw i32 %504, 8
  %506 = or i32 %505, %504
  %507 = and i32 %506, 16711935
  %508 = shl nuw nsw i32 %507, 4
  %509 = or i32 %508, %507
  %510 = and i32 %509, 252645135
  %511 = shl nuw nsw i32 %510, 2
  %512 = or i32 %511, %510
  %513 = and i32 %512, 858993459
  %514 = shl nuw nsw i32 %513, 1
  %515 = or i32 %514, %513
  %516 = shl nuw i32 %515, 1
  %517 = and i32 %516, -1431655766
  %518 = or i32 %517, %503
  br i1 %470, label %543, label %519

; <label>:519                                     ; preds = %490
  %520 = fsub fast float -0.000000e+00, %471
  %521 = fsub fast float -0.000000e+00, %472
  %522 = fsub fast float -0.000000e+00, %473
  %523 = call float @dx.op.unary.f32(i32 6, float %520)  ; FAbs(value)
  %524 = call float @dx.op.unary.f32(i32 6, float %521)  ; FAbs(value)
  %525 = fcmp fast ult float %523, %524
  %526 = call float @dx.op.unary.f32(i32 6, float %522)  ; FAbs(value)
  %527 = fcmp fast ult float %523, %526
  %528 = or i1 %525, %527
  br i1 %528, label %532, label %529

; <label>:529                                     ; preds = %519
  %530 = fcmp uge float %471, -0.000000e+00
  %531 = zext i1 %530 to i32
  br label %540

; <label>:532                                     ; preds = %519
  %533 = fcmp fast ogt float %524, %526
  br i1 %533, label %534, label %537

; <label>:534                                     ; preds = %532
  %535 = fcmp olt float %472, -0.000000e+00
  %536 = select i1 %535, i32 2, i32 3
  br label %540

; <label>:537                                     ; preds = %532
  %538 = fcmp olt float %473, -0.000000e+00
  %539 = select i1 %538, i32 4, i32 5
  br label %540

; <label>:540                                     ; preds = %537, %534, %529
  %541 = phi i32 [ %531, %529 ], [ %536, %534 ], [ %539, %537 ]
  %542 = add i32 %541, %255
  br label %543

; <label>:543                                     ; preds = %540, %490
  %544 = phi i32 [ %542, %540 ], [ %255, %490 ]
  %545 = mul i32 %544, 336
  %546 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %547 = add i32 %545, 112
  %548 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %546, i32 %547, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %549 = extractvalue %dx.types.ResRet.i32 %548, 2
  %550 = bitcast i32 %549 to float
  %551 = add i32 %545, 128
  %552 = add i32 %545, 144
  %553 = add i32 %545, 160
  %554 = add i32 %545, 176
  %555 = add i32 %545, 192
  %556 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %546, i32 %555, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %557 = extractvalue %dx.types.ResRet.i32 %556, 0
  %558 = extractvalue %dx.types.ResRet.i32 %556, 1
  %559 = extractvalue %dx.types.ResRet.i32 %556, 2
  %560 = bitcast i32 %557 to float
  %561 = bitcast i32 %558 to float
  %562 = bitcast i32 %559 to float
  %563 = add i32 %545, 208
  %564 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %546, i32 %563, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %565 = extractvalue %dx.types.ResRet.i32 %564, 0
  %566 = extractvalue %dx.types.ResRet.i32 %564, 1
  %567 = extractvalue %dx.types.ResRet.i32 %564, 2
  %568 = bitcast i32 %565 to float
  %569 = bitcast i32 %566 to float
  %570 = bitcast i32 %567 to float
  %571 = add i32 %545, 224
  %572 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %546, i32 %571, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %573 = extractvalue %dx.types.ResRet.i32 %572, 0
  %574 = extractvalue %dx.types.ResRet.i32 %572, 1
  %575 = extractvalue %dx.types.ResRet.i32 %572, 2
  %576 = bitcast i32 %573 to float
  %577 = bitcast i32 %574 to float
  %578 = bitcast i32 %575 to float
  %579 = add i32 %545, 240
  %580 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %546, i32 %579, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %581 = extractvalue %dx.types.ResRet.i32 %580, 0
  %582 = extractvalue %dx.types.ResRet.i32 %580, 1
  %583 = extractvalue %dx.types.ResRet.i32 %580, 2
  %584 = bitcast i32 %581 to float
  %585 = bitcast i32 %582 to float
  %586 = bitcast i32 %583 to float
  %587 = add i32 %545, 256
  %588 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %546, i32 %587, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %589 = extractvalue %dx.types.ResRet.i32 %588, 0
  %590 = extractvalue %dx.types.ResRet.i32 %588, 1
  %591 = extractvalue %dx.types.ResRet.i32 %588, 2
  %592 = bitcast i32 %589 to float
  %593 = bitcast i32 %590 to float
  %594 = bitcast i32 %591 to float
  %595 = add i32 %545, 272
  %596 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %546, i32 %595, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %597 = extractvalue %dx.types.ResRet.i32 %596, 0
  %598 = extractvalue %dx.types.ResRet.i32 %596, 1
  %599 = extractvalue %dx.types.ResRet.i32 %596, 2
  %600 = bitcast i32 %597 to float
  %601 = bitcast i32 %598 to float
  %602 = bitcast i32 %599 to float
  %603 = add i32 %545, 300
  %604 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %546, i32 %603, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %605 = extractvalue %dx.types.ResRet.i32 %604, 0
  %606 = bitcast i32 %605 to float
  %607 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %608 = extractvalue %dx.types.CBufRet.f32 %607, 0
  %609 = extractvalue %dx.types.CBufRet.f32 %607, 1
  %610 = extractvalue %dx.types.CBufRet.f32 %607, 2
  %611 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %612 = extractvalue %dx.types.CBufRet.f32 %611, 0
  %613 = extractvalue %dx.types.CBufRet.f32 %611, 1
  %614 = extractvalue %dx.types.CBufRet.f32 %611, 2
  %615 = fadd fast float %608, %592
  %616 = fadd fast float %609, %593
  %617 = fadd fast float %610, %594
  %618 = fmul fast float %615, 2.097152e+06
  %619 = fmul fast float %616, 2.097152e+06
  %620 = fmul fast float %617, 2.097152e+06
  %621 = fadd fast float %600, %314
  %622 = fsub fast float %621, %612
  %623 = fadd fast float %622, %618
  %624 = fadd fast float %601, %315
  %625 = fsub fast float %624, %613
  %626 = fadd fast float %625, %619
  %627 = fadd fast float %602, %316
  %628 = fsub fast float %627, %614
  %629 = fadd fast float %628, %620
  %630 = call float @dx.op.dot3.f32(i32 55, float %308, float %309, float %310, float %623, float %626, float %629)  ; Dot3(ax,ay,az,bx,by,bz)
  %631 = fsub fast float -0.000000e+00, %630
  %632 = fmul fast float %560, %308
  %633 = call float @dx.op.tertiary.f32(i32 46, float %309, float %568, float %632)  ; FMad(a,b,c)
  %634 = call float @dx.op.tertiary.f32(i32 46, float %310, float %576, float %633)  ; FMad(a,b,c)
  %635 = call float @dx.op.tertiary.f32(i32 46, float %631, float %584, float %634)  ; FMad(a,b,c)
  %636 = fmul fast float %561, %308
  %637 = call float @dx.op.tertiary.f32(i32 46, float %309, float %569, float %636)  ; FMad(a,b,c)
  %638 = call float @dx.op.tertiary.f32(i32 46, float %310, float %577, float %637)  ; FMad(a,b,c)
  %639 = call float @dx.op.tertiary.f32(i32 46, float %631, float %585, float %638)  ; FMad(a,b,c)
  %640 = fmul fast float %562, %308
  %641 = call float @dx.op.tertiary.f32(i32 46, float %309, float %570, float %640)  ; FMad(a,b,c)
  %642 = call float @dx.op.tertiary.f32(i32 46, float %310, float %578, float %641)  ; FMad(a,b,c)
  %643 = call float @dx.op.tertiary.f32(i32 46, float %631, float %586, float %642)  ; FMad(a,b,c)
  %644 = fsub fast float -0.000000e+00, %635
  %645 = fsub fast float -0.000000e+00, %639
  %646 = fdiv fast float %644, %643
  %647 = fdiv fast float %645, %643
  %648 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 129)  ; CBufferLoadLegacy(handle,regIndex)
  %649 = extractvalue %dx.types.CBufRet.f32 %648, 0
  %650 = extractvalue %dx.types.CBufRet.f32 %648, 1
  %651 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %652 = extractvalue %dx.types.CBufRet.f32 %651, 1
  %653 = fmul fast float %287, %649
  %654 = fmul fast float %652, %650
  %655 = fdiv fast float 1.000000e+00, %653
  %656 = fdiv fast float 1.000000e+00, %654
  %657 = call float @dx.op.binary.f32(i32 36, float %655, float %656)  ; FMin(a,b)
  %658 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %659 = extractvalue %dx.types.CBufRet.f32 %658, 3
  %660 = fmul fast float %659, %97
  %661 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %662 = extractvalue %dx.types.CBufRet.f32 %661, 3
  %663 = fadd fast float %660, %662
  %664 = call float @dx.op.unary.f32(i32 21, float %606)  ; Exp(value)
  %665 = fmul fast float %664, %657
  %666 = fmul fast float %665, %663
  %667 = call float @dx.op.binary.f32(i32 35, float 0x3FB99999A0000000, float %666)  ; FMax(a,b)
  %668 = fdiv fast float %550, %474
  %669 = call float @dx.op.unary.f32(i32 6, float %668)  ; FAbs(value)
  %670 = fmul fast float %667, %468
  %671 = fmul fast float %670, %467
  %672 = fmul fast float %667, %467
  %673 = fmul fast float %672, %669
  %674 = fcmp fast oge float %480, 0.000000e+00
  %675 = select i1 %674, float 1.000000e+00, float -1.000000e+00
  %676 = fadd fast float %675, %480
  %677 = fdiv fast float 1.000000e+00, %676
  %678 = fsub fast float -0.000000e+00, %677
  %679 = fmul fast float %478, %479
  %680 = fmul fast float %679, %678
  %681 = fmul fast float %478, %478
  %682 = fmul fast float %681, %675
  %683 = fmul fast float %682, %678
  %684 = fadd fast float %683, 1.000000e+00
  %685 = fmul fast float %680, %675
  %686 = fmul fast float %478, %675
  %687 = fsub fast float -0.000000e+00, %686
  %688 = fmul fast float %479, %479
  %689 = fmul fast float %688, %678
  %690 = fadd fast float %689, %675
  %691 = fsub fast float -0.000000e+00, %479
  %692 = fmul fast float %684, %308
  %693 = call float @dx.op.tertiary.f32(i32 46, float %685, float %309, float %692)  ; FMad(a,b,c)
  %694 = call float @dx.op.tertiary.f32(i32 46, float %687, float %310, float %693)  ; FMad(a,b,c)
  %695 = fmul fast float %680, %308
  %696 = call float @dx.op.tertiary.f32(i32 46, float %690, float %309, float %695)  ; FMad(a,b,c)
  %697 = call float @dx.op.tertiary.f32(i32 46, float %691, float %310, float %696)  ; FMad(a,b,c)
  %698 = fmul fast float %478, %308
  %699 = call float @dx.op.tertiary.f32(i32 46, float %479, float %309, float %698)  ; FMad(a,b,c)
  %700 = call float @dx.op.tertiary.f32(i32 46, float %480, float %310, float %699)  ; FMad(a,b,c)
  %701 = fsub fast float -0.000000e+00, %694
  %702 = fsub fast float -0.000000e+00, %697
  %703 = fdiv fast float %701, %700
  %704 = fdiv fast float %702, %700
  br label %705

; <label>:705                                     ; preds = %1568, %543
  %706 = phi i32 [ %1569, %1568 ], [ 0, %543 ]
  %707 = phi i32 [ %1556, %1568 ], [ 0, %543 ]
  %708 = phi float [ %1557, %1568 ], [ 0.000000e+00, %543 ]
  %709 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %22, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %710 = extractvalue %dx.types.CBufRet.i32 %709, 1
  %711 = shl i32 %710, 16
  %712 = add i32 %711, %518
  %713 = mul i32 %712, %461
  %714 = add i32 %713, %706
  %715 = call i32 @dx.op.unary.i32(i32 30, i32 %714)  ; Bfrev(value)
  %716 = add i32 %715, 1216234700
  %717 = mul i32 %716, -1676577210
  %718 = xor i32 %717, %716
  %719 = mul i32 %718, -529506958
  %720 = xor i32 %719, %718
  %721 = call i32 @dx.op.unary.i32(i32 30, i32 %720)  ; Bfrev(value)
  %722 = and i32 %721, 255
  %723 = and i32 %721, 1
  %724 = lshr i32 %721, 1
  %725 = and i32 %724, 1
  %726 = sub nsw i32 0, %725
  %727 = and i32 %726, 3
  %728 = xor i32 %727, %723
  %729 = lshr i32 %721, 2
  %730 = and i32 %729, 1
  %731 = sub nsw i32 0, %730
  %732 = and i32 %731, 5
  %733 = xor i32 %728, %732
  %734 = and i32 %731, 6
  %735 = shl nuw nsw i32 %730, 2
  %736 = xor i32 %728, %734
  %737 = or i32 %728, %735
  %738 = lshr i32 %721, 3
  %739 = and i32 %738, 1
  %740 = sub nsw i32 0, %739
  %741 = and i32 %740, 15
  %742 = xor i32 %733, %741
  %743 = and i32 %740, 9
  %744 = and i32 %740, 10
  %745 = xor i32 %736, %743
  %746 = lshr i32 %721, 4
  %747 = and i32 %746, 1
  %748 = sub nsw i32 0, %747
  %749 = and i32 %748, 17
  %750 = xor i32 %742, %749
  %751 = and i32 %748, 23
  %752 = and i32 %748, 31
  %753 = xor i32 %745, %751
  %754 = lshr i32 %721, 5
  %755 = and i32 %754, 1
  %756 = sub nsw i32 0, %755
  %757 = and i32 %756, 51
  %758 = xor i32 %750, %757
  %759 = and i32 %756, 58
  %760 = and i32 %756, 46
  %761 = xor i32 %753, %759
  %762 = lshr i32 %721, 6
  %763 = and i32 %762, 1
  %764 = sub nsw i32 0, %763
  %765 = and i32 %764, 85
  %766 = xor i32 %758, %765
  %767 = and i32 %764, 113
  %768 = and i32 %764, 69
  %769 = xor i32 %761, %767
  %770 = lshr i32 %721, 7
  %771 = and i32 %770, 1
  %772 = sub nsw i32 0, %771
  %773 = and i32 %772, 255
  %774 = xor i32 %766, %773
  %775 = and i32 %772, 163
  %776 = and i32 %772, 201
  %777 = xor i32 %769, %775
  %778 = xor i32 %752, %744
  %779 = xor i32 %778, %760
  %780 = xor i32 %779, %768
  %781 = xor i32 %780, %776
  %782 = xor i32 %781, %737
  %783 = add nsw i32 %722, -1862497895
  %784 = mul i32 %783, -1676577210
  %785 = xor i32 %784, %783
  %786 = mul i32 %785, -529506958
  %787 = xor i32 %786, %785
  %788 = call i32 @dx.op.unary.i32(i32 30, i32 %787)  ; Bfrev(value)
  %789 = add i32 %774, -646066581
  %790 = mul i32 %789, -1676577210
  %791 = xor i32 %790, %789
  %792 = mul i32 %791, -529506958
  %793 = xor i32 %792, %791
  %794 = call i32 @dx.op.unary.i32(i32 30, i32 %793)  ; Bfrev(value)
  %795 = add i32 %777, 570102578
  %796 = mul i32 %795, -1676577210
  %797 = xor i32 %796, %795
  %798 = add nuw i32 %782, 1786441729
  %799 = mul i32 %798, -1676577210
  %800 = xor i32 %799, %798
  %801 = lshr i32 %788, 8
  %802 = lshr i32 %794, 8
  %803 = uitofp i32 %801 to float
  %804 = uitofp i32 %802 to float
  %805 = fmul fast float %803, 0x3E76A09E60000000
  %806 = fmul fast float %804, 0x3E76A09E60000000
  %807 = fadd fast float %805, 0xBFE6A09E60000000
  %808 = fadd fast float %806, 0xBFE6A09E60000000
  %809 = fmul fast float %807, %807
  %810 = fmul fast float %808, %808
  %811 = call float @dx.op.binary.f32(i32 35, float %809, float %810)  ; FMax(a,b)
  %812 = fmul fast float %811, 2.000000e+00
  %813 = call float @dx.op.binary.f32(i32 36, float %809, float %810)  ; FMin(a,b)
  %814 = fsub fast float %812, %813
  %815 = call float @dx.op.unary.f32(i32 24, float %814)  ; Sqrt(value)
  %816 = fcmp fast ogt float %809, %810
  %817 = fsub fast float -0.000000e+00, %815
  %818 = fcmp fast ogt float %807, 0.000000e+00
  %819 = select i1 %818, float %815, float %817
  %820 = fcmp fast ogt float %808, 0.000000e+00
  %821 = select i1 %820, float %815, float %817
  %822 = select i1 %816, float %819, float %807
  %823 = select i1 %816, float %808, float %821
  %824 = fmul fast float %822, %481
  %825 = fmul fast float %823, %481
  %826 = call float @dx.op.dot2.f32(i32 54, float %824, float %825, float %824, float %825)  ; Dot2(ax,ay,bx,by)
  %827 = call float @dx.op.unary.f32(i32 24, float %826)  ; Sqrt(value)
  %828 = fsub fast float 1.000000e+00, %826
  %829 = call float @dx.op.unary.f32(i32 24, float %828)  ; Sqrt(value)
  %830 = fmul fast float %824, %684
  %831 = call float @dx.op.tertiary.f32(i32 46, float %825, float %680, float %830)  ; FMad(a,b,c)
  %832 = call float @dx.op.tertiary.f32(i32 46, float %829, float %478, float %831)  ; FMad(a,b,c)
  %833 = fmul fast float %824, %685
  %834 = call float @dx.op.tertiary.f32(i32 46, float %825, float %690, float %833)  ; FMad(a,b,c)
  %835 = call float @dx.op.tertiary.f32(i32 46, float %829, float %479, float %834)  ; FMad(a,b,c)
  %836 = fmul fast float %824, %687
  %837 = call float @dx.op.tertiary.f32(i32 46, float %825, float %691, float %836)  ; FMad(a,b,c)
  %838 = call float @dx.op.tertiary.f32(i32 46, float %829, float %480, float %837)  ; FMad(a,b,c)
  %839 = fcmp fast ogt float %670, 0.000000e+00
  br i1 %839, label %840, label %873

; <label>:840                                     ; preds = %705
  %841 = mul i32 %800, -529506958
  %842 = xor i32 %841, %800
  %843 = call i32 @dx.op.unary.i32(i32 30, i32 %842)  ; Bfrev(value)
  %844 = lshr i32 %843, 8
  %845 = uitofp i32 %844 to float
  %846 = fmul fast float %845, 0x3E70000000000000
  %847 = mul i32 %797, -529506958
  %848 = xor i32 %847, %797
  %849 = call i32 @dx.op.unary.i32(i32 30, i32 %848)  ; Bfrev(value)
  %850 = lshr i32 %849, 8
  %851 = uitofp i32 %850 to float
  %852 = fmul fast float %851, 0x3E70000000000000
  %853 = fadd fast float %852, -5.000000e-01
  %854 = fadd fast float %846, -5.000000e-01
  %855 = fmul fast float %853, %670
  %856 = fmul fast float %854, %670
  %857 = call float @dx.op.dot2.f32(i32 54, float %703, float %704, float %855, float %856)  ; Dot2(ax,ay,bx,by)
  %858 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %857)  ; FMax(a,b)
  %859 = fmul fast float %858, 2.000000e+00
  %860 = call float @dx.op.binary.f32(i32 36, float %671, float %859)  ; FMin(a,b)
  %861 = fmul fast float %855, %684
  %862 = call float @dx.op.tertiary.f32(i32 46, float %856, float %680, float %861)  ; FMad(a,b,c)
  %863 = call float @dx.op.tertiary.f32(i32 46, float %860, float %478, float %862)  ; FMad(a,b,c)
  %864 = fmul fast float %855, %685
  %865 = call float @dx.op.tertiary.f32(i32 46, float %856, float %690, float %864)  ; FMad(a,b,c)
  %866 = call float @dx.op.tertiary.f32(i32 46, float %860, float %479, float %865)  ; FMad(a,b,c)
  %867 = fmul fast float %855, %687
  %868 = call float @dx.op.tertiary.f32(i32 46, float %856, float %691, float %867)  ; FMad(a,b,c)
  %869 = call float @dx.op.tertiary.f32(i32 46, float %860, float %480, float %868)  ; FMad(a,b,c)
  %870 = fadd fast float %863, %623
  %871 = fadd fast float %866, %626
  %872 = fadd fast float %869, %629
  br label %873

; <label>:873                                     ; preds = %840, %705
  %874 = phi float [ %870, %840 ], [ %623, %705 ]
  %875 = phi float [ %871, %840 ], [ %626, %705 ]
  %876 = phi float [ %872, %840 ], [ %629, %705 ]
  %877 = fmul fast float %827, %469
  %878 = fadd fast float %829, %877
  %879 = fdiv fast float 1.500000e+00, %878
  %880 = call float @dx.op.unary.f32(i32 7, float %879)  ; Saturate(value)
  %881 = fmul fast float %474, 7.500000e-01
  %882 = fmul fast float %881, %477
  %883 = fmul fast float %882, %880
  %884 = fadd fast float %883, 0xBEB0C6F7A0000000
  %885 = call float @dx.op.binary.f32(i32 36, float %459, float %884)  ; FMin(a,b)
  %886 = fmul fast float %885, %832
  %887 = fmul fast float %885, %835
  %888 = fmul fast float %885, %838
  %889 = fadd fast float %886, %874
  %890 = fadd fast float %887, %875
  %891 = fadd fast float %888, %876
  %892 = fmul fast float %883, %832
  %893 = fmul fast float %883, %835
  %894 = fmul fast float %883, %838
  %895 = fadd fast float %892, %874
  %896 = fadd fast float %893, %875
  %897 = fadd fast float %894, %876
  %898 = fcmp fast ogt float %673, 0.000000e+00
  br i1 %898, label %899, label %980

; <label>:899                                     ; preds = %873
  %900 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %901 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %900, i32 %551, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %902 = extractvalue %dx.types.ResRet.i32 %901, 0
  %903 = extractvalue %dx.types.ResRet.i32 %901, 1
  %904 = extractvalue %dx.types.ResRet.i32 %901, 3
  %905 = bitcast i32 %902 to float
  %906 = bitcast i32 %903 to float
  %907 = bitcast i32 %904 to float
  %908 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %900, i32 %552, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %909 = extractvalue %dx.types.ResRet.i32 %908, 0
  %910 = extractvalue %dx.types.ResRet.i32 %908, 1
  %911 = extractvalue %dx.types.ResRet.i32 %908, 3
  %912 = bitcast i32 %909 to float
  %913 = bitcast i32 %910 to float
  %914 = bitcast i32 %911 to float
  %915 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %900, i32 %553, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %916 = extractvalue %dx.types.ResRet.i32 %915, 0
  %917 = extractvalue %dx.types.ResRet.i32 %915, 1
  %918 = extractvalue %dx.types.ResRet.i32 %915, 3
  %919 = bitcast i32 %916 to float
  %920 = bitcast i32 %917 to float
  %921 = bitcast i32 %918 to float
  %922 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %900, i32 %554, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %923 = extractvalue %dx.types.ResRet.i32 %922, 0
  %924 = extractvalue %dx.types.ResRet.i32 %922, 1
  %925 = extractvalue %dx.types.ResRet.i32 %922, 3
  %926 = bitcast i32 %923 to float
  %927 = bitcast i32 %924 to float
  %928 = bitcast i32 %925 to float
  %929 = fmul fast float %905, %889
  %930 = call float @dx.op.tertiary.f32(i32 46, float %890, float %912, float %929)  ; FMad(a,b,c)
  %931 = call float @dx.op.tertiary.f32(i32 46, float %891, float %919, float %930)  ; FMad(a,b,c)
  %932 = fadd fast float %931, %926
  %933 = fmul fast float %906, %889
  %934 = call float @dx.op.tertiary.f32(i32 46, float %890, float %913, float %933)  ; FMad(a,b,c)
  %935 = call float @dx.op.tertiary.f32(i32 46, float %891, float %920, float %934)  ; FMad(a,b,c)
  %936 = fadd fast float %935, %927
  %937 = fmul fast float %907, %889
  %938 = call float @dx.op.tertiary.f32(i32 46, float %890, float %914, float %937)  ; FMad(a,b,c)
  %939 = call float @dx.op.tertiary.f32(i32 46, float %891, float %921, float %938)  ; FMad(a,b,c)
  %940 = fadd fast float %939, %928
  %941 = fdiv fast float %932, %940
  %942 = fdiv fast float %936, %940
  %943 = icmp ult i32 %544, 8192
  br i1 %943, label %954, label %944

; <label>:944                                     ; preds = %899
  %945 = fmul fast float %942, 1.280000e+02
  %946 = fptoui float %945 to i32
  %947 = fmul fast float %941, 1.280000e+02
  %948 = fptoui float %947 to i32
  %949 = mul i32 %544, 21845
  %950 = shl i32 %946, 7
  %951 = add i32 %949, -178946048
  %952 = add i32 %951, %948
  %953 = add i32 %952, %950
  br label %954

; <label>:954                                     ; preds = %944, %899
  %955 = phi i32 [ %953, %944 ], [ %544, %899 ]
  %956 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %957 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %956, i32 %955, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %958 = extractvalue %dx.types.ResRet.i32 %957, 0
  %959 = lshr i32 %958, 20
  %960 = and i32 %959, 31
  %961 = lshr i32 16384, %960
  %962 = uitofp i32 %961 to float
  %963 = select i1 %943, float 1.280000e+02, float %962
  %964 = fmul fast float %963, %941
  %965 = fmul fast float %963, %942
  %966 = fptoui float %964 to i32
  %967 = fptoui float %965 to i32
  %968 = uitofp i32 %966 to float
  %969 = uitofp i32 %967 to float
  %970 = fsub fast float 5.000000e-01, %964
  %971 = fadd fast float %970, %968
  %972 = fsub fast float 5.000000e-01, %965
  %973 = fadd fast float %972, %969
  %974 = fdiv fast float %971, %963
  %975 = fdiv fast float %973, %963
  %976 = call float @dx.op.dot2.f32(i32 54, float %646, float %647, float %974, float %975)  ; Dot2(ax,ay,bx,by)
  %977 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %976)  ; FMax(a,b)
  %978 = fmul fast float %977, 2.000000e+00
  %979 = call float @dx.op.binary.f32(i32 36, float %673, float %978)  ; FMin(a,b)
  br label %980

; <label>:980                                     ; preds = %954, %873
  %981 = phi float [ %979, %954 ], [ 0.000000e+00, %873 ]
  br i1 %470, label %982, label %1107

; <label>:982                                     ; preds = %980
  %983 = mul i32 %255, 336
  %984 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %985 = add i32 %983, 128
  %986 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %984, i32 %985, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %987 = extractvalue %dx.types.ResRet.i32 %986, 0
  %988 = extractvalue %dx.types.ResRet.i32 %986, 1
  %989 = extractvalue %dx.types.ResRet.i32 %986, 2
  %990 = extractvalue %dx.types.ResRet.i32 %986, 3
  %991 = bitcast i32 %987 to float
  %992 = bitcast i32 %988 to float
  %993 = bitcast i32 %989 to float
  %994 = bitcast i32 %990 to float
  %995 = add i32 %983, 144
  %996 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %984, i32 %995, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %997 = extractvalue %dx.types.ResRet.i32 %996, 0
  %998 = extractvalue %dx.types.ResRet.i32 %996, 1
  %999 = extractvalue %dx.types.ResRet.i32 %996, 2
  %1000 = extractvalue %dx.types.ResRet.i32 %996, 3
  %1001 = bitcast i32 %997 to float
  %1002 = bitcast i32 %998 to float
  %1003 = bitcast i32 %999 to float
  %1004 = bitcast i32 %1000 to float
  %1005 = add i32 %983, 160
  %1006 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %984, i32 %1005, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1007 = extractvalue %dx.types.ResRet.i32 %1006, 0
  %1008 = extractvalue %dx.types.ResRet.i32 %1006, 1
  %1009 = extractvalue %dx.types.ResRet.i32 %1006, 2
  %1010 = extractvalue %dx.types.ResRet.i32 %1006, 3
  %1011 = bitcast i32 %1007 to float
  %1012 = bitcast i32 %1008 to float
  %1013 = bitcast i32 %1009 to float
  %1014 = bitcast i32 %1010 to float
  %1015 = add i32 %983, 176
  %1016 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %984, i32 %1015, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1017 = extractvalue %dx.types.ResRet.i32 %1016, 0
  %1018 = extractvalue %dx.types.ResRet.i32 %1016, 1
  %1019 = extractvalue %dx.types.ResRet.i32 %1016, 2
  %1020 = extractvalue %dx.types.ResRet.i32 %1016, 3
  %1021 = bitcast i32 %1017 to float
  %1022 = bitcast i32 %1018 to float
  %1023 = bitcast i32 %1019 to float
  %1024 = bitcast i32 %1020 to float
  %1025 = fmul fast float %991, %889
  %1026 = call float @dx.op.tertiary.f32(i32 46, float %890, float %1001, float %1025)  ; FMad(a,b,c)
  %1027 = call float @dx.op.tertiary.f32(i32 46, float %891, float %1011, float %1026)  ; FMad(a,b,c)
  %1028 = fadd fast float %1027, %1021
  %1029 = fmul fast float %992, %889
  %1030 = call float @dx.op.tertiary.f32(i32 46, float %890, float %1002, float %1029)  ; FMad(a,b,c)
  %1031 = call float @dx.op.tertiary.f32(i32 46, float %891, float %1012, float %1030)  ; FMad(a,b,c)
  %1032 = fadd fast float %1031, %1022
  %1033 = fmul fast float %993, %889
  %1034 = call float @dx.op.tertiary.f32(i32 46, float %890, float %1003, float %1033)  ; FMad(a,b,c)
  %1035 = call float @dx.op.tertiary.f32(i32 46, float %891, float %1013, float %1034)  ; FMad(a,b,c)
  %1036 = fadd fast float %1035, %1023
  %1037 = fmul fast float %994, %889
  %1038 = call float @dx.op.tertiary.f32(i32 46, float %890, float %1004, float %1037)  ; FMad(a,b,c)
  %1039 = call float @dx.op.tertiary.f32(i32 46, float %891, float %1014, float %1038)  ; FMad(a,b,c)
  %1040 = fadd fast float %1039, %1024
  %1041 = fdiv fast float %1028, %1040
  %1042 = fdiv fast float %1032, %1040
  %1043 = fdiv fast float %1036, %1040
  %1044 = call float @dx.op.unary.f32(i32 7, float %1041)  ; Saturate(value)
  %1045 = call float @dx.op.unary.f32(i32 7, float %1042)  ; Saturate(value)
  %1046 = fadd fast float %1043, %981
  %1047 = call float @dx.op.unary.f32(i32 7, float %1044)  ; Saturate(value)
  %1048 = call float @dx.op.unary.f32(i32 7, float %1045)  ; Saturate(value)
  %1049 = fcmp fast oeq float %1044, %1047
  %1050 = fcmp fast oeq float %1045, %1048
  %1051 = and i1 %1049, %1050
  br i1 %1051, label %1052, label %1098

; <label>:1052                                    ; preds = %982
  %1053 = icmp ult i32 %255, 8192
  br i1 %1053, label %1064, label %1054

; <label>:1054                                    ; preds = %1052
  %1055 = fmul fast float %1045, 1.280000e+02
  %1056 = fptoui float %1055 to i32
  %1057 = fmul fast float %1044, 1.280000e+02
  %1058 = fptoui float %1057 to i32
  %1059 = mul i32 %255, 21845
  %1060 = shl i32 %1056, 7
  %1061 = add i32 %1059, -178946048
  %1062 = add i32 %1061, %1058
  %1063 = add i32 %1062, %1060
  br label %1064

; <label>:1064                                    ; preds = %1054, %1052
  %1065 = phi i32 [ %1063, %1054 ], [ %255, %1052 ]
  %1066 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1067 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1066, i32 %1065, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1068 = extractvalue %dx.types.ResRet.i32 %1067, 0
  %1069 = lshr i32 %1068, 20
  %1070 = and i32 %1068, 134217728
  %1071 = icmp eq i32 %1070, 0
  %1072 = and i32 %1069, 31
  %1073 = lshr i32 16384, %1072
  %1074 = uitofp i32 %1073 to float
  %1075 = select i1 %1053, float 1.280000e+02, float %1074
  br i1 %1071, label %1093, label %1076

; <label>:1076                                    ; preds = %1064
  %1077 = lshr i32 %1068, 3
  %1078 = and i32 %1077, 130944
  %1079 = fmul fast float %1075, %1045
  %1080 = fptoui float %1079 to i32
  %1081 = and i32 %1080, 127
  %1082 = or i32 %1081, %1078
  %1083 = shl i32 %1068, 7
  %1084 = and i32 %1083, 130944
  %1085 = fmul fast float %1075, %1044
  %1086 = fptoui float %1085 to i32
  %1087 = and i32 %1086, 127
  %1088 = or i32 %1087, %1084
  %1089 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1090 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1089, i32 0, i32 %1088, i32 %1082, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1091 = extractvalue %dx.types.ResRet.i32 %1090, 0
  %1092 = bitcast i32 %1091 to float
  br label %1093

; <label>:1093                                    ; preds = %1076, %1064
  %1094 = phi float [ %1092, %1076 ], [ 0.000000e+00, %1064 ]
  %1095 = phi i1 [ true, %1076 ], [ false, %1064 ]
  %1096 = select i1 %1095, float %1094, float 0.000000e+00
  %1097 = zext i1 %1095 to i32
  br label %1098

; <label>:1098                                    ; preds = %1093, %982
  %1099 = phi float [ 0.000000e+00, %982 ], [ %1096, %1093 ]
  %1100 = phi i32 [ 0, %982 ], [ %1097, %1093 ]
  %1101 = icmp ne i32 %1100, 0
  %1102 = fcmp fast ogt float %1099, %1046
  %1103 = and i1 %1102, %1101
  %1104 = select i1 %1101, float %1099, float 0.000000e+00
  %1105 = select i1 %1103, float %1104, float -1.000000e+00
  %1106 = select i1 %1103, i32 %1100, i32 0
  br label %1519

; <label>:1107                                    ; preds = %980
  %1108 = call float @dx.op.unary.f32(i32 6, float %889)  ; FAbs(value)
  %1109 = call float @dx.op.unary.f32(i32 6, float %890)  ; FAbs(value)
  %1110 = fcmp fast ult float %1108, %1109
  %1111 = call float @dx.op.unary.f32(i32 6, float %891)  ; FAbs(value)
  %1112 = fcmp fast ult float %1108, %1111
  %1113 = or i1 %1110, %1112
  br i1 %1113, label %1117, label %1114

; <label>:1114                                    ; preds = %1107
  %1115 = fcmp ule float %889, 0.000000e+00
  %1116 = zext i1 %1115 to i32
  br label %1125

; <label>:1117                                    ; preds = %1107
  %1118 = fcmp fast ogt float %1109, %1111
  br i1 %1118, label %1119, label %1122

; <label>:1119                                    ; preds = %1117
  %1120 = fcmp fast ogt float %890, 0.000000e+00
  %1121 = select i1 %1120, i32 2, i32 3
  br label %1125

; <label>:1122                                    ; preds = %1117
  %1123 = fcmp fast ogt float %891, 0.000000e+00
  %1124 = select i1 %1123, i32 4, i32 5
  br label %1125

; <label>:1125                                    ; preds = %1122, %1119, %1114
  %1126 = phi i32 [ %1116, %1114 ], [ %1121, %1119 ], [ %1124, %1122 ]
  %1127 = call float @dx.op.unary.f32(i32 6, float %895)  ; FAbs(value)
  %1128 = call float @dx.op.unary.f32(i32 6, float %896)  ; FAbs(value)
  %1129 = fcmp fast ult float %1127, %1128
  %1130 = call float @dx.op.unary.f32(i32 6, float %897)  ; FAbs(value)
  %1131 = fcmp fast ult float %1127, %1130
  %1132 = or i1 %1129, %1131
  br i1 %1132, label %1136, label %1133

; <label>:1133                                    ; preds = %1125
  %1134 = fcmp ule float %895, 0.000000e+00
  %1135 = zext i1 %1134 to i32
  br label %1144

; <label>:1136                                    ; preds = %1125
  %1137 = fcmp fast ogt float %1128, %1130
  br i1 %1137, label %1138, label %1141

; <label>:1138                                    ; preds = %1136
  %1139 = fcmp fast ogt float %896, 0.000000e+00
  %1140 = select i1 %1139, i32 2, i32 3
  br label %1144

; <label>:1141                                    ; preds = %1136
  %1142 = fcmp fast ogt float %897, 0.000000e+00
  %1143 = select i1 %1142, i32 4, i32 5
  br label %1144

; <label>:1144                                    ; preds = %1141, %1138, %1133
  %1145 = phi i32 [ %1135, %1133 ], [ %1140, %1138 ], [ %1143, %1141 ]
  %1146 = icmp ne i32 %1126, %1145
  %1147 = call i1 @dx.op.waveAnyTrue(i32 113, i1 %1146)  ; WaveAnyTrue(cond)
  %1148 = add i32 %1145, %255
  %1149 = mul i32 %1148, 336
  %1150 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1151 = add i32 %1149, 128
  %1152 = add i32 %1149, 144
  %1153 = add i32 %1149, 160
  %1154 = add i32 %1149, 176
  br i1 %1147, label %1155, label %1400

; <label>:1155                                    ; preds = %1144
  %1156 = add i32 %1126, %255
  %1157 = mul i32 %1156, 336
  %1158 = add i32 %1157, 128
  %1159 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1150, i32 %1158, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1160 = extractvalue %dx.types.ResRet.i32 %1159, 0
  %1161 = extractvalue %dx.types.ResRet.i32 %1159, 1
  %1162 = extractvalue %dx.types.ResRet.i32 %1159, 2
  %1163 = extractvalue %dx.types.ResRet.i32 %1159, 3
  %1164 = bitcast i32 %1160 to float
  %1165 = bitcast i32 %1161 to float
  %1166 = bitcast i32 %1162 to float
  %1167 = bitcast i32 %1163 to float
  %1168 = add i32 %1157, 144
  %1169 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1150, i32 %1168, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1170 = extractvalue %dx.types.ResRet.i32 %1169, 0
  %1171 = extractvalue %dx.types.ResRet.i32 %1169, 1
  %1172 = extractvalue %dx.types.ResRet.i32 %1169, 2
  %1173 = extractvalue %dx.types.ResRet.i32 %1169, 3
  %1174 = bitcast i32 %1170 to float
  %1175 = bitcast i32 %1171 to float
  %1176 = bitcast i32 %1172 to float
  %1177 = bitcast i32 %1173 to float
  %1178 = add i32 %1157, 160
  %1179 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1150, i32 %1178, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1180 = extractvalue %dx.types.ResRet.i32 %1179, 0
  %1181 = extractvalue %dx.types.ResRet.i32 %1179, 1
  %1182 = extractvalue %dx.types.ResRet.i32 %1179, 2
  %1183 = extractvalue %dx.types.ResRet.i32 %1179, 3
  %1184 = bitcast i32 %1180 to float
  %1185 = bitcast i32 %1181 to float
  %1186 = bitcast i32 %1182 to float
  %1187 = bitcast i32 %1183 to float
  %1188 = add i32 %1157, 176
  %1189 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1150, i32 %1188, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1190 = extractvalue %dx.types.ResRet.i32 %1189, 0
  %1191 = extractvalue %dx.types.ResRet.i32 %1189, 1
  %1192 = extractvalue %dx.types.ResRet.i32 %1189, 2
  %1193 = extractvalue %dx.types.ResRet.i32 %1189, 3
  %1194 = bitcast i32 %1190 to float
  %1195 = bitcast i32 %1191 to float
  %1196 = bitcast i32 %1192 to float
  %1197 = bitcast i32 %1193 to float
  %1198 = fmul fast float %1164, %889
  %1199 = call float @dx.op.tertiary.f32(i32 46, float %890, float %1174, float %1198)  ; FMad(a,b,c)
  %1200 = call float @dx.op.tertiary.f32(i32 46, float %891, float %1184, float %1199)  ; FMad(a,b,c)
  %1201 = fadd fast float %1200, %1194
  %1202 = fmul fast float %1165, %889
  %1203 = call float @dx.op.tertiary.f32(i32 46, float %890, float %1175, float %1202)  ; FMad(a,b,c)
  %1204 = call float @dx.op.tertiary.f32(i32 46, float %891, float %1185, float %1203)  ; FMad(a,b,c)
  %1205 = fadd fast float %1204, %1195
  %1206 = fmul fast float %1166, %889
  %1207 = call float @dx.op.tertiary.f32(i32 46, float %890, float %1176, float %1206)  ; FMad(a,b,c)
  %1208 = call float @dx.op.tertiary.f32(i32 46, float %891, float %1186, float %1207)  ; FMad(a,b,c)
  %1209 = fadd fast float %1208, %1196
  %1210 = fmul fast float %1167, %889
  %1211 = call float @dx.op.tertiary.f32(i32 46, float %890, float %1177, float %1210)  ; FMad(a,b,c)
  %1212 = call float @dx.op.tertiary.f32(i32 46, float %891, float %1187, float %1211)  ; FMad(a,b,c)
  %1213 = fadd fast float %1212, %1197
  %1214 = fdiv fast float %1201, %1213
  %1215 = fdiv fast float %1205, %1213
  %1216 = fdiv fast float %1209, %1213
  %1217 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1150, i32 %1151, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1218 = extractvalue %dx.types.ResRet.i32 %1217, 0
  %1219 = extractvalue %dx.types.ResRet.i32 %1217, 1
  %1220 = extractvalue %dx.types.ResRet.i32 %1217, 2
  %1221 = extractvalue %dx.types.ResRet.i32 %1217, 3
  %1222 = bitcast i32 %1218 to float
  %1223 = bitcast i32 %1219 to float
  %1224 = bitcast i32 %1220 to float
  %1225 = bitcast i32 %1221 to float
  %1226 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1150, i32 %1152, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1227 = extractvalue %dx.types.ResRet.i32 %1226, 0
  %1228 = extractvalue %dx.types.ResRet.i32 %1226, 1
  %1229 = extractvalue %dx.types.ResRet.i32 %1226, 2
  %1230 = extractvalue %dx.types.ResRet.i32 %1226, 3
  %1231 = bitcast i32 %1227 to float
  %1232 = bitcast i32 %1228 to float
  %1233 = bitcast i32 %1229 to float
  %1234 = bitcast i32 %1230 to float
  %1235 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1150, i32 %1153, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1236 = extractvalue %dx.types.ResRet.i32 %1235, 0
  %1237 = extractvalue %dx.types.ResRet.i32 %1235, 1
  %1238 = extractvalue %dx.types.ResRet.i32 %1235, 2
  %1239 = extractvalue %dx.types.ResRet.i32 %1235, 3
  %1240 = bitcast i32 %1236 to float
  %1241 = bitcast i32 %1237 to float
  %1242 = bitcast i32 %1238 to float
  %1243 = bitcast i32 %1239 to float
  %1244 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1150, i32 %1154, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1245 = extractvalue %dx.types.ResRet.i32 %1244, 0
  %1246 = extractvalue %dx.types.ResRet.i32 %1244, 1
  %1247 = extractvalue %dx.types.ResRet.i32 %1244, 2
  %1248 = extractvalue %dx.types.ResRet.i32 %1244, 3
  %1249 = bitcast i32 %1245 to float
  %1250 = bitcast i32 %1246 to float
  %1251 = bitcast i32 %1247 to float
  %1252 = bitcast i32 %1248 to float
  %1253 = fmul fast float %1222, %889
  %1254 = call float @dx.op.tertiary.f32(i32 46, float %890, float %1231, float %1253)  ; FMad(a,b,c)
  %1255 = call float @dx.op.tertiary.f32(i32 46, float %891, float %1240, float %1254)  ; FMad(a,b,c)
  %1256 = fadd fast float %1255, %1249
  %1257 = fmul fast float %1223, %889
  %1258 = call float @dx.op.tertiary.f32(i32 46, float %890, float %1232, float %1257)  ; FMad(a,b,c)
  %1259 = call float @dx.op.tertiary.f32(i32 46, float %891, float %1241, float %1258)  ; FMad(a,b,c)
  %1260 = fadd fast float %1259, %1250
  %1261 = fmul fast float %1224, %889
  %1262 = call float @dx.op.tertiary.f32(i32 46, float %890, float %1233, float %1261)  ; FMad(a,b,c)
  %1263 = call float @dx.op.tertiary.f32(i32 46, float %891, float %1242, float %1262)  ; FMad(a,b,c)
  %1264 = fadd fast float %1263, %1251
  %1265 = fmul fast float %1225, %889
  %1266 = call float @dx.op.tertiary.f32(i32 46, float %890, float %1234, float %1265)  ; FMad(a,b,c)
  %1267 = call float @dx.op.tertiary.f32(i32 46, float %891, float %1243, float %1266)  ; FMad(a,b,c)
  %1268 = fadd fast float %1267, %1252
  %1269 = fdiv fast float %1256, %1268
  %1270 = fdiv fast float %1260, %1268
  %1271 = fdiv fast float %1264, %1268
  %1272 = fadd fast float %1271, %981
  %1273 = call float @dx.op.unary.f32(i32 7, float %1269)  ; Saturate(value)
  %1274 = call float @dx.op.unary.f32(i32 7, float %1270)  ; Saturate(value)
  %1275 = fcmp fast oeq float %1269, %1273
  %1276 = fcmp fast oeq float %1270, %1274
  %1277 = and i1 %1275, %1276
  br i1 %1277, label %1278, label %1324

; <label>:1278                                    ; preds = %1155
  %1279 = icmp ult i32 %1148, 8192
  br i1 %1279, label %1290, label %1280

; <label>:1280                                    ; preds = %1278
  %1281 = fmul fast float %1270, 1.280000e+02
  %1282 = fptoui float %1281 to i32
  %1283 = fmul fast float %1269, 1.280000e+02
  %1284 = fptoui float %1283 to i32
  %1285 = mul i32 %1148, 21845
  %1286 = shl i32 %1282, 7
  %1287 = add i32 %1285, -178946048
  %1288 = add i32 %1287, %1284
  %1289 = add i32 %1288, %1286
  br label %1290

; <label>:1290                                    ; preds = %1280, %1278
  %1291 = phi i32 [ %1289, %1280 ], [ %1148, %1278 ]
  %1292 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1293 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1292, i32 %1291, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1294 = extractvalue %dx.types.ResRet.i32 %1293, 0
  %1295 = lshr i32 %1294, 20
  %1296 = and i32 %1294, 134217728
  %1297 = icmp eq i32 %1296, 0
  %1298 = and i32 %1295, 31
  %1299 = lshr i32 16384, %1298
  %1300 = uitofp i32 %1299 to float
  %1301 = select i1 %1279, float 1.280000e+02, float %1300
  br i1 %1297, label %1319, label %1302

; <label>:1302                                    ; preds = %1290
  %1303 = lshr i32 %1294, 3
  %1304 = and i32 %1303, 130944
  %1305 = fmul fast float %1301, %1270
  %1306 = fptoui float %1305 to i32
  %1307 = and i32 %1306, 127
  %1308 = or i32 %1307, %1304
  %1309 = shl i32 %1294, 7
  %1310 = and i32 %1309, 130944
  %1311 = fmul fast float %1301, %1269
  %1312 = fptoui float %1311 to i32
  %1313 = and i32 %1312, 127
  %1314 = or i32 %1313, %1310
  %1315 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1316 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1315, i32 0, i32 %1314, i32 %1308, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1317 = extractvalue %dx.types.ResRet.i32 %1316, 0
  %1318 = bitcast i32 %1317 to float
  br label %1319

; <label>:1319                                    ; preds = %1302, %1290
  %1320 = phi float [ %1318, %1302 ], [ 0.000000e+00, %1290 ]
  %1321 = phi i1 [ true, %1302 ], [ false, %1290 ]
  %1322 = select i1 %1321, float %1320, float 0.000000e+00
  %1323 = zext i1 %1321 to i32
  br label %1324

; <label>:1324                                    ; preds = %1319, %1155
  %1325 = phi float [ 0.000000e+00, %1155 ], [ %1322, %1319 ]
  %1326 = phi i32 [ 0, %1155 ], [ %1323, %1319 ]
  %1327 = icmp eq i32 %1326, 0
  br i1 %1327, label %1328, label %1381

; <label>:1328                                    ; preds = %1324
  %1329 = fadd fast float %1216, %981
  %1330 = call float @dx.op.unary.f32(i32 7, float %1214)  ; Saturate(value)
  %1331 = call float @dx.op.unary.f32(i32 7, float %1215)  ; Saturate(value)
  %1332 = fcmp fast oeq float %1214, %1330
  %1333 = fcmp fast oeq float %1215, %1331
  %1334 = and i1 %1332, %1333
  br i1 %1334, label %1335, label %1381

; <label>:1335                                    ; preds = %1328
  %1336 = icmp ult i32 %1156, 8192
  br i1 %1336, label %1347, label %1337

; <label>:1337                                    ; preds = %1335
  %1338 = fmul fast float %1215, 1.280000e+02
  %1339 = fptoui float %1338 to i32
  %1340 = fmul fast float %1214, 1.280000e+02
  %1341 = fptoui float %1340 to i32
  %1342 = mul i32 %1156, 21845
  %1343 = shl i32 %1339, 7
  %1344 = add i32 %1342, -178946048
  %1345 = add i32 %1344, %1341
  %1346 = add i32 %1345, %1343
  br label %1347

; <label>:1347                                    ; preds = %1337, %1335
  %1348 = phi i32 [ %1346, %1337 ], [ %1156, %1335 ]
  %1349 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1350 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1349, i32 %1348, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1351 = extractvalue %dx.types.ResRet.i32 %1350, 0
  %1352 = lshr i32 %1351, 20
  %1353 = and i32 %1351, 134217728
  %1354 = icmp eq i32 %1353, 0
  %1355 = and i32 %1352, 31
  %1356 = lshr i32 16384, %1355
  %1357 = uitofp i32 %1356 to float
  %1358 = select i1 %1336, float 1.280000e+02, float %1357
  br i1 %1354, label %1376, label %1359

; <label>:1359                                    ; preds = %1347
  %1360 = lshr i32 %1351, 3
  %1361 = and i32 %1360, 130944
  %1362 = fmul fast float %1358, %1215
  %1363 = fptoui float %1362 to i32
  %1364 = and i32 %1363, 127
  %1365 = or i32 %1364, %1361
  %1366 = shl i32 %1351, 7
  %1367 = and i32 %1366, 130944
  %1368 = fmul fast float %1358, %1214
  %1369 = fptoui float %1368 to i32
  %1370 = and i32 %1369, 127
  %1371 = or i32 %1370, %1367
  %1372 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1373 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1372, i32 0, i32 %1371, i32 %1365, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1374 = extractvalue %dx.types.ResRet.i32 %1373, 0
  %1375 = bitcast i32 %1374 to float
  br label %1376

; <label>:1376                                    ; preds = %1359, %1347
  %1377 = phi float [ %1375, %1359 ], [ 0.000000e+00, %1347 ]
  %1378 = phi i1 [ true, %1359 ], [ false, %1347 ]
  %1379 = select i1 %1378, float %1377, float 0.000000e+00
  %1380 = zext i1 %1378 to i32
  br label %1381

; <label>:1381                                    ; preds = %1376, %1328, %1324
  %1382 = phi i32 [ 1, %1324 ], [ 0, %1376 ], [ 0, %1328 ]
  %1383 = phi float [ %1272, %1324 ], [ %1329, %1376 ], [ %1329, %1328 ]
  %1384 = phi float [ %1325, %1324 ], [ %1379, %1376 ], [ 0.000000e+00, %1328 ]
  %1385 = phi i32 [ %1326, %1324 ], [ %1380, %1376 ], [ 0, %1328 ]
  %1386 = icmp eq i32 %1385, 0
  br i1 %1386, label %1389, label %1387

; <label>:1387                                    ; preds = %1381
  %1388 = fcmp fast ogt float %1384, %1383
  br label %1389

; <label>:1389                                    ; preds = %1387, %1381
  %1390 = phi i1 [ %1388, %1387 ], [ false, %1381 ]
  %1391 = phi i32 [ 1, %1387 ], [ 0, %1381 ]
  %1392 = phi float [ %1384, %1387 ], [ 0.000000e+00, %1381 ]
  %1393 = phi i32 [ %1382, %1387 ], [ 0, %1381 ]
  %1394 = select i1 %1390, i32 %1393, i32 %1382
  %1395 = select i1 %1390, float %1392, float -1.000000e+00
  %1396 = select i1 %1390, i32 %1391, i32 0
  %1397 = icmp ne i32 %1394, 0
  %1398 = select i1 %1397, i32 %1148, i32 %1156
  %1399 = select i1 %1397, float %1271, float %1216
  br label %1519

; <label>:1400                                    ; preds = %1144
  %1401 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1150, i32 %1151, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1402 = extractvalue %dx.types.ResRet.i32 %1401, 0
  %1403 = extractvalue %dx.types.ResRet.i32 %1401, 1
  %1404 = extractvalue %dx.types.ResRet.i32 %1401, 2
  %1405 = extractvalue %dx.types.ResRet.i32 %1401, 3
  %1406 = bitcast i32 %1402 to float
  %1407 = bitcast i32 %1403 to float
  %1408 = bitcast i32 %1404 to float
  %1409 = bitcast i32 %1405 to float
  %1410 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1150, i32 %1152, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1411 = extractvalue %dx.types.ResRet.i32 %1410, 0
  %1412 = extractvalue %dx.types.ResRet.i32 %1410, 1
  %1413 = extractvalue %dx.types.ResRet.i32 %1410, 2
  %1414 = extractvalue %dx.types.ResRet.i32 %1410, 3
  %1415 = bitcast i32 %1411 to float
  %1416 = bitcast i32 %1412 to float
  %1417 = bitcast i32 %1413 to float
  %1418 = bitcast i32 %1414 to float
  %1419 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1150, i32 %1153, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1420 = extractvalue %dx.types.ResRet.i32 %1419, 0
  %1421 = extractvalue %dx.types.ResRet.i32 %1419, 1
  %1422 = extractvalue %dx.types.ResRet.i32 %1419, 2
  %1423 = extractvalue %dx.types.ResRet.i32 %1419, 3
  %1424 = bitcast i32 %1420 to float
  %1425 = bitcast i32 %1421 to float
  %1426 = bitcast i32 %1422 to float
  %1427 = bitcast i32 %1423 to float
  %1428 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1150, i32 %1154, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1429 = extractvalue %dx.types.ResRet.i32 %1428, 0
  %1430 = extractvalue %dx.types.ResRet.i32 %1428, 1
  %1431 = extractvalue %dx.types.ResRet.i32 %1428, 2
  %1432 = extractvalue %dx.types.ResRet.i32 %1428, 3
  %1433 = bitcast i32 %1429 to float
  %1434 = bitcast i32 %1430 to float
  %1435 = bitcast i32 %1431 to float
  %1436 = bitcast i32 %1432 to float
  %1437 = fmul fast float %1406, %889
  %1438 = call float @dx.op.tertiary.f32(i32 46, float %890, float %1415, float %1437)  ; FMad(a,b,c)
  %1439 = call float @dx.op.tertiary.f32(i32 46, float %891, float %1424, float %1438)  ; FMad(a,b,c)
  %1440 = fadd fast float %1439, %1433
  %1441 = fmul fast float %1407, %889
  %1442 = call float @dx.op.tertiary.f32(i32 46, float %890, float %1416, float %1441)  ; FMad(a,b,c)
  %1443 = call float @dx.op.tertiary.f32(i32 46, float %891, float %1425, float %1442)  ; FMad(a,b,c)
  %1444 = fadd fast float %1443, %1434
  %1445 = fmul fast float %1408, %889
  %1446 = call float @dx.op.tertiary.f32(i32 46, float %890, float %1417, float %1445)  ; FMad(a,b,c)
  %1447 = call float @dx.op.tertiary.f32(i32 46, float %891, float %1426, float %1446)  ; FMad(a,b,c)
  %1448 = fadd fast float %1447, %1435
  %1449 = fmul fast float %1409, %889
  %1450 = call float @dx.op.tertiary.f32(i32 46, float %890, float %1418, float %1449)  ; FMad(a,b,c)
  %1451 = call float @dx.op.tertiary.f32(i32 46, float %891, float %1427, float %1450)  ; FMad(a,b,c)
  %1452 = fadd fast float %1451, %1436
  %1453 = fdiv fast float %1440, %1452
  %1454 = fdiv fast float %1444, %1452
  %1455 = fdiv fast float %1448, %1452
  %1456 = call float @dx.op.unary.f32(i32 7, float %1453)  ; Saturate(value)
  %1457 = call float @dx.op.unary.f32(i32 7, float %1454)  ; Saturate(value)
  %1458 = fadd fast float %1455, %981
  %1459 = call float @dx.op.unary.f32(i32 7, float %1456)  ; Saturate(value)
  %1460 = call float @dx.op.unary.f32(i32 7, float %1457)  ; Saturate(value)
  %1461 = fcmp fast oeq float %1456, %1459
  %1462 = fcmp fast oeq float %1457, %1460
  %1463 = and i1 %1461, %1462
  br i1 %1463, label %1464, label %1510

; <label>:1464                                    ; preds = %1400
  %1465 = icmp ult i32 %1148, 8192
  br i1 %1465, label %1476, label %1466

; <label>:1466                                    ; preds = %1464
  %1467 = fmul fast float %1457, 1.280000e+02
  %1468 = fptoui float %1467 to i32
  %1469 = fmul fast float %1456, 1.280000e+02
  %1470 = fptoui float %1469 to i32
  %1471 = mul i32 %1148, 21845
  %1472 = shl i32 %1468, 7
  %1473 = add i32 %1471, -178946048
  %1474 = add i32 %1473, %1470
  %1475 = add i32 %1474, %1472
  br label %1476

; <label>:1476                                    ; preds = %1466, %1464
  %1477 = phi i32 [ %1475, %1466 ], [ %1148, %1464 ]
  %1478 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1479 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1478, i32 %1477, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1480 = extractvalue %dx.types.ResRet.i32 %1479, 0
  %1481 = lshr i32 %1480, 20
  %1482 = and i32 %1480, 134217728
  %1483 = icmp eq i32 %1482, 0
  %1484 = and i32 %1481, 31
  %1485 = lshr i32 16384, %1484
  %1486 = uitofp i32 %1485 to float
  %1487 = select i1 %1465, float 1.280000e+02, float %1486
  br i1 %1483, label %1505, label %1488

; <label>:1488                                    ; preds = %1476
  %1489 = lshr i32 %1480, 3
  %1490 = and i32 %1489, 130944
  %1491 = fmul fast float %1487, %1457
  %1492 = fptoui float %1491 to i32
  %1493 = and i32 %1492, 127
  %1494 = or i32 %1493, %1490
  %1495 = shl i32 %1480, 7
  %1496 = and i32 %1495, 130944
  %1497 = fmul fast float %1487, %1456
  %1498 = fptoui float %1497 to i32
  %1499 = and i32 %1498, 127
  %1500 = or i32 %1499, %1496
  %1501 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1502 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1501, i32 0, i32 %1500, i32 %1494, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1503 = extractvalue %dx.types.ResRet.i32 %1502, 0
  %1504 = bitcast i32 %1503 to float
  br label %1505

; <label>:1505                                    ; preds = %1488, %1476
  %1506 = phi float [ %1504, %1488 ], [ 0.000000e+00, %1476 ]
  %1507 = phi i1 [ true, %1488 ], [ false, %1476 ]
  %1508 = select i1 %1507, float %1506, float 0.000000e+00
  %1509 = zext i1 %1507 to i32
  br label %1510

; <label>:1510                                    ; preds = %1505, %1400
  %1511 = phi float [ 0.000000e+00, %1400 ], [ %1508, %1505 ]
  %1512 = phi i32 [ 0, %1400 ], [ %1509, %1505 ]
  %1513 = icmp ne i32 %1512, 0
  %1514 = fcmp fast ogt float %1511, %1458
  %1515 = and i1 %1514, %1513
  %1516 = select i1 %1513, float %1511, float 0.000000e+00
  %1517 = select i1 %1515, float %1516, float -1.000000e+00
  %1518 = select i1 %1515, i32 %1512, i32 0
  br label %1519

; <label>:1519                                    ; preds = %1510, %1389, %1098
  %1520 = phi i32 [ %1398, %1389 ], [ %255, %1098 ], [ %1148, %1510 ]
  %1521 = phi float [ %1399, %1389 ], [ %1043, %1098 ], [ %1455, %1510 ]
  %1522 = phi float [ %1395, %1389 ], [ %1105, %1098 ], [ %1517, %1510 ]
  %1523 = phi i32 [ %1396, %1389 ], [ %1106, %1098 ], [ %1518, %1510 ]
  %1524 = icmp eq i32 %1523, 0
  br i1 %1524, label %1553, label %1525

; <label>:1525                                    ; preds = %1519
  %1526 = fadd float %981, %1521
  %1527 = fmul fast float %889, %889
  %1528 = fmul fast float %890, %890
  %1529 = fadd fast float %1527, %1528
  %1530 = fmul fast float %891, %891
  %1531 = fadd fast float %1529, %1530
  %1532 = call float @dx.op.unary.f32(i32 24, float %1531)  ; Sqrt(value)
  %1533 = call float @dx.op.unary.f32(i32 7, float %1526)  ; Saturate(value)
  %1534 = mul i32 %1520, 336
  %1535 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1536 = add i32 %1534, 96
  %1537 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1535, i32 %1536, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1538 = extractvalue %dx.types.ResRet.i32 %1537, 2
  %1539 = bitcast i32 %1538 to float
  %1540 = add i32 %1534, 112
  %1541 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1535, i32 %1540, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1542 = extractvalue %dx.types.ResRet.i32 %1541, 2
  %1543 = bitcast i32 %1542 to float
  %1544 = fsub fast float %1522, %1539
  %1545 = fdiv fast float %1543, %1544
  %1546 = fsub fast float %1533, %1539
  %1547 = fmul fast float %1546, %1532
  %1548 = fdiv fast float %1547, %1543
  %1549 = fmul fast float %1548, %1545
  %1550 = fsub fast float %1532, %1549
  %1551 = call float @dx.op.binary.f32(i32 35, float 0x3EB0C6F7A0000000, float %1550)  ; FMax(a,b)
  %1552 = fadd fast float %1551, %708
  br label %1555

; <label>:1553                                    ; preds = %1519
  %1554 = add i32 %707, 1
  br label %1555

; <label>:1555                                    ; preds = %1553, %1525
  %1556 = phi i32 [ %707, %1525 ], [ %1554, %1553 ]
  %1557 = phi float [ %1552, %1525 ], [ %708, %1553 ]
  %1558 = icmp eq i32 %465, 0
  br i1 %1558, label %1568, label %1559

; <label>:1559                                    ; preds = %1555
  %1560 = icmp eq i32 %706, 0
  br i1 %1560, label %1561, label %1563

; <label>:1561                                    ; preds = %1559
  %1562 = call i1 @dx.op.waveAllTrue(i32 114, i1 %1524)  ; WaveAllTrue(cond)
  br i1 %1562, label %1571, label %1568

; <label>:1563                                    ; preds = %1559
  %1564 = icmp ult i32 %706, %465
  br i1 %1564, label %1568, label %1565

; <label>:1565                                    ; preds = %1563
  %1566 = icmp eq i32 %1556, 0
  %1567 = call i1 @dx.op.waveAllTrue(i32 114, i1 %1566)  ; WaveAllTrue(cond)
  br i1 %1567, label %1571, label %1568

; <label>:1568                                    ; preds = %1565, %1563, %1561, %1555
  %1569 = add nuw i32 %706, 1
  %1570 = icmp ult i32 %1569, %461
  br i1 %1570, label %705, label %1571

; <label>:1571                                    ; preds = %1568, %1565, %1561
  %1572 = phi i32 [ %1569, %1568 ], [ 0, %1561 ], [ %706, %1565 ]
  %1573 = add i32 %1572, 1
  %1574 = call i32 @dx.op.binary.i32(i32 40, i32 %1573, i32 %461)  ; UMin(a,b)
  %1575 = sub i32 %1574, %1556
  %1576 = call i32 @dx.op.binary.i32(i32 39, i32 1, i32 %1575)  ; UMax(a,b)
  %1577 = uitofp i32 %1576 to float
  %1578 = fdiv fast float %1557, %1577
  %1579 = uitofp i32 %1556 to float
  %1580 = uitofp i32 %1574 to float
  %1581 = fdiv fast float %1579, %1580
  br label %2253

; <label>:1582                                    ; preds = %458
  %1583 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %1584 = extractvalue %dx.types.CBufRet.f32 %1583, 0
  %1585 = extractvalue %dx.types.CBufRet.f32 %1583, 1
  %1586 = extractvalue %dx.types.CBufRet.f32 %1583, 2
  %1587 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %1588 = extractvalue %dx.types.CBufRet.f32 %1587, 0
  %1589 = extractvalue %dx.types.CBufRet.f32 %1587, 1
  %1590 = extractvalue %dx.types.CBufRet.f32 %1587, 2
  %1591 = fsub fast float %314, %1588
  %1592 = fsub fast float %315, %1589
  %1593 = fsub fast float %316, %1590
  %1594 = call float @dx.op.binary.f32(i32 35, float %459, float 0.000000e+00)  ; FMax(a,b)
  %1595 = mul i32 %255, 336
  %1596 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1597 = add i32 %1595, 128
  %1598 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1597, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1599 = add i32 %1595, 144
  %1600 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1599, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1601 = add i32 %1595, 160
  %1602 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1601, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1603 = add i32 %1595, 176
  %1604 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1603, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1605 = add i32 %1595, 256
  %1606 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1605, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1607 = extractvalue %dx.types.ResRet.i32 %1606, 0
  %1608 = extractvalue %dx.types.ResRet.i32 %1606, 1
  %1609 = extractvalue %dx.types.ResRet.i32 %1606, 2
  %1610 = bitcast i32 %1607 to float
  %1611 = bitcast i32 %1608 to float
  %1612 = bitcast i32 %1609 to float
  %1613 = add i32 %1595, 268
  %1614 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1613, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1615 = extractvalue %dx.types.ResRet.i32 %1614, 0
  %1616 = add i32 %1595, 272
  %1617 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1616, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1618 = add i32 %1595, 288
  %1619 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1618, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1620 = icmp eq i32 %1615, 0
  %1621 = fadd fast float %1610, %1584
  %1622 = fadd fast float %1611, %1585
  %1623 = fadd fast float %1612, %1586
  %1624 = fmul fast float %1621, 2.097152e+06
  %1625 = fmul fast float %1622, 2.097152e+06
  %1626 = fmul fast float %1623, 2.097152e+06
  %1627 = fadd fast float %1624, %1591
  %1628 = fadd fast float %1625, %1592
  %1629 = fadd fast float %1626, %1593
  br i1 %1620, label %1630, label %1961

; <label>:1630                                    ; preds = %1582
  %1631 = extractvalue %dx.types.ResRet.i32 %1619, 2
  %1632 = bitcast i32 %1631 to float
  %1633 = extractvalue %dx.types.ResRet.i32 %1619, 1
  %1634 = bitcast i32 %1633 to float
  %1635 = extractvalue %dx.types.ResRet.i32 %1619, 0
  %1636 = bitcast i32 %1635 to float
  %1637 = add i32 %1595, 320
  %1638 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1637, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1639 = extractvalue %dx.types.ResRet.i32 %1638, 0
  %1640 = add i32 %1595, 316
  %1641 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1640, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1642 = extractvalue %dx.types.ResRet.i32 %1641, 0
  %1643 = add i32 %1595, 300
  %1644 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1643, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1645 = extractvalue %dx.types.ResRet.i32 %1644, 0
  %1646 = bitcast i32 %1645 to float
  %1647 = fadd fast float %1627, %1636
  %1648 = fadd fast float %1628, %1634
  %1649 = fadd fast float %1629, %1632
  %1650 = fmul fast float %1647, %1647
  %1651 = fmul fast float %1648, %1648
  %1652 = fadd fast float %1650, %1651
  %1653 = fmul fast float %1649, %1649
  %1654 = fadd fast float %1652, %1653
  %1655 = call float @dx.op.unary.f32(i32 24, float %1654)  ; Sqrt(value)
  %1656 = call float @dx.op.unary.f32(i32 23, float %1655)  ; Log(value)
  %1657 = fadd fast float %1656, %1646
  %1658 = call float @dx.op.unary.f32(i32 27, float %1657)  ; Round_ni(value)
  %1659 = fptosi float %1658 to i32
  %1660 = sub nsw i32 %1659, %1642
  %1661 = call i32 @dx.op.binary.i32(i32 37, i32 0, i32 %1660)  ; IMax(a,b)
  %1662 = icmp slt i32 %1661, %1639
  br i1 %1662, label %1663, label %2253

; <label>:1663                                    ; preds = %1630
  %1664 = add nsw i32 %1661, %255
  %1665 = mul i32 %1664, 336
  %1666 = add i32 %1665, 96
  %1667 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1666, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1668 = extractvalue %dx.types.ResRet.i32 %1667, 2
  %1669 = bitcast i32 %1668 to float
  %1670 = add i32 %1665, 112
  %1671 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1670, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1672 = extractvalue %dx.types.ResRet.i32 %1671, 2
  %1673 = bitcast i32 %1672 to float
  %1674 = add i32 %1665, 128
  %1675 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1674, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1676 = extractvalue %dx.types.ResRet.i32 %1675, 0
  %1677 = extractvalue %dx.types.ResRet.i32 %1675, 1
  %1678 = extractvalue %dx.types.ResRet.i32 %1675, 2
  %1679 = bitcast i32 %1676 to float
  %1680 = bitcast i32 %1677 to float
  %1681 = bitcast i32 %1678 to float
  %1682 = add i32 %1665, 144
  %1683 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1682, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1684 = extractvalue %dx.types.ResRet.i32 %1683, 0
  %1685 = extractvalue %dx.types.ResRet.i32 %1683, 1
  %1686 = extractvalue %dx.types.ResRet.i32 %1683, 2
  %1687 = bitcast i32 %1684 to float
  %1688 = bitcast i32 %1685 to float
  %1689 = bitcast i32 %1686 to float
  %1690 = add i32 %1665, 160
  %1691 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1690, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1692 = extractvalue %dx.types.ResRet.i32 %1691, 0
  %1693 = extractvalue %dx.types.ResRet.i32 %1691, 1
  %1694 = extractvalue %dx.types.ResRet.i32 %1691, 2
  %1695 = bitcast i32 %1692 to float
  %1696 = bitcast i32 %1693 to float
  %1697 = bitcast i32 %1694 to float
  %1698 = add i32 %1665, 176
  %1699 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1698, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1700 = extractvalue %dx.types.ResRet.i32 %1699, 0
  %1701 = extractvalue %dx.types.ResRet.i32 %1699, 1
  %1702 = extractvalue %dx.types.ResRet.i32 %1699, 2
  %1703 = bitcast i32 %1700 to float
  %1704 = bitcast i32 %1701 to float
  %1705 = bitcast i32 %1702 to float
  %1706 = add i32 %1665, 256
  %1707 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1706, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1708 = extractvalue %dx.types.ResRet.i32 %1707, 0
  %1709 = extractvalue %dx.types.ResRet.i32 %1707, 1
  %1710 = extractvalue %dx.types.ResRet.i32 %1707, 2
  %1711 = bitcast i32 %1708 to float
  %1712 = bitcast i32 %1709 to float
  %1713 = bitcast i32 %1710 to float
  %1714 = add i32 %1665, 272
  %1715 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1714, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1716 = extractvalue %dx.types.ResRet.i32 %1715, 0
  %1717 = extractvalue %dx.types.ResRet.i32 %1715, 1
  %1718 = extractvalue %dx.types.ResRet.i32 %1715, 2
  %1719 = bitcast i32 %1716 to float
  %1720 = bitcast i32 %1717 to float
  %1721 = bitcast i32 %1718 to float
  %1722 = fadd fast float %1711, %1584
  %1723 = fadd fast float %1712, %1585
  %1724 = fadd fast float %1713, %1586
  %1725 = fmul fast float %1722, 2.097152e+06
  %1726 = fmul fast float %1723, 2.097152e+06
  %1727 = fmul fast float %1724, 2.097152e+06
  %1728 = fadd fast float %1725, %1591
  %1729 = fadd fast float %1728, %1719
  %1730 = fadd fast float %1726, %1592
  %1731 = fadd fast float %1730, %1720
  %1732 = fadd fast float %1727, %1593
  %1733 = fadd fast float %1732, %1721
  %1734 = fmul fast float %1729, %1679
  %1735 = call float @dx.op.tertiary.f32(i32 46, float %1731, float %1687, float %1734)  ; FMad(a,b,c)
  %1736 = call float @dx.op.tertiary.f32(i32 46, float %1733, float %1695, float %1735)  ; FMad(a,b,c)
  %1737 = fadd fast float %1736, %1703
  %1738 = fmul fast float %1729, %1680
  %1739 = call float @dx.op.tertiary.f32(i32 46, float %1731, float %1688, float %1738)  ; FMad(a,b,c)
  %1740 = call float @dx.op.tertiary.f32(i32 46, float %1733, float %1696, float %1739)  ; FMad(a,b,c)
  %1741 = fadd fast float %1740, %1704
  %1742 = fmul fast float %1729, %1681
  %1743 = call float @dx.op.tertiary.f32(i32 46, float %1731, float %1689, float %1742)  ; FMad(a,b,c)
  %1744 = call float @dx.op.tertiary.f32(i32 46, float %1733, float %1697, float %1743)  ; FMad(a,b,c)
  %1745 = fadd fast float %1744, %1705
  %1746 = fmul fast float %1737, 1.280000e+02
  %1747 = fmul fast float %1741, 1.280000e+02
  %1748 = fptoui float %1746 to i32
  %1749 = fptoui float %1747 to i32
  %1750 = icmp ult i32 %1664, 8192
  br i1 %1750, label %1757, label %1751

; <label>:1751                                    ; preds = %1663
  %1752 = mul i32 %1664, 21845
  %1753 = shl i32 %1749, 7
  %1754 = add i32 %1752, -178946048
  %1755 = add i32 %1754, %1748
  %1756 = add i32 %1755, %1753
  br label %1757

; <label>:1757                                    ; preds = %1751, %1663
  %1758 = phi i32 [ %1756, %1751 ], [ %1664, %1663 ]
  %1759 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1760 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1759, i32 %1758, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1761 = extractvalue %dx.types.ResRet.i32 %1760, 0
  %1762 = lshr i32 %1761, 20
  %1763 = and i32 %1762, 63
  %1764 = and i32 %1761, 134217728
  %1765 = icmp eq i32 %1764, 0
  br i1 %1765, label %1870, label %1766

; <label>:1766                                    ; preds = %1757
  %1767 = icmp eq i32 %1763, 0
  %1768 = zext i1 %1767 to i32
  %1769 = add i32 %1763, %1664
  %1770 = fmul fast float %1737, 1.638400e+04
  %1771 = fmul fast float %1741, 1.638400e+04
  %1772 = fptoui float %1770 to i32
  %1773 = fptoui float %1771 to i32
  br i1 %1767, label %1845, label %1774

; <label>:1774                                    ; preds = %1766
  %1775 = add i32 %1665, 304
  %1776 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1775, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1777 = extractvalue %dx.types.ResRet.i32 %1776, 0
  %1778 = extractvalue %dx.types.ResRet.i32 %1776, 1
  %1779 = mul i32 %1769, 336
  %1780 = add i32 %1779, 112
  %1781 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1780, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1782 = extractvalue %dx.types.ResRet.i32 %1781, 2
  %1783 = bitcast i32 %1782 to float
  %1784 = add i32 %1779, 304
  %1785 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1784, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1786 = extractvalue %dx.types.ResRet.i32 %1785, 0
  %1787 = extractvalue %dx.types.ResRet.i32 %1785, 1
  %1788 = shl i32 %1777, 5
  %1789 = shl i32 %1778, 5
  %1790 = shl i32 %1786, 5
  %1791 = shl i32 %1787, 5
  %1792 = sub i32 %1748, %1788
  %1793 = sub i32 %1749, %1789
  %1794 = and i32 %1762, 31
  %1795 = shl i32 %1790, %1794
  %1796 = shl i32 %1791, %1794
  %1797 = add i32 %1792, %1795
  %1798 = add i32 %1793, %1796
  %1799 = lshr i32 %1797, %1794
  %1800 = lshr i32 %1798, %1794
  %1801 = shl i32 %1799, 7
  %1802 = shl i32 %1800, 7
  %1803 = or i32 %1801, 127
  %1804 = or i32 %1802, 127
  %1805 = sitofp i32 %1777 to float
  %1806 = sitofp i32 %1778 to float
  %1807 = sitofp i32 %1786 to float
  %1808 = sitofp i32 %1787 to float
  %1809 = shl i32 1, %1794
  %1810 = uitofp i32 %1809 to float
  %1811 = fdiv fast float 1.000000e+00, %1810
  %1812 = fmul fast float %1811, %1805
  %1813 = fmul fast float %1811, %1806
  %1814 = fsub fast float %1807, %1812
  %1815 = fsub fast float %1808, %1813
  %1816 = fmul fast float %1814, 2.500000e-01
  %1817 = fmul fast float %1815, 2.500000e-01
  %1818 = fmul fast float %1811, %1673
  %1819 = fsub fast float %1783, %1818
  %1820 = fmul fast float %1811, %1737
  %1821 = fmul fast float %1811, %1741
  %1822 = fadd fast float %1816, %1820
  %1823 = fadd fast float %1817, %1821
  %1824 = fmul fast float %1822, 1.638400e+04
  %1825 = fmul fast float %1823, 1.638400e+04
  %1826 = fptoui float %1824 to i32
  %1827 = fptoui float %1825 to i32
  %1828 = call i32 @dx.op.binary.i32(i32 39, i32 %1826, i32 %1801)  ; UMax(a,b)
  %1829 = call i32 @dx.op.binary.i32(i32 39, i32 %1827, i32 %1802)  ; UMax(a,b)
  %1830 = call i32 @dx.op.binary.i32(i32 40, i32 %1828, i32 %1803)  ; UMin(a,b)
  %1831 = call i32 @dx.op.binary.i32(i32 40, i32 %1829, i32 %1804)  ; UMin(a,b)
  %1832 = icmp ult i32 %1769, 8192
  br i1 %1832, label %1838, label %1833

; <label>:1833                                    ; preds = %1774
  %1834 = mul i32 %1769, 21845
  %1835 = add i32 %1834, -178946048
  %1836 = add i32 %1835, %1799
  %1837 = add i32 %1836, %1802
  br label %1838

; <label>:1838                                    ; preds = %1833, %1774
  %1839 = phi i32 [ %1837, %1833 ], [ %1769, %1774 ]
  %1840 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1759, i32 %1839, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1841 = extractvalue %dx.types.ResRet.i32 %1840, 0
  %1842 = and i32 %1841, 200278016
  %1843 = icmp eq i32 %1842, 134217728
  %1844 = zext i1 %1843 to i32
  br label %1845

; <label>:1845                                    ; preds = %1838, %1766
  %1846 = phi i32 [ %1830, %1838 ], [ %1772, %1766 ]
  %1847 = phi i32 [ %1831, %1838 ], [ %1773, %1766 ]
  %1848 = phi float [ %1824, %1838 ], [ %1770, %1766 ]
  %1849 = phi float [ %1825, %1838 ], [ %1771, %1766 ]
  %1850 = phi i32 [ %1844, %1838 ], [ %1768, %1766 ]
  %1851 = phi i32 [ %1841, %1838 ], [ %1761, %1766 ]
  %1852 = phi float [ %1811, %1838 ], [ 1.000000e+00, %1766 ]
  %1853 = phi float [ %1819, %1838 ], [ 0.000000e+00, %1766 ]
  %1854 = icmp eq i32 %1850, 0
  br i1 %1854, label %1870, label %1855

; <label>:1855                                    ; preds = %1845
  %1856 = shl i32 %1851, 7
  %1857 = and i32 %1856, 130944
  %1858 = lshr i32 %1851, 3
  %1859 = and i32 %1858, 130944
  %1860 = and i32 %1846, 127
  %1861 = and i32 %1847, 127
  %1862 = or i32 %1857, %1860
  %1863 = or i32 %1859, %1861
  %1864 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1865 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1864, i32 0, i32 %1862, i32 %1863, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1866 = extractvalue %dx.types.ResRet.i32 %1865, 0
  %1867 = bitcast i32 %1866 to float
  %1868 = fsub fast float %1867, %1853
  %1869 = fdiv fast float %1868, %1852
  br label %1870

; <label>:1870                                    ; preds = %1855, %1845, %1757
  %1871 = phi float [ %1869, %1855 ], [ 0.000000e+00, %1845 ], [ 0.000000e+00, %1757 ]
  %1872 = phi i32 [ %1769, %1855 ], [ -1, %1845 ], [ -1, %1757 ]
  %1873 = phi i1 [ true, %1855 ], [ false, %1845 ], [ false, %1757 ]
  %1874 = phi i32 [ %1846, %1855 ], [ %1846, %1845 ], [ 0, %1757 ]
  %1875 = phi i32 [ %1847, %1855 ], [ %1847, %1845 ], [ 0, %1757 ]
  %1876 = phi float [ %1848, %1855 ], [ %1848, %1845 ], [ 0.000000e+00, %1757 ]
  %1877 = phi float [ %1849, %1855 ], [ %1849, %1845 ], [ 0.000000e+00, %1757 ]
  br i1 %1873, label %1878, label %2253

; <label>:1878                                    ; preds = %1870
  %1879 = mul i32 %1872, 336
  %1880 = add i32 %1879, 96
  %1881 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1880, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1882 = extractvalue %dx.types.ResRet.i32 %1881, 2
  %1883 = bitcast i32 %1882 to float
  %1884 = add i32 %1879, 192
  %1885 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1884, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1886 = extractvalue %dx.types.ResRet.i32 %1885, 0
  %1887 = extractvalue %dx.types.ResRet.i32 %1885, 1
  %1888 = extractvalue %dx.types.ResRet.i32 %1885, 2
  %1889 = bitcast i32 %1886 to float
  %1890 = bitcast i32 %1887 to float
  %1891 = bitcast i32 %1888 to float
  %1892 = add i32 %1879, 208
  %1893 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1892, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1894 = extractvalue %dx.types.ResRet.i32 %1893, 0
  %1895 = extractvalue %dx.types.ResRet.i32 %1893, 1
  %1896 = extractvalue %dx.types.ResRet.i32 %1893, 2
  %1897 = bitcast i32 %1894 to float
  %1898 = bitcast i32 %1895 to float
  %1899 = bitcast i32 %1896 to float
  %1900 = add i32 %1879, 224
  %1901 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1900, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1902 = extractvalue %dx.types.ResRet.i32 %1901, 0
  %1903 = extractvalue %dx.types.ResRet.i32 %1901, 1
  %1904 = extractvalue %dx.types.ResRet.i32 %1901, 2
  %1905 = bitcast i32 %1902 to float
  %1906 = bitcast i32 %1903 to float
  %1907 = bitcast i32 %1904 to float
  %1908 = add i32 %1879, 240
  %1909 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1908, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1910 = extractvalue %dx.types.ResRet.i32 %1909, 0
  %1911 = extractvalue %dx.types.ResRet.i32 %1909, 1
  %1912 = extractvalue %dx.types.ResRet.i32 %1909, 2
  %1913 = bitcast i32 %1910 to float
  %1914 = bitcast i32 %1911 to float
  %1915 = bitcast i32 %1912 to float
  %1916 = call float @dx.op.dot3.f32(i32 55, float %308, float %309, float %310, float %1729, float %1731, float %1733)  ; Dot3(ax,ay,az,bx,by,bz)
  %1917 = fsub fast float -0.000000e+00, %1916
  %1918 = fmul fast float %1889, %308
  %1919 = call float @dx.op.tertiary.f32(i32 46, float %309, float %1897, float %1918)  ; FMad(a,b,c)
  %1920 = call float @dx.op.tertiary.f32(i32 46, float %310, float %1905, float %1919)  ; FMad(a,b,c)
  %1921 = call float @dx.op.tertiary.f32(i32 46, float %1917, float %1913, float %1920)  ; FMad(a,b,c)
  %1922 = fmul fast float %1890, %308
  %1923 = call float @dx.op.tertiary.f32(i32 46, float %309, float %1898, float %1922)  ; FMad(a,b,c)
  %1924 = call float @dx.op.tertiary.f32(i32 46, float %310, float %1906, float %1923)  ; FMad(a,b,c)
  %1925 = call float @dx.op.tertiary.f32(i32 46, float %1917, float %1914, float %1924)  ; FMad(a,b,c)
  %1926 = fmul fast float %1891, %308
  %1927 = call float @dx.op.tertiary.f32(i32 46, float %309, float %1899, float %1926)  ; FMad(a,b,c)
  %1928 = call float @dx.op.tertiary.f32(i32 46, float %310, float %1907, float %1927)  ; FMad(a,b,c)
  %1929 = call float @dx.op.tertiary.f32(i32 46, float %1917, float %1915, float %1928)  ; FMad(a,b,c)
  %1930 = fsub fast float -0.000000e+00, %1921
  %1931 = fsub fast float -0.000000e+00, %1925
  %1932 = fdiv fast float %1930, %1929
  %1933 = fdiv fast float %1931, %1929
  %1934 = uitofp i32 %1874 to float
  %1935 = uitofp i32 %1875 to float
  %1936 = fadd fast float %1934, 5.000000e-01
  %1937 = fadd fast float %1935, 5.000000e-01
  %1938 = fsub fast float %1936, %1876
  %1939 = fsub fast float %1937, %1877
  %1940 = fmul fast float %1938, 0x3F10000000000000
  %1941 = fmul fast float %1939, 0x3F10000000000000
  %1942 = call float @dx.op.dot2.f32(i32 54, float %1932, float %1933, float %1940, float %1941)  ; Dot2(ax,ay,bx,by)
  %1943 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1942)  ; FMax(a,b)
  %1944 = fmul fast float %1943, 2.000000e+00
  %1945 = fmul fast float %1883, 1.000000e+02
  %1946 = call float @dx.op.unary.f32(i32 6, float %1945)  ; FAbs(value)
  %1947 = call float @dx.op.binary.f32(i32 36, float %1944, float %1946)  ; FMin(a,b)
  %1948 = sub nsw i32 %1872, %1664
  %1949 = and i32 %1948, 31
  %1950 = shl i32 1, %1949
  %1951 = uitofp i32 %1950 to float
  %1952 = fmul fast float %1947, %1951
  %1953 = fmul fast float %1669, %1594
  %1954 = fadd fast float %1871, %1953
  %1955 = fsub fast float %1954, %1952
  %1956 = fcmp fast ogt float %1955, %1745
  br i1 %1956, label %1957, label %2253

; <label>:1957                                    ; preds = %1878
  %1958 = fsub fast float %1745, %1871
  %1959 = fdiv fast float %1958, %1669
  %1960 = call float @dx.op.binary.f32(i32 35, float 0x3EB0C6F7A0000000, float %1959)  ; FMax(a,b)
  br label %2253

; <label>:1961                                    ; preds = %1582
  %1962 = extractvalue %dx.types.ResRet.i32 %1604, 3
  %1963 = extractvalue %dx.types.ResRet.i32 %1604, 2
  %1964 = extractvalue %dx.types.ResRet.i32 %1604, 1
  %1965 = extractvalue %dx.types.ResRet.i32 %1604, 0
  %1966 = extractvalue %dx.types.ResRet.i32 %1602, 3
  %1967 = extractvalue %dx.types.ResRet.i32 %1602, 2
  %1968 = extractvalue %dx.types.ResRet.i32 %1602, 1
  %1969 = extractvalue %dx.types.ResRet.i32 %1602, 0
  %1970 = extractvalue %dx.types.ResRet.i32 %1600, 3
  %1971 = extractvalue %dx.types.ResRet.i32 %1600, 2
  %1972 = extractvalue %dx.types.ResRet.i32 %1600, 1
  %1973 = extractvalue %dx.types.ResRet.i32 %1600, 0
  %1974 = extractvalue %dx.types.ResRet.i32 %1598, 3
  %1975 = extractvalue %dx.types.ResRet.i32 %1598, 2
  %1976 = extractvalue %dx.types.ResRet.i32 %1598, 1
  %1977 = extractvalue %dx.types.ResRet.i32 %1598, 0
  %1978 = add i32 %1595, 112
  %1979 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1978, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1980 = extractvalue %dx.types.ResRet.i32 %1979, 2
  %1981 = add i32 %1595, 96
  %1982 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %1981, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1983 = extractvalue %dx.types.ResRet.i32 %1982, 2
  %1984 = extractvalue %dx.types.ResRet.i32 %1617, 2
  %1985 = bitcast i32 %1984 to float
  %1986 = extractvalue %dx.types.ResRet.i32 %1617, 1
  %1987 = bitcast i32 %1986 to float
  %1988 = extractvalue %dx.types.ResRet.i32 %1617, 0
  %1989 = bitcast i32 %1988 to float
  %1990 = fadd fast float %1627, %1989
  %1991 = fadd fast float %1628, %1987
  %1992 = fadd fast float %1629, %1985
  %1993 = icmp eq i32 %1615, 2
  br i1 %1993, label %2046, label %1994

; <label>:1994                                    ; preds = %1961
  %1995 = call float @dx.op.unary.f32(i32 6, float %1990)  ; FAbs(value)
  %1996 = call float @dx.op.unary.f32(i32 6, float %1991)  ; FAbs(value)
  %1997 = fcmp fast ult float %1995, %1996
  %1998 = call float @dx.op.unary.f32(i32 6, float %1992)  ; FAbs(value)
  %1999 = fcmp fast ult float %1995, %1998
  %2000 = or i1 %1997, %1999
  br i1 %2000, label %2004, label %2001

; <label>:2001                                    ; preds = %1994
  %2002 = fcmp ule float %1990, 0.000000e+00
  %2003 = zext i1 %2002 to i32
  br label %2012

; <label>:2004                                    ; preds = %1994
  %2005 = fcmp fast ogt float %1996, %1998
  br i1 %2005, label %2006, label %2009

; <label>:2006                                    ; preds = %2004
  %2007 = fcmp fast ogt float %1991, 0.000000e+00
  %2008 = select i1 %2007, i32 2, i32 3
  br label %2012

; <label>:2009                                    ; preds = %2004
  %2010 = fcmp fast ogt float %1992, 0.000000e+00
  %2011 = select i1 %2010, i32 4, i32 5
  br label %2012

; <label>:2012                                    ; preds = %2009, %2006, %2001
  %2013 = phi i32 [ %2003, %2001 ], [ %2008, %2006 ], [ %2011, %2009 ]
  %2014 = add i32 %2013, %255
  %2015 = mul i32 %2014, 336
  %2016 = add i32 %2015, 96
  %2017 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %2016, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2018 = extractvalue %dx.types.ResRet.i32 %2017, 2
  %2019 = add i32 %2015, 112
  %2020 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %2019, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2021 = extractvalue %dx.types.ResRet.i32 %2020, 2
  %2022 = add i32 %2015, 128
  %2023 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %2022, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2024 = extractvalue %dx.types.ResRet.i32 %2023, 0
  %2025 = extractvalue %dx.types.ResRet.i32 %2023, 1
  %2026 = extractvalue %dx.types.ResRet.i32 %2023, 2
  %2027 = extractvalue %dx.types.ResRet.i32 %2023, 3
  %2028 = add i32 %2015, 144
  %2029 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %2028, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2030 = extractvalue %dx.types.ResRet.i32 %2029, 0
  %2031 = extractvalue %dx.types.ResRet.i32 %2029, 1
  %2032 = extractvalue %dx.types.ResRet.i32 %2029, 2
  %2033 = extractvalue %dx.types.ResRet.i32 %2029, 3
  %2034 = add i32 %2015, 160
  %2035 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %2034, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2036 = extractvalue %dx.types.ResRet.i32 %2035, 0
  %2037 = extractvalue %dx.types.ResRet.i32 %2035, 1
  %2038 = extractvalue %dx.types.ResRet.i32 %2035, 2
  %2039 = extractvalue %dx.types.ResRet.i32 %2035, 3
  %2040 = add i32 %2015, 176
  %2041 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %2040, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2042 = extractvalue %dx.types.ResRet.i32 %2041, 0
  %2043 = extractvalue %dx.types.ResRet.i32 %2041, 1
  %2044 = extractvalue %dx.types.ResRet.i32 %2041, 2
  %2045 = extractvalue %dx.types.ResRet.i32 %2041, 3
  br label %2046

; <label>:2046                                    ; preds = %2012, %1961
  %2047 = phi i32 [ %2018, %2012 ], [ %1983, %1961 ]
  %2048 = phi i32 [ %2021, %2012 ], [ %1980, %1961 ]
  %2049 = phi i32 [ %2024, %2012 ], [ %1977, %1961 ]
  %2050 = phi i32 [ %2025, %2012 ], [ %1976, %1961 ]
  %2051 = phi i32 [ %2026, %2012 ], [ %1975, %1961 ]
  %2052 = phi i32 [ %2027, %2012 ], [ %1974, %1961 ]
  %2053 = phi i32 [ %2030, %2012 ], [ %1973, %1961 ]
  %2054 = phi i32 [ %2031, %2012 ], [ %1972, %1961 ]
  %2055 = phi i32 [ %2032, %2012 ], [ %1971, %1961 ]
  %2056 = phi i32 [ %2033, %2012 ], [ %1970, %1961 ]
  %2057 = phi i32 [ %2036, %2012 ], [ %1969, %1961 ]
  %2058 = phi i32 [ %2037, %2012 ], [ %1968, %1961 ]
  %2059 = phi i32 [ %2038, %2012 ], [ %1967, %1961 ]
  %2060 = phi i32 [ %2039, %2012 ], [ %1966, %1961 ]
  %2061 = phi i32 [ %2042, %2012 ], [ %1965, %1961 ]
  %2062 = phi i32 [ %2043, %2012 ], [ %1964, %1961 ]
  %2063 = phi i32 [ %2044, %2012 ], [ %1963, %1961 ]
  %2064 = phi i32 [ %2045, %2012 ], [ %1962, %1961 ]
  %2065 = phi i32 [ %2014, %2012 ], [ %255, %1961 ]
  %2066 = bitcast i32 %2064 to float
  %2067 = bitcast i32 %2063 to float
  %2068 = bitcast i32 %2062 to float
  %2069 = bitcast i32 %2061 to float
  %2070 = bitcast i32 %2060 to float
  %2071 = bitcast i32 %2059 to float
  %2072 = bitcast i32 %2058 to float
  %2073 = bitcast i32 %2057 to float
  %2074 = bitcast i32 %2056 to float
  %2075 = bitcast i32 %2055 to float
  %2076 = bitcast i32 %2054 to float
  %2077 = bitcast i32 %2053 to float
  %2078 = bitcast i32 %2052 to float
  %2079 = bitcast i32 %2051 to float
  %2080 = bitcast i32 %2050 to float
  %2081 = bitcast i32 %2049 to float
  %2082 = bitcast i32 %2048 to float
  %2083 = bitcast i32 %2047 to float
  %2084 = fmul fast float %2081, %1990
  %2085 = call float @dx.op.tertiary.f32(i32 46, float %1991, float %2077, float %2084)  ; FMad(a,b,c)
  %2086 = call float @dx.op.tertiary.f32(i32 46, float %1992, float %2073, float %2085)  ; FMad(a,b,c)
  %2087 = fadd fast float %2086, %2069
  %2088 = fmul fast float %2080, %1990
  %2089 = call float @dx.op.tertiary.f32(i32 46, float %1991, float %2076, float %2088)  ; FMad(a,b,c)
  %2090 = call float @dx.op.tertiary.f32(i32 46, float %1992, float %2072, float %2089)  ; FMad(a,b,c)
  %2091 = fadd fast float %2090, %2068
  %2092 = fmul fast float %2079, %1990
  %2093 = call float @dx.op.tertiary.f32(i32 46, float %1991, float %2075, float %2092)  ; FMad(a,b,c)
  %2094 = call float @dx.op.tertiary.f32(i32 46, float %1992, float %2071, float %2093)  ; FMad(a,b,c)
  %2095 = fadd fast float %2094, %2067
  %2096 = fmul fast float %2078, %1990
  %2097 = call float @dx.op.tertiary.f32(i32 46, float %1991, float %2074, float %2096)  ; FMad(a,b,c)
  %2098 = call float @dx.op.tertiary.f32(i32 46, float %1992, float %2070, float %2097)  ; FMad(a,b,c)
  %2099 = fadd fast float %2098, %2066
  %2100 = fdiv fast float %2087, %2099
  %2101 = fdiv fast float %2091, %2099
  %2102 = fdiv fast float %2095, %2099
  %2103 = icmp ult i32 %2065, 8192
  br i1 %2103, label %2114, label %2104

; <label>:2104                                    ; preds = %2046
  %2105 = fmul fast float %2101, 1.280000e+02
  %2106 = fptoui float %2105 to i32
  %2107 = fmul fast float %2100, 1.280000e+02
  %2108 = fptoui float %2107 to i32
  %2109 = mul i32 %2065, 21845
  %2110 = shl i32 %2106, 7
  %2111 = add i32 %2109, -178946048
  %2112 = add i32 %2111, %2108
  %2113 = add i32 %2112, %2110
  br label %2114

; <label>:2114                                    ; preds = %2104, %2046
  %2115 = phi i32 [ %2113, %2104 ], [ %2065, %2046 ]
  %2116 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %2117 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2116, i32 %2115, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2118 = extractvalue %dx.types.ResRet.i32 %2117, 0
  %2119 = lshr i32 %2118, 20
  %2120 = and i32 %2119, 63
  %2121 = and i32 %2118, 134217728
  %2122 = icmp eq i32 %2121, 0
  %2123 = select i1 %2103, i32 7, i32 %2120
  %2124 = and i32 %2123, 31
  %2125 = lshr i32 16384, %2124
  %2126 = uitofp i32 %2125 to float
  %2127 = fmul fast float %2126, %2100
  %2128 = fmul fast float %2126, %2101
  %2129 = fptoui float %2127 to i32
  %2130 = fptoui float %2128 to i32
  br i1 %2122, label %2144, label %2131

; <label>:2131                                    ; preds = %2114
  %2132 = lshr i32 %2118, 3
  %2133 = and i32 %2132, 130944
  %2134 = and i32 %2130, 127
  %2135 = or i32 %2134, %2133
  %2136 = shl i32 %2118, 7
  %2137 = and i32 %2136, 130944
  %2138 = and i32 %2129, 127
  %2139 = or i32 %2138, %2137
  %2140 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %2141 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2140, i32 0, i32 %2139, i32 %2135, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2142 = extractvalue %dx.types.ResRet.i32 %2141, 0
  %2143 = bitcast i32 %2142 to float
  br label %2144

; <label>:2144                                    ; preds = %2131, %2114
  %2145 = phi float [ %2143, %2131 ], [ 0.000000e+00, %2114 ]
  %2146 = phi i32 [ %2123, %2131 ], [ 0, %2114 ]
  %2147 = phi i32 [ %2065, %2131 ], [ -1, %2114 ]
  %2148 = phi i1 [ true, %2131 ], [ false, %2114 ]
  %2149 = phi i32 [ %2129, %2131 ], [ 0, %2114 ]
  %2150 = phi i32 [ %2130, %2131 ], [ 0, %2114 ]
  %2151 = phi float [ %2127, %2131 ], [ 0.000000e+00, %2114 ]
  %2152 = phi float [ %2128, %2131 ], [ 0.000000e+00, %2114 ]
  br i1 %2148, label %2153, label %2253

; <label>:2153                                    ; preds = %2144
  %2154 = mul i32 %2147, 336
  %2155 = add i32 %2154, 96
  %2156 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %2155, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2157 = extractvalue %dx.types.ResRet.i32 %2156, 2
  %2158 = bitcast i32 %2157 to float
  %2159 = add i32 %2154, 192
  %2160 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %2159, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2161 = extractvalue %dx.types.ResRet.i32 %2160, 0
  %2162 = extractvalue %dx.types.ResRet.i32 %2160, 1
  %2163 = extractvalue %dx.types.ResRet.i32 %2160, 2
  %2164 = bitcast i32 %2161 to float
  %2165 = bitcast i32 %2162 to float
  %2166 = bitcast i32 %2163 to float
  %2167 = add i32 %2154, 208
  %2168 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %2167, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2169 = extractvalue %dx.types.ResRet.i32 %2168, 0
  %2170 = extractvalue %dx.types.ResRet.i32 %2168, 1
  %2171 = extractvalue %dx.types.ResRet.i32 %2168, 2
  %2172 = bitcast i32 %2169 to float
  %2173 = bitcast i32 %2170 to float
  %2174 = bitcast i32 %2171 to float
  %2175 = add i32 %2154, 224
  %2176 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %2175, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2177 = extractvalue %dx.types.ResRet.i32 %2176, 0
  %2178 = extractvalue %dx.types.ResRet.i32 %2176, 1
  %2179 = extractvalue %dx.types.ResRet.i32 %2176, 2
  %2180 = bitcast i32 %2177 to float
  %2181 = bitcast i32 %2178 to float
  %2182 = bitcast i32 %2179 to float
  %2183 = add i32 %2154, 240
  %2184 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1596, i32 %2183, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2185 = extractvalue %dx.types.ResRet.i32 %2184, 0
  %2186 = extractvalue %dx.types.ResRet.i32 %2184, 1
  %2187 = extractvalue %dx.types.ResRet.i32 %2184, 2
  %2188 = bitcast i32 %2185 to float
  %2189 = bitcast i32 %2186 to float
  %2190 = bitcast i32 %2187 to float
  %2191 = call float @dx.op.dot3.f32(i32 55, float %308, float %309, float %310, float %1990, float %1991, float %1992)  ; Dot3(ax,ay,az,bx,by,bz)
  %2192 = fsub fast float -0.000000e+00, %2191
  %2193 = fmul fast float %2164, %308
  %2194 = call float @dx.op.tertiary.f32(i32 46, float %309, float %2172, float %2193)  ; FMad(a,b,c)
  %2195 = call float @dx.op.tertiary.f32(i32 46, float %310, float %2180, float %2194)  ; FMad(a,b,c)
  %2196 = call float @dx.op.tertiary.f32(i32 46, float %2192, float %2188, float %2195)  ; FMad(a,b,c)
  %2197 = fmul fast float %2165, %308
  %2198 = call float @dx.op.tertiary.f32(i32 46, float %309, float %2173, float %2197)  ; FMad(a,b,c)
  %2199 = call float @dx.op.tertiary.f32(i32 46, float %310, float %2181, float %2198)  ; FMad(a,b,c)
  %2200 = call float @dx.op.tertiary.f32(i32 46, float %2192, float %2189, float %2199)  ; FMad(a,b,c)
  %2201 = fmul fast float %2166, %308
  %2202 = call float @dx.op.tertiary.f32(i32 46, float %309, float %2174, float %2201)  ; FMad(a,b,c)
  %2203 = call float @dx.op.tertiary.f32(i32 46, float %310, float %2182, float %2202)  ; FMad(a,b,c)
  %2204 = call float @dx.op.tertiary.f32(i32 46, float %2192, float %2190, float %2203)  ; FMad(a,b,c)
  %2205 = fsub fast float -0.000000e+00, %2196
  %2206 = fsub fast float -0.000000e+00, %2200
  %2207 = fdiv fast float %2205, %2204
  %2208 = fdiv fast float %2206, %2204
  %2209 = and i32 %2146, 31
  %2210 = lshr i32 16384, %2209
  %2211 = uitofp i32 %2210 to float
  %2212 = uitofp i32 %2149 to float
  %2213 = uitofp i32 %2150 to float
  %2214 = fadd fast float %2212, 5.000000e-01
  %2215 = fadd fast float %2213, 5.000000e-01
  %2216 = fsub fast float %2214, %2151
  %2217 = fsub fast float %2215, %2152
  %2218 = fdiv fast float %2216, %2211
  %2219 = fdiv fast float %2217, %2211
  %2220 = call float @dx.op.dot2.f32(i32 54, float %2207, float %2208, float %2218, float %2219)  ; Dot2(ax,ay,bx,by)
  %2221 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2220)  ; FMax(a,b)
  %2222 = fmul fast float %2221, 2.000000e+00
  %2223 = fmul fast float %2158, 1.000000e+02
  %2224 = call float @dx.op.unary.f32(i32 6, float %2223)  ; FAbs(value)
  %2225 = call float @dx.op.binary.f32(i32 36, float %2222, float %2224)  ; FMin(a,b)
  %2226 = sub nsw i32 %2147, %2065
  %2227 = and i32 %2226, 31
  %2228 = shl i32 1, %2227
  %2229 = uitofp i32 %2228 to float
  %2230 = fmul fast float %2225, %2229
  %2231 = fmul fast float %1594, %2083
  %2232 = fsub fast float -0.000000e+00, %2231
  %2233 = fdiv fast float %2232, %2099
  %2234 = fsub fast float %2145, %2230
  %2235 = fsub fast float %2234, %2233
  %2236 = fcmp fast ogt float %2235, %2102
  br i1 %2236, label %2237, label %2253

; <label>:2237                                    ; preds = %2153
  %2238 = fmul fast float %1990, %1990
  %2239 = fmul fast float %1991, %1991
  %2240 = fadd fast float %2238, %2239
  %2241 = fmul fast float %1992, %1992
  %2242 = fadd fast float %2240, %2241
  %2243 = call float @dx.op.unary.f32(i32 24, float %2242)  ; Sqrt(value)
  %2244 = fsub fast float %2145, %2083
  %2245 = fdiv fast float %2082, %2244
  %2246 = fsub fast float %2102, %2083
  %2247 = fmul fast float %2243, %2246
  %2248 = fdiv fast float %2247, %2082
  %2249 = fmul fast float %2248, %2245
  %2250 = fsub fast float %2243, %2249
  %2251 = call float @dx.op.binary.f32(i32 35, float 0x3EB0C6F7A0000000, float %2250)  ; FMax(a,b)
  %2252 = fadd fast float %2251, %1594
  br label %2253

; <label>:2253                                    ; preds = %2237, %2153, %2144, %1957, %1878, %1870, %1630, %1571, %463
  %2254 = phi float [ 0.000000e+00, %463 ], [ %1581, %1571 ], [ 0.000000e+00, %1957 ], [ 1.000000e+00, %1878 ], [ 0.000000e+00, %2237 ], [ 1.000000e+00, %2153 ], [ 1.000000e+00, %2144 ], [ 1.000000e+00, %1870 ], [ 1.000000e+00, %1630 ]
  %2255 = phi float [ -1.000000e+00, %463 ], [ %1578, %1571 ], [ %1960, %1957 ], [ -1.000000e+00, %1878 ], [ %2252, %2237 ], [ -1.000000e+00, %2153 ], [ -1.000000e+00, %2144 ], [ -1.000000e+00, %1870 ], [ -1.000000e+00, %1630 ]
  %2256 = fcmp fast olt float %205, 1.000000e+00
  %2257 = fcmp fast olt float %2254, 1.000000e+00
  %2258 = and i1 %2256, %2257
  br i1 %2258, label %2259, label %2271

; <label>:2259                                    ; preds = %2253
  %2260 = call float @dx.op.binary.f32(i32 36, float %205, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %2261 = fsub fast float 1.000000e+00, %2260
  %2262 = call float @dx.op.unary.f32(i32 23, float %2261)  ; Log(value)
  %2263 = fmul fast float %2255, 0x3FA99999A0000000
  %2264 = fmul fast float %2263, %2262
  %2265 = call float @dx.op.unary.f32(i32 21, float %2264)  ; Exp(value)
  %2266 = call float @dx.op.unary.f32(i32 7, float %2265)  ; Saturate(value)
  %2267 = fsub fast float 1.000000e+00, %2266
  %2268 = fmul fast float %2267, %2254
  %2269 = fadd fast float %2268, %2266
  %2270 = fmul fast float %2269, %2269
  br label %2271

; <label>:2271                                    ; preds = %2259, %2253, %257
  %2272 = phi float [ %2254, %2253 ], [ 1.000000e+00, %257 ], [ %2270, %2259 ]
  %2273 = fcmp fast ogt float %2272, 0x3F91111120000000
  %2274 = fcmp fast olt float %2272, 1.000000e+00
  %2275 = and i1 %2273, %2274
  br i1 %2275, label %2276, label %2297

; <label>:2276                                    ; preds = %2271
  %2277 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %22, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %2278 = extractvalue %dx.types.CBufRet.i32 %2277, 1
  %2279 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %19, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %2280 = extractvalue %dx.types.CBufRet.i32 %2279, 0
  %2281 = extractvalue %dx.types.CBufRet.i32 %2279, 1
  %2282 = extractvalue %dx.types.CBufRet.i32 %2279, 2
  %2283 = and i32 %2280, %73
  %2284 = and i32 %2281, %74
  %2285 = and i32 %2282, %2278
  %2286 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %19, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2287 = extractvalue %dx.types.CBufRet.i32 %2286, 1
  %2288 = mul i32 %2285, %2287
  %2289 = add i32 %2288, %2284
  %2290 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2291 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2290, i32 0, i32 %2283, i32 %2289, i32 undef, i32 0, i32 0, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2292 = extractvalue %dx.types.ResRet.f32 %2291, 0
  %2293 = fadd fast float %2292, -5.000000e-01
  %2294 = fmul fast float %2293, 0x3FB1111120000000
  %2295 = fadd fast float %2294, %2272
  %2296 = call float @dx.op.unary.f32(i32 7, float %2295)  ; Saturate(value)
  br label %2297

; <label>:2297                                    ; preds = %2276, %2271
  %2298 = phi float [ %2296, %2276 ], [ %2272, %2271 ]
  %2299 = fmul fast float %2298, 1.500000e+01
  %2300 = call float @dx.op.unary.f32(i32 26, float %2299)  ; Round_ne(value)
  %2301 = fptoui float %2300 to i32
  %2302 = and i32 %2301, 15
  %2303 = xor i32 %2302, 15
  %2304 = lshr i32 %239, 3
  %2305 = icmp eq i32 %2304, 0
  br i1 %2305, label %2306, label %2310

; <label>:2306                                    ; preds = %2297
  %2307 = shl i32 %239, 2
  %2308 = and i32 %2307, 28
  %2309 = shl i32 %2303, %2308
  br label %2310

; <label>:2310                                    ; preds = %2306, %2297
  %2311 = phi i32 [ %2309, %2306 ], [ 0, %2297 ]
  %2312 = xor i32 %2311, %235
  %2313 = icmp eq i32 %2304, 1
  br i1 %2313, label %2314, label %2318

; <label>:2314                                    ; preds = %2310
  %2315 = shl i32 %239, 2
  %2316 = and i32 %2315, 28
  %2317 = shl i32 %2303, %2316
  br label %2318

; <label>:2318                                    ; preds = %2314, %2310
  %2319 = phi i32 [ %2317, %2314 ], [ 0, %2310 ]
  %2320 = xor i32 %2319, %236
  %2321 = icmp eq i32 %2304, 2
  br i1 %2321, label %2322, label %2326

; <label>:2322                                    ; preds = %2318
  %2323 = shl i32 %239, 2
  %2324 = and i32 %2323, 28
  %2325 = shl i32 %2303, %2324
  br label %2326

; <label>:2326                                    ; preds = %2322, %2318
  %2327 = phi i32 [ %2325, %2322 ], [ 0, %2318 ]
  %2328 = xor i32 %2327, %237
  %2329 = icmp eq i32 %2304, 3
  br i1 %2329, label %2330, label %2334

; <label>:2330                                    ; preds = %2326
  %2331 = shl i32 %239, 2
  %2332 = and i32 %2331, 28
  %2333 = shl i32 %2303, %2332
  br label %2334

; <label>:2334                                    ; preds = %2330, %2326
  %2335 = phi i32 [ %2333, %2330 ], [ 0, %2326 ]
  %2336 = xor i32 %2335, %238
  br label %2337

; <label>:2337                                    ; preds = %2334, %234
  %2338 = phi i32 [ %235, %234 ], [ %2312, %2334 ]
  %2339 = phi i32 [ %236, %234 ], [ %2320, %2334 ]
  %2340 = phi i32 [ %237, %234 ], [ %2328, %2334 ]
  %2341 = phi i32 [ %238, %234 ], [ %2336, %2334 ]
  %2342 = add nuw i32 %239, 1
  %2343 = icmp eq i32 %2342, %231
  br i1 %2343, label %2344, label %234, !llvm.loop !34

; <label>:2344                                    ; preds = %2337
  br label %2345

; <label>:2345                                    ; preds = %2344, %204
  %2346 = phi i32 [ -1, %204 ], [ %2338, %2344 ]
  %2347 = phi i32 [ -1, %204 ], [ %2339, %2344 ]
  %2348 = phi i32 [ -1, %204 ], [ %2340, %2344 ]
  %2349 = phi i32 [ -1, %204 ], [ %2341, %2344 ]
  %2350 = xor i32 %2346, -1
  %2351 = xor i32 %2347, -1
  %2352 = xor i32 %2348, -1
  %2353 = xor i32 %2349, -1
  %2354 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 1029 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xU32>
  call void @dx.op.textureStore.i32(i32 67, %dx.types.Handle %2354, i32 %73, i32 %74, i32 undef, i32 %2350, i32 %2351, i32 %2352, i32 %2353, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %2355

; <label>:2355                                    ; preds = %2345, %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.flattenedThreadIdInGroup.i32(i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.textureStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.unary.i32(i32, i32) #0

; Function Attrs: nounwind
declare i1 @dx.op.waveAllTrue(i32, i1) #2

; Function Attrs: nounwind
declare i1 @dx.op.waveAnyTrue(i32, i1) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!30}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !20, !22, !28}
!5 = !{!6, !8, !9, !10, !11, !12, !14, !16, !17, !18, !19}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{i32 2, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !7}
!10 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!11 = !{i32 4, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 4, i32 1, i32 11, i32 0, null}
!12 = !{i32 5, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 5, i32 1, i32 12, i32 0, !13}
!13 = !{i32 1, i32 4}
!14 = !{i32 6, %"class.Texture2DArray<unsigned int>"* undef, !"", i32 0, i32 6, i32 1, i32 7, i32 0, !15}
!15 = !{i32 0, i32 5}
!16 = !{i32 7, %"class.Buffer<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 10, i32 0, !7}
!17 = !{i32 8, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 8, i32 1, i32 10, i32 0, !15}
!18 = !{i32 9, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 9, i32 1, i32 10, i32 0, !15}
!19 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !7}
!20 = !{!21}
!21 = !{i32 0, %"class.RWTexture2D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !15}
!22 = !{!23, !24, !25, !26, !27}
!23 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 368, null}
!24 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!25 = !{i32 2, %UniformBufferConstants_VirtualShadowMap* undef, !"", i32 0, i32 2, i32 1, i32 116, null}
!26 = !{i32 3, %hostlayout.UniformBufferConstants_ForwardLightData* undef, !"", i32 0, i32 3, i32 1, i32 708, null}
!27 = !{i32 4, %UniformBufferConstants_BlueNoise* undef, !"", i32 0, i32 4, i32 1, i32 44, null}
!28 = !{!29}
!29 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!30 = !{void ()* @VirtualShadowMapProjection, !"VirtualShadowMapProjection", null, !4, !31}
!31 = !{i32 0, i64 524304, i32 4, !32, i32 5, !33}
!32 = !{i32 8, i32 8, i32 1}
!33 = !{i32 0}
!34 = distinct !{!34, !35}
!35 = !{!"llvm.loop.unroll.disable"}
