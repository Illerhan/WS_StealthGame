;
; Note: shader requires additional functionality:
;       Wave level operations
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 316af3261d1566315a2a57b05c4dc874
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(8,8,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       float ScreenRayLength;                        ; Offset:  112
;       int SMRTRayCount;                             ; Offset:  116
;       int SMRTSamplesPerRay;                        ; Offset:  120
;       float SMRTRayLengthScale;                     ; Offset:  124
;       float SMRTCotMaxRayAngleFromLight;            ; Offset:  128
;       float SMRTTexelDitherScale;                   ; Offset:  132
;       float SMRTExtrapolateSlope;                   ; Offset:  136
;       float SMRTMaxSlopeBias;                       ; Offset:  140
;       uint SMRTAdaptiveRayCount;                    ; Offset:  144
;       int4 ProjectionRect;                          ; Offset:  160
;       float NormalBias;                             ; Offset:  176
;       float SubsurfaceMinSourceRadius;              ; Offset:  180
;       uint InputType;                               ; Offset:  184
;       uint bCullBackfacingPixels;                   ; Offset:  188
;       float3 Light_TranslatedWorldPosition;         ; Offset:  224
;       float Light_InvRadius;                        ; Offset:  236
;       float3 Light_Color;                           ; Offset:  240
;       float Light_FalloffExponent;                  ; Offset:  252
;       float3 Light_Direction;                       ; Offset:  256
;       float Light_SpecularScale;                    ; Offset:  268
;       float3 Light_Tangent;                         ; Offset:  272
;       float Light_SourceRadius;                     ; Offset:  284
;       float2 Light_SpotAngles;                      ; Offset:  288
;       float Light_SoftSourceRadius;                 ; Offset:  296
;       float Light_SourceLength;                     ; Offset:  300
;       float Light_RectLightBarnCosAngle;            ; Offset:  304
;       float Light_RectLightBarnLength;              ; Offset:  308
;       float2 Light_RectLightAtlasUVOffset;          ; Offset:  312
;       float2 Light_RectLightAtlasUVScale;           ; Offset:  320
;       float Light_RectLightAtlasMaxLevel;           ; Offset:  328
;       int LightUniformVirtualShadowMapId;           ; Offset:  336
;       int VisualizeModeId;                          ; Offset:  360
;       int VisualizeVirtualShadowMapId;              ; Offset:  364
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   368
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_VirtualShadowMap
; {
;
;   struct UniformBufferConstants_VirtualShadowMap
;   {
;
;       uint VirtualShadowMap_NumFullShadowMaps;      ; Offset:    0
;       uint VirtualShadowMap_NumSinglePageShadowMaps;; Offset:    4
;       uint VirtualShadowMap_MaxPhysicalPages;       ; Offset:    8
;       uint VirtualShadowMap_NumShadowMapSlots;      ; Offset:   12
;       uint VirtualShadowMap_StaticCachedArrayIndex; ; Offset:   16
;       uint VirtualShadowMap_PhysicalPageRowMask;    ; Offset:   20
;       uint VirtualShadowMap_PhysicalPageRowShift;   ; Offset:   24
;       uint VirtualShadowMap_PackedShadowMaskMaxLightCount;; Offset:   28
;       float4 VirtualShadowMap_RecPhysicalPoolSize;  ; Offset:   32
;       int2 VirtualShadowMap_PhysicalPoolSize;       ; Offset:   48
;       int2 VirtualShadowMap_PhysicalPoolSizePages;  ; Offset:   56
;       uint VirtualShadowMap_bExcludeNonNaniteFromCoarsePages;; Offset:   64
;       float VirtualShadowMap_CoarsePagePixelThresholdDynamic;; Offset:   68
;       float VirtualShadowMap_CoarsePagePixelThresholdStatic;; Offset:   72
;       float VirtualShadowMap_CoarsePagePixelThresholdDynamicNanite;; Offset:   76
;       uint BindlessResource_VirtualShadowMap_ProjectionData;; Offset:   80
;       uint PrePadding_VirtualShadowMap_84;          ; Offset:   84
;       uint BindlessResource_VirtualShadowMap_PageTable;; Offset:   88
;       uint PrePadding_VirtualShadowMap_92;          ; Offset:   92
;       uint BindlessResource_VirtualShadowMap_PageFlags;; Offset:   96
;       uint PrePadding_VirtualShadowMap_100;         ; Offset:  100
;       uint BindlessResource_VirtualShadowMap_PageRectBounds;; Offset:  104
;       uint PrePadding_VirtualShadowMap_108;         ; Offset:  108
;       uint BindlessResource_VirtualShadowMap_PhysicalPagePool;; Offset:  112
;   
;   } UniformBufferConstants_VirtualShadowMap;        ; Offset:    0 Size:   116
;
; }
;
; cbuffer UniformBufferConstants_ForwardLightData
; {
;
;   struct hostlayout.UniformBufferConstants_ForwardLightData
;   {
;
;       uint ForwardLightData_NumLocalLights;         ; Offset:    0
;       uint ForwardLightData_NumReflectionCaptures;  ; Offset:    4
;       uint ForwardLightData_HasDirectionalLight;    ; Offset:    8
;       uint ForwardLightData_NumGridCells;           ; Offset:   12
;       int3 ForwardLightData_CulledGridSize;         ; Offset:   16
;       uint ForwardLightData_MaxCulledLightsPerCell; ; Offset:   28
;       uint ForwardLightData_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_ForwardLightData_36;          ; Offset:   36
;       uint PrePadding_ForwardLightData_40;          ; Offset:   40
;       uint PrePadding_ForwardLightData_44;          ; Offset:   44
;       float3 ForwardLightData_LightGridZParams;     ; Offset:   48
;       float PrePadding_ForwardLightData_60;         ; Offset:   60
;       float3 ForwardLightData_DirectionalLightDirection;; Offset:   64
;       float ForwardLightData_DirectionalLightSourceRadius;; Offset:   76
;       float3 ForwardLightData_DirectionalLightColor;; Offset:   80
;       float ForwardLightData_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint ForwardLightData_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_ForwardLightData_100;         ; Offset:  100
;       float2 ForwardLightData_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint ForwardLightData_NumDirectionalLightCascades;; Offset:  112
;       int ForwardLightData_DirectionalLightVSM;     ; Offset:  116
;       int PrePadding_ForwardLightData_120;          ; Offset:  120
;       int PrePadding_ForwardLightData_124;          ; Offset:  124
;       float4 ForwardLightData_CascadeEndDepths;     ; Offset:  128
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 ForwardLightData_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float ForwardLightData_DirectionalLightDepthBias;; Offset:  480
;       uint ForwardLightData_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint ForwardLightData_SimpleLightsEndIndex;   ; Offset:  488
;       uint ForwardLightData_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint ForwardLightData_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_ForwardLightData_500;         ; Offset:  500
;       uint PrePadding_ForwardLightData_504;         ; Offset:  504
;       uint PrePadding_ForwardLightData_508;         ; Offset:  508
;       float4 ForwardLightData_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint ForwardLightData_DirectLightingShowFlag; ; Offset:  592
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_604;; Offset:  604
;       float ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_ForwardLightData_644;         ; Offset:  644
;       uint PrePadding_ForwardLightData_648;         ; Offset:  648
;       uint PrePadding_ForwardLightData_652;         ; Offset:  652
;       uint BindlessResource_ForwardLightData_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_ForwardLightData_660;         ; Offset:  660
;       uint BindlessSampler_ForwardLightData_ShadowmapSampler;; Offset:  664
;       uint PrePadding_ForwardLightData_668;         ; Offset:  668
;       uint BindlessResource_ForwardLightData_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_ForwardLightData_676;         ; Offset:  676
;       uint BindlessSampler_ForwardLightData_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_ForwardLightData_684;         ; Offset:  684
;       uint BindlessResource_ForwardLightData_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_ForwardLightData_692;         ; Offset:  692
;       uint BindlessResource_ForwardLightData_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_ForwardLightData_700;         ; Offset:  700
;       uint BindlessResource_ForwardLightData_CulledLightDataGrid;; Offset:  704
;   
;   } UniformBufferConstants_ForwardLightData;        ; Offset:    0 Size:   708
;
; }
;
; cbuffer UniformBufferConstants_BlueNoise
; {
;
;   struct UniformBufferConstants_BlueNoise
;   {
;
;       int3 BlueNoise_Dimensions;                    ; Offset:    0
;       int PrePadding_BlueNoise_12;                  ; Offset:   12
;       int3 BlueNoise_ModuloMasks;                   ; Offset:   16
;       int PrePadding_BlueNoise_28;                  ; Offset:   28
;       uint BindlessResource_BlueNoise_ScalarTexture;; Offset:   32
;       uint PrePadding_BlueNoise_36;                 ; Offset:   36
;       uint BindlessResource_BlueNoise_Vec2Texture;  ; Offset:   40
;   
;   } UniformBufferConstants_BlueNoise;               ; Offset:    0 Size:    44
;
; }
;
; cbuffer UniformBufferConstants_VirtualVoxel
; {
;
;   struct UniformBufferConstants_VirtualVoxel
;   {
;
;       int3 VirtualVoxel_PageCountResolution;        ; Offset:    0
;       float VirtualVoxel_CPUMinVoxelWorldSize;      ; Offset:   12
;       int3 VirtualVoxel_PageTextureResolution;      ; Offset:   16
;       uint VirtualVoxel_PageCount;                  ; Offset:   28
;       uint VirtualVoxel_PageResolution;             ; Offset:   32
;       uint VirtualVoxel_PageResolutionLog2;         ; Offset:   36
;       uint VirtualVoxel_PageIndexCount;             ; Offset:   40
;       uint VirtualVoxel_IndirectDispatchGroupSize;  ; Offset:   44
;       uint VirtualVoxel_NodeDescCount;              ; Offset:   48
;       uint VirtualVoxel_JitterMode;                 ; Offset:   52
;       float VirtualVoxel_DensityScale;              ; Offset:   56
;       float VirtualVoxel_DensityScale_AO;           ; Offset:   60
;       float VirtualVoxel_DensityScale_Shadow;       ; Offset:   64
;       float VirtualVoxel_DensityScale_Transmittance;; Offset:   68
;       float VirtualVoxel_DensityScale_Environment;  ; Offset:   72
;       float VirtualVoxel_DensityScale_Raytracing;   ; Offset:   76
;       float VirtualVoxel_DepthBiasScale_Shadow;     ; Offset:   80
;       float VirtualVoxel_DepthBiasScale_Transmittance;; Offset:   84
;       float VirtualVoxel_DepthBiasScale_Environment;; Offset:   88
;       float VirtualVoxel_SteppingScale_Shadow;      ; Offset:   92
;       float VirtualVoxel_SteppingScale_Transmittance;; Offset:   96
;       float VirtualVoxel_SteppingScale_Environment; ; Offset:  100
;       float VirtualVoxel_SteppingScale_Raytracing;  ; Offset:  104
;       float VirtualVoxel_HairCoveragePixelRadiusAtDepth1;; Offset:  108
;       float VirtualVoxel_Raytracing_ShadowOcclusionThreshold;; Offset:  112
;       float VirtualVoxel_Raytracing_SkyOcclusionThreshold;; Offset:  116
;       float PrePadding_VirtualVoxel_120;            ; Offset:  120
;       float PrePadding_VirtualVoxel_124;            ; Offset:  124
;       float3 VirtualVoxel_TranslatedWorldOffset;    ; Offset:  128
;       float PrePadding_VirtualVoxel_140;            ; Offset:  140
;       float3 VirtualVoxel_TranslatedWorldOffsetStereoCorrection;; Offset:  144
;       uint VirtualVoxel_AllocationFeedbackEnable;   ; Offset:  156
;       uint BindlessResource_VirtualVoxel_PageIndexBuffer;; Offset:  160
;       uint PrePadding_VirtualVoxel_164;             ; Offset:  164
;       uint BindlessResource_VirtualVoxel_PageIndexOccupancyBuffer;; Offset:  168
;       uint PrePadding_VirtualVoxel_172;             ; Offset:  172
;       uint BindlessResource_VirtualVoxel_PageIndexCoordBuffer;; Offset:  176
;       uint PrePadding_VirtualVoxel_180;             ; Offset:  180
;       uint BindlessResource_VirtualVoxel_NodeDescBuffer;; Offset:  184
;       uint PrePadding_VirtualVoxel_188;             ; Offset:  188
;       uint BindlessResource_VirtualVoxel_CurrGPUMinVoxelSize;; Offset:  192
;       uint PrePadding_VirtualVoxel_196;             ; Offset:  196
;       uint BindlessResource_VirtualVoxel_NextGPUMinVoxelSize;; Offset:  200
;       float PrePadding_VirtualVoxel_204;            ; Offset:  204
;       uint BindlessResource_VirtualVoxel_PageTexture;; Offset:  208
;   
;   } UniformBufferConstants_VirtualVoxel;            ; Offset:    0 Size:   212
;
; }
;
; Resource bind info for VirtualShadowMap_PageTable
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for VirtualVoxel_NodeDescBuffer
; {
;
;   struct struct.FPackedVirtualVoxelNodeDesc
;   {
;
;       float3 TranslatedWorldMinAABB;                ; Offset:    0
;       uint PackedPageIndexResolution;               ; Offset:   12
;       float3 TranslatedWorldMaxAABB;                ; Offset:   16
;       uint PageIndexOffset_VoxelWorldSize;          ; Offset:   28
;   
;   } $Element;                                       ; Offset:    0 Size:    32
;
; }
;
; Resource bind info for PhysicalPageMetaData
; {
;
;   struct struct.FPhysicalPageMetaData
;   {
;
;       uint Flags;                                   ; Offset:    0
;       uint Age;                                     ; Offset:    4
;       uint VirtualPageOffset;                       ; Offset:    8
;       uint VirtualShadowMapId;                      ; Offset:   12
;   
;   } $Element;                                       ; Offset:    0 Size:    16
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_VirtualShadowMap   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_ForwardLightData   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_BlueNoise   cbuffer      NA          NA     CB4            cb4     1
; UniformBufferConstants_VirtualVoxel   cbuffer      NA          NA     CB5            cb5     1
; SceneTexturesStruct_PointClampSampler   sampler      NA          NA      S0             s0     1
; SceneTexturesStruct_SceneDepthTexture   texture     f32          2d      T0             t0     1
; SceneTexturesStruct_GBufferATexture   texture     f32          2d      T1             t1     1
; SceneTexturesStruct_GBufferBTexture   texture     f32          2d      T2             t2     1
; SceneTexturesStruct_GBufferDTexture   texture     f32          2d      T3             t3     1
; VirtualShadowMap_ProjectionData   texture    byte         r/o      T4             t4     1
; VirtualShadowMap_PageTable        texture  struct         r/o      T5             t5     1
; VirtualShadowMap_PhysicalPagePool   texture     u32     2darray      T6             t6     1
; ForwardLightData_ForwardLocalLightBuffer   texture     f32         buf      T7             t7     1
; ForwardLightData_NumCulledLightsGrid   texture     u32         buf      T8             t8     1
; ForwardLightData_CulledLightDataGrid   texture     u32         buf      T9             t9     1
; BlueNoise_ScalarTexture           texture     f32          2d     T10            t10     1
; VirtualVoxel_PageIndexBuffer      texture     u32         buf     T11            t11     1
; VirtualVoxel_NodeDescBuffer       texture  struct         r/o     T12            t12     1
; VirtualVoxel_PageTexture          texture     u32          3d     T13            t13     1
; HairStrands_HairOnlyDepthTexture   texture     f32          2d     T14            t14     1
; PhysicalPageMetaData              texture  struct         r/o     T15            t15     1
; OutShadowMaskBits                     UAV     u32          2d      U0             u0     1
; OutVisualize                          UAV     f32          2d      U1             u1     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Texture2DArray<unsigned int>" = type { i32, %"class.Texture2DArray<unsigned int>::mips_type" }
%"class.Texture2DArray<unsigned int>::mips_type" = type { i32 }
%"class.Buffer<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.StructuredBuffer<FPackedVirtualVoxelNodeDesc>" = type { %struct.FPackedVirtualVoxelNodeDesc }
%struct.FPackedVirtualVoxelNodeDesc = type { <3 x float>, i32, <3 x float>, i32 }
%"class.Texture3D<unsigned int>" = type { i32, %"class.Texture3D<unsigned int>::mips_type" }
%"class.Texture3D<unsigned int>::mips_type" = type { i32 }
%"class.StructuredBuffer<FPhysicalPageMetaData>" = type { %struct.FPhysicalPageMetaData }
%struct.FPhysicalPageMetaData = type { i32, i32, i32, i32 }
%"class.RWTexture2D<vector<unsigned int, 4> >" = type { <4 x i32> }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }
%_RootShaderParameters = type { float, i32, i32, float, float, float, float, float, i32, <4 x i32>, float, float, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, float, float, <2 x float>, <2 x float>, float, i32, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_VirtualShadowMap = type { i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x i32>, <2 x i32>, i32, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%hostlayout.UniformBufferConstants_ForwardLightData = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_BlueNoise = type { <3 x i32>, i32, <3 x i32>, i32, i32, i32, i32 }
%UniformBufferConstants_VirtualVoxel = type { <3 x i32>, float, <3 x i32>, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32 }
%struct.SamplerState = type { i32 }

define void @VirtualShadowMapProjection() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 1 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 2 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 13, i32 212 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %27 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 13, i32 44 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %28 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 13, i32 708 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %29 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 13, i32 116 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %30 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %31 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 13, i32 368 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %32 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %33 = call i32 @dx.op.groupId.i32(i32 94, i32 1)  ; GroupId(component)
  %34 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)  ; FlattenedThreadIdInGroup()
  %35 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %28, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %36 = extractvalue %dx.types.CBufRet.i32 %35, 0
  %37 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %28, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %38 = extractvalue %dx.types.CBufRet.i32 %37, 0
  %39 = extractvalue %dx.types.CBufRet.i32 %37, 1
  %40 = extractvalue %dx.types.CBufRet.i32 %37, 2
  %41 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %28, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %42 = extractvalue %dx.types.CBufRet.i32 %41, 0
  %43 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %44 = extractvalue %dx.types.CBufRet.f32 %43, 0
  %45 = extractvalue %dx.types.CBufRet.f32 %43, 1
  %46 = extractvalue %dx.types.CBufRet.f32 %43, 2
  %47 = shl i32 %32, 3
  %48 = shl i32 %33, 3
  %49 = and i32 %34, 1431655765
  %50 = lshr i32 %49, 1
  %51 = or i32 %50, %49
  %52 = and i32 %51, 858993459
  %53 = lshr i32 %52, 2
  %54 = or i32 %53, %52
  %55 = and i32 %54, 252645135
  %56 = lshr i32 %55, 4
  %57 = or i32 %56, %55
  %58 = lshr i32 %57, 8
  %59 = and i32 %58, 65280
  %60 = and i32 %57, 255
  %61 = or i32 %59, %60
  %62 = lshr i32 %34, 1
  %63 = and i32 %62, 1431655765
  %64 = lshr i32 %63, 1
  %65 = or i32 %64, %63
  %66 = and i32 %65, 858993459
  %67 = lshr i32 %66, 2
  %68 = or i32 %67, %66
  %69 = and i32 %68, 252645135
  %70 = lshr i32 %69, 4
  %71 = or i32 %70, %69
  %72 = lshr i32 %71, 8
  %73 = and i32 %72, 65280
  %74 = and i32 %71, 255
  %75 = or i32 %73, %74
  %76 = add i32 %61, %47
  %77 = add i32 %75, %48
  %78 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %31, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %79 = extractvalue %dx.types.CBufRet.i32 %78, 0
  %80 = extractvalue %dx.types.CBufRet.i32 %78, 1
  %81 = add i32 %76, %79
  %82 = add i32 %77, %80
  %83 = extractvalue %dx.types.CBufRet.i32 %78, 2
  %84 = extractvalue %dx.types.CBufRet.i32 %78, 3
  %85 = icmp uge i32 %81, %83
  %86 = icmp uge i32 %82, %84
  %87 = or i1 %85, %86
  br i1 %87, label %3398, label %88

; <label>:88                                      ; preds = %0
  %89 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %90 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %89, i32 0, i32 %81, i32 %82, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %91 = extractvalue %dx.types.ResRet.f32 %90, 0
  %92 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %31, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %93 = extractvalue %dx.types.CBufRet.i32 %92, 2
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %95, label %100

; <label>:95                                      ; preds = %88
  %96 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %97 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %96, i32 0, i32 %81, i32 %82, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %98 = extractvalue %dx.types.ResRet.f32 %97, 0
  %99 = fcmp fast oeq float %98, 0.000000e+00
  br i1 %99, label %3398, label %100

; <label>:100                                     ; preds = %95, %88
  %101 = phi float [ %98, %95 ], [ %91, %88 ]
  %102 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %103 = extractvalue %dx.types.CBufRet.f32 %102, 0
  %104 = fmul fast float %103, %101
  %105 = extractvalue %dx.types.CBufRet.f32 %102, 1
  %106 = fadd fast float %104, %105
  %107 = extractvalue %dx.types.CBufRet.f32 %102, 2
  %108 = fmul fast float %107, %101
  %109 = extractvalue %dx.types.CBufRet.f32 %102, 3
  %110 = fsub fast float %108, %109
  %111 = fdiv fast float 1.000000e+00, %110
  %112 = fadd fast float %106, %111
  %113 = uitofp i32 %81 to float
  %114 = uitofp i32 %82 to float
  %115 = fadd fast float %113, 5.000000e-01
  %116 = fadd fast float %114, 5.000000e-01
  %117 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %118 = extractvalue %dx.types.CBufRet.f32 %117, 0
  %119 = extractvalue %dx.types.CBufRet.f32 %117, 1
  %120 = extractvalue %dx.types.CBufRet.f32 %117, 2
  %121 = extractvalue %dx.types.CBufRet.f32 %117, 3
  %122 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %123 = extractvalue %dx.types.CBufRet.f32 %122, 0
  %124 = extractvalue %dx.types.CBufRet.f32 %122, 1
  %125 = extractvalue %dx.types.CBufRet.f32 %122, 2
  %126 = extractvalue %dx.types.CBufRet.f32 %122, 3
  %127 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %128 = extractvalue %dx.types.CBufRet.f32 %127, 0
  %129 = extractvalue %dx.types.CBufRet.f32 %127, 1
  %130 = extractvalue %dx.types.CBufRet.f32 %127, 2
  %131 = extractvalue %dx.types.CBufRet.f32 %127, 3
  %132 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %133 = extractvalue %dx.types.CBufRet.f32 %132, 0
  %134 = extractvalue %dx.types.CBufRet.f32 %132, 1
  %135 = extractvalue %dx.types.CBufRet.f32 %132, 2
  %136 = extractvalue %dx.types.CBufRet.f32 %132, 3
  %137 = fmul fast float %118, %115
  %138 = call float @dx.op.tertiary.f32(i32 46, float %116, float %123, float %137)  ; FMad(a,b,c)
  %139 = call float @dx.op.tertiary.f32(i32 46, float %101, float %128, float %138)  ; FMad(a,b,c)
  %140 = fadd fast float %139, %133
  %141 = fmul fast float %119, %115
  %142 = call float @dx.op.tertiary.f32(i32 46, float %116, float %124, float %141)  ; FMad(a,b,c)
  %143 = call float @dx.op.tertiary.f32(i32 46, float %101, float %129, float %142)  ; FMad(a,b,c)
  %144 = fadd fast float %143, %134
  %145 = fmul fast float %120, %115
  %146 = call float @dx.op.tertiary.f32(i32 46, float %116, float %125, float %145)  ; FMad(a,b,c)
  %147 = call float @dx.op.tertiary.f32(i32 46, float %101, float %130, float %146)  ; FMad(a,b,c)
  %148 = fadd fast float %147, %135
  %149 = fmul fast float %121, %115
  %150 = call float @dx.op.tertiary.f32(i32 46, float %116, float %126, float %149)  ; FMad(a,b,c)
  %151 = call float @dx.op.tertiary.f32(i32 46, float %101, float %131, float %150)  ; FMad(a,b,c)
  %152 = fadd fast float %151, %136
  %153 = fdiv fast float %140, %152
  %154 = fdiv fast float %144, %152
  %155 = fdiv fast float %148, %152
  %156 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %157 = extractvalue %dx.types.CBufRet.f32 %156, 0
  %158 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %159 = extractvalue %dx.types.CBufRet.f32 %158, 1
  %160 = fmul fast float %157, %112
  %161 = fmul fast float %160, %159
  %162 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %163 = extractvalue %dx.types.CBufRet.i32 %162, 0
  %164 = uitofp i32 %163 to float
  %165 = fmul fast float %164, 0x4040551EC0000000
  %166 = fmul fast float %164, 0x4027A147A0000000
  %167 = fadd fast float %165, %115
  %168 = fadd fast float %166, %116
  %169 = call float @dx.op.dot2.f32(i32 54, float %167, float %168, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %170 = call float @dx.op.unary.f32(i32 22, float %169)  ; Frc(value)
  %171 = fmul fast float %170, 0x404A7DD040000000
  %172 = call float @dx.op.unary.f32(i32 22, float %171)  ; Frc(value)
  %173 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %174 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %173, i32 0, i32 %81, i32 %82, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %175 = extractvalue %dx.types.ResRet.f32 %174, 0
  %176 = extractvalue %dx.types.ResRet.f32 %174, 1
  %177 = extractvalue %dx.types.ResRet.f32 %174, 2
  %178 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %179 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %178, i32 0, i32 %81, i32 %82, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %180 = extractvalue %dx.types.ResRet.f32 %179, 3
  %181 = fmul fast float %180, 2.550000e+02
  %182 = fadd fast float %181, 5.000000e-01
  %183 = fptoui float %182 to i32
  %184 = and i32 %183, 15
  %185 = fmul fast float %175, 2.000000e+00
  %186 = fmul fast float %176, 2.000000e+00
  %187 = fmul fast float %177, 2.000000e+00
  %188 = fadd fast float %185, -1.000000e+00
  %189 = fadd fast float %186, -1.000000e+00
  %190 = fadd fast float %187, -1.000000e+00
  %191 = call float @dx.op.dot3.f32(i32 55, float %188, float %189, float %190, float %188, float %189, float %190)  ; Dot3(ax,ay,az,bx,by,bz)
  %192 = call float @dx.op.unary.f32(i32 25, float %191)  ; Rsqrt(value)
  %193 = fmul fast float %192, %188
  %194 = fmul fast float %192, %189
  %195 = fmul fast float %192, %190
  %196 = icmp ne i32 %184, 0
  %197 = icmp eq i32 %184, 7
  %198 = and i32 %183, 14
  %199 = icmp eq i32 %198, 2
  %200 = add nsw i32 %184, -5
  %201 = icmp ult i32 %200, 3
  %202 = or i1 %199, %201
  %203 = icmp eq i32 %184, 9
  %204 = or i1 %203, %202
  %205 = xor i1 %94, true
  %206 = icmp eq i32 %184, 6
  %207 = or i1 %199, %206
  %208 = and i1 %207, %205
  br i1 %208, label %209, label %220

; <label>:209                                     ; preds = %100
  %210 = icmp eq i32 %198, 8
  %211 = and i32 %183, 12
  %212 = icmp eq i32 %211, 4
  %213 = or i1 %212, %199
  %214 = or i1 %210, %213
  %215 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %216 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %215, i32 0, i32 %81, i32 %82, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %217 = extractvalue %dx.types.ResRet.f32 %216, 3
  %218 = select i1 %214, float %217, float 0.000000e+00
  %219 = call float @dx.op.binary.f32(i32 36, float %218, float 0x3FEFAE1480000000)  ; FMin(a,b)
  br label %220

; <label>:220                                     ; preds = %209, %100
  %221 = phi float [ 1.000000e+00, %100 ], [ %219, %209 ]
  %222 = fmul fast float %112, %44
  %223 = fadd fast float %222, %45
  %224 = call float @dx.op.unary.f32(i32 23, float %223)  ; Log(value)
  %225 = fmul fast float %224, %46
  %226 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %225)  ; FMax(a,b)
  %227 = fptoui float %226 to i32
  %228 = add nsw i32 %40, -1
  %229 = call i32 @dx.op.binary.i32(i32 40, i32 %227, i32 %228)  ; UMin(a,b)
  %230 = and i32 %42, 31
  %231 = lshr i32 %76, %230
  %232 = lshr i32 %77, %230
  %233 = mul i32 %229, %39
  %234 = add i32 %233, %232
  %235 = mul i32 %234, %38
  %236 = add i32 %235, %231
  %237 = shl i32 %236, 1
  %238 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %239 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %238, i32 %237, i32 undef)  ; BufferLoad(srv,index,wot)
  %240 = extractvalue %dx.types.ResRet.i32 %239, 0
  %241 = call i32 @dx.op.binary.i32(i32 40, i32 %240, i32 %36)  ; UMin(a,b)
  %242 = or i32 %237, 1
  %243 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %238, i32 %242, i32 undef)  ; BufferLoad(srv,index,wot)
  %244 = extractvalue %dx.types.ResRet.i32 %243, 0
  %245 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %246 = extractvalue %dx.types.CBufRet.i32 %245, 3
  %247 = call i32 @dx.op.binary.i32(i32 40, i32 %246, i32 %241)  ; UMin(a,b)
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %3054, label %249

; <label>:249                                     ; preds = %220
  br label %250

; <label>:250                                     ; preds = %3038, %249
  %251 = phi i32 [ %3039, %3038 ], [ 0, %249 ]
  %252 = phi float [ %3040, %3038 ], [ 1.000000e+00, %249 ]
  %253 = phi i32 [ %3041, %3038 ], [ 0, %249 ]
  %254 = phi i32 [ %3042, %3038 ], [ 0, %249 ]
  %255 = phi i32 [ %3043, %3038 ], [ -1, %249 ]
  %256 = phi i32 [ %3044, %3038 ], [ -1, %249 ]
  %257 = phi i32 [ %3045, %3038 ], [ -1, %249 ]
  %258 = phi i32 [ %3046, %3038 ], [ -1, %249 ]
  %259 = phi i32 [ %3047, %3038 ], [ -1, %249 ]
  %260 = phi i32 [ %3048, %3038 ], [ -1, %249 ]
  %261 = phi i32 [ %3049, %3038 ], [ -1, %249 ]
  %262 = phi i32 [ %3050, %3038 ], [ -1, %249 ]
  %263 = phi i32 [ %3051, %3038 ], [ 0, %249 ]
  %264 = add i32 %263, %244
  %265 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %266 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %265, i32 %264, i32 undef)  ; BufferLoad(srv,index,wot)
  %267 = extractvalue %dx.types.ResRet.i32 %266, 0
  %268 = mul i32 %267, 6
  %269 = add i32 %268, 5
  %270 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 10, i32 1033 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<4xF32>
  %271 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %270, i32 %269, i32 undef)  ; BufferLoad(srv,index,wot)
  %272 = extractvalue %dx.types.ResRet.f32 %271, 2
  %273 = add i32 %268, 3
  %274 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %270, i32 %273, i32 undef)  ; BufferLoad(srv,index,wot)
  %275 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %270, i32 %268, i32 undef)  ; BufferLoad(srv,index,wot)
  %276 = extractvalue %dx.types.ResRet.f32 %275, 0
  %277 = extractvalue %dx.types.ResRet.f32 %275, 1
  %278 = extractvalue %dx.types.ResRet.f32 %275, 2
  %279 = fptosi float %272 to i32
  %280 = icmp eq i32 %279, -1
  br i1 %280, label %3038, label %281

; <label>:281                                     ; preds = %250
  %282 = extractvalue %dx.types.ResRet.f32 %275, 3
  %283 = extractvalue %dx.types.ResRet.f32 %274, 2
  %284 = extractvalue %dx.types.ResRet.f32 %274, 0
  %285 = bitcast float %284 to i32
  %286 = and i32 %285, 65535
  %287 = call float @dx.op.legacyF16ToF32(i32 131, i32 %286)  ; LegacyF16ToF32(value)
  %288 = bitcast float %283 to i32
  %289 = and i32 %288, 65535
  %290 = call float @dx.op.legacyF16ToF32(i32 131, i32 %289)  ; LegacyF16ToF32(value)
  %291 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %31, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %292 = extractvalue %dx.types.CBufRet.i32 %291, 2
  %293 = icmp eq i32 %292, 1
  %294 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %295 = extractvalue %dx.types.CBufRet.f32 %294, 0
  %296 = extractvalue %dx.types.CBufRet.f32 %294, 1
  %297 = extractvalue %dx.types.CBufRet.f32 %294, 2
  %298 = fsub fast float %153, %295
  %299 = fsub fast float %154, %296
  %300 = fsub fast float %155, %297
  %301 = fmul fast float %298, %298
  %302 = fmul fast float %299, %299
  %303 = fadd fast float %301, %302
  %304 = fmul fast float %300, %300
  %305 = fadd fast float %303, %304
  %306 = call float @dx.op.unary.f32(i32 24, float %305)  ; Sqrt(value)
  %307 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %308 = extractvalue %dx.types.CBufRet.f32 %307, 0
  %309 = fmul fast float %308, %306
  %310 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 32)  ; CBufferLoadLegacy(handle,regIndex)
  %311 = extractvalue %dx.types.CBufRet.f32 %310, 0
  %312 = fdiv fast float %309, %311
  %313 = call float @dx.op.binary.f32(i32 35, float 0x3F947AE140000000, float %312)  ; FMax(a,b)
  %314 = fsub fast float %276, %153
  %315 = fsub fast float %277, %154
  %316 = fsub fast float %278, %155
  %317 = call float @dx.op.dot3.f32(i32 55, float %314, float %315, float %316, float %314, float %315, float %316)  ; Dot3(ax,ay,az,bx,by,bz)
  %318 = call float @dx.op.unary.f32(i32 25, float %317)  ; Rsqrt(value)
  %319 = fmul fast float %318, %314
  %320 = fmul fast float %318, %315
  %321 = fmul fast float %318, %316
  %322 = fcmp fast oge float %318, %282
  %323 = or i1 %196, %293
  %324 = and i1 %323, %322
  br i1 %324, label %325, label %2954

; <label>:325                                     ; preds = %281
  %326 = extractvalue %dx.types.CBufRet.i32 %291, 3
  %327 = icmp eq i32 %326, 0
  %328 = or i1 %293, %327
  %329 = or i1 %204, %328
  %330 = xor i1 %329, true
  %331 = or i1 %197, %293
  %332 = select i1 %331, float %319, float %193
  %333 = select i1 %331, float %320, float %194
  %334 = select i1 %331, float %321, float %195
  %335 = fmul fast float %332, %313
  %336 = fmul fast float %333, %313
  %337 = fmul fast float %334, %313
  %338 = fadd fast float %335, %153
  %339 = fadd fast float %336, %154
  %340 = fadd fast float %337, %155
  %341 = xor i1 %293, true
  %342 = fcmp fast ogt float %161, 0.000000e+00
  %343 = and i1 %342, %341
  br i1 %343, label %344, label %482

; <label>:344                                     ; preds = %325
  %345 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %346 = extractvalue %dx.types.CBufRet.f32 %345, 0
  %347 = extractvalue %dx.types.CBufRet.f32 %345, 1
  %348 = extractvalue %dx.types.CBufRet.f32 %345, 2
  %349 = extractvalue %dx.types.CBufRet.f32 %345, 3
  %350 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %351 = extractvalue %dx.types.CBufRet.f32 %350, 0
  %352 = extractvalue %dx.types.CBufRet.f32 %350, 1
  %353 = extractvalue %dx.types.CBufRet.f32 %350, 2
  %354 = extractvalue %dx.types.CBufRet.f32 %350, 3
  %355 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %356 = extractvalue %dx.types.CBufRet.f32 %355, 0
  %357 = extractvalue %dx.types.CBufRet.f32 %355, 1
  %358 = extractvalue %dx.types.CBufRet.f32 %355, 2
  %359 = extractvalue %dx.types.CBufRet.f32 %355, 3
  %360 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %361 = extractvalue %dx.types.CBufRet.f32 %360, 0
  %362 = extractvalue %dx.types.CBufRet.f32 %360, 1
  %363 = extractvalue %dx.types.CBufRet.f32 %360, 2
  %364 = extractvalue %dx.types.CBufRet.f32 %360, 3
  %365 = fmul fast float %346, %338
  %366 = call float @dx.op.tertiary.f32(i32 46, float %339, float %351, float %365)  ; FMad(a,b,c)
  %367 = call float @dx.op.tertiary.f32(i32 46, float %340, float %356, float %366)  ; FMad(a,b,c)
  %368 = fadd fast float %367, %361
  %369 = fmul fast float %347, %338
  %370 = call float @dx.op.tertiary.f32(i32 46, float %339, float %352, float %369)  ; FMad(a,b,c)
  %371 = call float @dx.op.tertiary.f32(i32 46, float %340, float %357, float %370)  ; FMad(a,b,c)
  %372 = fadd fast float %371, %362
  %373 = fmul fast float %348, %338
  %374 = call float @dx.op.tertiary.f32(i32 46, float %339, float %353, float %373)  ; FMad(a,b,c)
  %375 = call float @dx.op.tertiary.f32(i32 46, float %340, float %358, float %374)  ; FMad(a,b,c)
  %376 = fadd fast float %375, %363
  %377 = fmul fast float %349, %338
  %378 = call float @dx.op.tertiary.f32(i32 46, float %339, float %354, float %377)  ; FMad(a,b,c)
  %379 = call float @dx.op.tertiary.f32(i32 46, float %340, float %359, float %378)  ; FMad(a,b,c)
  %380 = fadd fast float %379, %364
  %381 = fmul fast float %319, %161
  %382 = fmul fast float %320, %161
  %383 = fmul fast float %321, %161
  %384 = fmul fast float %346, %381
  %385 = call float @dx.op.tertiary.f32(i32 46, float %382, float %351, float %384)  ; FMad(a,b,c)
  %386 = call float @dx.op.tertiary.f32(i32 46, float %383, float %356, float %385)  ; FMad(a,b,c)
  %387 = fmul fast float %347, %381
  %388 = call float @dx.op.tertiary.f32(i32 46, float %382, float %352, float %387)  ; FMad(a,b,c)
  %389 = call float @dx.op.tertiary.f32(i32 46, float %383, float %357, float %388)  ; FMad(a,b,c)
  %390 = fmul fast float %348, %381
  %391 = call float @dx.op.tertiary.f32(i32 46, float %382, float %353, float %390)  ; FMad(a,b,c)
  %392 = call float @dx.op.tertiary.f32(i32 46, float %383, float %358, float %391)  ; FMad(a,b,c)
  %393 = fmul fast float %349, %381
  %394 = call float @dx.op.tertiary.f32(i32 46, float %382, float %354, float %393)  ; FMad(a,b,c)
  %395 = call float @dx.op.tertiary.f32(i32 46, float %383, float %359, float %394)  ; FMad(a,b,c)
  %396 = fadd fast float %386, %368
  %397 = fadd fast float %389, %372
  %398 = fadd fast float %392, %376
  %399 = fadd fast float %395, %380
  %400 = fdiv fast float %368, %380
  %401 = fdiv fast float %372, %380
  %402 = fdiv fast float %376, %380
  %403 = fdiv fast float %396, %399
  %404 = fdiv fast float %397, %399
  %405 = fdiv fast float %398, %399
  %406 = fsub fast float %403, %400
  %407 = fsub fast float %404, %401
  %408 = fsub fast float %405, %402
  %409 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %410 = extractvalue %dx.types.CBufRet.f32 %409, 0
  %411 = extractvalue %dx.types.CBufRet.f32 %409, 1
  %412 = fmul fast float %410, %400
  %413 = fmul fast float %411, %401
  %414 = extractvalue %dx.types.CBufRet.f32 %409, 2
  %415 = extractvalue %dx.types.CBufRet.f32 %409, 3
  %416 = fadd fast float %412, %415
  %417 = fadd fast float %413, %414
  %418 = fmul fast float %410, %406
  %419 = fmul fast float %411, %407
  %420 = fadd fast float %172, -5.000000e-01
  %421 = fmul fast float %420, 2.500000e-01
  %422 = fadd fast float %421, 2.500000e-01
  %423 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %424 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %425 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %423, %dx.types.Handle %424, float %416, float %417, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %426 = extractvalue %dx.types.ResRet.f32 %425, 0
  %427 = fmul fast float %418, %422
  %428 = fmul fast float %419, %422
  %429 = fmul fast float %408, %422
  %430 = fadd fast float %427, %416
  %431 = fadd fast float %428, %417
  %432 = fadd fast float %429, %402
  %433 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %423, %dx.types.Handle %424, float %430, float %431, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %434 = extractvalue %dx.types.ResRet.f32 %433, 0
  %435 = fcmp fast une float %434, %426
  %436 = fcmp fast olt float %432, %434
  %437 = and i1 %435, %436
  br i1 %437, label %477, label %438

; <label>:438                                     ; preds = %344
  %439 = fadd fast float %421, 5.000000e-01
  %440 = fmul fast float %418, %439
  %441 = fmul fast float %419, %439
  %442 = fmul fast float %408, %439
  %443 = fadd fast float %440, %416
  %444 = fadd fast float %441, %417
  %445 = fadd fast float %442, %402
  %446 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %423, %dx.types.Handle %424, float %443, float %444, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %447 = extractvalue %dx.types.ResRet.f32 %446, 0
  %448 = fcmp fast une float %447, %426
  %449 = fcmp fast olt float %445, %447
  %450 = and i1 %448, %449
  br i1 %450, label %477, label %451

; <label>:451                                     ; preds = %438
  %452 = fadd fast float %421, 7.500000e-01
  %453 = fmul fast float %418, %452
  %454 = fmul fast float %419, %452
  %455 = fmul fast float %408, %452
  %456 = fadd fast float %453, %416
  %457 = fadd fast float %454, %417
  %458 = fadd fast float %455, %402
  %459 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %423, %dx.types.Handle %424, float %456, float %457, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %460 = extractvalue %dx.types.ResRet.f32 %459, 0
  %461 = fcmp fast une float %460, %426
  %462 = fcmp fast olt float %458, %460
  %463 = and i1 %461, %462
  br i1 %463, label %477, label %464

; <label>:464                                     ; preds = %451
  %465 = fadd fast float %421, 1.000000e+00
  %466 = fmul fast float %418, %465
  %467 = fmul fast float %419, %465
  %468 = fmul fast float %408, %465
  %469 = fadd fast float %466, %416
  %470 = fadd fast float %467, %417
  %471 = fadd fast float %468, %402
  %472 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %423, %dx.types.Handle %424, float %469, float %470, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %473 = extractvalue %dx.types.ResRet.f32 %472, 0
  %474 = fcmp fast une float %473, %426
  %475 = fcmp fast olt float %471, %473
  %476 = and i1 %474, %475
  br i1 %476, label %477, label %482

; <label>:477                                     ; preds = %464, %451, %438, %344
  %478 = phi float [ %422, %344 ], [ %439, %438 ], [ %452, %451 ], [ %465, %464 ]
  %479 = fadd fast float %478, -3.750000e-01
  %480 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %479)  ; FMax(a,b)
  %481 = fmul fast float %480, %161
  br label %482

; <label>:482                                     ; preds = %477, %464, %325
  %483 = phi float [ %161, %325 ], [ %481, %477 ], [ %161, %464 ]
  %484 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %31, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %485 = extractvalue %dx.types.CBufRet.i32 %484, 1
  %486 = icmp sgt i32 %485, 0
  br i1 %486, label %487, label %1720

; <label>:487                                     ; preds = %482
  %488 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %31, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %489 = extractvalue %dx.types.CBufRet.i32 %488, 0
  %490 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %491 = extractvalue %dx.types.CBufRet.f32 %490, 3
  %492 = extractvalue %dx.types.CBufRet.f32 %490, 1
  %493 = extractvalue %dx.types.CBufRet.f32 %490, 0
  %494 = fcmp fast ogt float %287, -2.000000e+00
  %495 = fsub fast float %276, %338
  %496 = fsub fast float %277, %339
  %497 = fsub fast float %278, %340
  %498 = call float @dx.op.dot3.f32(i32 55, float %495, float %496, float %497, float %495, float %496, float %497)  ; Dot3(ax,ay,az,bx,by,bz)
  %499 = fadd fast float %498, 1.000000e+00
  %500 = fdiv fast float 1.000000e+00, %499
  %501 = call float @dx.op.unary.f32(i32 25, float %498)  ; Rsqrt(value)
  %502 = fmul fast float %501, %495
  %503 = fmul fast float %501, %496
  %504 = fmul fast float %501, %497
  %505 = fmul fast float %501, %290
  %506 = fmul fast float %290, %290
  %507 = fmul fast float %506, %500
  %508 = call float @dx.op.unary.f32(i32 7, float %507)  ; Saturate(value)
  %509 = call float @dx.op.unary.f32(i32 24, float %508)  ; Sqrt(value)
  %510 = call float @dx.op.dot3.f32(i32 55, float %332, float %333, float %334, float %502, float %503, float %504)  ; Dot3(ax,ay,az,bx,by,bz)
  %511 = fsub fast float -0.000000e+00, %509
  %512 = fcmp fast olt float %510, %511
  %513 = and i1 %512, %330
  br i1 %513, label %2395, label %514

; <label>:514                                     ; preds = %487
  %515 = and i32 %81, 65535
  %516 = shl nuw nsw i32 %515, 8
  %517 = or i32 %516, %515
  %518 = and i32 %517, 16711935
  %519 = shl nuw nsw i32 %518, 4
  %520 = or i32 %519, %518
  %521 = and i32 %520, 252645135
  %522 = shl nuw nsw i32 %521, 2
  %523 = or i32 %522, %521
  %524 = and i32 %523, 858993459
  %525 = shl nuw nsw i32 %524, 1
  %526 = or i32 %525, %524
  %527 = and i32 %526, 1431655765
  %528 = and i32 %82, 65535
  %529 = shl nuw nsw i32 %528, 8
  %530 = or i32 %529, %528
  %531 = and i32 %530, 16711935
  %532 = shl nuw nsw i32 %531, 4
  %533 = or i32 %532, %531
  %534 = and i32 %533, 252645135
  %535 = shl nuw nsw i32 %534, 2
  %536 = or i32 %535, %534
  %537 = and i32 %536, 858993459
  %538 = shl nuw nsw i32 %537, 1
  %539 = or i32 %538, %537
  %540 = shl nuw i32 %539, 1
  %541 = and i32 %540, -1431655766
  %542 = or i32 %541, %527
  br i1 %494, label %567, label %543

; <label>:543                                     ; preds = %514
  %544 = fsub fast float -0.000000e+00, %495
  %545 = fsub fast float -0.000000e+00, %496
  %546 = fsub fast float -0.000000e+00, %497
  %547 = call float @dx.op.unary.f32(i32 6, float %544)  ; FAbs(value)
  %548 = call float @dx.op.unary.f32(i32 6, float %545)  ; FAbs(value)
  %549 = fcmp fast ult float %547, %548
  %550 = call float @dx.op.unary.f32(i32 6, float %546)  ; FAbs(value)
  %551 = fcmp fast ult float %547, %550
  %552 = or i1 %549, %551
  br i1 %552, label %556, label %553

; <label>:553                                     ; preds = %543
  %554 = fcmp uge float %495, -0.000000e+00
  %555 = zext i1 %554 to i32
  br label %564

; <label>:556                                     ; preds = %543
  %557 = fcmp fast ogt float %548, %550
  br i1 %557, label %558, label %561

; <label>:558                                     ; preds = %556
  %559 = fcmp olt float %496, -0.000000e+00
  %560 = select i1 %559, i32 2, i32 3
  br label %564

; <label>:561                                     ; preds = %556
  %562 = fcmp olt float %497, -0.000000e+00
  %563 = select i1 %562, i32 4, i32 5
  br label %564

; <label>:564                                     ; preds = %561, %558, %553
  %565 = phi i32 [ %555, %553 ], [ %560, %558 ], [ %563, %561 ]
  %566 = add i32 %565, %279
  br label %567

; <label>:567                                     ; preds = %564, %514
  %568 = phi i32 [ %566, %564 ], [ %279, %514 ]
  %569 = mul i32 %568, 336
  %570 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %571 = add i32 %569, 112
  %572 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %570, i32 %571, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %573 = extractvalue %dx.types.ResRet.i32 %572, 2
  %574 = bitcast i32 %573 to float
  %575 = add i32 %569, 128
  %576 = add i32 %569, 144
  %577 = add i32 %569, 160
  %578 = add i32 %569, 176
  %579 = add i32 %569, 192
  %580 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %570, i32 %579, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %581 = extractvalue %dx.types.ResRet.i32 %580, 0
  %582 = extractvalue %dx.types.ResRet.i32 %580, 1
  %583 = extractvalue %dx.types.ResRet.i32 %580, 2
  %584 = bitcast i32 %581 to float
  %585 = bitcast i32 %582 to float
  %586 = bitcast i32 %583 to float
  %587 = add i32 %569, 208
  %588 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %570, i32 %587, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %589 = extractvalue %dx.types.ResRet.i32 %588, 0
  %590 = extractvalue %dx.types.ResRet.i32 %588, 1
  %591 = extractvalue %dx.types.ResRet.i32 %588, 2
  %592 = bitcast i32 %589 to float
  %593 = bitcast i32 %590 to float
  %594 = bitcast i32 %591 to float
  %595 = add i32 %569, 224
  %596 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %570, i32 %595, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %597 = extractvalue %dx.types.ResRet.i32 %596, 0
  %598 = extractvalue %dx.types.ResRet.i32 %596, 1
  %599 = extractvalue %dx.types.ResRet.i32 %596, 2
  %600 = bitcast i32 %597 to float
  %601 = bitcast i32 %598 to float
  %602 = bitcast i32 %599 to float
  %603 = add i32 %569, 240
  %604 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %570, i32 %603, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %605 = extractvalue %dx.types.ResRet.i32 %604, 0
  %606 = extractvalue %dx.types.ResRet.i32 %604, 1
  %607 = extractvalue %dx.types.ResRet.i32 %604, 2
  %608 = bitcast i32 %605 to float
  %609 = bitcast i32 %606 to float
  %610 = bitcast i32 %607 to float
  %611 = add i32 %569, 256
  %612 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %570, i32 %611, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %613 = extractvalue %dx.types.ResRet.i32 %612, 0
  %614 = extractvalue %dx.types.ResRet.i32 %612, 1
  %615 = extractvalue %dx.types.ResRet.i32 %612, 2
  %616 = bitcast i32 %613 to float
  %617 = bitcast i32 %614 to float
  %618 = bitcast i32 %615 to float
  %619 = add i32 %569, 272
  %620 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %570, i32 %619, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %621 = extractvalue %dx.types.ResRet.i32 %620, 0
  %622 = extractvalue %dx.types.ResRet.i32 %620, 1
  %623 = extractvalue %dx.types.ResRet.i32 %620, 2
  %624 = bitcast i32 %621 to float
  %625 = bitcast i32 %622 to float
  %626 = bitcast i32 %623 to float
  %627 = add i32 %569, 300
  %628 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %570, i32 %627, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %629 = extractvalue %dx.types.ResRet.i32 %628, 0
  %630 = bitcast i32 %629 to float
  %631 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %632 = extractvalue %dx.types.CBufRet.f32 %631, 0
  %633 = extractvalue %dx.types.CBufRet.f32 %631, 1
  %634 = extractvalue %dx.types.CBufRet.f32 %631, 2
  %635 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %636 = extractvalue %dx.types.CBufRet.f32 %635, 0
  %637 = extractvalue %dx.types.CBufRet.f32 %635, 1
  %638 = extractvalue %dx.types.CBufRet.f32 %635, 2
  %639 = fadd fast float %632, %616
  %640 = fadd fast float %633, %617
  %641 = fadd fast float %634, %618
  %642 = fmul fast float %639, 2.097152e+06
  %643 = fmul fast float %640, 2.097152e+06
  %644 = fmul fast float %641, 2.097152e+06
  %645 = fadd fast float %624, %338
  %646 = fsub fast float %645, %636
  %647 = fadd fast float %646, %642
  %648 = fadd fast float %625, %339
  %649 = fsub fast float %648, %637
  %650 = fadd fast float %649, %643
  %651 = fadd fast float %626, %340
  %652 = fsub fast float %651, %638
  %653 = fadd fast float %652, %644
  %654 = call float @dx.op.dot3.f32(i32 55, float %332, float %333, float %334, float %647, float %650, float %653)  ; Dot3(ax,ay,az,bx,by,bz)
  %655 = fsub fast float -0.000000e+00, %654
  %656 = fmul fast float %584, %332
  %657 = call float @dx.op.tertiary.f32(i32 46, float %333, float %592, float %656)  ; FMad(a,b,c)
  %658 = call float @dx.op.tertiary.f32(i32 46, float %334, float %600, float %657)  ; FMad(a,b,c)
  %659 = call float @dx.op.tertiary.f32(i32 46, float %655, float %608, float %658)  ; FMad(a,b,c)
  %660 = fmul fast float %585, %332
  %661 = call float @dx.op.tertiary.f32(i32 46, float %333, float %593, float %660)  ; FMad(a,b,c)
  %662 = call float @dx.op.tertiary.f32(i32 46, float %334, float %601, float %661)  ; FMad(a,b,c)
  %663 = call float @dx.op.tertiary.f32(i32 46, float %655, float %609, float %662)  ; FMad(a,b,c)
  %664 = fmul fast float %586, %332
  %665 = call float @dx.op.tertiary.f32(i32 46, float %333, float %594, float %664)  ; FMad(a,b,c)
  %666 = call float @dx.op.tertiary.f32(i32 46, float %334, float %602, float %665)  ; FMad(a,b,c)
  %667 = call float @dx.op.tertiary.f32(i32 46, float %655, float %610, float %666)  ; FMad(a,b,c)
  %668 = fsub fast float -0.000000e+00, %659
  %669 = fsub fast float -0.000000e+00, %663
  %670 = fdiv fast float %668, %667
  %671 = fdiv fast float %669, %667
  %672 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 129)  ; CBufferLoadLegacy(handle,regIndex)
  %673 = extractvalue %dx.types.CBufRet.f32 %672, 0
  %674 = extractvalue %dx.types.CBufRet.f32 %672, 1
  %675 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %676 = extractvalue %dx.types.CBufRet.f32 %675, 1
  %677 = fmul fast float %311, %673
  %678 = fmul fast float %676, %674
  %679 = fdiv fast float 1.000000e+00, %677
  %680 = fdiv fast float 1.000000e+00, %678
  %681 = call float @dx.op.binary.f32(i32 36, float %679, float %680)  ; FMin(a,b)
  %682 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %683 = extractvalue %dx.types.CBufRet.f32 %682, 3
  %684 = fmul fast float %683, %112
  %685 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %686 = extractvalue %dx.types.CBufRet.f32 %685, 3
  %687 = fadd fast float %684, %686
  %688 = call float @dx.op.unary.f32(i32 21, float %630)  ; Exp(value)
  %689 = fmul fast float %688, %681
  %690 = fmul fast float %689, %687
  %691 = call float @dx.op.binary.f32(i32 35, float 0x3FB99999A0000000, float %690)  ; FMax(a,b)
  %692 = fdiv fast float %574, %498
  %693 = call float @dx.op.unary.f32(i32 6, float %692)  ; FAbs(value)
  %694 = fmul fast float %691, %492
  %695 = fmul fast float %694, %491
  %696 = fmul fast float %691, %491
  %697 = fmul fast float %696, %693
  %698 = fcmp fast oge float %504, 0.000000e+00
  %699 = select i1 %698, float 1.000000e+00, float -1.000000e+00
  %700 = fadd fast float %699, %504
  %701 = fdiv fast float 1.000000e+00, %700
  %702 = fsub fast float -0.000000e+00, %701
  %703 = fmul fast float %502, %503
  %704 = fmul fast float %703, %702
  %705 = fmul fast float %502, %502
  %706 = fmul fast float %705, %699
  %707 = fmul fast float %706, %702
  %708 = fadd fast float %707, 1.000000e+00
  %709 = fmul fast float %704, %699
  %710 = fmul fast float %502, %699
  %711 = fsub fast float -0.000000e+00, %710
  %712 = fmul fast float %503, %503
  %713 = fmul fast float %712, %702
  %714 = fadd fast float %713, %699
  %715 = fsub fast float -0.000000e+00, %503
  %716 = fmul fast float %708, %332
  %717 = call float @dx.op.tertiary.f32(i32 46, float %709, float %333, float %716)  ; FMad(a,b,c)
  %718 = call float @dx.op.tertiary.f32(i32 46, float %711, float %334, float %717)  ; FMad(a,b,c)
  %719 = fmul fast float %704, %332
  %720 = call float @dx.op.tertiary.f32(i32 46, float %714, float %333, float %719)  ; FMad(a,b,c)
  %721 = call float @dx.op.tertiary.f32(i32 46, float %715, float %334, float %720)  ; FMad(a,b,c)
  %722 = fmul fast float %502, %332
  %723 = call float @dx.op.tertiary.f32(i32 46, float %503, float %333, float %722)  ; FMad(a,b,c)
  %724 = call float @dx.op.tertiary.f32(i32 46, float %504, float %334, float %723)  ; FMad(a,b,c)
  %725 = fsub fast float -0.000000e+00, %718
  %726 = fsub fast float -0.000000e+00, %721
  %727 = fdiv fast float %725, %724
  %728 = fdiv fast float %726, %724
  br label %729

; <label>:729                                     ; preds = %1706, %567
  %730 = phi i32 [ %1707, %1706 ], [ 0, %567 ]
  %731 = phi i32 [ %1694, %1706 ], [ 0, %567 ]
  %732 = phi float [ %1695, %1706 ], [ 0.000000e+00, %567 ]
  %733 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %734 = extractvalue %dx.types.CBufRet.i32 %733, 1
  %735 = shl i32 %734, 16
  %736 = add i32 %735, %542
  %737 = mul i32 %736, %485
  %738 = add i32 %737, %730
  %739 = call i32 @dx.op.unary.i32(i32 30, i32 %738)  ; Bfrev(value)
  %740 = add i32 %739, 1216234700
  %741 = mul i32 %740, -1676577210
  %742 = xor i32 %741, %740
  %743 = mul i32 %742, -529506958
  %744 = xor i32 %743, %742
  %745 = call i32 @dx.op.unary.i32(i32 30, i32 %744)  ; Bfrev(value)
  %746 = and i32 %745, 255
  %747 = and i32 %745, 1
  %748 = lshr i32 %745, 1
  %749 = and i32 %748, 1
  %750 = sub nsw i32 0, %749
  %751 = and i32 %750, 3
  %752 = xor i32 %751, %747
  %753 = lshr i32 %745, 2
  %754 = and i32 %753, 1
  %755 = sub nsw i32 0, %754
  %756 = and i32 %755, 5
  %757 = xor i32 %752, %756
  %758 = and i32 %755, 6
  %759 = shl nuw nsw i32 %754, 2
  %760 = xor i32 %752, %758
  %761 = or i32 %752, %759
  %762 = lshr i32 %745, 3
  %763 = and i32 %762, 1
  %764 = sub nsw i32 0, %763
  %765 = and i32 %764, 15
  %766 = xor i32 %757, %765
  %767 = and i32 %764, 9
  %768 = and i32 %764, 10
  %769 = xor i32 %760, %767
  %770 = lshr i32 %745, 4
  %771 = and i32 %770, 1
  %772 = sub nsw i32 0, %771
  %773 = and i32 %772, 17
  %774 = xor i32 %766, %773
  %775 = and i32 %772, 23
  %776 = and i32 %772, 31
  %777 = xor i32 %769, %775
  %778 = lshr i32 %745, 5
  %779 = and i32 %778, 1
  %780 = sub nsw i32 0, %779
  %781 = and i32 %780, 51
  %782 = xor i32 %774, %781
  %783 = and i32 %780, 58
  %784 = and i32 %780, 46
  %785 = xor i32 %777, %783
  %786 = lshr i32 %745, 6
  %787 = and i32 %786, 1
  %788 = sub nsw i32 0, %787
  %789 = and i32 %788, 85
  %790 = xor i32 %782, %789
  %791 = and i32 %788, 113
  %792 = and i32 %788, 69
  %793 = xor i32 %785, %791
  %794 = lshr i32 %745, 7
  %795 = and i32 %794, 1
  %796 = sub nsw i32 0, %795
  %797 = and i32 %796, 255
  %798 = xor i32 %790, %797
  %799 = and i32 %796, 163
  %800 = and i32 %796, 201
  %801 = xor i32 %793, %799
  %802 = xor i32 %776, %768
  %803 = xor i32 %802, %784
  %804 = xor i32 %803, %792
  %805 = xor i32 %804, %800
  %806 = xor i32 %805, %761
  %807 = add nsw i32 %746, -1862497895
  %808 = mul i32 %807, -1676577210
  %809 = xor i32 %808, %807
  %810 = mul i32 %809, -529506958
  %811 = xor i32 %810, %809
  %812 = call i32 @dx.op.unary.i32(i32 30, i32 %811)  ; Bfrev(value)
  %813 = add i32 %798, -646066581
  %814 = mul i32 %813, -1676577210
  %815 = xor i32 %814, %813
  %816 = mul i32 %815, -529506958
  %817 = xor i32 %816, %815
  %818 = call i32 @dx.op.unary.i32(i32 30, i32 %817)  ; Bfrev(value)
  %819 = add i32 %801, 570102578
  %820 = mul i32 %819, -1676577210
  %821 = xor i32 %820, %819
  %822 = add nuw i32 %806, 1786441729
  %823 = mul i32 %822, -1676577210
  %824 = xor i32 %823, %822
  %825 = lshr i32 %812, 8
  %826 = lshr i32 %818, 8
  %827 = uitofp i32 %825 to float
  %828 = uitofp i32 %826 to float
  %829 = fmul fast float %827, 0x3E76A09E60000000
  %830 = fmul fast float %828, 0x3E76A09E60000000
  %831 = fadd fast float %829, 0xBFE6A09E60000000
  %832 = fadd fast float %830, 0xBFE6A09E60000000
  %833 = fmul fast float %831, %831
  %834 = fmul fast float %832, %832
  %835 = call float @dx.op.binary.f32(i32 35, float %833, float %834)  ; FMax(a,b)
  %836 = fmul fast float %835, 2.000000e+00
  %837 = call float @dx.op.binary.f32(i32 36, float %833, float %834)  ; FMin(a,b)
  %838 = fsub fast float %836, %837
  %839 = call float @dx.op.unary.f32(i32 24, float %838)  ; Sqrt(value)
  %840 = fcmp fast ogt float %833, %834
  %841 = fsub fast float -0.000000e+00, %839
  %842 = fcmp fast ogt float %831, 0.000000e+00
  %843 = select i1 %842, float %839, float %841
  %844 = fcmp fast ogt float %832, 0.000000e+00
  %845 = select i1 %844, float %839, float %841
  %846 = select i1 %840, float %843, float %831
  %847 = select i1 %840, float %832, float %845
  %848 = fmul fast float %846, %505
  %849 = fmul fast float %847, %505
  %850 = call float @dx.op.dot2.f32(i32 54, float %848, float %849, float %848, float %849)  ; Dot2(ax,ay,bx,by)
  %851 = call float @dx.op.unary.f32(i32 24, float %850)  ; Sqrt(value)
  %852 = fsub fast float 1.000000e+00, %850
  %853 = call float @dx.op.unary.f32(i32 24, float %852)  ; Sqrt(value)
  %854 = fmul fast float %848, %708
  %855 = call float @dx.op.tertiary.f32(i32 46, float %849, float %704, float %854)  ; FMad(a,b,c)
  %856 = call float @dx.op.tertiary.f32(i32 46, float %853, float %502, float %855)  ; FMad(a,b,c)
  %857 = fmul fast float %848, %709
  %858 = call float @dx.op.tertiary.f32(i32 46, float %849, float %714, float %857)  ; FMad(a,b,c)
  %859 = call float @dx.op.tertiary.f32(i32 46, float %853, float %503, float %858)  ; FMad(a,b,c)
  %860 = fmul fast float %848, %711
  %861 = call float @dx.op.tertiary.f32(i32 46, float %849, float %715, float %860)  ; FMad(a,b,c)
  %862 = call float @dx.op.tertiary.f32(i32 46, float %853, float %504, float %861)  ; FMad(a,b,c)
  %863 = fcmp fast ogt float %694, 0.000000e+00
  br i1 %863, label %864, label %897

; <label>:864                                     ; preds = %729
  %865 = mul i32 %824, -529506958
  %866 = xor i32 %865, %824
  %867 = call i32 @dx.op.unary.i32(i32 30, i32 %866)  ; Bfrev(value)
  %868 = lshr i32 %867, 8
  %869 = uitofp i32 %868 to float
  %870 = fmul fast float %869, 0x3E70000000000000
  %871 = mul i32 %821, -529506958
  %872 = xor i32 %871, %821
  %873 = call i32 @dx.op.unary.i32(i32 30, i32 %872)  ; Bfrev(value)
  %874 = lshr i32 %873, 8
  %875 = uitofp i32 %874 to float
  %876 = fmul fast float %875, 0x3E70000000000000
  %877 = fadd fast float %876, -5.000000e-01
  %878 = fadd fast float %870, -5.000000e-01
  %879 = fmul fast float %877, %694
  %880 = fmul fast float %878, %694
  %881 = call float @dx.op.dot2.f32(i32 54, float %727, float %728, float %879, float %880)  ; Dot2(ax,ay,bx,by)
  %882 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %881)  ; FMax(a,b)
  %883 = fmul fast float %882, 2.000000e+00
  %884 = call float @dx.op.binary.f32(i32 36, float %695, float %883)  ; FMin(a,b)
  %885 = fmul fast float %879, %708
  %886 = call float @dx.op.tertiary.f32(i32 46, float %880, float %704, float %885)  ; FMad(a,b,c)
  %887 = call float @dx.op.tertiary.f32(i32 46, float %884, float %502, float %886)  ; FMad(a,b,c)
  %888 = fmul fast float %879, %709
  %889 = call float @dx.op.tertiary.f32(i32 46, float %880, float %714, float %888)  ; FMad(a,b,c)
  %890 = call float @dx.op.tertiary.f32(i32 46, float %884, float %503, float %889)  ; FMad(a,b,c)
  %891 = fmul fast float %879, %711
  %892 = call float @dx.op.tertiary.f32(i32 46, float %880, float %715, float %891)  ; FMad(a,b,c)
  %893 = call float @dx.op.tertiary.f32(i32 46, float %884, float %504, float %892)  ; FMad(a,b,c)
  %894 = fadd fast float %887, %647
  %895 = fadd fast float %890, %650
  %896 = fadd fast float %893, %653
  br label %897

; <label>:897                                     ; preds = %864, %729
  %898 = phi float [ %894, %864 ], [ %647, %729 ]
  %899 = phi float [ %895, %864 ], [ %650, %729 ]
  %900 = phi float [ %896, %864 ], [ %653, %729 ]
  %901 = fmul fast float %851, %493
  %902 = fadd fast float %853, %901
  %903 = fdiv fast float 1.500000e+00, %902
  %904 = call float @dx.op.unary.f32(i32 7, float %903)  ; Saturate(value)
  %905 = fmul fast float %498, 7.500000e-01
  %906 = fmul fast float %905, %501
  %907 = fmul fast float %906, %904
  %908 = fadd fast float %907, 0xBEB0C6F7A0000000
  %909 = call float @dx.op.binary.f32(i32 36, float %483, float %908)  ; FMin(a,b)
  %910 = fmul fast float %909, %856
  %911 = fmul fast float %909, %859
  %912 = fmul fast float %909, %862
  %913 = fadd fast float %910, %898
  %914 = fadd fast float %911, %899
  %915 = fadd fast float %912, %900
  %916 = fmul fast float %907, %856
  %917 = fmul fast float %907, %859
  %918 = fmul fast float %907, %862
  %919 = fadd fast float %916, %898
  %920 = fadd fast float %917, %899
  %921 = fadd fast float %918, %900
  %922 = fcmp fast ogt float %697, 0.000000e+00
  br i1 %922, label %923, label %1004

; <label>:923                                     ; preds = %897
  %924 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %925 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %924, i32 %575, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %926 = extractvalue %dx.types.ResRet.i32 %925, 0
  %927 = extractvalue %dx.types.ResRet.i32 %925, 1
  %928 = extractvalue %dx.types.ResRet.i32 %925, 3
  %929 = bitcast i32 %926 to float
  %930 = bitcast i32 %927 to float
  %931 = bitcast i32 %928 to float
  %932 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %924, i32 %576, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %933 = extractvalue %dx.types.ResRet.i32 %932, 0
  %934 = extractvalue %dx.types.ResRet.i32 %932, 1
  %935 = extractvalue %dx.types.ResRet.i32 %932, 3
  %936 = bitcast i32 %933 to float
  %937 = bitcast i32 %934 to float
  %938 = bitcast i32 %935 to float
  %939 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %924, i32 %577, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %940 = extractvalue %dx.types.ResRet.i32 %939, 0
  %941 = extractvalue %dx.types.ResRet.i32 %939, 1
  %942 = extractvalue %dx.types.ResRet.i32 %939, 3
  %943 = bitcast i32 %940 to float
  %944 = bitcast i32 %941 to float
  %945 = bitcast i32 %942 to float
  %946 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %924, i32 %578, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %947 = extractvalue %dx.types.ResRet.i32 %946, 0
  %948 = extractvalue %dx.types.ResRet.i32 %946, 1
  %949 = extractvalue %dx.types.ResRet.i32 %946, 3
  %950 = bitcast i32 %947 to float
  %951 = bitcast i32 %948 to float
  %952 = bitcast i32 %949 to float
  %953 = fmul fast float %929, %913
  %954 = call float @dx.op.tertiary.f32(i32 46, float %914, float %936, float %953)  ; FMad(a,b,c)
  %955 = call float @dx.op.tertiary.f32(i32 46, float %915, float %943, float %954)  ; FMad(a,b,c)
  %956 = fadd fast float %955, %950
  %957 = fmul fast float %930, %913
  %958 = call float @dx.op.tertiary.f32(i32 46, float %914, float %937, float %957)  ; FMad(a,b,c)
  %959 = call float @dx.op.tertiary.f32(i32 46, float %915, float %944, float %958)  ; FMad(a,b,c)
  %960 = fadd fast float %959, %951
  %961 = fmul fast float %931, %913
  %962 = call float @dx.op.tertiary.f32(i32 46, float %914, float %938, float %961)  ; FMad(a,b,c)
  %963 = call float @dx.op.tertiary.f32(i32 46, float %915, float %945, float %962)  ; FMad(a,b,c)
  %964 = fadd fast float %963, %952
  %965 = fdiv fast float %956, %964
  %966 = fdiv fast float %960, %964
  %967 = icmp ult i32 %568, 8192
  br i1 %967, label %978, label %968

; <label>:968                                     ; preds = %923
  %969 = fmul fast float %966, 1.280000e+02
  %970 = fptoui float %969 to i32
  %971 = fmul fast float %965, 1.280000e+02
  %972 = fptoui float %971 to i32
  %973 = mul i32 %568, 21845
  %974 = shl i32 %970, 7
  %975 = add i32 %973, -178946048
  %976 = add i32 %975, %972
  %977 = add i32 %976, %974
  br label %978

; <label>:978                                     ; preds = %968, %923
  %979 = phi i32 [ %977, %968 ], [ %568, %923 ]
  %980 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %981 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %980, i32 %979, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %982 = extractvalue %dx.types.ResRet.i32 %981, 0
  %983 = lshr i32 %982, 20
  %984 = and i32 %983, 31
  %985 = lshr i32 16384, %984
  %986 = uitofp i32 %985 to float
  %987 = select i1 %967, float 1.280000e+02, float %986
  %988 = fmul fast float %987, %965
  %989 = fmul fast float %987, %966
  %990 = fptoui float %988 to i32
  %991 = fptoui float %989 to i32
  %992 = uitofp i32 %990 to float
  %993 = uitofp i32 %991 to float
  %994 = fsub fast float 5.000000e-01, %988
  %995 = fadd fast float %994, %992
  %996 = fsub fast float 5.000000e-01, %989
  %997 = fadd fast float %996, %993
  %998 = fdiv fast float %995, %987
  %999 = fdiv fast float %997, %987
  %1000 = call float @dx.op.dot2.f32(i32 54, float %670, float %671, float %998, float %999)  ; Dot2(ax,ay,bx,by)
  %1001 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1000)  ; FMax(a,b)
  %1002 = fmul fast float %1001, 2.000000e+00
  %1003 = call float @dx.op.binary.f32(i32 36, float %697, float %1002)  ; FMin(a,b)
  br label %1004

; <label>:1004                                    ; preds = %978, %897
  %1005 = phi float [ %1003, %978 ], [ 0.000000e+00, %897 ]
  br i1 %494, label %1006, label %1157

; <label>:1006                                    ; preds = %1004
  %1007 = mul i32 %279, 336
  %1008 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1009 = add i32 %1007, 128
  %1010 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1008, i32 %1009, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1011 = extractvalue %dx.types.ResRet.i32 %1010, 0
  %1012 = extractvalue %dx.types.ResRet.i32 %1010, 1
  %1013 = extractvalue %dx.types.ResRet.i32 %1010, 2
  %1014 = extractvalue %dx.types.ResRet.i32 %1010, 3
  %1015 = bitcast i32 %1011 to float
  %1016 = bitcast i32 %1012 to float
  %1017 = bitcast i32 %1013 to float
  %1018 = bitcast i32 %1014 to float
  %1019 = add i32 %1007, 144
  %1020 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1008, i32 %1019, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1021 = extractvalue %dx.types.ResRet.i32 %1020, 0
  %1022 = extractvalue %dx.types.ResRet.i32 %1020, 1
  %1023 = extractvalue %dx.types.ResRet.i32 %1020, 2
  %1024 = extractvalue %dx.types.ResRet.i32 %1020, 3
  %1025 = bitcast i32 %1021 to float
  %1026 = bitcast i32 %1022 to float
  %1027 = bitcast i32 %1023 to float
  %1028 = bitcast i32 %1024 to float
  %1029 = add i32 %1007, 160
  %1030 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1008, i32 %1029, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1031 = extractvalue %dx.types.ResRet.i32 %1030, 0
  %1032 = extractvalue %dx.types.ResRet.i32 %1030, 1
  %1033 = extractvalue %dx.types.ResRet.i32 %1030, 2
  %1034 = extractvalue %dx.types.ResRet.i32 %1030, 3
  %1035 = bitcast i32 %1031 to float
  %1036 = bitcast i32 %1032 to float
  %1037 = bitcast i32 %1033 to float
  %1038 = bitcast i32 %1034 to float
  %1039 = add i32 %1007, 176
  %1040 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1008, i32 %1039, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1041 = extractvalue %dx.types.ResRet.i32 %1040, 0
  %1042 = extractvalue %dx.types.ResRet.i32 %1040, 1
  %1043 = extractvalue %dx.types.ResRet.i32 %1040, 2
  %1044 = extractvalue %dx.types.ResRet.i32 %1040, 3
  %1045 = bitcast i32 %1041 to float
  %1046 = bitcast i32 %1042 to float
  %1047 = bitcast i32 %1043 to float
  %1048 = bitcast i32 %1044 to float
  %1049 = fmul fast float %1015, %913
  %1050 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1025, float %1049)  ; FMad(a,b,c)
  %1051 = call float @dx.op.tertiary.f32(i32 46, float %915, float %1035, float %1050)  ; FMad(a,b,c)
  %1052 = fadd fast float %1051, %1045
  %1053 = fmul fast float %1016, %913
  %1054 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1026, float %1053)  ; FMad(a,b,c)
  %1055 = call float @dx.op.tertiary.f32(i32 46, float %915, float %1036, float %1054)  ; FMad(a,b,c)
  %1056 = fadd fast float %1055, %1046
  %1057 = fmul fast float %1017, %913
  %1058 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1027, float %1057)  ; FMad(a,b,c)
  %1059 = call float @dx.op.tertiary.f32(i32 46, float %915, float %1037, float %1058)  ; FMad(a,b,c)
  %1060 = fadd fast float %1059, %1047
  %1061 = fmul fast float %1018, %913
  %1062 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1028, float %1061)  ; FMad(a,b,c)
  %1063 = call float @dx.op.tertiary.f32(i32 46, float %915, float %1038, float %1062)  ; FMad(a,b,c)
  %1064 = fadd fast float %1063, %1048
  %1065 = fdiv fast float %1052, %1064
  %1066 = fdiv fast float %1056, %1064
  %1067 = fdiv fast float %1060, %1064
  %1068 = call float @dx.op.unary.f32(i32 7, float %1065)  ; Saturate(value)
  %1069 = call float @dx.op.unary.f32(i32 7, float %1066)  ; Saturate(value)
  %1070 = fadd fast float %1067, %1005
  %1071 = call float @dx.op.unary.f32(i32 7, float %1068)  ; Saturate(value)
  %1072 = call float @dx.op.unary.f32(i32 7, float %1069)  ; Saturate(value)
  %1073 = fcmp fast oeq float %1068, %1071
  %1074 = fcmp fast oeq float %1069, %1072
  %1075 = and i1 %1073, %1074
  br i1 %1075, label %1076, label %1133

; <label>:1076                                    ; preds = %1006
  %1077 = icmp ult i32 %279, 8192
  br i1 %1077, label %1088, label %1078

; <label>:1078                                    ; preds = %1076
  %1079 = fmul fast float %1069, 1.280000e+02
  %1080 = fptoui float %1079 to i32
  %1081 = fmul fast float %1068, 1.280000e+02
  %1082 = fptoui float %1081 to i32
  %1083 = mul i32 %279, 21845
  %1084 = shl i32 %1080, 7
  %1085 = add i32 %1083, -178946048
  %1086 = add i32 %1085, %1082
  %1087 = add i32 %1086, %1084
  br label %1088

; <label>:1088                                    ; preds = %1078, %1076
  %1089 = phi i32 [ %1087, %1078 ], [ %279, %1076 ]
  %1090 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1091 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1090, i32 %1089, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1092 = extractvalue %dx.types.ResRet.i32 %1091, 0
  %1093 = lshr i32 %1092, 20
  %1094 = and i32 %1093, 63
  %1095 = and i32 %1092, 134217728
  %1096 = icmp eq i32 %1095, 0
  %1097 = select i1 %1077, i32 7, i32 %1094
  %1098 = and i32 %1097, 31
  %1099 = lshr i32 16384, %1098
  %1100 = uitofp i32 %1099 to float
  %1101 = fmul fast float %1100, %1068
  %1102 = fmul fast float %1100, %1069
  %1103 = fptoui float %1101 to i32
  %1104 = fptoui float %1102 to i32
  %1105 = shl i32 %1092, 7
  %1106 = and i32 %1105, 130944
  %1107 = lshr i32 %1092, 3
  %1108 = and i32 %1107, 130944
  %1109 = and i32 %1103, 127
  %1110 = and i32 %1104, 127
  %1111 = or i32 %1109, %1106
  %1112 = or i32 %1110, %1108
  br i1 %1096, label %1118, label %1113

; <label>:1113                                    ; preds = %1088
  %1114 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1115 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1114, i32 0, i32 %1111, i32 %1112, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1116 = extractvalue %dx.types.ResRet.i32 %1115, 0
  %1117 = bitcast i32 %1116 to float
  br label %1118

; <label>:1118                                    ; preds = %1113, %1088
  %1119 = phi float [ %1117, %1113 ], [ 0.000000e+00, %1088 ]
  %1120 = phi i32 [ %1097, %1113 ], [ 0, %1088 ]
  %1121 = phi i1 [ true, %1113 ], [ false, %1088 ]
  %1122 = phi i32 [ %1103, %1113 ], [ 0, %1088 ]
  %1123 = phi i32 [ %1104, %1113 ], [ 0, %1088 ]
  %1124 = phi i32 [ %1111, %1113 ], [ 0, %1088 ]
  %1125 = phi i32 [ %1112, %1113 ], [ 0, %1088 ]
  %1126 = select i1 %1121, i32 %1120, i32 0
  %1127 = select i1 %1121, i32 %1122, i32 -1
  %1128 = select i1 %1121, i32 %1123, i32 -1
  %1129 = select i1 %1121, i32 %1124, i32 -1
  %1130 = select i1 %1121, i32 %1125, i32 -1
  %1131 = select i1 %1121, float %1119, float 0.000000e+00
  %1132 = zext i1 %1121 to i32
  br label %1133

; <label>:1133                                    ; preds = %1118, %1006
  %1134 = phi i32 [ 0, %1006 ], [ %1126, %1118 ]
  %1135 = phi i32 [ -1, %1006 ], [ %1127, %1118 ]
  %1136 = phi i32 [ -1, %1006 ], [ %1128, %1118 ]
  %1137 = phi i32 [ -1, %1006 ], [ %1129, %1118 ]
  %1138 = phi i32 [ -1, %1006 ], [ %1130, %1118 ]
  %1139 = phi float [ 0.000000e+00, %1006 ], [ %1131, %1118 ]
  %1140 = phi i32 [ 0, %1006 ], [ %1132, %1118 ]
  %1141 = icmp ne i32 %1140, 0
  %1142 = fcmp fast ogt float %1139, %1070
  %1143 = and i1 %1142, %1141
  %1144 = select i1 %1141, float %1139, float 0.000000e+00
  %1145 = select i1 %1141, i32 %1134, i32 0
  %1146 = select i1 %1141, i32 %1135, i32 0
  %1147 = select i1 %1141, i32 %1136, i32 0
  %1148 = select i1 %1141, i32 %1137, i32 0
  %1149 = select i1 %1141, i32 %1138, i32 0
  %1150 = select i1 %1143, i32 %1145, i32 %1134
  %1151 = select i1 %1143, i32 %1146, i32 %1135
  %1152 = select i1 %1143, i32 %1147, i32 %1136
  %1153 = select i1 %1143, i32 %1148, i32 %1137
  %1154 = select i1 %1143, i32 %1149, i32 %1138
  %1155 = select i1 %1143, float %1144, float -1.000000e+00
  %1156 = select i1 %1143, i32 %1140, i32 0
  br label %1652

; <label>:1157                                    ; preds = %1004
  %1158 = call float @dx.op.unary.f32(i32 6, float %913)  ; FAbs(value)
  %1159 = call float @dx.op.unary.f32(i32 6, float %914)  ; FAbs(value)
  %1160 = fcmp fast ult float %1158, %1159
  %1161 = call float @dx.op.unary.f32(i32 6, float %915)  ; FAbs(value)
  %1162 = fcmp fast ult float %1158, %1161
  %1163 = or i1 %1160, %1162
  br i1 %1163, label %1167, label %1164

; <label>:1164                                    ; preds = %1157
  %1165 = fcmp ule float %913, 0.000000e+00
  %1166 = zext i1 %1165 to i32
  br label %1175

; <label>:1167                                    ; preds = %1157
  %1168 = fcmp fast ogt float %1159, %1161
  br i1 %1168, label %1169, label %1172

; <label>:1169                                    ; preds = %1167
  %1170 = fcmp fast ogt float %914, 0.000000e+00
  %1171 = select i1 %1170, i32 2, i32 3
  br label %1175

; <label>:1172                                    ; preds = %1167
  %1173 = fcmp fast ogt float %915, 0.000000e+00
  %1174 = select i1 %1173, i32 4, i32 5
  br label %1175

; <label>:1175                                    ; preds = %1172, %1169, %1164
  %1176 = phi i32 [ %1166, %1164 ], [ %1171, %1169 ], [ %1174, %1172 ]
  %1177 = call float @dx.op.unary.f32(i32 6, float %919)  ; FAbs(value)
  %1178 = call float @dx.op.unary.f32(i32 6, float %920)  ; FAbs(value)
  %1179 = fcmp fast ult float %1177, %1178
  %1180 = call float @dx.op.unary.f32(i32 6, float %921)  ; FAbs(value)
  %1181 = fcmp fast ult float %1177, %1180
  %1182 = or i1 %1179, %1181
  br i1 %1182, label %1186, label %1183

; <label>:1183                                    ; preds = %1175
  %1184 = fcmp ule float %919, 0.000000e+00
  %1185 = zext i1 %1184 to i32
  br label %1194

; <label>:1186                                    ; preds = %1175
  %1187 = fcmp fast ogt float %1178, %1180
  br i1 %1187, label %1188, label %1191

; <label>:1188                                    ; preds = %1186
  %1189 = fcmp fast ogt float %920, 0.000000e+00
  %1190 = select i1 %1189, i32 2, i32 3
  br label %1194

; <label>:1191                                    ; preds = %1186
  %1192 = fcmp fast ogt float %921, 0.000000e+00
  %1193 = select i1 %1192, i32 4, i32 5
  br label %1194

; <label>:1194                                    ; preds = %1191, %1188, %1183
  %1195 = phi i32 [ %1185, %1183 ], [ %1190, %1188 ], [ %1193, %1191 ]
  %1196 = icmp ne i32 %1176, %1195
  %1197 = call i1 @dx.op.waveAnyTrue(i32 113, i1 %1196)  ; WaveAnyTrue(cond)
  %1198 = add i32 %1195, %279
  %1199 = mul i32 %1198, 336
  %1200 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1201 = add i32 %1199, 128
  %1202 = add i32 %1199, 144
  %1203 = add i32 %1199, 160
  %1204 = add i32 %1199, 176
  br i1 %1197, label %1205, label %1507

; <label>:1205                                    ; preds = %1194
  %1206 = add i32 %1176, %279
  %1207 = mul i32 %1206, 336
  %1208 = add i32 %1207, 128
  %1209 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1200, i32 %1208, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1210 = extractvalue %dx.types.ResRet.i32 %1209, 0
  %1211 = extractvalue %dx.types.ResRet.i32 %1209, 1
  %1212 = extractvalue %dx.types.ResRet.i32 %1209, 2
  %1213 = extractvalue %dx.types.ResRet.i32 %1209, 3
  %1214 = bitcast i32 %1210 to float
  %1215 = bitcast i32 %1211 to float
  %1216 = bitcast i32 %1212 to float
  %1217 = bitcast i32 %1213 to float
  %1218 = add i32 %1207, 144
  %1219 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1200, i32 %1218, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1220 = extractvalue %dx.types.ResRet.i32 %1219, 0
  %1221 = extractvalue %dx.types.ResRet.i32 %1219, 1
  %1222 = extractvalue %dx.types.ResRet.i32 %1219, 2
  %1223 = extractvalue %dx.types.ResRet.i32 %1219, 3
  %1224 = bitcast i32 %1220 to float
  %1225 = bitcast i32 %1221 to float
  %1226 = bitcast i32 %1222 to float
  %1227 = bitcast i32 %1223 to float
  %1228 = add i32 %1207, 160
  %1229 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1200, i32 %1228, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1230 = extractvalue %dx.types.ResRet.i32 %1229, 0
  %1231 = extractvalue %dx.types.ResRet.i32 %1229, 1
  %1232 = extractvalue %dx.types.ResRet.i32 %1229, 2
  %1233 = extractvalue %dx.types.ResRet.i32 %1229, 3
  %1234 = bitcast i32 %1230 to float
  %1235 = bitcast i32 %1231 to float
  %1236 = bitcast i32 %1232 to float
  %1237 = bitcast i32 %1233 to float
  %1238 = add i32 %1207, 176
  %1239 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1200, i32 %1238, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1240 = extractvalue %dx.types.ResRet.i32 %1239, 0
  %1241 = extractvalue %dx.types.ResRet.i32 %1239, 1
  %1242 = extractvalue %dx.types.ResRet.i32 %1239, 2
  %1243 = extractvalue %dx.types.ResRet.i32 %1239, 3
  %1244 = bitcast i32 %1240 to float
  %1245 = bitcast i32 %1241 to float
  %1246 = bitcast i32 %1242 to float
  %1247 = bitcast i32 %1243 to float
  %1248 = fmul fast float %1214, %913
  %1249 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1224, float %1248)  ; FMad(a,b,c)
  %1250 = call float @dx.op.tertiary.f32(i32 46, float %915, float %1234, float %1249)  ; FMad(a,b,c)
  %1251 = fadd fast float %1250, %1244
  %1252 = fmul fast float %1215, %913
  %1253 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1225, float %1252)  ; FMad(a,b,c)
  %1254 = call float @dx.op.tertiary.f32(i32 46, float %915, float %1235, float %1253)  ; FMad(a,b,c)
  %1255 = fadd fast float %1254, %1245
  %1256 = fmul fast float %1216, %913
  %1257 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1226, float %1256)  ; FMad(a,b,c)
  %1258 = call float @dx.op.tertiary.f32(i32 46, float %915, float %1236, float %1257)  ; FMad(a,b,c)
  %1259 = fadd fast float %1258, %1246
  %1260 = fmul fast float %1217, %913
  %1261 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1227, float %1260)  ; FMad(a,b,c)
  %1262 = call float @dx.op.tertiary.f32(i32 46, float %915, float %1237, float %1261)  ; FMad(a,b,c)
  %1263 = fadd fast float %1262, %1247
  %1264 = fdiv fast float %1251, %1263
  %1265 = fdiv fast float %1255, %1263
  %1266 = fdiv fast float %1259, %1263
  %1267 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1200, i32 %1201, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1268 = extractvalue %dx.types.ResRet.i32 %1267, 0
  %1269 = extractvalue %dx.types.ResRet.i32 %1267, 1
  %1270 = extractvalue %dx.types.ResRet.i32 %1267, 2
  %1271 = extractvalue %dx.types.ResRet.i32 %1267, 3
  %1272 = bitcast i32 %1268 to float
  %1273 = bitcast i32 %1269 to float
  %1274 = bitcast i32 %1270 to float
  %1275 = bitcast i32 %1271 to float
  %1276 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1200, i32 %1202, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1277 = extractvalue %dx.types.ResRet.i32 %1276, 0
  %1278 = extractvalue %dx.types.ResRet.i32 %1276, 1
  %1279 = extractvalue %dx.types.ResRet.i32 %1276, 2
  %1280 = extractvalue %dx.types.ResRet.i32 %1276, 3
  %1281 = bitcast i32 %1277 to float
  %1282 = bitcast i32 %1278 to float
  %1283 = bitcast i32 %1279 to float
  %1284 = bitcast i32 %1280 to float
  %1285 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1200, i32 %1203, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1286 = extractvalue %dx.types.ResRet.i32 %1285, 0
  %1287 = extractvalue %dx.types.ResRet.i32 %1285, 1
  %1288 = extractvalue %dx.types.ResRet.i32 %1285, 2
  %1289 = extractvalue %dx.types.ResRet.i32 %1285, 3
  %1290 = bitcast i32 %1286 to float
  %1291 = bitcast i32 %1287 to float
  %1292 = bitcast i32 %1288 to float
  %1293 = bitcast i32 %1289 to float
  %1294 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1200, i32 %1204, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1295 = extractvalue %dx.types.ResRet.i32 %1294, 0
  %1296 = extractvalue %dx.types.ResRet.i32 %1294, 1
  %1297 = extractvalue %dx.types.ResRet.i32 %1294, 2
  %1298 = extractvalue %dx.types.ResRet.i32 %1294, 3
  %1299 = bitcast i32 %1295 to float
  %1300 = bitcast i32 %1296 to float
  %1301 = bitcast i32 %1297 to float
  %1302 = bitcast i32 %1298 to float
  %1303 = fmul fast float %1272, %913
  %1304 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1281, float %1303)  ; FMad(a,b,c)
  %1305 = call float @dx.op.tertiary.f32(i32 46, float %915, float %1290, float %1304)  ; FMad(a,b,c)
  %1306 = fadd fast float %1305, %1299
  %1307 = fmul fast float %1273, %913
  %1308 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1282, float %1307)  ; FMad(a,b,c)
  %1309 = call float @dx.op.tertiary.f32(i32 46, float %915, float %1291, float %1308)  ; FMad(a,b,c)
  %1310 = fadd fast float %1309, %1300
  %1311 = fmul fast float %1274, %913
  %1312 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1283, float %1311)  ; FMad(a,b,c)
  %1313 = call float @dx.op.tertiary.f32(i32 46, float %915, float %1292, float %1312)  ; FMad(a,b,c)
  %1314 = fadd fast float %1313, %1301
  %1315 = fmul fast float %1275, %913
  %1316 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1284, float %1315)  ; FMad(a,b,c)
  %1317 = call float @dx.op.tertiary.f32(i32 46, float %915, float %1293, float %1316)  ; FMad(a,b,c)
  %1318 = fadd fast float %1317, %1302
  %1319 = fdiv fast float %1306, %1318
  %1320 = fdiv fast float %1310, %1318
  %1321 = fdiv fast float %1314, %1318
  %1322 = fadd fast float %1321, %1005
  %1323 = call float @dx.op.unary.f32(i32 7, float %1319)  ; Saturate(value)
  %1324 = call float @dx.op.unary.f32(i32 7, float %1320)  ; Saturate(value)
  %1325 = fcmp fast oeq float %1319, %1323
  %1326 = fcmp fast oeq float %1320, %1324
  %1327 = and i1 %1325, %1326
  br i1 %1327, label %1328, label %1385

; <label>:1328                                    ; preds = %1205
  %1329 = icmp ult i32 %1198, 8192
  br i1 %1329, label %1340, label %1330

; <label>:1330                                    ; preds = %1328
  %1331 = fmul fast float %1320, 1.280000e+02
  %1332 = fptoui float %1331 to i32
  %1333 = fmul fast float %1319, 1.280000e+02
  %1334 = fptoui float %1333 to i32
  %1335 = mul i32 %1198, 21845
  %1336 = shl i32 %1332, 7
  %1337 = add i32 %1335, -178946048
  %1338 = add i32 %1337, %1334
  %1339 = add i32 %1338, %1336
  br label %1340

; <label>:1340                                    ; preds = %1330, %1328
  %1341 = phi i32 [ %1339, %1330 ], [ %1198, %1328 ]
  %1342 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1343 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1342, i32 %1341, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1344 = extractvalue %dx.types.ResRet.i32 %1343, 0
  %1345 = lshr i32 %1344, 20
  %1346 = and i32 %1345, 63
  %1347 = and i32 %1344, 134217728
  %1348 = icmp eq i32 %1347, 0
  %1349 = select i1 %1329, i32 7, i32 %1346
  %1350 = and i32 %1349, 31
  %1351 = lshr i32 16384, %1350
  %1352 = uitofp i32 %1351 to float
  %1353 = fmul fast float %1352, %1319
  %1354 = fmul fast float %1352, %1320
  %1355 = fptoui float %1353 to i32
  %1356 = fptoui float %1354 to i32
  %1357 = shl i32 %1344, 7
  %1358 = and i32 %1357, 130944
  %1359 = lshr i32 %1344, 3
  %1360 = and i32 %1359, 130944
  %1361 = and i32 %1355, 127
  %1362 = and i32 %1356, 127
  %1363 = or i32 %1361, %1358
  %1364 = or i32 %1362, %1360
  br i1 %1348, label %1370, label %1365

; <label>:1365                                    ; preds = %1340
  %1366 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1367 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1366, i32 0, i32 %1363, i32 %1364, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1368 = extractvalue %dx.types.ResRet.i32 %1367, 0
  %1369 = bitcast i32 %1368 to float
  br label %1370

; <label>:1370                                    ; preds = %1365, %1340
  %1371 = phi float [ %1369, %1365 ], [ 0.000000e+00, %1340 ]
  %1372 = phi i32 [ %1349, %1365 ], [ 0, %1340 ]
  %1373 = phi i1 [ true, %1365 ], [ false, %1340 ]
  %1374 = phi i32 [ %1355, %1365 ], [ 0, %1340 ]
  %1375 = phi i32 [ %1356, %1365 ], [ 0, %1340 ]
  %1376 = phi i32 [ %1363, %1365 ], [ 0, %1340 ]
  %1377 = phi i32 [ %1364, %1365 ], [ 0, %1340 ]
  %1378 = select i1 %1373, i32 %1372, i32 0
  %1379 = select i1 %1373, i32 %1374, i32 -1
  %1380 = select i1 %1373, i32 %1375, i32 -1
  %1381 = select i1 %1373, i32 %1376, i32 -1
  %1382 = select i1 %1373, i32 %1377, i32 -1
  %1383 = select i1 %1373, float %1371, float 0.000000e+00
  %1384 = zext i1 %1373 to i32
  br label %1385

; <label>:1385                                    ; preds = %1370, %1205
  %1386 = phi i32 [ 0, %1205 ], [ %1378, %1370 ]
  %1387 = phi i32 [ -1, %1205 ], [ %1379, %1370 ]
  %1388 = phi i32 [ -1, %1205 ], [ %1380, %1370 ]
  %1389 = phi i32 [ -1, %1205 ], [ %1381, %1370 ]
  %1390 = phi i32 [ -1, %1205 ], [ %1382, %1370 ]
  %1391 = phi float [ 0.000000e+00, %1205 ], [ %1383, %1370 ]
  %1392 = phi i32 [ 0, %1205 ], [ %1384, %1370 ]
  %1393 = icmp eq i32 %1392, 0
  br i1 %1393, label %1394, label %1458

; <label>:1394                                    ; preds = %1385
  %1395 = fadd fast float %1266, %1005
  %1396 = call float @dx.op.unary.f32(i32 7, float %1264)  ; Saturate(value)
  %1397 = call float @dx.op.unary.f32(i32 7, float %1265)  ; Saturate(value)
  %1398 = fcmp fast oeq float %1264, %1396
  %1399 = fcmp fast oeq float %1265, %1397
  %1400 = and i1 %1398, %1399
  br i1 %1400, label %1401, label %1458

; <label>:1401                                    ; preds = %1394
  %1402 = icmp ult i32 %1206, 8192
  br i1 %1402, label %1413, label %1403

; <label>:1403                                    ; preds = %1401
  %1404 = fmul fast float %1265, 1.280000e+02
  %1405 = fptoui float %1404 to i32
  %1406 = fmul fast float %1264, 1.280000e+02
  %1407 = fptoui float %1406 to i32
  %1408 = mul i32 %1206, 21845
  %1409 = shl i32 %1405, 7
  %1410 = add i32 %1408, -178946048
  %1411 = add i32 %1410, %1407
  %1412 = add i32 %1411, %1409
  br label %1413

; <label>:1413                                    ; preds = %1403, %1401
  %1414 = phi i32 [ %1412, %1403 ], [ %1206, %1401 ]
  %1415 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1416 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1415, i32 %1414, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1417 = extractvalue %dx.types.ResRet.i32 %1416, 0
  %1418 = lshr i32 %1417, 20
  %1419 = and i32 %1418, 63
  %1420 = and i32 %1417, 134217728
  %1421 = icmp eq i32 %1420, 0
  %1422 = select i1 %1402, i32 7, i32 %1419
  %1423 = and i32 %1422, 31
  %1424 = lshr i32 16384, %1423
  %1425 = uitofp i32 %1424 to float
  %1426 = fmul fast float %1425, %1264
  %1427 = fmul fast float %1425, %1265
  %1428 = fptoui float %1426 to i32
  %1429 = fptoui float %1427 to i32
  %1430 = shl i32 %1417, 7
  %1431 = and i32 %1430, 130944
  %1432 = lshr i32 %1417, 3
  %1433 = and i32 %1432, 130944
  %1434 = and i32 %1428, 127
  %1435 = and i32 %1429, 127
  %1436 = or i32 %1434, %1431
  %1437 = or i32 %1435, %1433
  br i1 %1421, label %1443, label %1438

; <label>:1438                                    ; preds = %1413
  %1439 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1440 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1439, i32 0, i32 %1436, i32 %1437, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1441 = extractvalue %dx.types.ResRet.i32 %1440, 0
  %1442 = bitcast i32 %1441 to float
  br label %1443

; <label>:1443                                    ; preds = %1438, %1413
  %1444 = phi float [ %1442, %1438 ], [ 0.000000e+00, %1413 ]
  %1445 = phi i32 [ %1422, %1438 ], [ 0, %1413 ]
  %1446 = phi i1 [ true, %1438 ], [ false, %1413 ]
  %1447 = phi i32 [ %1428, %1438 ], [ 0, %1413 ]
  %1448 = phi i32 [ %1429, %1438 ], [ 0, %1413 ]
  %1449 = phi i32 [ %1436, %1438 ], [ 0, %1413 ]
  %1450 = phi i32 [ %1437, %1438 ], [ 0, %1413 ]
  %1451 = select i1 %1446, i32 %1445, i32 0
  %1452 = select i1 %1446, i32 %1447, i32 -1
  %1453 = select i1 %1446, i32 %1448, i32 -1
  %1454 = select i1 %1446, i32 %1449, i32 -1
  %1455 = select i1 %1446, i32 %1450, i32 -1
  %1456 = select i1 %1446, float %1444, float 0.000000e+00
  %1457 = zext i1 %1446 to i32
  br label %1458

; <label>:1458                                    ; preds = %1443, %1394, %1385
  %1459 = phi i32 [ 0, %1385 ], [ 0, %1394 ], [ %1451, %1443 ]
  %1460 = phi i32 [ -1, %1385 ], [ -1, %1394 ], [ %1452, %1443 ]
  %1461 = phi i32 [ -1, %1385 ], [ -1, %1394 ], [ %1453, %1443 ]
  %1462 = phi i32 [ -1, %1385 ], [ -1, %1394 ], [ %1454, %1443 ]
  %1463 = phi i32 [ -1, %1385 ], [ -1, %1394 ], [ %1455, %1443 ]
  %1464 = phi i32 [ 1, %1385 ], [ 0, %1394 ], [ 0, %1443 ]
  %1465 = phi float [ %1322, %1385 ], [ %1395, %1394 ], [ %1395, %1443 ]
  %1466 = phi float [ %1391, %1385 ], [ 0.000000e+00, %1394 ], [ %1456, %1443 ]
  %1467 = phi i32 [ %1392, %1385 ], [ 0, %1394 ], [ %1457, %1443 ]
  %1468 = icmp eq i32 %1467, 0
  br i1 %1468, label %1471, label %1469

; <label>:1469                                    ; preds = %1458
  %1470 = fcmp fast ogt float %1466, %1465
  br label %1471

; <label>:1471                                    ; preds = %1469, %1458
  %1472 = phi i1 [ %1470, %1469 ], [ false, %1458 ]
  %1473 = phi i32 [ 1, %1469 ], [ 0, %1458 ]
  %1474 = phi float [ %1466, %1469 ], [ 0.000000e+00, %1458 ]
  %1475 = phi i32 [ %1386, %1469 ], [ 0, %1458 ]
  %1476 = phi i32 [ %1387, %1469 ], [ 0, %1458 ]
  %1477 = phi i32 [ %1388, %1469 ], [ 0, %1458 ]
  %1478 = phi i32 [ %1389, %1469 ], [ 0, %1458 ]
  %1479 = phi i32 [ %1390, %1469 ], [ 0, %1458 ]
  %1480 = phi i32 [ %1459, %1469 ], [ 0, %1458 ]
  %1481 = phi i32 [ %1460, %1469 ], [ 0, %1458 ]
  %1482 = phi i32 [ %1461, %1469 ], [ 0, %1458 ]
  %1483 = phi i32 [ %1462, %1469 ], [ 0, %1458 ]
  %1484 = phi i32 [ %1463, %1469 ], [ 0, %1458 ]
  %1485 = phi i32 [ %1464, %1469 ], [ 0, %1458 ]
  %1486 = select i1 %1472, i32 %1485, i32 %1464
  %1487 = select i1 %1472, i32 %1484, i32 %1463
  %1488 = select i1 %1472, i32 %1483, i32 %1462
  %1489 = select i1 %1472, i32 %1482, i32 %1461
  %1490 = select i1 %1472, i32 %1481, i32 %1460
  %1491 = select i1 %1472, i32 %1480, i32 %1459
  %1492 = select i1 %1472, i32 %1479, i32 %1390
  %1493 = select i1 %1472, i32 %1478, i32 %1389
  %1494 = select i1 %1472, i32 %1477, i32 %1388
  %1495 = select i1 %1472, i32 %1476, i32 %1387
  %1496 = select i1 %1472, i32 %1475, i32 %1386
  %1497 = select i1 %1472, float %1474, float -1.000000e+00
  %1498 = select i1 %1472, i32 %1473, i32 0
  %1499 = icmp ne i32 %1486, 0
  %1500 = select i1 %1499, i32 %1198, i32 %1206
  %1501 = select i1 %1499, float %1321, float %1266
  %1502 = select i1 %1499, i32 %1496, i32 %1491
  %1503 = select i1 %1499, i32 %1495, i32 %1490
  %1504 = select i1 %1499, i32 %1494, i32 %1489
  %1505 = select i1 %1499, i32 %1493, i32 %1488
  %1506 = select i1 %1499, i32 %1492, i32 %1487
  br label %1652

; <label>:1507                                    ; preds = %1194
  %1508 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1200, i32 %1201, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1509 = extractvalue %dx.types.ResRet.i32 %1508, 0
  %1510 = extractvalue %dx.types.ResRet.i32 %1508, 1
  %1511 = extractvalue %dx.types.ResRet.i32 %1508, 2
  %1512 = extractvalue %dx.types.ResRet.i32 %1508, 3
  %1513 = bitcast i32 %1509 to float
  %1514 = bitcast i32 %1510 to float
  %1515 = bitcast i32 %1511 to float
  %1516 = bitcast i32 %1512 to float
  %1517 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1200, i32 %1202, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1518 = extractvalue %dx.types.ResRet.i32 %1517, 0
  %1519 = extractvalue %dx.types.ResRet.i32 %1517, 1
  %1520 = extractvalue %dx.types.ResRet.i32 %1517, 2
  %1521 = extractvalue %dx.types.ResRet.i32 %1517, 3
  %1522 = bitcast i32 %1518 to float
  %1523 = bitcast i32 %1519 to float
  %1524 = bitcast i32 %1520 to float
  %1525 = bitcast i32 %1521 to float
  %1526 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1200, i32 %1203, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1527 = extractvalue %dx.types.ResRet.i32 %1526, 0
  %1528 = extractvalue %dx.types.ResRet.i32 %1526, 1
  %1529 = extractvalue %dx.types.ResRet.i32 %1526, 2
  %1530 = extractvalue %dx.types.ResRet.i32 %1526, 3
  %1531 = bitcast i32 %1527 to float
  %1532 = bitcast i32 %1528 to float
  %1533 = bitcast i32 %1529 to float
  %1534 = bitcast i32 %1530 to float
  %1535 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1200, i32 %1204, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1536 = extractvalue %dx.types.ResRet.i32 %1535, 0
  %1537 = extractvalue %dx.types.ResRet.i32 %1535, 1
  %1538 = extractvalue %dx.types.ResRet.i32 %1535, 2
  %1539 = extractvalue %dx.types.ResRet.i32 %1535, 3
  %1540 = bitcast i32 %1536 to float
  %1541 = bitcast i32 %1537 to float
  %1542 = bitcast i32 %1538 to float
  %1543 = bitcast i32 %1539 to float
  %1544 = fmul fast float %1513, %913
  %1545 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1522, float %1544)  ; FMad(a,b,c)
  %1546 = call float @dx.op.tertiary.f32(i32 46, float %915, float %1531, float %1545)  ; FMad(a,b,c)
  %1547 = fadd fast float %1546, %1540
  %1548 = fmul fast float %1514, %913
  %1549 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1523, float %1548)  ; FMad(a,b,c)
  %1550 = call float @dx.op.tertiary.f32(i32 46, float %915, float %1532, float %1549)  ; FMad(a,b,c)
  %1551 = fadd fast float %1550, %1541
  %1552 = fmul fast float %1515, %913
  %1553 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1524, float %1552)  ; FMad(a,b,c)
  %1554 = call float @dx.op.tertiary.f32(i32 46, float %915, float %1533, float %1553)  ; FMad(a,b,c)
  %1555 = fadd fast float %1554, %1542
  %1556 = fmul fast float %1516, %913
  %1557 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1525, float %1556)  ; FMad(a,b,c)
  %1558 = call float @dx.op.tertiary.f32(i32 46, float %915, float %1534, float %1557)  ; FMad(a,b,c)
  %1559 = fadd fast float %1558, %1543
  %1560 = fdiv fast float %1547, %1559
  %1561 = fdiv fast float %1551, %1559
  %1562 = fdiv fast float %1555, %1559
  %1563 = call float @dx.op.unary.f32(i32 7, float %1560)  ; Saturate(value)
  %1564 = call float @dx.op.unary.f32(i32 7, float %1561)  ; Saturate(value)
  %1565 = fadd fast float %1562, %1005
  %1566 = call float @dx.op.unary.f32(i32 7, float %1563)  ; Saturate(value)
  %1567 = call float @dx.op.unary.f32(i32 7, float %1564)  ; Saturate(value)
  %1568 = fcmp fast oeq float %1563, %1566
  %1569 = fcmp fast oeq float %1564, %1567
  %1570 = and i1 %1568, %1569
  br i1 %1570, label %1571, label %1628

; <label>:1571                                    ; preds = %1507
  %1572 = icmp ult i32 %1198, 8192
  br i1 %1572, label %1583, label %1573

; <label>:1573                                    ; preds = %1571
  %1574 = fmul fast float %1564, 1.280000e+02
  %1575 = fptoui float %1574 to i32
  %1576 = fmul fast float %1563, 1.280000e+02
  %1577 = fptoui float %1576 to i32
  %1578 = mul i32 %1198, 21845
  %1579 = shl i32 %1575, 7
  %1580 = add i32 %1578, -178946048
  %1581 = add i32 %1580, %1577
  %1582 = add i32 %1581, %1579
  br label %1583

; <label>:1583                                    ; preds = %1573, %1571
  %1584 = phi i32 [ %1582, %1573 ], [ %1198, %1571 ]
  %1585 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1586 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1585, i32 %1584, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1587 = extractvalue %dx.types.ResRet.i32 %1586, 0
  %1588 = lshr i32 %1587, 20
  %1589 = and i32 %1588, 63
  %1590 = and i32 %1587, 134217728
  %1591 = icmp eq i32 %1590, 0
  %1592 = select i1 %1572, i32 7, i32 %1589
  %1593 = and i32 %1592, 31
  %1594 = lshr i32 16384, %1593
  %1595 = uitofp i32 %1594 to float
  %1596 = fmul fast float %1595, %1563
  %1597 = fmul fast float %1595, %1564
  %1598 = fptoui float %1596 to i32
  %1599 = fptoui float %1597 to i32
  %1600 = shl i32 %1587, 7
  %1601 = and i32 %1600, 130944
  %1602 = lshr i32 %1587, 3
  %1603 = and i32 %1602, 130944
  %1604 = and i32 %1598, 127
  %1605 = and i32 %1599, 127
  %1606 = or i32 %1604, %1601
  %1607 = or i32 %1605, %1603
  br i1 %1591, label %1613, label %1608

; <label>:1608                                    ; preds = %1583
  %1609 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1610 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1609, i32 0, i32 %1606, i32 %1607, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1611 = extractvalue %dx.types.ResRet.i32 %1610, 0
  %1612 = bitcast i32 %1611 to float
  br label %1613

; <label>:1613                                    ; preds = %1608, %1583
  %1614 = phi float [ %1612, %1608 ], [ 0.000000e+00, %1583 ]
  %1615 = phi i32 [ %1592, %1608 ], [ 0, %1583 ]
  %1616 = phi i1 [ true, %1608 ], [ false, %1583 ]
  %1617 = phi i32 [ %1598, %1608 ], [ 0, %1583 ]
  %1618 = phi i32 [ %1599, %1608 ], [ 0, %1583 ]
  %1619 = phi i32 [ %1606, %1608 ], [ 0, %1583 ]
  %1620 = phi i32 [ %1607, %1608 ], [ 0, %1583 ]
  %1621 = select i1 %1616, i32 %1615, i32 0
  %1622 = select i1 %1616, i32 %1617, i32 -1
  %1623 = select i1 %1616, i32 %1618, i32 -1
  %1624 = select i1 %1616, i32 %1619, i32 -1
  %1625 = select i1 %1616, i32 %1620, i32 -1
  %1626 = select i1 %1616, float %1614, float 0.000000e+00
  %1627 = zext i1 %1616 to i32
  br label %1628

; <label>:1628                                    ; preds = %1613, %1507
  %1629 = phi i32 [ 0, %1507 ], [ %1621, %1613 ]
  %1630 = phi i32 [ -1, %1507 ], [ %1622, %1613 ]
  %1631 = phi i32 [ -1, %1507 ], [ %1623, %1613 ]
  %1632 = phi i32 [ -1, %1507 ], [ %1624, %1613 ]
  %1633 = phi i32 [ -1, %1507 ], [ %1625, %1613 ]
  %1634 = phi float [ 0.000000e+00, %1507 ], [ %1626, %1613 ]
  %1635 = phi i32 [ 0, %1507 ], [ %1627, %1613 ]
  %1636 = icmp ne i32 %1635, 0
  %1637 = fcmp fast ogt float %1634, %1565
  %1638 = and i1 %1637, %1636
  %1639 = select i1 %1636, float %1634, float 0.000000e+00
  %1640 = select i1 %1636, i32 %1629, i32 0
  %1641 = select i1 %1636, i32 %1630, i32 0
  %1642 = select i1 %1636, i32 %1631, i32 0
  %1643 = select i1 %1636, i32 %1632, i32 0
  %1644 = select i1 %1636, i32 %1633, i32 0
  %1645 = select i1 %1638, i32 %1640, i32 %1629
  %1646 = select i1 %1638, i32 %1641, i32 %1630
  %1647 = select i1 %1638, i32 %1642, i32 %1631
  %1648 = select i1 %1638, i32 %1643, i32 %1632
  %1649 = select i1 %1638, i32 %1644, i32 %1633
  %1650 = select i1 %1638, float %1639, float -1.000000e+00
  %1651 = select i1 %1638, i32 %1635, i32 0
  br label %1652

; <label>:1652                                    ; preds = %1628, %1471, %1133
  %1653 = phi i32 [ %1500, %1471 ], [ %279, %1133 ], [ %1198, %1628 ]
  %1654 = phi float [ %1501, %1471 ], [ %1067, %1133 ], [ %1562, %1628 ]
  %1655 = phi i32 [ %1502, %1471 ], [ %1150, %1133 ], [ %1645, %1628 ]
  %1656 = phi i32 [ %1503, %1471 ], [ %1151, %1133 ], [ %1646, %1628 ]
  %1657 = phi i32 [ %1504, %1471 ], [ %1152, %1133 ], [ %1647, %1628 ]
  %1658 = phi i32 [ %1505, %1471 ], [ %1153, %1133 ], [ %1648, %1628 ]
  %1659 = phi i32 [ %1506, %1471 ], [ %1154, %1133 ], [ %1649, %1628 ]
  %1660 = phi float [ %1497, %1471 ], [ %1155, %1133 ], [ %1650, %1628 ]
  %1661 = phi i32 [ %1498, %1471 ], [ %1156, %1133 ], [ %1651, %1628 ]
  %1662 = icmp eq i32 %1661, 0
  br i1 %1662, label %1691, label %1663

; <label>:1663                                    ; preds = %1652
  %1664 = fadd float %1005, %1654
  %1665 = fmul fast float %913, %913
  %1666 = fmul fast float %914, %914
  %1667 = fadd fast float %1665, %1666
  %1668 = fmul fast float %915, %915
  %1669 = fadd fast float %1667, %1668
  %1670 = call float @dx.op.unary.f32(i32 24, float %1669)  ; Sqrt(value)
  %1671 = call float @dx.op.unary.f32(i32 7, float %1664)  ; Saturate(value)
  %1672 = mul i32 %1653, 336
  %1673 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1674 = add i32 %1672, 96
  %1675 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1673, i32 %1674, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1676 = extractvalue %dx.types.ResRet.i32 %1675, 2
  %1677 = bitcast i32 %1676 to float
  %1678 = add i32 %1672, 112
  %1679 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1673, i32 %1678, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1680 = extractvalue %dx.types.ResRet.i32 %1679, 2
  %1681 = bitcast i32 %1680 to float
  %1682 = fsub fast float %1660, %1677
  %1683 = fdiv fast float %1681, %1682
  %1684 = fsub fast float %1671, %1677
  %1685 = fmul fast float %1684, %1670
  %1686 = fdiv fast float %1685, %1681
  %1687 = fmul fast float %1686, %1683
  %1688 = fsub fast float %1670, %1687
  %1689 = call float @dx.op.binary.f32(i32 35, float 0x3EB0C6F7A0000000, float %1688)  ; FMax(a,b)
  %1690 = fadd fast float %1689, %732
  br label %1693

; <label>:1691                                    ; preds = %1652
  %1692 = add i32 %731, 1
  br label %1693

; <label>:1693                                    ; preds = %1691, %1663
  %1694 = phi i32 [ %731, %1663 ], [ %1692, %1691 ]
  %1695 = phi float [ %1690, %1663 ], [ %732, %1691 ]
  %1696 = icmp eq i32 %489, 0
  br i1 %1696, label %1706, label %1697

; <label>:1697                                    ; preds = %1693
  %1698 = icmp eq i32 %730, 0
  br i1 %1698, label %1699, label %1701

; <label>:1699                                    ; preds = %1697
  %1700 = call i1 @dx.op.waveAllTrue(i32 114, i1 %1662)  ; WaveAllTrue(cond)
  br i1 %1700, label %1709, label %1706

; <label>:1701                                    ; preds = %1697
  %1702 = icmp ult i32 %730, %489
  br i1 %1702, label %1706, label %1703

; <label>:1703                                    ; preds = %1701
  %1704 = icmp eq i32 %1694, 0
  %1705 = call i1 @dx.op.waveAllTrue(i32 114, i1 %1704)  ; WaveAllTrue(cond)
  br i1 %1705, label %1709, label %1706

; <label>:1706                                    ; preds = %1703, %1701, %1699, %1693
  %1707 = add nuw i32 %730, 1
  %1708 = icmp ult i32 %1707, %485
  br i1 %1708, label %729, label %1709

; <label>:1709                                    ; preds = %1706, %1703, %1699
  %1710 = phi i32 [ %1707, %1706 ], [ 0, %1699 ], [ %730, %1703 ]
  %1711 = add i32 %1710, 1
  %1712 = call i32 @dx.op.binary.i32(i32 40, i32 %1711, i32 %485)  ; UMin(a,b)
  %1713 = sub i32 %1712, %1694
  %1714 = call i32 @dx.op.binary.i32(i32 39, i32 1, i32 %1713)  ; UMax(a,b)
  %1715 = uitofp i32 %1714 to float
  %1716 = fdiv fast float %1695, %1715
  %1717 = uitofp i32 %1694 to float
  %1718 = uitofp i32 %1712 to float
  %1719 = fdiv fast float %1717, %1718
  br label %2395

; <label>:1720                                    ; preds = %482
  %1721 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %1722 = extractvalue %dx.types.CBufRet.f32 %1721, 0
  %1723 = extractvalue %dx.types.CBufRet.f32 %1721, 1
  %1724 = extractvalue %dx.types.CBufRet.f32 %1721, 2
  %1725 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %1726 = extractvalue %dx.types.CBufRet.f32 %1725, 0
  %1727 = extractvalue %dx.types.CBufRet.f32 %1725, 1
  %1728 = extractvalue %dx.types.CBufRet.f32 %1725, 2
  %1729 = fsub fast float %338, %1726
  %1730 = fsub fast float %339, %1727
  %1731 = fsub fast float %340, %1728
  %1732 = call float @dx.op.binary.f32(i32 35, float %483, float 0.000000e+00)  ; FMax(a,b)
  %1733 = mul i32 %279, 336
  %1734 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1735 = add i32 %1733, 128
  %1736 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %1735, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1737 = add i32 %1733, 144
  %1738 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %1737, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1739 = add i32 %1733, 160
  %1740 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %1739, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1741 = add i32 %1733, 176
  %1742 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %1741, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1743 = add i32 %1733, 256
  %1744 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %1743, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1745 = extractvalue %dx.types.ResRet.i32 %1744, 0
  %1746 = extractvalue %dx.types.ResRet.i32 %1744, 1
  %1747 = extractvalue %dx.types.ResRet.i32 %1744, 2
  %1748 = bitcast i32 %1745 to float
  %1749 = bitcast i32 %1746 to float
  %1750 = bitcast i32 %1747 to float
  %1751 = add i32 %1733, 268
  %1752 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %1751, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1753 = extractvalue %dx.types.ResRet.i32 %1752, 0
  %1754 = add i32 %1733, 272
  %1755 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %1754, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1756 = add i32 %1733, 288
  %1757 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %1756, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1758 = icmp eq i32 %1753, 0
  %1759 = fadd fast float %1748, %1722
  %1760 = fadd fast float %1749, %1723
  %1761 = fadd fast float %1750, %1724
  %1762 = fmul fast float %1759, 2.097152e+06
  %1763 = fmul fast float %1760, 2.097152e+06
  %1764 = fmul fast float %1761, 2.097152e+06
  %1765 = fadd fast float %1762, %1729
  %1766 = fadd fast float %1763, %1730
  %1767 = fadd fast float %1764, %1731
  br i1 %1758, label %1768, label %2101

; <label>:1768                                    ; preds = %1720
  %1769 = extractvalue %dx.types.ResRet.i32 %1757, 2
  %1770 = bitcast i32 %1769 to float
  %1771 = extractvalue %dx.types.ResRet.i32 %1757, 1
  %1772 = bitcast i32 %1771 to float
  %1773 = extractvalue %dx.types.ResRet.i32 %1757, 0
  %1774 = bitcast i32 %1773 to float
  %1775 = add i32 %1733, 320
  %1776 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %1775, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1777 = extractvalue %dx.types.ResRet.i32 %1776, 0
  %1778 = add i32 %1733, 316
  %1779 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %1778, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1780 = extractvalue %dx.types.ResRet.i32 %1779, 0
  %1781 = add i32 %1733, 300
  %1782 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %1781, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1783 = extractvalue %dx.types.ResRet.i32 %1782, 0
  %1784 = bitcast i32 %1783 to float
  %1785 = fadd fast float %1765, %1774
  %1786 = fadd fast float %1766, %1772
  %1787 = fadd fast float %1767, %1770
  %1788 = fmul fast float %1785, %1785
  %1789 = fmul fast float %1786, %1786
  %1790 = fadd fast float %1788, %1789
  %1791 = fmul fast float %1787, %1787
  %1792 = fadd fast float %1790, %1791
  %1793 = call float @dx.op.unary.f32(i32 24, float %1792)  ; Sqrt(value)
  %1794 = call float @dx.op.unary.f32(i32 23, float %1793)  ; Log(value)
  %1795 = fadd fast float %1794, %1784
  %1796 = call float @dx.op.unary.f32(i32 27, float %1795)  ; Round_ni(value)
  %1797 = fptosi float %1796 to i32
  %1798 = sub nsw i32 %1797, %1780
  %1799 = call i32 @dx.op.binary.i32(i32 37, i32 0, i32 %1798)  ; IMax(a,b)
  %1800 = icmp slt i32 %1799, %1777
  br i1 %1800, label %1801, label %2395

; <label>:1801                                    ; preds = %1768
  %1802 = add nsw i32 %1799, %279
  %1803 = mul i32 %1802, 336
  %1804 = add i32 %1803, 96
  %1805 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %1804, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1806 = extractvalue %dx.types.ResRet.i32 %1805, 2
  %1807 = bitcast i32 %1806 to float
  %1808 = add i32 %1803, 112
  %1809 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %1808, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1810 = extractvalue %dx.types.ResRet.i32 %1809, 2
  %1811 = bitcast i32 %1810 to float
  %1812 = add i32 %1803, 128
  %1813 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %1812, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1814 = extractvalue %dx.types.ResRet.i32 %1813, 0
  %1815 = extractvalue %dx.types.ResRet.i32 %1813, 1
  %1816 = extractvalue %dx.types.ResRet.i32 %1813, 2
  %1817 = bitcast i32 %1814 to float
  %1818 = bitcast i32 %1815 to float
  %1819 = bitcast i32 %1816 to float
  %1820 = add i32 %1803, 144
  %1821 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %1820, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1822 = extractvalue %dx.types.ResRet.i32 %1821, 0
  %1823 = extractvalue %dx.types.ResRet.i32 %1821, 1
  %1824 = extractvalue %dx.types.ResRet.i32 %1821, 2
  %1825 = bitcast i32 %1822 to float
  %1826 = bitcast i32 %1823 to float
  %1827 = bitcast i32 %1824 to float
  %1828 = add i32 %1803, 160
  %1829 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %1828, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1830 = extractvalue %dx.types.ResRet.i32 %1829, 0
  %1831 = extractvalue %dx.types.ResRet.i32 %1829, 1
  %1832 = extractvalue %dx.types.ResRet.i32 %1829, 2
  %1833 = bitcast i32 %1830 to float
  %1834 = bitcast i32 %1831 to float
  %1835 = bitcast i32 %1832 to float
  %1836 = add i32 %1803, 176
  %1837 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %1836, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1838 = extractvalue %dx.types.ResRet.i32 %1837, 0
  %1839 = extractvalue %dx.types.ResRet.i32 %1837, 1
  %1840 = extractvalue %dx.types.ResRet.i32 %1837, 2
  %1841 = bitcast i32 %1838 to float
  %1842 = bitcast i32 %1839 to float
  %1843 = bitcast i32 %1840 to float
  %1844 = add i32 %1803, 256
  %1845 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %1844, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1846 = extractvalue %dx.types.ResRet.i32 %1845, 0
  %1847 = extractvalue %dx.types.ResRet.i32 %1845, 1
  %1848 = extractvalue %dx.types.ResRet.i32 %1845, 2
  %1849 = bitcast i32 %1846 to float
  %1850 = bitcast i32 %1847 to float
  %1851 = bitcast i32 %1848 to float
  %1852 = add i32 %1803, 272
  %1853 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %1852, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1854 = extractvalue %dx.types.ResRet.i32 %1853, 0
  %1855 = extractvalue %dx.types.ResRet.i32 %1853, 1
  %1856 = extractvalue %dx.types.ResRet.i32 %1853, 2
  %1857 = bitcast i32 %1854 to float
  %1858 = bitcast i32 %1855 to float
  %1859 = bitcast i32 %1856 to float
  %1860 = fadd fast float %1849, %1722
  %1861 = fadd fast float %1850, %1723
  %1862 = fadd fast float %1851, %1724
  %1863 = fmul fast float %1860, 2.097152e+06
  %1864 = fmul fast float %1861, 2.097152e+06
  %1865 = fmul fast float %1862, 2.097152e+06
  %1866 = fadd fast float %1863, %1729
  %1867 = fadd fast float %1866, %1857
  %1868 = fadd fast float %1864, %1730
  %1869 = fadd fast float %1868, %1858
  %1870 = fadd fast float %1865, %1731
  %1871 = fadd fast float %1870, %1859
  %1872 = fmul fast float %1867, %1817
  %1873 = call float @dx.op.tertiary.f32(i32 46, float %1869, float %1825, float %1872)  ; FMad(a,b,c)
  %1874 = call float @dx.op.tertiary.f32(i32 46, float %1871, float %1833, float %1873)  ; FMad(a,b,c)
  %1875 = fadd fast float %1874, %1841
  %1876 = fmul fast float %1867, %1818
  %1877 = call float @dx.op.tertiary.f32(i32 46, float %1869, float %1826, float %1876)  ; FMad(a,b,c)
  %1878 = call float @dx.op.tertiary.f32(i32 46, float %1871, float %1834, float %1877)  ; FMad(a,b,c)
  %1879 = fadd fast float %1878, %1842
  %1880 = fmul fast float %1867, %1819
  %1881 = call float @dx.op.tertiary.f32(i32 46, float %1869, float %1827, float %1880)  ; FMad(a,b,c)
  %1882 = call float @dx.op.tertiary.f32(i32 46, float %1871, float %1835, float %1881)  ; FMad(a,b,c)
  %1883 = fadd fast float %1882, %1843
  %1884 = fmul fast float %1875, 1.280000e+02
  %1885 = fmul fast float %1879, 1.280000e+02
  %1886 = fptoui float %1884 to i32
  %1887 = fptoui float %1885 to i32
  %1888 = icmp ult i32 %1802, 8192
  br i1 %1888, label %1895, label %1889

; <label>:1889                                    ; preds = %1801
  %1890 = mul i32 %1802, 21845
  %1891 = shl i32 %1887, 7
  %1892 = add i32 %1890, -178946048
  %1893 = add i32 %1892, %1886
  %1894 = add i32 %1893, %1891
  br label %1895

; <label>:1895                                    ; preds = %1889, %1801
  %1896 = phi i32 [ %1894, %1889 ], [ %1802, %1801 ]
  %1897 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1898 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1897, i32 %1896, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1899 = extractvalue %dx.types.ResRet.i32 %1898, 0
  %1900 = lshr i32 %1899, 20
  %1901 = and i32 %1900, 63
  %1902 = and i32 %1899, 134217728
  %1903 = icmp eq i32 %1902, 0
  br i1 %1903, label %2008, label %1904

; <label>:1904                                    ; preds = %1895
  %1905 = icmp eq i32 %1901, 0
  %1906 = zext i1 %1905 to i32
  %1907 = add i32 %1901, %1802
  %1908 = fmul fast float %1875, 1.638400e+04
  %1909 = fmul fast float %1879, 1.638400e+04
  %1910 = fptoui float %1908 to i32
  %1911 = fptoui float %1909 to i32
  br i1 %1905, label %1983, label %1912

; <label>:1912                                    ; preds = %1904
  %1913 = add i32 %1803, 304
  %1914 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %1913, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1915 = extractvalue %dx.types.ResRet.i32 %1914, 0
  %1916 = extractvalue %dx.types.ResRet.i32 %1914, 1
  %1917 = mul i32 %1907, 336
  %1918 = add i32 %1917, 112
  %1919 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %1918, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1920 = extractvalue %dx.types.ResRet.i32 %1919, 2
  %1921 = bitcast i32 %1920 to float
  %1922 = add i32 %1917, 304
  %1923 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %1922, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1924 = extractvalue %dx.types.ResRet.i32 %1923, 0
  %1925 = extractvalue %dx.types.ResRet.i32 %1923, 1
  %1926 = shl i32 %1915, 5
  %1927 = shl i32 %1916, 5
  %1928 = shl i32 %1924, 5
  %1929 = shl i32 %1925, 5
  %1930 = sub i32 %1886, %1926
  %1931 = sub i32 %1887, %1927
  %1932 = and i32 %1900, 31
  %1933 = shl i32 %1928, %1932
  %1934 = shl i32 %1929, %1932
  %1935 = add i32 %1930, %1933
  %1936 = add i32 %1931, %1934
  %1937 = lshr i32 %1935, %1932
  %1938 = lshr i32 %1936, %1932
  %1939 = shl i32 %1937, 7
  %1940 = shl i32 %1938, 7
  %1941 = or i32 %1939, 127
  %1942 = or i32 %1940, 127
  %1943 = sitofp i32 %1915 to float
  %1944 = sitofp i32 %1916 to float
  %1945 = sitofp i32 %1924 to float
  %1946 = sitofp i32 %1925 to float
  %1947 = shl i32 1, %1932
  %1948 = uitofp i32 %1947 to float
  %1949 = fdiv fast float 1.000000e+00, %1948
  %1950 = fmul fast float %1949, %1943
  %1951 = fmul fast float %1949, %1944
  %1952 = fsub fast float %1945, %1950
  %1953 = fsub fast float %1946, %1951
  %1954 = fmul fast float %1952, 2.500000e-01
  %1955 = fmul fast float %1953, 2.500000e-01
  %1956 = fmul fast float %1949, %1811
  %1957 = fsub fast float %1921, %1956
  %1958 = fmul fast float %1949, %1875
  %1959 = fmul fast float %1949, %1879
  %1960 = fadd fast float %1954, %1958
  %1961 = fadd fast float %1955, %1959
  %1962 = fmul fast float %1960, 1.638400e+04
  %1963 = fmul fast float %1961, 1.638400e+04
  %1964 = fptoui float %1962 to i32
  %1965 = fptoui float %1963 to i32
  %1966 = call i32 @dx.op.binary.i32(i32 39, i32 %1964, i32 %1939)  ; UMax(a,b)
  %1967 = call i32 @dx.op.binary.i32(i32 39, i32 %1965, i32 %1940)  ; UMax(a,b)
  %1968 = call i32 @dx.op.binary.i32(i32 40, i32 %1966, i32 %1941)  ; UMin(a,b)
  %1969 = call i32 @dx.op.binary.i32(i32 40, i32 %1967, i32 %1942)  ; UMin(a,b)
  %1970 = icmp ult i32 %1907, 8192
  br i1 %1970, label %1976, label %1971

; <label>:1971                                    ; preds = %1912
  %1972 = mul i32 %1907, 21845
  %1973 = add i32 %1972, -178946048
  %1974 = add i32 %1973, %1937
  %1975 = add i32 %1974, %1940
  br label %1976

; <label>:1976                                    ; preds = %1971, %1912
  %1977 = phi i32 [ %1975, %1971 ], [ %1907, %1912 ]
  %1978 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1897, i32 %1977, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1979 = extractvalue %dx.types.ResRet.i32 %1978, 0
  %1980 = and i32 %1979, 200278016
  %1981 = icmp eq i32 %1980, 134217728
  %1982 = zext i1 %1981 to i32
  br label %1983

; <label>:1983                                    ; preds = %1976, %1904
  %1984 = phi i32 [ %1968, %1976 ], [ %1910, %1904 ]
  %1985 = phi i32 [ %1969, %1976 ], [ %1911, %1904 ]
  %1986 = phi float [ %1962, %1976 ], [ %1908, %1904 ]
  %1987 = phi float [ %1963, %1976 ], [ %1909, %1904 ]
  %1988 = phi i32 [ %1982, %1976 ], [ %1906, %1904 ]
  %1989 = phi i32 [ %1979, %1976 ], [ %1899, %1904 ]
  %1990 = phi float [ %1949, %1976 ], [ 1.000000e+00, %1904 ]
  %1991 = phi float [ %1957, %1976 ], [ 0.000000e+00, %1904 ]
  %1992 = icmp eq i32 %1988, 0
  br i1 %1992, label %2008, label %1993

; <label>:1993                                    ; preds = %1983
  %1994 = shl i32 %1989, 7
  %1995 = and i32 %1994, 130944
  %1996 = lshr i32 %1989, 3
  %1997 = and i32 %1996, 130944
  %1998 = and i32 %1984, 127
  %1999 = and i32 %1985, 127
  %2000 = or i32 %1995, %1998
  %2001 = or i32 %1997, %1999
  %2002 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %2003 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2002, i32 0, i32 %2000, i32 %2001, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2004 = extractvalue %dx.types.ResRet.i32 %2003, 0
  %2005 = bitcast i32 %2004 to float
  %2006 = fsub fast float %2005, %1991
  %2007 = fdiv fast float %2006, %1990
  br label %2008

; <label>:2008                                    ; preds = %1993, %1983, %1895
  %2009 = phi float [ %2007, %1993 ], [ 0.000000e+00, %1983 ], [ 0.000000e+00, %1895 ]
  %2010 = phi i32 [ %1907, %1993 ], [ -1, %1983 ], [ -1, %1895 ]
  %2011 = phi i1 [ true, %1993 ], [ false, %1983 ], [ false, %1895 ]
  %2012 = phi i32 [ %1984, %1993 ], [ %1984, %1983 ], [ 0, %1895 ]
  %2013 = phi i32 [ %1985, %1993 ], [ %1985, %1983 ], [ 0, %1895 ]
  %2014 = phi float [ %1986, %1993 ], [ %1986, %1983 ], [ 0.000000e+00, %1895 ]
  %2015 = phi float [ %1987, %1993 ], [ %1987, %1983 ], [ 0.000000e+00, %1895 ]
  %2016 = phi i32 [ %2000, %1993 ], [ 0, %1983 ], [ 0, %1895 ]
  %2017 = phi i32 [ %2001, %1993 ], [ 0, %1983 ], [ 0, %1895 ]
  br i1 %2011, label %2018, label %2395

; <label>:2018                                    ; preds = %2008
  %2019 = mul i32 %2010, 336
  %2020 = add i32 %2019, 96
  %2021 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %2020, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2022 = extractvalue %dx.types.ResRet.i32 %2021, 2
  %2023 = bitcast i32 %2022 to float
  %2024 = add i32 %2019, 192
  %2025 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %2024, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2026 = extractvalue %dx.types.ResRet.i32 %2025, 0
  %2027 = extractvalue %dx.types.ResRet.i32 %2025, 1
  %2028 = extractvalue %dx.types.ResRet.i32 %2025, 2
  %2029 = bitcast i32 %2026 to float
  %2030 = bitcast i32 %2027 to float
  %2031 = bitcast i32 %2028 to float
  %2032 = add i32 %2019, 208
  %2033 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %2032, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2034 = extractvalue %dx.types.ResRet.i32 %2033, 0
  %2035 = extractvalue %dx.types.ResRet.i32 %2033, 1
  %2036 = extractvalue %dx.types.ResRet.i32 %2033, 2
  %2037 = bitcast i32 %2034 to float
  %2038 = bitcast i32 %2035 to float
  %2039 = bitcast i32 %2036 to float
  %2040 = add i32 %2019, 224
  %2041 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %2040, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2042 = extractvalue %dx.types.ResRet.i32 %2041, 0
  %2043 = extractvalue %dx.types.ResRet.i32 %2041, 1
  %2044 = extractvalue %dx.types.ResRet.i32 %2041, 2
  %2045 = bitcast i32 %2042 to float
  %2046 = bitcast i32 %2043 to float
  %2047 = bitcast i32 %2044 to float
  %2048 = add i32 %2019, 240
  %2049 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %2048, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2050 = extractvalue %dx.types.ResRet.i32 %2049, 0
  %2051 = extractvalue %dx.types.ResRet.i32 %2049, 1
  %2052 = extractvalue %dx.types.ResRet.i32 %2049, 2
  %2053 = bitcast i32 %2050 to float
  %2054 = bitcast i32 %2051 to float
  %2055 = bitcast i32 %2052 to float
  %2056 = call float @dx.op.dot3.f32(i32 55, float %332, float %333, float %334, float %1867, float %1869, float %1871)  ; Dot3(ax,ay,az,bx,by,bz)
  %2057 = fsub fast float -0.000000e+00, %2056
  %2058 = fmul fast float %2029, %332
  %2059 = call float @dx.op.tertiary.f32(i32 46, float %333, float %2037, float %2058)  ; FMad(a,b,c)
  %2060 = call float @dx.op.tertiary.f32(i32 46, float %334, float %2045, float %2059)  ; FMad(a,b,c)
  %2061 = call float @dx.op.tertiary.f32(i32 46, float %2057, float %2053, float %2060)  ; FMad(a,b,c)
  %2062 = fmul fast float %2030, %332
  %2063 = call float @dx.op.tertiary.f32(i32 46, float %333, float %2038, float %2062)  ; FMad(a,b,c)
  %2064 = call float @dx.op.tertiary.f32(i32 46, float %334, float %2046, float %2063)  ; FMad(a,b,c)
  %2065 = call float @dx.op.tertiary.f32(i32 46, float %2057, float %2054, float %2064)  ; FMad(a,b,c)
  %2066 = fmul fast float %2031, %332
  %2067 = call float @dx.op.tertiary.f32(i32 46, float %333, float %2039, float %2066)  ; FMad(a,b,c)
  %2068 = call float @dx.op.tertiary.f32(i32 46, float %334, float %2047, float %2067)  ; FMad(a,b,c)
  %2069 = call float @dx.op.tertiary.f32(i32 46, float %2057, float %2055, float %2068)  ; FMad(a,b,c)
  %2070 = fsub fast float -0.000000e+00, %2061
  %2071 = fsub fast float -0.000000e+00, %2065
  %2072 = fdiv fast float %2070, %2069
  %2073 = fdiv fast float %2071, %2069
  %2074 = uitofp i32 %2012 to float
  %2075 = uitofp i32 %2013 to float
  %2076 = fadd fast float %2074, 5.000000e-01
  %2077 = fadd fast float %2075, 5.000000e-01
  %2078 = fsub fast float %2076, %2014
  %2079 = fsub fast float %2077, %2015
  %2080 = fmul fast float %2078, 0x3F10000000000000
  %2081 = fmul fast float %2079, 0x3F10000000000000
  %2082 = call float @dx.op.dot2.f32(i32 54, float %2072, float %2073, float %2080, float %2081)  ; Dot2(ax,ay,bx,by)
  %2083 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2082)  ; FMax(a,b)
  %2084 = fmul fast float %2083, 2.000000e+00
  %2085 = fmul fast float %2023, 1.000000e+02
  %2086 = call float @dx.op.unary.f32(i32 6, float %2085)  ; FAbs(value)
  %2087 = call float @dx.op.binary.f32(i32 36, float %2084, float %2086)  ; FMin(a,b)
  %2088 = sub nsw i32 %2010, %1802
  %2089 = and i32 %2088, 31
  %2090 = shl i32 1, %2089
  %2091 = uitofp i32 %2090 to float
  %2092 = fmul fast float %2087, %2091
  %2093 = fmul fast float %1807, %1732
  %2094 = fadd fast float %2009, %2093
  %2095 = fsub fast float %2094, %2092
  %2096 = fcmp fast ogt float %2095, %1883
  br i1 %2096, label %2097, label %2395

; <label>:2097                                    ; preds = %2018
  %2098 = fsub fast float %1883, %2009
  %2099 = fdiv fast float %2098, %1807
  %2100 = call float @dx.op.binary.f32(i32 35, float 0x3EB0C6F7A0000000, float %2099)  ; FMax(a,b)
  br label %2395

; <label>:2101                                    ; preds = %1720
  %2102 = extractvalue %dx.types.ResRet.i32 %1742, 3
  %2103 = extractvalue %dx.types.ResRet.i32 %1742, 2
  %2104 = extractvalue %dx.types.ResRet.i32 %1742, 1
  %2105 = extractvalue %dx.types.ResRet.i32 %1742, 0
  %2106 = extractvalue %dx.types.ResRet.i32 %1740, 3
  %2107 = extractvalue %dx.types.ResRet.i32 %1740, 2
  %2108 = extractvalue %dx.types.ResRet.i32 %1740, 1
  %2109 = extractvalue %dx.types.ResRet.i32 %1740, 0
  %2110 = extractvalue %dx.types.ResRet.i32 %1738, 3
  %2111 = extractvalue %dx.types.ResRet.i32 %1738, 2
  %2112 = extractvalue %dx.types.ResRet.i32 %1738, 1
  %2113 = extractvalue %dx.types.ResRet.i32 %1738, 0
  %2114 = extractvalue %dx.types.ResRet.i32 %1736, 3
  %2115 = extractvalue %dx.types.ResRet.i32 %1736, 2
  %2116 = extractvalue %dx.types.ResRet.i32 %1736, 1
  %2117 = extractvalue %dx.types.ResRet.i32 %1736, 0
  %2118 = add i32 %1733, 112
  %2119 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %2118, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2120 = extractvalue %dx.types.ResRet.i32 %2119, 2
  %2121 = add i32 %1733, 96
  %2122 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %2121, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2123 = extractvalue %dx.types.ResRet.i32 %2122, 2
  %2124 = extractvalue %dx.types.ResRet.i32 %1755, 2
  %2125 = bitcast i32 %2124 to float
  %2126 = extractvalue %dx.types.ResRet.i32 %1755, 1
  %2127 = bitcast i32 %2126 to float
  %2128 = extractvalue %dx.types.ResRet.i32 %1755, 0
  %2129 = bitcast i32 %2128 to float
  %2130 = fadd fast float %1765, %2129
  %2131 = fadd fast float %1766, %2127
  %2132 = fadd fast float %1767, %2125
  %2133 = icmp eq i32 %1753, 2
  br i1 %2133, label %2186, label %2134

; <label>:2134                                    ; preds = %2101
  %2135 = call float @dx.op.unary.f32(i32 6, float %2130)  ; FAbs(value)
  %2136 = call float @dx.op.unary.f32(i32 6, float %2131)  ; FAbs(value)
  %2137 = fcmp fast ult float %2135, %2136
  %2138 = call float @dx.op.unary.f32(i32 6, float %2132)  ; FAbs(value)
  %2139 = fcmp fast ult float %2135, %2138
  %2140 = or i1 %2137, %2139
  br i1 %2140, label %2144, label %2141

; <label>:2141                                    ; preds = %2134
  %2142 = fcmp ule float %2130, 0.000000e+00
  %2143 = zext i1 %2142 to i32
  br label %2152

; <label>:2144                                    ; preds = %2134
  %2145 = fcmp fast ogt float %2136, %2138
  br i1 %2145, label %2146, label %2149

; <label>:2146                                    ; preds = %2144
  %2147 = fcmp fast ogt float %2131, 0.000000e+00
  %2148 = select i1 %2147, i32 2, i32 3
  br label %2152

; <label>:2149                                    ; preds = %2144
  %2150 = fcmp fast ogt float %2132, 0.000000e+00
  %2151 = select i1 %2150, i32 4, i32 5
  br label %2152

; <label>:2152                                    ; preds = %2149, %2146, %2141
  %2153 = phi i32 [ %2143, %2141 ], [ %2148, %2146 ], [ %2151, %2149 ]
  %2154 = add i32 %2153, %279
  %2155 = mul i32 %2154, 336
  %2156 = add i32 %2155, 96
  %2157 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %2156, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2158 = extractvalue %dx.types.ResRet.i32 %2157, 2
  %2159 = add i32 %2155, 112
  %2160 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %2159, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2161 = extractvalue %dx.types.ResRet.i32 %2160, 2
  %2162 = add i32 %2155, 128
  %2163 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %2162, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2164 = extractvalue %dx.types.ResRet.i32 %2163, 0
  %2165 = extractvalue %dx.types.ResRet.i32 %2163, 1
  %2166 = extractvalue %dx.types.ResRet.i32 %2163, 2
  %2167 = extractvalue %dx.types.ResRet.i32 %2163, 3
  %2168 = add i32 %2155, 144
  %2169 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %2168, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2170 = extractvalue %dx.types.ResRet.i32 %2169, 0
  %2171 = extractvalue %dx.types.ResRet.i32 %2169, 1
  %2172 = extractvalue %dx.types.ResRet.i32 %2169, 2
  %2173 = extractvalue %dx.types.ResRet.i32 %2169, 3
  %2174 = add i32 %2155, 160
  %2175 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %2174, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2176 = extractvalue %dx.types.ResRet.i32 %2175, 0
  %2177 = extractvalue %dx.types.ResRet.i32 %2175, 1
  %2178 = extractvalue %dx.types.ResRet.i32 %2175, 2
  %2179 = extractvalue %dx.types.ResRet.i32 %2175, 3
  %2180 = add i32 %2155, 176
  %2181 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %2180, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2182 = extractvalue %dx.types.ResRet.i32 %2181, 0
  %2183 = extractvalue %dx.types.ResRet.i32 %2181, 1
  %2184 = extractvalue %dx.types.ResRet.i32 %2181, 2
  %2185 = extractvalue %dx.types.ResRet.i32 %2181, 3
  br label %2186

; <label>:2186                                    ; preds = %2152, %2101
  %2187 = phi i32 [ %2158, %2152 ], [ %2123, %2101 ]
  %2188 = phi i32 [ %2161, %2152 ], [ %2120, %2101 ]
  %2189 = phi i32 [ %2164, %2152 ], [ %2117, %2101 ]
  %2190 = phi i32 [ %2165, %2152 ], [ %2116, %2101 ]
  %2191 = phi i32 [ %2166, %2152 ], [ %2115, %2101 ]
  %2192 = phi i32 [ %2167, %2152 ], [ %2114, %2101 ]
  %2193 = phi i32 [ %2170, %2152 ], [ %2113, %2101 ]
  %2194 = phi i32 [ %2171, %2152 ], [ %2112, %2101 ]
  %2195 = phi i32 [ %2172, %2152 ], [ %2111, %2101 ]
  %2196 = phi i32 [ %2173, %2152 ], [ %2110, %2101 ]
  %2197 = phi i32 [ %2176, %2152 ], [ %2109, %2101 ]
  %2198 = phi i32 [ %2177, %2152 ], [ %2108, %2101 ]
  %2199 = phi i32 [ %2178, %2152 ], [ %2107, %2101 ]
  %2200 = phi i32 [ %2179, %2152 ], [ %2106, %2101 ]
  %2201 = phi i32 [ %2182, %2152 ], [ %2105, %2101 ]
  %2202 = phi i32 [ %2183, %2152 ], [ %2104, %2101 ]
  %2203 = phi i32 [ %2184, %2152 ], [ %2103, %2101 ]
  %2204 = phi i32 [ %2185, %2152 ], [ %2102, %2101 ]
  %2205 = phi i32 [ %2154, %2152 ], [ %279, %2101 ]
  %2206 = bitcast i32 %2204 to float
  %2207 = bitcast i32 %2203 to float
  %2208 = bitcast i32 %2202 to float
  %2209 = bitcast i32 %2201 to float
  %2210 = bitcast i32 %2200 to float
  %2211 = bitcast i32 %2199 to float
  %2212 = bitcast i32 %2198 to float
  %2213 = bitcast i32 %2197 to float
  %2214 = bitcast i32 %2196 to float
  %2215 = bitcast i32 %2195 to float
  %2216 = bitcast i32 %2194 to float
  %2217 = bitcast i32 %2193 to float
  %2218 = bitcast i32 %2192 to float
  %2219 = bitcast i32 %2191 to float
  %2220 = bitcast i32 %2190 to float
  %2221 = bitcast i32 %2189 to float
  %2222 = bitcast i32 %2188 to float
  %2223 = bitcast i32 %2187 to float
  %2224 = fmul fast float %2221, %2130
  %2225 = call float @dx.op.tertiary.f32(i32 46, float %2131, float %2217, float %2224)  ; FMad(a,b,c)
  %2226 = call float @dx.op.tertiary.f32(i32 46, float %2132, float %2213, float %2225)  ; FMad(a,b,c)
  %2227 = fadd fast float %2226, %2209
  %2228 = fmul fast float %2220, %2130
  %2229 = call float @dx.op.tertiary.f32(i32 46, float %2131, float %2216, float %2228)  ; FMad(a,b,c)
  %2230 = call float @dx.op.tertiary.f32(i32 46, float %2132, float %2212, float %2229)  ; FMad(a,b,c)
  %2231 = fadd fast float %2230, %2208
  %2232 = fmul fast float %2219, %2130
  %2233 = call float @dx.op.tertiary.f32(i32 46, float %2131, float %2215, float %2232)  ; FMad(a,b,c)
  %2234 = call float @dx.op.tertiary.f32(i32 46, float %2132, float %2211, float %2233)  ; FMad(a,b,c)
  %2235 = fadd fast float %2234, %2207
  %2236 = fmul fast float %2218, %2130
  %2237 = call float @dx.op.tertiary.f32(i32 46, float %2131, float %2214, float %2236)  ; FMad(a,b,c)
  %2238 = call float @dx.op.tertiary.f32(i32 46, float %2132, float %2210, float %2237)  ; FMad(a,b,c)
  %2239 = fadd fast float %2238, %2206
  %2240 = fdiv fast float %2227, %2239
  %2241 = fdiv fast float %2231, %2239
  %2242 = fdiv fast float %2235, %2239
  %2243 = icmp ult i32 %2205, 8192
  br i1 %2243, label %2254, label %2244

; <label>:2244                                    ; preds = %2186
  %2245 = fmul fast float %2241, 1.280000e+02
  %2246 = fptoui float %2245 to i32
  %2247 = fmul fast float %2240, 1.280000e+02
  %2248 = fptoui float %2247 to i32
  %2249 = mul i32 %2205, 21845
  %2250 = shl i32 %2246, 7
  %2251 = add i32 %2249, -178946048
  %2252 = add i32 %2251, %2248
  %2253 = add i32 %2252, %2250
  br label %2254

; <label>:2254                                    ; preds = %2244, %2186
  %2255 = phi i32 [ %2253, %2244 ], [ %2205, %2186 ]
  %2256 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %2257 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2256, i32 %2255, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2258 = extractvalue %dx.types.ResRet.i32 %2257, 0
  %2259 = lshr i32 %2258, 20
  %2260 = and i32 %2259, 63
  %2261 = and i32 %2258, 134217728
  %2262 = icmp eq i32 %2261, 0
  %2263 = select i1 %2243, i32 7, i32 %2260
  %2264 = and i32 %2263, 31
  %2265 = lshr i32 16384, %2264
  %2266 = uitofp i32 %2265 to float
  %2267 = fmul fast float %2266, %2240
  %2268 = fmul fast float %2266, %2241
  %2269 = fptoui float %2267 to i32
  %2270 = fptoui float %2268 to i32
  %2271 = shl i32 %2258, 7
  %2272 = and i32 %2271, 130944
  %2273 = lshr i32 %2258, 3
  %2274 = and i32 %2273, 130944
  %2275 = and i32 %2269, 127
  %2276 = and i32 %2270, 127
  %2277 = or i32 %2275, %2272
  %2278 = or i32 %2276, %2274
  br i1 %2262, label %2284, label %2279

; <label>:2279                                    ; preds = %2254
  %2280 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %2281 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2280, i32 0, i32 %2277, i32 %2278, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2282 = extractvalue %dx.types.ResRet.i32 %2281, 0
  %2283 = bitcast i32 %2282 to float
  br label %2284

; <label>:2284                                    ; preds = %2279, %2254
  %2285 = phi float [ %2283, %2279 ], [ 0.000000e+00, %2254 ]
  %2286 = phi i32 [ %2263, %2279 ], [ 0, %2254 ]
  %2287 = phi i32 [ %2205, %2279 ], [ -1, %2254 ]
  %2288 = phi i1 [ true, %2279 ], [ false, %2254 ]
  %2289 = phi i32 [ %2269, %2279 ], [ 0, %2254 ]
  %2290 = phi i32 [ %2270, %2279 ], [ 0, %2254 ]
  %2291 = phi float [ %2267, %2279 ], [ 0.000000e+00, %2254 ]
  %2292 = phi float [ %2268, %2279 ], [ 0.000000e+00, %2254 ]
  %2293 = phi i32 [ %2277, %2279 ], [ 0, %2254 ]
  %2294 = phi i32 [ %2278, %2279 ], [ 0, %2254 ]
  br i1 %2288, label %2295, label %2395

; <label>:2295                                    ; preds = %2284
  %2296 = mul i32 %2287, 336
  %2297 = add i32 %2296, 96
  %2298 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %2297, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2299 = extractvalue %dx.types.ResRet.i32 %2298, 2
  %2300 = bitcast i32 %2299 to float
  %2301 = add i32 %2296, 192
  %2302 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %2301, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2303 = extractvalue %dx.types.ResRet.i32 %2302, 0
  %2304 = extractvalue %dx.types.ResRet.i32 %2302, 1
  %2305 = extractvalue %dx.types.ResRet.i32 %2302, 2
  %2306 = bitcast i32 %2303 to float
  %2307 = bitcast i32 %2304 to float
  %2308 = bitcast i32 %2305 to float
  %2309 = add i32 %2296, 208
  %2310 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %2309, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2311 = extractvalue %dx.types.ResRet.i32 %2310, 0
  %2312 = extractvalue %dx.types.ResRet.i32 %2310, 1
  %2313 = extractvalue %dx.types.ResRet.i32 %2310, 2
  %2314 = bitcast i32 %2311 to float
  %2315 = bitcast i32 %2312 to float
  %2316 = bitcast i32 %2313 to float
  %2317 = add i32 %2296, 224
  %2318 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %2317, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2319 = extractvalue %dx.types.ResRet.i32 %2318, 0
  %2320 = extractvalue %dx.types.ResRet.i32 %2318, 1
  %2321 = extractvalue %dx.types.ResRet.i32 %2318, 2
  %2322 = bitcast i32 %2319 to float
  %2323 = bitcast i32 %2320 to float
  %2324 = bitcast i32 %2321 to float
  %2325 = add i32 %2296, 240
  %2326 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1734, i32 %2325, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2327 = extractvalue %dx.types.ResRet.i32 %2326, 0
  %2328 = extractvalue %dx.types.ResRet.i32 %2326, 1
  %2329 = extractvalue %dx.types.ResRet.i32 %2326, 2
  %2330 = bitcast i32 %2327 to float
  %2331 = bitcast i32 %2328 to float
  %2332 = bitcast i32 %2329 to float
  %2333 = call float @dx.op.dot3.f32(i32 55, float %332, float %333, float %334, float %2130, float %2131, float %2132)  ; Dot3(ax,ay,az,bx,by,bz)
  %2334 = fsub fast float -0.000000e+00, %2333
  %2335 = fmul fast float %2306, %332
  %2336 = call float @dx.op.tertiary.f32(i32 46, float %333, float %2314, float %2335)  ; FMad(a,b,c)
  %2337 = call float @dx.op.tertiary.f32(i32 46, float %334, float %2322, float %2336)  ; FMad(a,b,c)
  %2338 = call float @dx.op.tertiary.f32(i32 46, float %2334, float %2330, float %2337)  ; FMad(a,b,c)
  %2339 = fmul fast float %2307, %332
  %2340 = call float @dx.op.tertiary.f32(i32 46, float %333, float %2315, float %2339)  ; FMad(a,b,c)
  %2341 = call float @dx.op.tertiary.f32(i32 46, float %334, float %2323, float %2340)  ; FMad(a,b,c)
  %2342 = call float @dx.op.tertiary.f32(i32 46, float %2334, float %2331, float %2341)  ; FMad(a,b,c)
  %2343 = fmul fast float %2308, %332
  %2344 = call float @dx.op.tertiary.f32(i32 46, float %333, float %2316, float %2343)  ; FMad(a,b,c)
  %2345 = call float @dx.op.tertiary.f32(i32 46, float %334, float %2324, float %2344)  ; FMad(a,b,c)
  %2346 = call float @dx.op.tertiary.f32(i32 46, float %2334, float %2332, float %2345)  ; FMad(a,b,c)
  %2347 = fsub fast float -0.000000e+00, %2338
  %2348 = fsub fast float -0.000000e+00, %2342
  %2349 = fdiv fast float %2347, %2346
  %2350 = fdiv fast float %2348, %2346
  %2351 = and i32 %2286, 31
  %2352 = lshr i32 16384, %2351
  %2353 = uitofp i32 %2352 to float
  %2354 = uitofp i32 %2289 to float
  %2355 = uitofp i32 %2290 to float
  %2356 = fadd fast float %2354, 5.000000e-01
  %2357 = fadd fast float %2355, 5.000000e-01
  %2358 = fsub fast float %2356, %2291
  %2359 = fsub fast float %2357, %2292
  %2360 = fdiv fast float %2358, %2353
  %2361 = fdiv fast float %2359, %2353
  %2362 = call float @dx.op.dot2.f32(i32 54, float %2349, float %2350, float %2360, float %2361)  ; Dot2(ax,ay,bx,by)
  %2363 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2362)  ; FMax(a,b)
  %2364 = fmul fast float %2363, 2.000000e+00
  %2365 = fmul fast float %2300, 1.000000e+02
  %2366 = call float @dx.op.unary.f32(i32 6, float %2365)  ; FAbs(value)
  %2367 = call float @dx.op.binary.f32(i32 36, float %2364, float %2366)  ; FMin(a,b)
  %2368 = sub nsw i32 %2287, %2205
  %2369 = and i32 %2368, 31
  %2370 = shl i32 1, %2369
  %2371 = uitofp i32 %2370 to float
  %2372 = fmul fast float %2367, %2371
  %2373 = fmul fast float %1732, %2223
  %2374 = fsub fast float -0.000000e+00, %2373
  %2375 = fdiv fast float %2374, %2239
  %2376 = fsub fast float %2285, %2372
  %2377 = fsub fast float %2376, %2375
  %2378 = fcmp fast ogt float %2377, %2242
  br i1 %2378, label %2379, label %2395

; <label>:2379                                    ; preds = %2295
  %2380 = fmul fast float %2130, %2130
  %2381 = fmul fast float %2131, %2131
  %2382 = fadd fast float %2380, %2381
  %2383 = fmul fast float %2132, %2132
  %2384 = fadd fast float %2382, %2383
  %2385 = call float @dx.op.unary.f32(i32 24, float %2384)  ; Sqrt(value)
  %2386 = fsub fast float %2285, %2223
  %2387 = fdiv fast float %2222, %2386
  %2388 = fsub fast float %2242, %2223
  %2389 = fmul fast float %2385, %2388
  %2390 = fdiv fast float %2389, %2222
  %2391 = fmul fast float %2390, %2387
  %2392 = fsub fast float %2385, %2391
  %2393 = call float @dx.op.binary.f32(i32 35, float 0x3EB0C6F7A0000000, float %2392)  ; FMax(a,b)
  %2394 = fadd fast float %2393, %1732
  br label %2395

; <label>:2395                                    ; preds = %2379, %2295, %2284, %2097, %2018, %2008, %1768, %1709, %487
  %2396 = phi i32 [ 1, %1709 ], [ 1, %487 ], [ 1, %2097 ], [ 1, %2018 ], [ 1, %2379 ], [ 1, %2295 ], [ 0, %2284 ], [ 0, %2008 ], [ 0, %1768 ]
  %2397 = phi float [ %1719, %1709 ], [ 0.000000e+00, %487 ], [ 0.000000e+00, %2097 ], [ 1.000000e+00, %2018 ], [ 0.000000e+00, %2379 ], [ 1.000000e+00, %2295 ], [ 1.000000e+00, %2284 ], [ 1.000000e+00, %2008 ], [ 1.000000e+00, %1768 ]
  %2398 = phi float [ %1716, %1709 ], [ -1.000000e+00, %487 ], [ %2100, %2097 ], [ -1.000000e+00, %2018 ], [ %2394, %2379 ], [ -1.000000e+00, %2295 ], [ -1.000000e+00, %2284 ], [ -1.000000e+00, %2008 ], [ -1.000000e+00, %1768 ]
  %2399 = phi i32 [ %1655, %1709 ], [ 0, %487 ], [ %1799, %2097 ], [ %1799, %2018 ], [ %2286, %2379 ], [ %2286, %2295 ], [ 0, %2284 ], [ 0, %2008 ], [ 0, %1768 ]
  %2400 = phi i32 [ %1712, %1709 ], [ 0, %487 ], [ 1, %2097 ], [ 1, %2018 ], [ 1, %2379 ], [ 1, %2295 ], [ 0, %2284 ], [ 0, %2008 ], [ 0, %1768 ]
  %2401 = phi i32 [ %1656, %1709 ], [ -1, %487 ], [ %2012, %2097 ], [ %2012, %2018 ], [ %2289, %2379 ], [ %2289, %2295 ], [ -1, %2284 ], [ -1, %2008 ], [ -1, %1768 ]
  %2402 = phi i32 [ %1657, %1709 ], [ -1, %487 ], [ %2013, %2097 ], [ %2013, %2018 ], [ %2290, %2379 ], [ %2290, %2295 ], [ -1, %2284 ], [ -1, %2008 ], [ -1, %1768 ]
  %2403 = phi i32 [ %1658, %1709 ], [ -1, %487 ], [ %2016, %2097 ], [ %2016, %2018 ], [ %2293, %2379 ], [ %2293, %2295 ], [ -1, %2284 ], [ -1, %2008 ], [ -1, %1768 ]
  %2404 = phi i32 [ %1659, %1709 ], [ -1, %487 ], [ %2017, %2097 ], [ %2017, %2018 ], [ %2294, %2379 ], [ %2294, %2295 ], [ -1, %2284 ], [ -1, %2008 ], [ -1, %1768 ]
  %2405 = fcmp fast olt float %221, 1.000000e+00
  %2406 = fcmp fast olt float %2397, 1.000000e+00
  %2407 = and i1 %2405, %2406
  br i1 %2407, label %2408, label %2420

; <label>:2408                                    ; preds = %2395
  %2409 = call float @dx.op.binary.f32(i32 36, float %221, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %2410 = fsub fast float 1.000000e+00, %2409
  %2411 = call float @dx.op.unary.f32(i32 23, float %2410)  ; Log(value)
  %2412 = fmul fast float %2398, 0x3FA99999A0000000
  %2413 = fmul fast float %2412, %2411
  %2414 = call float @dx.op.unary.f32(i32 21, float %2413)  ; Exp(value)
  %2415 = call float @dx.op.unary.f32(i32 7, float %2414)  ; Saturate(value)
  %2416 = fsub fast float 1.000000e+00, %2415
  %2417 = fmul fast float %2416, %2397
  %2418 = fadd fast float %2417, %2415
  %2419 = fmul fast float %2418, %2418
  br label %2420

; <label>:2420                                    ; preds = %2408, %2395
  %2421 = phi float [ %2397, %2395 ], [ %2419, %2408 ]
  br i1 %293, label %2954, label %2422

; <label>:2422                                    ; preds = %2420
  %2423 = fcmp fast ogt float %2421, 0.000000e+00
  br i1 %2423, label %2424, label %2672

; <label>:2424                                    ; preds = %2422
  %2425 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %2426 = extractvalue %dx.types.CBufRet.i32 %2425, 0
  %2427 = mul i32 %81, 1664525
  %2428 = mul i32 %82, 1664525
  %2429 = mul i32 %2426, 1664525
  %2430 = add i32 %2427, 1013904223
  %2431 = add i32 %2428, 1013904223
  %2432 = add i32 %2429, 1013904223
  %2433 = mul i32 %2432, %2431
  %2434 = add i32 %2430, %2433
  %2435 = mul i32 %2434, %2432
  %2436 = add i32 %2435, %2431
  %2437 = mul i32 %2436, %2434
  %2438 = add i32 %2437, %2432
  %2439 = mul i32 %2438, %2436
  %2440 = add i32 %2439, %2434
  %2441 = mul i32 %2440, %2438
  %2442 = add i32 %2441, %2436
  %2443 = lshr i32 %2440, 16
  %2444 = add i32 %2427, 1042201148
  %2445 = add i32 %2428, 1042201148
  %2446 = mul i32 %2432, %2445
  %2447 = add i32 %2444, %2446
  %2448 = mul i32 %2447, %2432
  %2449 = add i32 %2448, %2445
  %2450 = mul i32 %2449, %2447
  %2451 = add i32 %2450, %2432
  %2452 = mul i32 %2451, %2449
  %2453 = add i32 %2452, %2447
  %2454 = lshr i32 %2453, 16
  %2455 = uitofp i32 %2426 to float
  %2456 = fmul fast float %2455, 1.250000e-01
  %2457 = uitofp i32 %2443 to float
  %2458 = fmul fast float %2457, 0x3EF0000000000000
  %2459 = fadd fast float %2458, %2456
  %2460 = call float @dx.op.unary.f32(i32 22, float %2459)  ; Frc(value)
  %2461 = call i32 @dx.op.unary.i32(i32 30, i32 %2426)  ; Bfrev(value)
  %2462 = xor i32 %2442, %2461
  %2463 = lshr i32 %2462, 16
  %2464 = uitofp i32 %2463 to float
  %2465 = fmul fast float %2464, 0x3EF0000000000000
  %2466 = uitofp i32 %2454 to float
  %2467 = fmul fast float %2466, 0x3EF0000000000000
  %2468 = fadd fast float %2467, %2456
  %2469 = call float @dx.op.unary.f32(i32 22, float %2468)  ; Frc(value)
  %2470 = fsub fast float %276, %338
  %2471 = fsub fast float %277, %339
  %2472 = fsub fast float %278, %340
  %2473 = call float @dx.op.dot3.f32(i32 55, float %2470, float %2471, float %2472, float %2470, float %2471, float %2472)  ; Dot3(ax,ay,az,bx,by,bz)
  %2474 = fadd fast float %2473, 1.000000e+00
  %2475 = fdiv fast float 1.000000e+00, %2474
  %2476 = call float @dx.op.unary.f32(i32 25, float %2473)  ; Rsqrt(value)
  %2477 = fmul fast float %2476, %2470
  %2478 = fmul fast float %2476, %2471
  %2479 = fmul fast float %2476, %2472
  %2480 = fmul fast float %2476, %290
  %2481 = fmul fast float %290, %290
  %2482 = fmul fast float %2481, %2475
  %2483 = call float @dx.op.unary.f32(i32 7, float %2482)  ; Saturate(value)
  %2484 = call float @dx.op.unary.f32(i32 24, float %2483)  ; Sqrt(value)
  %2485 = call float @dx.op.dot3.f32(i32 55, float %332, float %333, float %334, float %2477, float %2478, float %2479)  ; Dot3(ax,ay,az,bx,by,bz)
  %2486 = fsub fast float -0.000000e+00, %2484
  %2487 = fcmp fast olt float %2485, %2486
  br i1 %2487, label %2663, label %2488

; <label>:2488                                    ; preds = %2424
  %2489 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %2490 = extractvalue %dx.types.CBufRet.f32 %2489, 0
  %2491 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %31, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %2492 = extractvalue %dx.types.CBufRet.i32 %2491, 1
  %2493 = mul i32 %2453, %2451
  %2494 = add i32 %2493, %2449
  %2495 = xor i32 %2461, %2494
  %2496 = lshr i32 %2495, 16
  %2497 = uitofp i32 %2496 to float
  %2498 = fmul fast float %2497, 0x3EF0000000000000
  %2499 = sitofp i32 %2492 to float
  %2500 = fmul fast float %2498, %2499
  %2501 = add nsw i32 %2492, -1
  %2502 = sitofp i32 %2501 to float
  %2503 = call float @dx.op.binary.f32(i32 36, float %2500, float %2502)  ; FMin(a,b)
  %2504 = fptoui float %2503 to i32
  %2505 = and i32 %81, 65535
  %2506 = shl nuw nsw i32 %2505, 8
  %2507 = or i32 %2506, %2505
  %2508 = and i32 %2507, 16711935
  %2509 = shl nuw nsw i32 %2508, 4
  %2510 = or i32 %2509, %2508
  %2511 = and i32 %2510, 252645135
  %2512 = shl nuw nsw i32 %2511, 2
  %2513 = or i32 %2512, %2511
  %2514 = and i32 %2513, 858993459
  %2515 = shl nuw nsw i32 %2514, 1
  %2516 = or i32 %2515, %2514
  %2517 = and i32 %2516, 1431655765
  %2518 = and i32 %82, 65535
  %2519 = shl nuw nsw i32 %2518, 8
  %2520 = or i32 %2519, %2518
  %2521 = and i32 %2520, 16711935
  %2522 = shl nuw nsw i32 %2521, 4
  %2523 = or i32 %2522, %2521
  %2524 = and i32 %2523, 252645135
  %2525 = shl nuw nsw i32 %2524, 2
  %2526 = or i32 %2525, %2524
  %2527 = and i32 %2526, 858993459
  %2528 = shl nuw nsw i32 %2527, 1
  %2529 = or i32 %2528, %2527
  %2530 = shl nuw i32 %2529, 1
  %2531 = and i32 %2530, -1431655766
  %2532 = or i32 %2531, %2517
  %2533 = extractvalue %dx.types.CBufRet.i32 %2425, 1
  %2534 = shl i32 %2533, 16
  %2535 = add i32 %2534, %2532
  %2536 = mul i32 %2535, %2492
  %2537 = add i32 %2536, %2504
  %2538 = call i32 @dx.op.unary.i32(i32 30, i32 %2537)  ; Bfrev(value)
  %2539 = add i32 %2538, 1216234700
  %2540 = mul i32 %2539, -1676577210
  %2541 = xor i32 %2540, %2539
  %2542 = mul i32 %2541, -529506958
  %2543 = xor i32 %2542, %2541
  %2544 = call i32 @dx.op.unary.i32(i32 30, i32 %2543)  ; Bfrev(value)
  %2545 = and i32 %2544, 255
  %2546 = and i32 %2544, 1
  %2547 = lshr i32 %2544, 1
  %2548 = and i32 %2547, 1
  %2549 = sub nsw i32 0, %2548
  %2550 = and i32 %2549, 3
  %2551 = xor i32 %2550, %2546
  %2552 = lshr i32 %2544, 2
  %2553 = and i32 %2552, 1
  %2554 = sub nsw i32 0, %2553
  %2555 = and i32 %2554, 5
  %2556 = xor i32 %2551, %2555
  %2557 = lshr i32 %2544, 3
  %2558 = and i32 %2557, 1
  %2559 = sub nsw i32 0, %2558
  %2560 = and i32 %2559, 15
  %2561 = xor i32 %2556, %2560
  %2562 = lshr i32 %2544, 4
  %2563 = and i32 %2562, 1
  %2564 = sub nsw i32 0, %2563
  %2565 = and i32 %2564, 17
  %2566 = xor i32 %2561, %2565
  %2567 = lshr i32 %2544, 5
  %2568 = and i32 %2567, 1
  %2569 = sub nsw i32 0, %2568
  %2570 = and i32 %2569, 51
  %2571 = xor i32 %2566, %2570
  %2572 = lshr i32 %2544, 6
  %2573 = and i32 %2572, 1
  %2574 = sub nsw i32 0, %2573
  %2575 = and i32 %2574, 85
  %2576 = xor i32 %2571, %2575
  %2577 = lshr i32 %2544, 7
  %2578 = and i32 %2577, 1
  %2579 = sub nsw i32 0, %2578
  %2580 = and i32 %2579, 255
  %2581 = xor i32 %2576, %2580
  %2582 = add nsw i32 %2545, -1862497895
  %2583 = mul i32 %2582, -1676577210
  %2584 = xor i32 %2583, %2582
  %2585 = mul i32 %2584, -529506958
  %2586 = xor i32 %2585, %2584
  %2587 = call i32 @dx.op.unary.i32(i32 30, i32 %2586)  ; Bfrev(value)
  %2588 = add i32 %2581, -646066581
  %2589 = mul i32 %2588, -1676577210
  %2590 = xor i32 %2589, %2588
  %2591 = mul i32 %2590, -529506958
  %2592 = xor i32 %2591, %2590
  %2593 = call i32 @dx.op.unary.i32(i32 30, i32 %2592)  ; Bfrev(value)
  %2594 = lshr i32 %2587, 8
  %2595 = lshr i32 %2593, 8
  %2596 = uitofp i32 %2594 to float
  %2597 = uitofp i32 %2595 to float
  %2598 = fmul fast float %2596, 0x3E76A09E60000000
  %2599 = fmul fast float %2597, 0x3E76A09E60000000
  %2600 = fadd fast float %2598, 0xBFE6A09E60000000
  %2601 = fadd fast float %2599, 0xBFE6A09E60000000
  %2602 = fmul fast float %2600, %2600
  %2603 = fmul fast float %2601, %2601
  %2604 = call float @dx.op.binary.f32(i32 35, float %2602, float %2603)  ; FMax(a,b)
  %2605 = fmul fast float %2604, 2.000000e+00
  %2606 = call float @dx.op.binary.f32(i32 36, float %2602, float %2603)  ; FMin(a,b)
  %2607 = fsub fast float %2605, %2606
  %2608 = call float @dx.op.unary.f32(i32 24, float %2607)  ; Sqrt(value)
  %2609 = fcmp fast ogt float %2602, %2603
  %2610 = fsub fast float -0.000000e+00, %2608
  %2611 = fcmp fast ogt float %2600, 0.000000e+00
  %2612 = select i1 %2611, float %2608, float %2610
  %2613 = fcmp fast ogt float %2601, 0.000000e+00
  %2614 = select i1 %2613, float %2608, float %2610
  %2615 = select i1 %2609, float %2612, float %2600
  %2616 = select i1 %2609, float %2601, float %2614
  %2617 = fmul fast float %2615, %2480
  %2618 = fmul fast float %2616, %2480
  %2619 = call float @dx.op.dot2.f32(i32 54, float %2617, float %2618, float %2617, float %2618)  ; Dot2(ax,ay,bx,by)
  %2620 = call float @dx.op.unary.f32(i32 24, float %2619)  ; Sqrt(value)
  %2621 = fsub fast float 1.000000e+00, %2619
  %2622 = call float @dx.op.unary.f32(i32 24, float %2621)  ; Sqrt(value)
  %2623 = fcmp fast oge float %2479, 0.000000e+00
  %2624 = select i1 %2623, float 1.000000e+00, float -1.000000e+00
  %2625 = fadd fast float %2624, %2479
  %2626 = fdiv fast float 1.000000e+00, %2625
  %2627 = fsub fast float -0.000000e+00, %2626
  %2628 = fmul fast float %2477, %2478
  %2629 = fmul fast float %2628, %2627
  %2630 = fmul fast float %2477, %2477
  %2631 = fmul fast float %2630, %2624
  %2632 = fmul fast float %2631, %2627
  %2633 = fadd fast float %2632, 1.000000e+00
  %2634 = fmul fast float %2478, %2478
  %2635 = fmul fast float %2634, %2627
  %2636 = fadd fast float %2635, %2624
  %2637 = fsub fast float -0.000000e+00, %2478
  %2638 = fmul fast float %2633, %2617
  %2639 = call float @dx.op.tertiary.f32(i32 46, float %2618, float %2629, float %2638)  ; FMad(a,b,c)
  %2640 = call float @dx.op.tertiary.f32(i32 46, float %2622, float %2477, float %2639)  ; FMad(a,b,c)
  %2641 = fmul fast float %2617, %2624
  %2642 = fmul fast float %2641, %2629
  %2643 = call float @dx.op.tertiary.f32(i32 46, float %2618, float %2636, float %2642)  ; FMad(a,b,c)
  %2644 = call float @dx.op.tertiary.f32(i32 46, float %2622, float %2478, float %2643)  ; FMad(a,b,c)
  %2645 = fmul fast float %2477, %2624
  %2646 = fmul fast float %2645, %2617
  %2647 = fsub fast float -0.000000e+00, %2646
  %2648 = call float @dx.op.tertiary.f32(i32 46, float %2618, float %2637, float %2647)  ; FMad(a,b,c)
  %2649 = call float @dx.op.tertiary.f32(i32 46, float %2622, float %2479, float %2648)  ; FMad(a,b,c)
  %2650 = fmul fast float %2620, %2490
  %2651 = fadd fast float %2622, %2650
  %2652 = fdiv fast float 1.500000e+00, %2651
  %2653 = call float @dx.op.unary.f32(i32 7, float %2652)  ; Saturate(value)
  %2654 = fmul fast float %2473, 7.500000e-01
  %2655 = fmul fast float %2654, %2476
  %2656 = fmul fast float %2655, %2653
  %2657 = fmul fast float %2656, %2640
  %2658 = fmul fast float %2656, %2644
  %2659 = fmul fast float %2656, %2649
  %2660 = fadd fast float %2657, %338
  %2661 = fadd fast float %2658, %339
  %2662 = fadd fast float %2659, %340
  br label %2663

; <label>:2663                                    ; preds = %2488, %2424
  %2664 = phi float [ 0.000000e+00, %2424 ], [ %338, %2488 ]
  %2665 = phi float [ 0.000000e+00, %2424 ], [ %339, %2488 ]
  %2666 = phi float [ 0.000000e+00, %2424 ], [ %340, %2488 ]
  %2667 = phi float [ 0.000000e+00, %2424 ], [ %2660, %2488 ]
  %2668 = phi float [ 0.000000e+00, %2424 ], [ %2661, %2488 ]
  %2669 = phi float [ 0.000000e+00, %2424 ], [ %2662, %2488 ]
  %2670 = zext i1 %2487 to i32
  %2671 = xor i32 %2670, 1
  br label %2672

; <label>:2672                                    ; preds = %2663, %2422
  %2673 = phi float [ %2664, %2663 ], [ 0.000000e+00, %2422 ]
  %2674 = phi float [ %2665, %2663 ], [ 0.000000e+00, %2422 ]
  %2675 = phi float [ %2666, %2663 ], [ 0.000000e+00, %2422 ]
  %2676 = phi float [ %2667, %2663 ], [ 0.000000e+00, %2422 ]
  %2677 = phi float [ %2668, %2663 ], [ 0.000000e+00, %2422 ]
  %2678 = phi float [ %2669, %2663 ], [ 0.000000e+00, %2422 ]
  %2679 = phi i32 [ %2671, %2663 ], [ 0, %2422 ]
  %2680 = phi float [ %2460, %2663 ], [ 0.000000e+00, %2422 ]
  %2681 = phi float [ %2465, %2663 ], [ 0.000000e+00, %2422 ]
  %2682 = phi float [ %2469, %2663 ], [ 0.000000e+00, %2422 ]
  %2683 = icmp eq i32 %2679, 0
  br i1 %2683, label %2954, label %2684

; <label>:2684                                    ; preds = %2672
  %2685 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %2686 = extractvalue %dx.types.CBufRet.f32 %2685, 0
  %2687 = fmul fast float %2686, %319
  %2688 = fmul fast float %2686, %320
  %2689 = fmul fast float %2686, %321
  %2690 = fadd fast float %2680, -5.000000e-01
  %2691 = fadd fast float %2681, -5.000000e-01
  %2692 = fadd fast float %2682, -5.000000e-01
  %2693 = fadd fast float %2690, %2687
  %2694 = fadd fast float %2691, %2688
  %2695 = fadd fast float %2692, %2689
  %2696 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2697 = extractvalue %dx.types.CBufRet.i32 %2696, 0
  %2698 = extractvalue %dx.types.CBufRet.i32 %2696, 1
  %2699 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2700 = extractvalue %dx.types.CBufRet.i32 %2699, 0
  %2701 = extractvalue %dx.types.CBufRet.i32 %2699, 1
  %2702 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %2703 = extractvalue %dx.types.CBufRet.f32 %2702, 0
  %2704 = extractvalue %dx.types.CBufRet.f32 %2685, 3
  %2705 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %2706 = extractvalue %dx.types.CBufRet.i32 %2705, 0
  %2707 = icmp eq i32 %2706, 0
  br i1 %2707, label %2954, label %2708

; <label>:2708                                    ; preds = %2684
  br label %2709

; <label>:2709                                    ; preds = %2946, %2708
  %2710 = phi float [ %2950, %2946 ], [ %2421, %2708 ]
  %2711 = phi i32 [ %2951, %2946 ], [ 0, %2708 ]
  %2712 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 524, i32 32 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=32>
  %2713 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2712, i32 %2711, i32 0, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2714 = extractvalue %dx.types.ResRet.f32 %2713, 0
  %2715 = extractvalue %dx.types.ResRet.f32 %2713, 1
  %2716 = extractvalue %dx.types.ResRet.f32 %2713, 2
  %2717 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2712, i32 %2711, i32 12, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2718 = extractvalue %dx.types.ResRet.i32 %2717, 0
  %2719 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2712, i32 %2711, i32 16, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2720 = extractvalue %dx.types.ResRet.f32 %2719, 0
  %2721 = extractvalue %dx.types.ResRet.f32 %2719, 1
  %2722 = extractvalue %dx.types.ResRet.f32 %2719, 2
  %2723 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2712, i32 %2711, i32 28, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2724 = extractvalue %dx.types.ResRet.i32 %2723, 0
  %2725 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2726 = extractvalue %dx.types.CBufRet.i32 %2725, 0
  %2727 = and i32 %2718, 255
  %2728 = lshr i32 %2718, 8
  %2729 = and i32 %2728, 255
  %2730 = lshr i32 %2718, 16
  %2731 = and i32 %2730, 255
  %2732 = mul i32 %2726, %2727
  %2733 = mul i32 %2726, %2729
  %2734 = mul i32 %2726, %2731
  %2735 = and i32 %2724, 4194303
  %2736 = lshr i32 %2724, 22
  %2737 = uitofp i32 %2736 to float
  %2738 = fmul fast float %2737, 0x3F84050140000000
  %2739 = icmp ne i32 %2727, 0
  %2740 = icmp ne i32 %2729, 0
  %2741 = icmp ne i32 %2731, 0
  %2742 = and i1 %2739, %2740
  %2743 = and i1 %2741, %2742
  %2744 = fmul fast float %2738, %2693
  %2745 = fmul fast float %2738, %2694
  %2746 = fmul fast float %2738, %2695
  %2747 = fadd fast float %2744, %2673
  %2748 = fadd fast float %2745, %2674
  %2749 = fadd fast float %2746, %2675
  %2750 = fdiv fast float 0x4059933340000000, %2737
  br i1 %2743, label %2751, label %2946

; <label>:2751                                    ; preds = %2709
  %2752 = fsub fast float %2676, %2747
  %2753 = fsub fast float %2677, %2748
  %2754 = fsub fast float %2678, %2749
  %2755 = fdiv fast float 1.000000e+00, %2752
  %2756 = fdiv fast float 1.000000e+00, %2753
  %2757 = fdiv fast float 1.000000e+00, %2754
  %2758 = fsub fast float %2714, %2747
  %2759 = fsub fast float %2715, %2748
  %2760 = fsub fast float %2716, %2749
  %2761 = fmul fast float %2755, %2758
  %2762 = fmul fast float %2756, %2759
  %2763 = fmul fast float %2757, %2760
  %2764 = fsub fast float %2720, %2747
  %2765 = fsub fast float %2721, %2748
  %2766 = fsub fast float %2722, %2749
  %2767 = fmul fast float %2755, %2764
  %2768 = fmul fast float %2756, %2765
  %2769 = fmul fast float %2757, %2766
  %2770 = call float @dx.op.binary.f32(i32 36, float %2761, float %2767)  ; FMin(a,b)
  %2771 = call float @dx.op.binary.f32(i32 36, float %2762, float %2768)  ; FMin(a,b)
  %2772 = call float @dx.op.binary.f32(i32 36, float %2763, float %2769)  ; FMin(a,b)
  %2773 = call float @dx.op.binary.f32(i32 35, float %2761, float %2767)  ; FMax(a,b)
  %2774 = call float @dx.op.binary.f32(i32 35, float %2762, float %2768)  ; FMax(a,b)
  %2775 = call float @dx.op.binary.f32(i32 35, float %2763, float %2769)  ; FMax(a,b)
  %2776 = call float @dx.op.binary.f32(i32 35, float %2771, float %2772)  ; FMax(a,b)
  %2777 = call float @dx.op.binary.f32(i32 35, float %2770, float %2776)  ; FMax(a,b)
  %2778 = call float @dx.op.binary.f32(i32 36, float %2774, float %2775)  ; FMin(a,b)
  %2779 = call float @dx.op.binary.f32(i32 36, float %2773, float %2778)  ; FMin(a,b)
  %2780 = call float @dx.op.unary.f32(i32 7, float %2777)  ; Saturate(value)
  %2781 = call float @dx.op.unary.f32(i32 7, float %2779)  ; Saturate(value)
  %2782 = fcmp fast olt float %2780, %2781
  br i1 %2782, label %2783, label %2946

; <label>:2783                                    ; preds = %2751
  %2784 = fmul fast float %2780, %2752
  %2785 = fmul fast float %2780, %2753
  %2786 = fmul fast float %2780, %2754
  %2787 = fsub fast float %2781, %2780
  %2788 = fmul fast float %2752, %2787
  %2789 = fsub fast float %2781, %2780
  %2790 = fmul fast float %2753, %2789
  %2791 = fsub fast float %2781, %2780
  %2792 = fmul fast float %2754, %2791
  %2793 = fmul fast float %2788, %2788
  %2794 = fmul fast float %2790, %2790
  %2795 = fadd fast float %2793, %2794
  %2796 = fmul fast float %2792, %2792
  %2797 = fadd fast float %2795, %2796
  %2798 = call float @dx.op.unary.f32(i32 24, float %2797)  ; Sqrt(value)
  %2799 = call float @dx.op.binary.f32(i32 36, float %2798, float 1.000000e+05)  ; FMin(a,b)
  %2800 = call float @dx.op.dot3.f32(i32 55, float %2788, float %2790, float %2792, float %2788, float %2790, float %2792)  ; Dot3(ax,ay,az,bx,by,bz)
  %2801 = call float @dx.op.unary.f32(i32 25, float %2800)  ; Rsqrt(value)
  %2802 = fdiv fast float %2799, %2738
  %2803 = call float @dx.op.unary.f32(i32 28, float %2802)  ; Round_pi(value)
  %2804 = call float @dx.op.binary.f32(i32 36, float %2803, float 1.024000e+03)  ; FMin(a,b)
  %2805 = fdiv fast float %2799, %2804
  %2806 = fcmp fast ogt float %2804, 0.000000e+00
  br i1 %2806, label %2807, label %2946

; <label>:2807                                    ; preds = %2783
  br label %2808

; <label>:2808                                    ; preds = %2937, %2807
  %2809 = phi i32 [ %2895, %2937 ], [ 9999, %2807 ]
  %2810 = phi i32 [ %2896, %2937 ], [ 9999, %2807 ]
  %2811 = phi i32 [ %2897, %2937 ], [ 9999, %2807 ]
  %2812 = phi i32 [ %2898, %2937 ], [ 0, %2807 ]
  %2813 = phi i32 [ %2899, %2937 ], [ 0, %2807 ]
  %2814 = phi i32 [ %2900, %2937 ], [ 0, %2807 ]
  %2815 = phi i32 [ %2901, %2937 ], [ 0, %2807 ]
  %2816 = phi float [ %2941, %2937 ], [ 1.000000e+00, %2807 ]
  %2817 = phi float [ %2942, %2937 ], [ 0.000000e+00, %2807 ]
  %2818 = phi float [ %2938, %2937 ], [ 0.000000e+00, %2807 ]
  %2819 = fmul fast float %2816, %2805
  %2820 = call float @dx.op.binary.f32(i32 35, float %2819, float 0.000000e+00)  ; FMax(a,b)
  %2821 = fmul fast float %2788, %2738
  %2822 = fmul fast float %2821, %2801
  %2823 = fmul fast float %2822, %2817
  %2824 = fmul fast float %2790, %2738
  %2825 = fmul fast float %2824, %2801
  %2826 = fmul fast float %2825, %2817
  %2827 = fmul fast float %2792, %2738
  %2828 = fmul fast float %2827, %2801
  %2829 = fmul fast float %2828, %2817
  %2830 = fmul fast float %2690, %2820
  %2831 = fmul fast float %2691, %2820
  %2832 = fmul fast float %2692, %2820
  %2833 = add i32 %2732, -1
  %2834 = add i32 %2733, -1
  %2835 = add i32 %2734, -1
  %2836 = fsub fast float %2747, %2714
  %2837 = fadd fast float %2836, %2784
  %2838 = fadd fast float %2837, %2823
  %2839 = fadd fast float %2838, %2830
  %2840 = fsub fast float %2748, %2715
  %2841 = fadd fast float %2840, %2785
  %2842 = fadd fast float %2841, %2826
  %2843 = fadd fast float %2842, %2831
  %2844 = fsub fast float %2749, %2716
  %2845 = fadd fast float %2844, %2786
  %2846 = fadd fast float %2845, %2829
  %2847 = fadd fast float %2846, %2832
  %2848 = fsub fast float %2720, %2714
  %2849 = fsub fast float %2721, %2715
  %2850 = fsub fast float %2722, %2716
  %2851 = fdiv fast float %2839, %2848
  %2852 = fdiv fast float %2843, %2849
  %2853 = fdiv fast float %2847, %2850
  %2854 = call float @dx.op.unary.f32(i32 7, float %2851)  ; Saturate(value)
  %2855 = call float @dx.op.unary.f32(i32 7, float %2852)  ; Saturate(value)
  %2856 = call float @dx.op.unary.f32(i32 7, float %2853)  ; Saturate(value)
  %2857 = uitofp i32 %2732 to float
  %2858 = uitofp i32 %2733 to float
  %2859 = uitofp i32 %2734 to float
  %2860 = fmul fast float %2854, %2857
  %2861 = fmul fast float %2855, %2858
  %2862 = fmul fast float %2856, %2859
  %2863 = fptoui float %2860 to i32
  %2864 = fptoui float %2861 to i32
  %2865 = fptoui float %2862 to i32
  %2866 = call i32 @dx.op.binary.i32(i32 40, i32 %2863, i32 %2833)  ; UMin(a,b)
  %2867 = call i32 @dx.op.binary.i32(i32 40, i32 %2864, i32 %2834)  ; UMin(a,b)
  %2868 = call i32 @dx.op.binary.i32(i32 40, i32 %2865, i32 %2835)  ; UMin(a,b)
  %2869 = and i32 %2701, 31
  %2870 = lshr i32 %2866, %2869
  %2871 = lshr i32 %2867, %2869
  %2872 = lshr i32 %2868, %2869
  %2873 = icmp ne i32 %2870, %2809
  %2874 = icmp ne i32 %2871, %2810
  %2875 = icmp ne i32 %2872, %2811
  %2876 = or i1 %2873, %2874
  %2877 = or i1 %2876, %2875
  br i1 %2877, label %2878, label %2894

; <label>:2878                                    ; preds = %2808
  %2879 = mul i32 %2872, %2729
  %2880 = add i32 %2879, %2871
  %2881 = mul i32 %2880, %2727
  %2882 = add i32 %2870, %2735
  %2883 = add i32 %2882, %2881
  %2884 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %2885 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2884, i32 %2883, i32 undef)  ; BufferLoad(srv,index,wot)
  %2886 = extractvalue %dx.types.ResRet.i32 %2885, 0
  %2887 = icmp ne i32 %2886, -1
  %2888 = zext i1 %2887 to i32
  %2889 = mul i32 %2697, %2698
  %2890 = urem i32 %2886, %2889
  %2891 = urem i32 %2890, %2697
  %2892 = udiv i32 %2890, %2697
  %2893 = udiv i32 %2886, %2889
  br label %2894

; <label>:2894                                    ; preds = %2878, %2808
  %2895 = phi i32 [ %2870, %2878 ], [ %2809, %2808 ]
  %2896 = phi i32 [ %2871, %2878 ], [ %2810, %2808 ]
  %2897 = phi i32 [ %2872, %2878 ], [ %2811, %2808 ]
  %2898 = phi i32 [ %2888, %2878 ], [ %2812, %2808 ]
  %2899 = phi i32 [ %2891, %2878 ], [ %2813, %2808 ]
  %2900 = phi i32 [ %2892, %2878 ], [ %2814, %2808 ]
  %2901 = phi i32 [ %2893, %2878 ], [ %2815, %2808 ]
  %2902 = icmp eq i32 %2898, 0
  br i1 %2902, label %2937, label %2903

; <label>:2903                                    ; preds = %2894
  %2904 = shl i32 %2899, %2869
  %2905 = shl i32 %2900, %2869
  %2906 = shl i32 %2901, %2869
  %2907 = shl i32 %2870, %2869
  %2908 = shl i32 %2871, %2869
  %2909 = shl i32 %2872, %2869
  %2910 = sub i32 %2866, %2907
  %2911 = sub i32 %2867, %2908
  %2912 = sub i32 %2868, %2909
  %2913 = add i32 %2910, %2904
  %2914 = add i32 %2911, %2905
  %2915 = add i32 %2912, %2906
  %2916 = fmul fast float %2820, %2750
  %2917 = call float @dx.op.unary.f32(i32 23, float %2916)  ; Log(value)
  %2918 = fptoui float %2917 to i32
  %2919 = and i32 %2918, 31
  %2920 = lshr i32 %2913, %2919
  %2921 = lshr i32 %2914, %2919
  %2922 = lshr i32 %2915, %2919
  %2923 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %2924 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2923, i32 %2918, i32 %2920, i32 %2921, i32 %2922, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2925 = extractvalue %dx.types.ResRet.i32 %2924, 0
  %2926 = icmp sgt i32 %2925, -1
  br i1 %2926, label %2927, label %2933

; <label>:2927                                    ; preds = %2903
  %2928 = and i32 %2925, 16777215
  %2929 = uitofp i32 %2928 to float
  %2930 = fmul fast float %2703, 0x3F50624DE0000000
  %2931 = fmul fast float %2930, %2916
  %2932 = fmul fast float %2931, %2929
  br label %2933

; <label>:2933                                    ; preds = %2927, %2903
  %2934 = phi float [ %2932, %2927 ], [ 0.000000e+00, %2903 ]
  %2935 = fadd fast float %2934, %2818
  %2936 = fcmp fast ogt float %2935, 1.000000e+00
  br i1 %2936, label %2944, label %2937

; <label>:2937                                    ; preds = %2933, %2894
  %2938 = phi float [ %2935, %2933 ], [ %2818, %2894 ]
  %2939 = fmul fast float %2816, %2704
  %2940 = uitofp i32 %2700 to float
  %2941 = call float @dx.op.binary.f32(i32 36, float %2940, float %2939)  ; FMin(a,b)
  %2942 = fadd fast float %2941, %2817
  %2943 = fcmp fast olt float %2942, %2804
  br i1 %2943, label %2808, label %2944

; <label>:2944                                    ; preds = %2937, %2933
  %2945 = phi float [ %2935, %2933 ], [ %2938, %2937 ]
  br label %2946

; <label>:2946                                    ; preds = %2944, %2783, %2751, %2709
  %2947 = phi float [ 0.000000e+00, %2751 ], [ 0.000000e+00, %2709 ], [ 0.000000e+00, %2783 ], [ %2945, %2944 ]
  %2948 = fsub fast float 1.000000e+00, %2947
  %2949 = call float @dx.op.unary.f32(i32 7, float %2948)  ; Saturate(value)
  %2950 = call float @dx.op.binary.f32(i32 36, float %2710, float %2949)  ; FMin(a,b)
  %2951 = add nuw i32 %2711, 1
  %2952 = icmp eq i32 %2951, %2706
  br i1 %2952, label %2953, label %2709

; <label>:2953                                    ; preds = %2946
  br label %2954

; <label>:2954                                    ; preds = %2953, %2684, %2672, %2420, %281
  %2955 = phi i32 [ %2396, %2420 ], [ %2396, %2672 ], [ 0, %281 ], [ %2396, %2684 ], [ %2396, %2953 ]
  %2956 = phi float [ %2421, %2420 ], [ %2421, %2672 ], [ 1.000000e+00, %281 ], [ %2421, %2684 ], [ %2950, %2953 ]
  %2957 = phi i32 [ %2399, %2420 ], [ %2399, %2672 ], [ 0, %281 ], [ %2399, %2684 ], [ %2399, %2953 ]
  %2958 = phi i32 [ %2400, %2420 ], [ %2400, %2672 ], [ 0, %281 ], [ %2400, %2684 ], [ %2400, %2953 ]
  %2959 = phi i32 [ %2401, %2420 ], [ %2401, %2672 ], [ -1, %281 ], [ %2401, %2684 ], [ %2401, %2953 ]
  %2960 = phi i32 [ %2402, %2420 ], [ %2402, %2672 ], [ -1, %281 ], [ %2402, %2684 ], [ %2402, %2953 ]
  %2961 = phi i32 [ %2403, %2420 ], [ %2403, %2672 ], [ -1, %281 ], [ %2403, %2684 ], [ %2403, %2953 ]
  %2962 = phi i32 [ %2404, %2420 ], [ %2404, %2672 ], [ -1, %281 ], [ %2404, %2684 ], [ %2404, %2953 ]
  %2963 = fcmp fast ogt float %2956, 0x3F91111120000000
  %2964 = fcmp fast olt float %2956, 1.000000e+00
  %2965 = and i1 %2963, %2964
  br i1 %2965, label %2966, label %2987

; <label>:2966                                    ; preds = %2954
  %2967 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %2968 = extractvalue %dx.types.CBufRet.i32 %2967, 1
  %2969 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %2970 = extractvalue %dx.types.CBufRet.i32 %2969, 0
  %2971 = extractvalue %dx.types.CBufRet.i32 %2969, 1
  %2972 = extractvalue %dx.types.CBufRet.i32 %2969, 2
  %2973 = and i32 %2970, %81
  %2974 = and i32 %2971, %82
  %2975 = and i32 %2972, %2968
  %2976 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2977 = extractvalue %dx.types.CBufRet.i32 %2976, 1
  %2978 = mul i32 %2975, %2977
  %2979 = add i32 %2978, %2974
  %2980 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2981 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2980, i32 0, i32 %2973, i32 %2979, i32 undef, i32 0, i32 0, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2982 = extractvalue %dx.types.ResRet.f32 %2981, 0
  %2983 = fadd fast float %2982, -5.000000e-01
  %2984 = fmul fast float %2983, 0x3FB1111120000000
  %2985 = fadd fast float %2984, %2956
  %2986 = call float @dx.op.unary.f32(i32 7, float %2985)  ; Saturate(value)
  br label %2987

; <label>:2987                                    ; preds = %2966, %2954
  %2988 = phi float [ %2986, %2966 ], [ %2956, %2954 ]
  %2989 = fmul fast float %2988, 1.500000e+01
  %2990 = call float @dx.op.unary.f32(i32 26, float %2989)  ; Round_ne(value)
  %2991 = fptoui float %2990 to i32
  %2992 = and i32 %2991, 15
  %2993 = xor i32 %2992, 15
  %2994 = lshr i32 %263, 3
  %2995 = icmp eq i32 %2994, 0
  br i1 %2995, label %2996, label %3000

; <label>:2996                                    ; preds = %2987
  %2997 = shl i32 %263, 2
  %2998 = and i32 %2997, 28
  %2999 = shl i32 %2993, %2998
  br label %3000

; <label>:3000                                    ; preds = %2996, %2987
  %3001 = phi i32 [ %2999, %2996 ], [ 0, %2987 ]
  %3002 = xor i32 %3001, %259
  %3003 = icmp eq i32 %2994, 1
  br i1 %3003, label %3004, label %3008

; <label>:3004                                    ; preds = %3000
  %3005 = shl i32 %263, 2
  %3006 = and i32 %3005, 28
  %3007 = shl i32 %2993, %3006
  br label %3008

; <label>:3008                                    ; preds = %3004, %3000
  %3009 = phi i32 [ %3007, %3004 ], [ 0, %3000 ]
  %3010 = xor i32 %3009, %260
  %3011 = icmp eq i32 %2994, 2
  br i1 %3011, label %3012, label %3016

; <label>:3012                                    ; preds = %3008
  %3013 = shl i32 %263, 2
  %3014 = and i32 %3013, 28
  %3015 = shl i32 %2993, %3014
  br label %3016

; <label>:3016                                    ; preds = %3012, %3008
  %3017 = phi i32 [ %3015, %3012 ], [ 0, %3008 ]
  %3018 = xor i32 %3017, %261
  %3019 = icmp eq i32 %2994, 3
  br i1 %3019, label %3020, label %3024

; <label>:3020                                    ; preds = %3016
  %3021 = shl i32 %263, 2
  %3022 = and i32 %3021, 28
  %3023 = shl i32 %2993, %3022
  br label %3024

; <label>:3024                                    ; preds = %3020, %3016
  %3025 = phi i32 [ %3023, %3020 ], [ 0, %3016 ]
  %3026 = xor i32 %3025, %262
  %3027 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %31, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %3028 = extractvalue %dx.types.CBufRet.i32 %3027, 3
  %3029 = icmp eq i32 %3028, %279
  %3030 = select i1 %3029, i32 %2955, i32 %251
  %3031 = select i1 %3029, float %2988, float %252
  %3032 = select i1 %3029, i32 %2957, i32 %253
  %3033 = select i1 %3029, i32 %2958, i32 %254
  %3034 = select i1 %3029, i32 %2959, i32 %255
  %3035 = select i1 %3029, i32 %2960, i32 %256
  %3036 = select i1 %3029, i32 %2961, i32 %257
  %3037 = select i1 %3029, i32 %2962, i32 %258
  br label %3038

; <label>:3038                                    ; preds = %3024, %250
  %3039 = phi i32 [ %251, %250 ], [ %3030, %3024 ]
  %3040 = phi float [ %252, %250 ], [ %3031, %3024 ]
  %3041 = phi i32 [ %253, %250 ], [ %3032, %3024 ]
  %3042 = phi i32 [ %254, %250 ], [ %3033, %3024 ]
  %3043 = phi i32 [ %255, %250 ], [ %3034, %3024 ]
  %3044 = phi i32 [ %256, %250 ], [ %3035, %3024 ]
  %3045 = phi i32 [ %257, %250 ], [ %3036, %3024 ]
  %3046 = phi i32 [ %258, %250 ], [ %3037, %3024 ]
  %3047 = phi i32 [ %259, %250 ], [ %3002, %3024 ]
  %3048 = phi i32 [ %260, %250 ], [ %3010, %3024 ]
  %3049 = phi i32 [ %261, %250 ], [ %3018, %3024 ]
  %3050 = phi i32 [ %262, %250 ], [ %3026, %3024 ]
  %3051 = add nuw i32 %263, 1
  %3052 = icmp eq i32 %3051, %247
  br i1 %3052, label %3053, label %250, !llvm.loop !43

; <label>:3053                                    ; preds = %3038
  br label %3054

; <label>:3054                                    ; preds = %3053, %220
  %3055 = phi i32 [ 0, %220 ], [ %3039, %3053 ]
  %3056 = phi float [ 1.000000e+00, %220 ], [ %3040, %3053 ]
  %3057 = phi i32 [ 0, %220 ], [ %3041, %3053 ]
  %3058 = phi i32 [ 0, %220 ], [ %3042, %3053 ]
  %3059 = phi i32 [ -1, %220 ], [ %3043, %3053 ]
  %3060 = phi i32 [ -1, %220 ], [ %3044, %3053 ]
  %3061 = phi i32 [ -1, %220 ], [ %3045, %3053 ]
  %3062 = phi i32 [ -1, %220 ], [ %3046, %3053 ]
  %3063 = phi i32 [ -1, %220 ], [ %3047, %3053 ]
  %3064 = phi i32 [ -1, %220 ], [ %3048, %3053 ]
  %3065 = phi i32 [ -1, %220 ], [ %3049, %3053 ]
  %3066 = phi i32 [ -1, %220 ], [ %3050, %3053 ]
  %3067 = xor i32 %3063, -1
  %3068 = xor i32 %3064, -1
  %3069 = xor i32 %3065, -1
  %3070 = xor i32 %3066, -1
  %3071 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 1029 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xU32>
  call void @dx.op.textureStore.i32(i32 67, %dx.types.Handle %3071, i32 %81, i32 %82, i32 undef, i32 %3067, i32 %3068, i32 %3069, i32 %3070, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %3072 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %31, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %3073 = extractvalue %dx.types.CBufRet.i32 %3072, 2
  %3074 = icmp eq i32 %3073, 0
  br i1 %3074, label %3075, label %3398

; <label>:3075                                    ; preds = %3054
  %3076 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %3077 = extractvalue %dx.types.CBufRet.f32 %3076, 0
  %3078 = extractvalue %dx.types.CBufRet.f32 %3076, 1
  %3079 = fsub fast float %113, %3077
  %3080 = fsub fast float %114, %3078
  %3081 = fptoui float %3079 to i32
  %3082 = fptoui float %3080 to i32
  %3083 = icmp eq i32 %3055, 0
  br i1 %3083, label %3391, label %3084

; <label>:3084                                    ; preds = %3075
  %3085 = lshr i32 %3059, 7
  %3086 = lshr i32 %3060, 7
  %3087 = lshr i32 %3061, 7
  %3088 = lshr i32 %3062, 7
  %3089 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %3090 = extractvalue %dx.types.CBufRet.i32 %3089, 2
  %3091 = extractvalue %dx.types.CBufRet.i32 %3089, 3
  %3092 = icmp ult i32 %3087, %3090
  %3093 = icmp ult i32 %3088, %3091
  %3094 = and i1 %3092, %3093
  br i1 %3094, label %3095, label %3104

; <label>:3095                                    ; preds = %3084
  %3096 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %3097 = extractvalue %dx.types.CBufRet.i32 %3096, 2
  %3098 = and i32 %3097, 31
  %3099 = shl i32 %3088, %3098
  %3100 = add i32 %3099, %3087
  %3101 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 524, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %3102 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %3101, i32 %3100, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3103 = extractvalue %dx.types.ResRet.i32 %3102, 0
  br label %3104

; <label>:3104                                    ; preds = %3095, %3084
  %3105 = phi i32 [ %3103, %3095 ], [ 0, %3084 ]
  %3106 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %31, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %3107 = extractvalue %dx.types.CBufRet.i32 %3106, 2
  %3108 = icmp eq i32 %3107, 1
  br i1 %3108, label %3391, label %3109

; <label>:3109                                    ; preds = %3104
  %3110 = icmp eq i32 %3107, 2
  br i1 %3110, label %3111, label %3134

; <label>:3111                                    ; preds = %3109
  %3112 = lshr i32 %3057, 16
  %3113 = xor i32 %3112, %3057
  %3114 = mul i32 %3113, -2048144789
  %3115 = lshr i32 %3114, 13
  %3116 = xor i32 %3115, %3114
  %3117 = mul i32 %3116, -1028477387
  %3118 = lshr i32 %3117, 16
  %3119 = xor i32 %3118, %3117
  %3120 = and i32 %3119, 255
  %3121 = uitofp i32 %3120 to float
  %3122 = lshr i32 %3119, 8
  %3123 = and i32 %3122, 255
  %3124 = uitofp i32 %3123 to float
  %3125 = and i32 %3118, 255
  %3126 = uitofp i32 %3125 to float
  %3127 = fmul fast float %3121, 0x3F69B34D00000000
  %3128 = fmul fast float %3124, 0x3F69B34D00000000
  %3129 = fmul fast float %3126, 0x3F69B34D00000000
  %3130 = fmul fast float %3056, 0x3FC99999A0000000
  %3131 = fadd fast float %3127, %3130
  %3132 = fadd fast float %3128, %3130
  %3133 = fadd fast float %3129, %3130
  br label %3391

; <label>:3134                                    ; preds = %3109
  %3135 = icmp eq i32 %3107, 4
  %3136 = and i1 %3094, %3135
  br i1 %3136, label %3137, label %3180

; <label>:3137                                    ; preds = %3134
  %3138 = shl i32 %3086, 10
  %3139 = add i32 %3138, %3085
  %3140 = lshr i32 %3139, 16
  %3141 = xor i32 %3140, %3139
  %3142 = mul i32 %3141, -2048144789
  %3143 = lshr i32 %3142, 13
  %3144 = xor i32 %3143, %3142
  %3145 = mul i32 %3144, -1028477387
  %3146 = lshr i32 %3145, 16
  %3147 = xor i32 %3146, %3145
  %3148 = and i32 %3147, 255
  %3149 = uitofp i32 %3148 to float
  %3150 = lshr i32 %3147, 8
  %3151 = and i32 %3150, 255
  %3152 = uitofp i32 %3151 to float
  %3153 = and i32 %3146, 255
  %3154 = uitofp i32 %3153 to float
  %3155 = lshr i32 %3057, 16
  %3156 = xor i32 %3155, %3057
  %3157 = mul i32 %3156, -2048144789
  %3158 = lshr i32 %3157, 13
  %3159 = xor i32 %3158, %3157
  %3160 = mul i32 %3159, -1028477387
  %3161 = lshr i32 %3160, 16
  %3162 = xor i32 %3161, %3160
  %3163 = and i32 %3162, 255
  %3164 = uitofp i32 %3163 to float
  %3165 = lshr i32 %3162, 8
  %3166 = and i32 %3165, 255
  %3167 = uitofp i32 %3166 to float
  %3168 = and i32 %3161, 255
  %3169 = uitofp i32 %3168 to float
  %3170 = fadd fast float %3149, %3164
  %3171 = fmul fast float %3170, 0x3F59B34D00000000
  %3172 = fadd fast float %3152, %3167
  %3173 = fmul fast float %3172, 0x3F59B34D00000000
  %3174 = fadd fast float %3154, %3169
  %3175 = fmul fast float %3174, 0x3F59B34D00000000
  %3176 = fmul fast float %3056, 0x3FC99999A0000000
  %3177 = fadd fast float %3171, %3176
  %3178 = fadd fast float %3173, %3176
  %3179 = fadd fast float %3175, %3176
  br label %3391

; <label>:3180                                    ; preds = %3134
  %3181 = icmp eq i32 %3107, 16
  br i1 %3181, label %3182, label %3228

; <label>:3182                                    ; preds = %3180
  %3183 = uitofp i32 %3058 to float
  %3184 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %31, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %3185 = extractvalue %dx.types.CBufRet.i32 %3184, 1
  %3186 = sitofp i32 %3185 to float
  %3187 = fdiv fast float %3183, %3186
  %3188 = call float @dx.op.unary.f32(i32 7, float %3187)  ; Saturate(value)
  %3189 = fmul fast float %3188, 5.000000e-01
  %3190 = fadd fast float %3189, 5.000000e-01
  %3191 = call float @dx.op.unary.f32(i32 7, float %3190)  ; Saturate(value)
  %3192 = fmul fast float %3191, 0x404A71CBE0000000
  %3193 = fmul fast float %3191, 0x40358B9700000000
  %3194 = fmul fast float %3191, 0x405BA11E20000000
  %3195 = fsub fast float 0x406B587060000000, %3192
  %3196 = fsub fast float 0x4050E16060000000, %3193
  %3197 = fadd fast float %3194, 0xC073134600000000
  %3198 = fmul fast float %3195, %3191
  %3199 = fmul fast float %3196, %3191
  %3200 = fmul fast float %3197, %3191
  %3201 = fadd fast float %3198, 0xC074ED5CC0000000
  %3202 = fadd fast float %3199, 0xC0515451E0000000
  %3203 = fadd fast float %3200, 0x4072095FC0000000
  %3204 = fmul fast float %3201, %3191
  %3205 = fmul fast float %3202, %3191
  %3206 = fmul fast float %3203, %3191
  %3207 = fadd fast float %3204, 0x406C9883C0000000
  %3208 = fadd fast float %3205, 0x40390CC420000000
  %3209 = fadd fast float %3206, 0xC056E2A0A0000000
  %3210 = fmul fast float %3207, %3191
  %3211 = fmul fast float %3208, %3191
  %3212 = fmul fast float %3209, %3191
  %3213 = fadd fast float %3210, 0xC050860480000000
  %3214 = fadd fast float %3211, 0xC013B64120000000
  %3215 = fadd fast float %3212, 0xC024305460000000
  %3216 = fmul fast float %3213, %3191
  %3217 = fmul fast float %3214, %3191
  %3218 = fmul fast float %3215, %3191
  %3219 = fadd fast float %3216, 0x401ADD9D20000000
  %3220 = fadd fast float %3217, 0x40097552C0000000
  %3221 = fadd fast float %3218, 0x401E494CA0000000
  %3222 = fmul fast float %3219, %3191
  %3223 = fmul fast float %3220, %3191
  %3224 = fmul fast float %3221, %3191
  %3225 = fadd fast float %3222, 0x3FBD34F000000000
  %3226 = fadd fast float %3223, 0x3FB0192080000000
  %3227 = fadd fast float %3224, 0x3FCCC75A00000000
  br label %3391

; <label>:3228                                    ; preds = %3180
  %3229 = icmp eq i32 %3107, 8
  %3230 = and i1 %3094, %3229
  br i1 %3230, label %3231, label %3269

; <label>:3231                                    ; preds = %3228
  %3232 = and i32 %3105, 2
  %3233 = icmp ne i32 %3232, 0
  %3234 = and i32 %3105, 4
  %3235 = icmp ne i32 %3234, 0
  %3236 = and i32 %3105, 6
  %3237 = icmp eq i32 %3236, 6
  %3238 = shl i32 %3086, 10
  %3239 = add i32 %3238, %3085
  %3240 = lshr i32 %3239, 16
  %3241 = xor i32 %3240, %3239
  %3242 = mul i32 %3241, -2048144789
  %3243 = lshr i32 %3242, 13
  %3244 = xor i32 %3243, %3242
  %3245 = mul i32 %3244, -1028477387
  %3246 = lshr i32 %3245, 16
  %3247 = xor i32 %3246, %3245
  %3248 = and i32 %3247, 255
  %3249 = uitofp i32 %3248 to float
  %3250 = lshr i32 %3247, 8
  %3251 = and i32 %3250, 255
  %3252 = uitofp i32 %3251 to float
  %3253 = and i32 %3246, 255
  %3254 = uitofp i32 %3253 to float
  %3255 = select i1 %3237, float 0x3FE19999A0000000, float 0.000000e+00
  %3256 = select i1 %3233, float 0.000000e+00, float 0x3FE19999A0000000
  %3257 = select i1 %3235, float 0.000000e+00, float 0x3FE19999A0000000
  %3258 = select i1 %3233, float %3257, float 0.000000e+00
  %3259 = fmul fast float %3249, 0x3F50101020000000
  %3260 = fmul fast float %3252, 0x3F50101020000000
  %3261 = fmul fast float %3254, 0x3F50101020000000
  %3262 = fmul fast float %3056, 0x3FC99999A0000000
  %3263 = fadd fast float %3259, %3262
  %3264 = fadd fast float %3263, %3255
  %3265 = fadd fast float %3260, %3262
  %3266 = fadd fast float %3265, %3256
  %3267 = fadd fast float %3261, %3262
  %3268 = fadd fast float %3267, %3258
  br label %3391

; <label>:3269                                    ; preds = %3228
  %3270 = icmp eq i32 %3107, 128
  br i1 %3270, label %3271, label %3306

; <label>:3271                                    ; preds = %3269
  %3272 = shl i32 %3086, 10
  %3273 = add i32 %3272, %3085
  %3274 = lshr i32 %3273, 16
  %3275 = xor i32 %3274, %3273
  %3276 = mul i32 %3275, -2048144789
  %3277 = lshr i32 %3276, 13
  %3278 = xor i32 %3277, %3276
  %3279 = mul i32 %3278, -1028477387
  %3280 = lshr i32 %3279, 16
  %3281 = xor i32 %3280, %3279
  %3282 = and i32 %3281, 255
  %3283 = uitofp i32 %3282 to float
  %3284 = lshr i32 %3281, 8
  %3285 = and i32 %3284, 255
  %3286 = uitofp i32 %3285 to float
  %3287 = and i32 %3280, 255
  %3288 = uitofp i32 %3287 to float
  %3289 = fmul fast float %3283, 0x3F59B34D00000000
  br i1 %3094, label %3290, label %3297

; <label>:3290                                    ; preds = %3271
  %3291 = and i32 %3105, 32
  %3292 = icmp ne i32 %3291, 0
  %3293 = select i1 %3292, float 1.000000e+00, float %3289
  %3294 = fsub fast float %3293, %3289
  %3295 = fmul fast float %3294, 0x3FE99999A0000000
  %3296 = fadd fast float %3295, %3289
  br label %3297

; <label>:3297                                    ; preds = %3290, %3271
  %3298 = phi float [ %3296, %3290 ], [ %3289, %3271 ]
  %3299 = fmul fast float %3298, 0x3FE99999A0000000
  %3300 = fmul fast float %3286, 0x3F548F70E0000000
  %3301 = fmul fast float %3288, 0x3F548F70E0000000
  %3302 = fmul fast float %3056, 0x3FC99999A0000000
  %3303 = fadd fast float %3299, %3302
  %3304 = fadd fast float %3300, %3302
  %3305 = fadd fast float %3301, %3302
  br label %3391

; <label>:3306                                    ; preds = %3269
  %3307 = icmp eq i32 %3107, 256
  br i1 %3307, label %3308, label %3352

; <label>:3308                                    ; preds = %3306
  %3309 = shl i32 %3086, 10
  %3310 = add i32 %3309, %3085
  %3311 = lshr i32 %3310, 16
  %3312 = xor i32 %3311, %3310
  %3313 = mul i32 %3312, -2048144789
  %3314 = lshr i32 %3313, 13
  %3315 = xor i32 %3314, %3313
  %3316 = mul i32 %3315, -1028477387
  %3317 = lshr i32 %3316, 16
  %3318 = xor i32 %3317, %3316
  %3319 = and i32 %3318, 255
  %3320 = uitofp i32 %3319 to float
  %3321 = lshr i32 %3318, 8
  %3322 = and i32 %3321, 255
  %3323 = uitofp i32 %3322 to float
  %3324 = and i32 %3317, 255
  %3325 = uitofp i32 %3324 to float
  %3326 = fmul fast float %3320, 0x3F59B34D00000000
  %3327 = fmul fast float %3323, 0x3F59B34D00000000
  br i1 %3094, label %3328, label %3342

; <label>:3328                                    ; preds = %3308
  %3329 = lshr i32 %3105, 8
  %3330 = and i32 %3329, 2
  %3331 = icmp ne i32 %3330, 0
  %3332 = and i32 %3329, 4
  %3333 = icmp ne i32 %3332, 0
  %3334 = select i1 %3333, float 1.000000e+00, float %3326
  %3335 = select i1 %3331, float 1.000000e+00, float %3327
  %3336 = fsub fast float %3334, %3326
  %3337 = fsub fast float %3335, %3327
  %3338 = fmul fast float %3336, 0x3FE99999A0000000
  %3339 = fmul fast float %3337, 0x3FE99999A0000000
  %3340 = fadd fast float %3338, %3326
  %3341 = fadd fast float %3339, %3327
  br label %3342

; <label>:3342                                    ; preds = %3328, %3308
  %3343 = phi float [ %3340, %3328 ], [ %3326, %3308 ]
  %3344 = phi float [ %3341, %3328 ], [ %3327, %3308 ]
  %3345 = fmul fast float %3343, 0x3FE99999A0000000
  %3346 = fmul fast float %3344, 0x3FE99999A0000000
  %3347 = fmul fast float %3325, 0x3F548F70E0000000
  %3348 = fmul fast float %3056, 0x3FC99999A0000000
  %3349 = fadd fast float %3345, %3348
  %3350 = fadd fast float %3346, %3348
  %3351 = fadd fast float %3347, %3348
  br label %3391

; <label>:3352                                    ; preds = %3306
  %3353 = icmp eq i32 %3107, 512
  br i1 %3353, label %3354, label %3385

; <label>:3354                                    ; preds = %3352
  %3355 = and i32 %3105, 48
  %3356 = icmp eq i32 %3355, 32
  %3357 = shl i32 %3086, 10
  %3358 = add i32 %3357, %3085
  %3359 = lshr i32 %3358, 16
  %3360 = xor i32 %3359, %3358
  %3361 = mul i32 %3360, -2048144789
  %3362 = lshr i32 %3361, 13
  %3363 = xor i32 %3362, %3361
  %3364 = mul i32 %3363, -1028477387
  %3365 = lshr i32 %3364, 16
  %3366 = xor i32 %3365, %3364
  %3367 = and i32 %3366, 255
  %3368 = uitofp i32 %3367 to float
  %3369 = lshr i32 %3366, 8
  %3370 = and i32 %3369, 255
  %3371 = uitofp i32 %3370 to float
  %3372 = and i32 %3365, 255
  %3373 = uitofp i32 %3372 to float
  %3374 = select i1 %3356, float 0x3FE19999A0000000, float 0.000000e+00
  %3375 = select i1 %3356, float 0.000000e+00, float 0x3FE19999A0000000
  %3376 = fmul fast float %3368, 0x3F50101020000000
  %3377 = fmul fast float %3371, 0x3F50101020000000
  %3378 = fmul fast float %3373, 0x3F50101020000000
  %3379 = fmul fast float %3056, 0x3FC99999A0000000
  %3380 = fadd fast float %3376, %3379
  %3381 = fadd fast float %3380, %3374
  %3382 = fadd fast float %3377, %3379
  %3383 = fadd fast float %3382, %3375
  %3384 = fadd fast float %3378, %3379
  br label %3391

; <label>:3385                                    ; preds = %3352
  %3386 = icmp eq i32 %3107, 64
  %3387 = fmul fast float %3056, 0x3FC99999A0000000
  %3388 = select i1 %3386, float %3387, float 1.000000e+00
  %3389 = select i1 %3386, float %3387, float 0.000000e+00
  %3390 = select i1 %3386, float %3387, float 1.000000e+00
  br label %3391

; <label>:3391                                    ; preds = %3385, %3354, %3342, %3297, %3231, %3182, %3137, %3111, %3104, %3075
  %3392 = phi float [ %3131, %3111 ], [ %3177, %3137 ], [ %3225, %3182 ], [ %3264, %3231 ], [ %3303, %3297 ], [ %3349, %3342 ], [ %3381, %3354 ], [ 1.000000e+00, %3075 ], [ %3056, %3104 ], [ %3388, %3385 ]
  %3393 = phi float [ %3132, %3111 ], [ %3178, %3137 ], [ %3226, %3182 ], [ %3266, %3231 ], [ %3304, %3297 ], [ %3350, %3342 ], [ %3383, %3354 ], [ 0.000000e+00, %3075 ], [ %3056, %3104 ], [ %3389, %3385 ]
  %3394 = phi float [ %3133, %3111 ], [ %3179, %3137 ], [ %3227, %3182 ], [ %3268, %3231 ], [ %3305, %3297 ], [ %3351, %3342 ], [ %3384, %3354 ], [ 1.000000e+00, %3075 ], [ %3056, %3104 ], [ %3390, %3385 ]
  %3395 = phi i1 [ true, %3111 ], [ true, %3137 ], [ true, %3182 ], [ true, %3231 ], [ true, %3297 ], [ true, %3342 ], [ true, %3354 ], [ false, %3075 ], [ true, %3104 ], [ %3386, %3385 ]
  br i1 %3395, label %3396, label %3398

; <label>:3396                                    ; preds = %3391
  %3397 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3397, i32 %3081, i32 %3082, i32 undef, float %3392, float %3393, float %3394, float 1.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %3398

; <label>:3398                                    ; preds = %3396, %3391, %3054, %95, %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.flattenedThreadIdInGroup.i32(i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.textureStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.unary.i32(i32, i32) #0

; Function Attrs: nounwind
declare i1 @dx.op.waveAllTrue(i32, i1) #2

; Function Attrs: nounwind
declare i1 @dx.op.waveAnyTrue(i32, i1) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!39}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !27, !30, !37}
!5 = !{!6, !8, !9, !10, !11, !12, !14, !16, !17, !18, !19, !20, !21, !23, !24, !25}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{i32 2, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !7}
!10 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!11 = !{i32 4, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 4, i32 1, i32 11, i32 0, null}
!12 = !{i32 5, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 5, i32 1, i32 12, i32 0, !13}
!13 = !{i32 1, i32 4}
!14 = !{i32 6, %"class.Texture2DArray<unsigned int>"* undef, !"", i32 0, i32 6, i32 1, i32 7, i32 0, !15}
!15 = !{i32 0, i32 5}
!16 = !{i32 7, %"class.Buffer<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 10, i32 0, !7}
!17 = !{i32 8, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 8, i32 1, i32 10, i32 0, !15}
!18 = !{i32 9, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 9, i32 1, i32 10, i32 0, !15}
!19 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !7}
!20 = !{i32 11, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 11, i32 1, i32 10, i32 0, !15}
!21 = !{i32 12, %"class.StructuredBuffer<FPackedVirtualVoxelNodeDesc>"* undef, !"", i32 0, i32 12, i32 1, i32 12, i32 0, !22}
!22 = !{i32 1, i32 32}
!23 = !{i32 13, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 13, i32 1, i32 4, i32 0, !15}
!24 = !{i32 14, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 2, i32 0, !7}
!25 = !{i32 15, %"class.StructuredBuffer<FPhysicalPageMetaData>"* undef, !"", i32 0, i32 15, i32 1, i32 12, i32 0, !26}
!26 = !{i32 1, i32 16}
!27 = !{!28, !29}
!28 = !{i32 0, %"class.RWTexture2D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !15}
!29 = !{i32 1, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!30 = !{!31, !32, !33, !34, !35, !36}
!31 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 368, null}
!32 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!33 = !{i32 2, %UniformBufferConstants_VirtualShadowMap* undef, !"", i32 0, i32 2, i32 1, i32 116, null}
!34 = !{i32 3, %hostlayout.UniformBufferConstants_ForwardLightData* undef, !"", i32 0, i32 3, i32 1, i32 708, null}
!35 = !{i32 4, %UniformBufferConstants_BlueNoise* undef, !"", i32 0, i32 4, i32 1, i32 44, null}
!36 = !{i32 5, %UniformBufferConstants_VirtualVoxel* undef, !"", i32 0, i32 5, i32 1, i32 212, null}
!37 = !{!38}
!38 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!39 = !{void ()* @VirtualShadowMapProjection, !"VirtualShadowMapProjection", null, !4, !40}
!40 = !{i32 0, i64 524304, i32 4, !41, i32 5, !42}
!41 = !{i32 8, i32 8, i32 1}
!42 = !{i32 0}
!43 = distinct !{!43, !44}
!44 = !{!"llvm.loop.unroll.disable"}
