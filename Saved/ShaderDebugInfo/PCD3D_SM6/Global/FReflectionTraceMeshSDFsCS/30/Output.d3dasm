;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: c9566b1f3898a0d2a4085765c1880e84
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(64,1,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       float DiffuseColorBoost;                      ; Offset:   48
;       float SkylightLeaking;                        ; Offset:   52
;       float SkylightLeakingRoughness;               ; Offset:   56
;       float InvFullSkylightLeakingDistance;         ; Offset:   60
;       uint SampleHeightFog;                         ; Offset:   64
;       uint SurfaceCacheFeedbackBufferSize;          ; Offset:  152
;       uint SurfaceCacheFeedbackBufferTileWrapMask;  ; Offset:  156
;       uint2 SurfaceCacheFeedbackBufferTileJitter;   ; Offset:  160
;       float SurfaceCacheFeedbackResLevelBias;       ; Offset:  168
;       uint SurfaceCacheUpdateFrameIndex;            ; Offset:  172
;       uint NumSceneObjects;                         ; Offset:  272
;       uint NumSceneHeightfieldObjects;              ; Offset:  296
;       float3 DistanceFieldBrickSize;                ; Offset:  352
;       float3 DistanceFieldUniqueDataBrickSize;      ; Offset:  368
;       uint3 DistanceFieldBrickAtlasSizeInBricks;    ; Offset:  384
;       uint3 DistanceFieldBrickAtlasMask;            ; Offset:  400
;       uint3 DistanceFieldBrickAtlasSizeLog2;        ; Offset:  416
;       float3 DistanceFieldBrickAtlasTexelSize;      ; Offset:  432
;       float3 DistanceFieldBrickAtlasHalfTexelSize;  ; Offset:  448
;       float3 DistanceFieldBrickOffsetToAtlasUVScale;; Offset:  464
;       float3 DistanceFieldUniqueDataBrickSizeInAtlasTexels;; Offset:  480
;       float MeshSDFNotCoveredExpandSurfaceScale;    ; Offset:  496
;       float MeshSDFNotCoveredMinStepScale;          ; Offset:  500
;       float MeshSDFDitheredTransparencyStepThreshold;; Offset:  504
;       uint CardGridPixelSizeShift;                  ; Offset:  536
;       float3 CardGridZParams;                       ; Offset:  544
;       uint3 CullGridSize;                           ; Offset:  560
;       uint ReflectionDownsampleFactor;              ; Offset:  640
;       uint2 ReflectionTracingViewSize;              ; Offset:  648
;       uint2 ReflectionTracingBufferSize;            ; Offset:  656
;       float MaxRayIntensity;                        ; Offset:  664
;       float ReflectionSmoothBias;                   ; Offset:  668
;       uint ReflectionPass;                          ; Offset:  672
;       uint UseJitter;                               ; Offset:  676
;       uint UseHighResSurface;                       ; Offset:  680
;       float CardTraceEndDistanceFromCamera;         ; Offset:  772
;       float MaxTraceDistance;                       ; Offset:  792
;       float MaxMeshSDFTraceDistance;                ; Offset:  796
;       float SurfaceBias;                            ; Offset:  800
;       int HeightfieldMaxTracingSteps;               ; Offset:  816
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   820
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_LumenCardScene
; {
;
;   struct UniformBufferConstants_LumenCardScene
;   {
;
;       uint LumenCardScene_NumCards;                 ; Offset:    0
;       uint LumenCardScene_NumMeshCards;             ; Offset:    4
;       uint LumenCardScene_NumCardPages;             ; Offset:    8
;       uint LumenCardScene_NumHeightfields;          ; Offset:   12
;       uint LumenCardScene_MaxConeSteps;             ; Offset:   16
;       uint PrePadding_LumenCardScene_20;            ; Offset:   20
;       float2 LumenCardScene_PhysicalAtlasSize;      ; Offset:   24
;       float2 LumenCardScene_InvPhysicalAtlasSize;   ; Offset:   32
;       float LumenCardScene_IndirectLightingAtlasDownsampleFactor;; Offset:   40
;       uint LumenCardScene_NumDistantCards;          ; Offset:   44
;       float LumenCardScene_DistantSceneMaxTraceDistance;; Offset:   48
;       float PrePadding_LumenCardScene_52;           ; Offset:   52
;       float PrePadding_LumenCardScene_56;           ; Offset:   56
;       float PrePadding_LumenCardScene_60;           ; Offset:   60
;       float3 LumenCardScene_DistantSceneDirection;  ; Offset:   64
;       float PrePadding_LumenCardScene_76;           ; Offset:   76
;       uint4 LumenCardScene_DistantCardIndices[2];   ; Offset:   80
;       uint BindlessResource_LumenCardScene_CardData;; Offset:  112
;       uint PrePadding_LumenCardScene_116;           ; Offset:  116
;       uint BindlessResource_LumenCardScene_CardPageData;; Offset:  120
;       uint PrePadding_LumenCardScene_124;           ; Offset:  124
;       uint BindlessResource_LumenCardScene_MeshCardsData;; Offset:  128
;       uint PrePadding_LumenCardScene_132;           ; Offset:  132
;       uint BindlessResource_LumenCardScene_HeightfieldData;; Offset:  136
;       uint PrePadding_LumenCardScene_140;           ; Offset:  140
;       uint BindlessResource_LumenCardScene_PageTableBuffer;; Offset:  144
;       uint PrePadding_LumenCardScene_148;           ; Offset:  148
;       uint BindlessResource_LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer;; Offset:  152
;       uint PrePadding_LumenCardScene_156;           ; Offset:  156
;       uint BindlessResource_LumenCardScene_AlbedoAtlas;; Offset:  160
;       uint PrePadding_LumenCardScene_164;           ; Offset:  164
;       uint BindlessResource_LumenCardScene_OpacityAtlas;; Offset:  168
;       uint PrePadding_LumenCardScene_172;           ; Offset:  172
;       uint BindlessResource_LumenCardScene_NormalAtlas;; Offset:  176
;       uint PrePadding_LumenCardScene_180;           ; Offset:  180
;       uint BindlessResource_LumenCardScene_EmissiveAtlas;; Offset:  184
;       uint PrePadding_LumenCardScene_188;           ; Offset:  188
;       uint BindlessResource_LumenCardScene_DepthAtlas;; Offset:  192
;   
;   } UniformBufferConstants_LumenCardScene;          ; Offset:    0 Size:   196
;
; }
;
; cbuffer UniformBufferConstants_ReflectionStruct
; {
;
;   struct UniformBufferConstants_ReflectionStruct
;   {
;
;       float4 ReflectionStruct_SkyLightParameters;   ; Offset:    0
;       uint BindlessResource_ReflectionStruct_SkyLightCubemap;; Offset:   16
;       uint PrePadding_ReflectionStruct_20;          ; Offset:   20
;       uint BindlessSampler_ReflectionStruct_SkyLightCubemapSampler;; Offset:   24
;       uint PrePadding_ReflectionStruct_28;          ; Offset:   28
;       uint BindlessResource_ReflectionStruct_SkyLightBlendDestinationCubemap;; Offset:   32
;       uint PrePadding_ReflectionStruct_36;          ; Offset:   36
;       uint BindlessSampler_ReflectionStruct_SkyLightBlendDestinationCubemapSampler;; Offset:   40
;       uint PrePadding_ReflectionStruct_44;          ; Offset:   44
;       uint BindlessResource_ReflectionStruct_ReflectionCubemap;; Offset:   48
;       uint PrePadding_ReflectionStruct_52;          ; Offset:   52
;       uint BindlessSampler_ReflectionStruct_ReflectionCubemapSampler;; Offset:   56
;       uint PrePadding_ReflectionStruct_60;          ; Offset:   60
;       uint BindlessResource_ReflectionStruct_PreIntegratedGF;; Offset:   64
;       uint PrePadding_ReflectionStruct_68;          ; Offset:   68
;       uint BindlessSampler_ReflectionStruct_PreIntegratedGFSampler;; Offset:   72
;   
;   } UniformBufferConstants_ReflectionStruct;        ; Offset:    0 Size:    76
;
; }
;
; cbuffer UniformBufferConstants_VirtualVoxel
; {
;
;   struct UniformBufferConstants_VirtualVoxel
;   {
;
;       int3 VirtualVoxel_PageCountResolution;        ; Offset:    0
;       float VirtualVoxel_CPUMinVoxelWorldSize;      ; Offset:   12
;       int3 VirtualVoxel_PageTextureResolution;      ; Offset:   16
;       uint VirtualVoxel_PageCount;                  ; Offset:   28
;       uint VirtualVoxel_PageResolution;             ; Offset:   32
;       uint VirtualVoxel_PageResolutionLog2;         ; Offset:   36
;       uint VirtualVoxel_PageIndexCount;             ; Offset:   40
;       uint VirtualVoxel_IndirectDispatchGroupSize;  ; Offset:   44
;       uint VirtualVoxel_NodeDescCount;              ; Offset:   48
;       uint VirtualVoxel_JitterMode;                 ; Offset:   52
;       float VirtualVoxel_DensityScale;              ; Offset:   56
;       float VirtualVoxel_DensityScale_AO;           ; Offset:   60
;       float VirtualVoxel_DensityScale_Shadow;       ; Offset:   64
;       float VirtualVoxel_DensityScale_Transmittance;; Offset:   68
;       float VirtualVoxel_DensityScale_Environment;  ; Offset:   72
;       float VirtualVoxel_DensityScale_Raytracing;   ; Offset:   76
;       float VirtualVoxel_DepthBiasScale_Shadow;     ; Offset:   80
;       float VirtualVoxel_DepthBiasScale_Transmittance;; Offset:   84
;       float VirtualVoxel_DepthBiasScale_Environment;; Offset:   88
;       float VirtualVoxel_SteppingScale_Shadow;      ; Offset:   92
;       float VirtualVoxel_SteppingScale_Transmittance;; Offset:   96
;       float VirtualVoxel_SteppingScale_Environment; ; Offset:  100
;       float VirtualVoxel_SteppingScale_Raytracing;  ; Offset:  104
;       float VirtualVoxel_HairCoveragePixelRadiusAtDepth1;; Offset:  108
;       float VirtualVoxel_Raytracing_ShadowOcclusionThreshold;; Offset:  112
;       float VirtualVoxel_Raytracing_SkyOcclusionThreshold;; Offset:  116
;       float PrePadding_VirtualVoxel_120;            ; Offset:  120
;       float PrePadding_VirtualVoxel_124;            ; Offset:  124
;       float3 VirtualVoxel_TranslatedWorldOffset;    ; Offset:  128
;       float PrePadding_VirtualVoxel_140;            ; Offset:  140
;       float3 VirtualVoxel_TranslatedWorldOffsetStereoCorrection;; Offset:  144
;       uint VirtualVoxel_AllocationFeedbackEnable;   ; Offset:  156
;       uint BindlessResource_VirtualVoxel_PageIndexBuffer;; Offset:  160
;       uint PrePadding_VirtualVoxel_164;             ; Offset:  164
;       uint BindlessResource_VirtualVoxel_PageIndexOccupancyBuffer;; Offset:  168
;       uint PrePadding_VirtualVoxel_172;             ; Offset:  172
;       uint BindlessResource_VirtualVoxel_PageIndexCoordBuffer;; Offset:  176
;       uint PrePadding_VirtualVoxel_180;             ; Offset:  180
;       uint BindlessResource_VirtualVoxel_NodeDescBuffer;; Offset:  184
;       uint PrePadding_VirtualVoxel_188;             ; Offset:  188
;       uint BindlessResource_VirtualVoxel_CurrGPUMinVoxelSize;; Offset:  192
;       uint PrePadding_VirtualVoxel_196;             ; Offset:  196
;       uint BindlessResource_VirtualVoxel_NextGPUMinVoxelSize;; Offset:  200
;       float PrePadding_VirtualVoxel_204;            ; Offset:  204
;       uint BindlessResource_VirtualVoxel_PageTexture;; Offset:  208
;   
;   } UniformBufferConstants_VirtualVoxel;            ; Offset:    0 Size:   212
;
; }
;
; cbuffer UniformBufferConstants_FogStruct
; {
;
;   struct UniformBufferConstants_FogStruct
;   {
;
;       float4 FogStruct_ExponentialFogParameters;    ; Offset:    0
;       float4 FogStruct_ExponentialFogParameters2;   ; Offset:   16
;       float4 FogStruct_ExponentialFogColorParameter;; Offset:   32
;       float4 FogStruct_ExponentialFogParameters3;   ; Offset:   48
;       float4 FogStruct_SkyAtmosphereAmbientContributionColorScale;; Offset:   64
;       float4 FogStruct_InscatteringLightDirection;  ; Offset:   80
;       float4 FogStruct_DirectionalInscatteringColor;; Offset:   96
;       float2 FogStruct_SinCosInscatteringColorCubemapRotation;; Offset:  112
;       float PrePadding_FogStruct_120;               ; Offset:  120
;       float PrePadding_FogStruct_124;               ; Offset:  124
;       float3 FogStruct_FogInscatteringTextureParameters;; Offset:  128
;       float FogStruct_ApplyVolumetricFog;           ; Offset:  140
;       float FogStruct_VolumetricFogStartDistance;   ; Offset:  144
;       float FogStruct_VolumetricFogNearFadeInDistanceInv;; Offset:  148
;       uint BindlessResource_FogStruct_FogInscatteringColorCubemap;; Offset:  152
;       uint PrePadding_FogStruct_156;                ; Offset:  156
;       uint BindlessSampler_FogStruct_FogInscatteringColorSampler;; Offset:  160
;       uint PrePadding_FogStruct_164;                ; Offset:  164
;       uint BindlessResource_FogStruct_IntegratedLightScattering;; Offset:  168
;       uint PrePadding_FogStruct_172;                ; Offset:  172
;       uint BindlessSampler_FogStruct_IntegratedLightScatteringSampler;; Offset:  176
;   
;   } UniformBufferConstants_FogStruct;               ; Offset:    0 Size:   180
;
; }
;
; Resource bind info for LumenCardScene_CardData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for LumenCardScene_MeshCardsData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for LumenCardScene_HeightfieldData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for VirtualVoxel_NodeDescBuffer
; {
;
;   struct struct.FPackedVirtualVoxelNodeDesc
;   {
;
;       float3 TranslatedWorldMinAABB;                ; Offset:    0
;       uint PackedPageIndexResolution;               ; Offset:   12
;       float3 TranslatedWorldMaxAABB;                ; Offset:   16
;       uint PageIndexOffset_VoxelWorldSize;          ; Offset:   28
;   
;   } $Element;                                       ; Offset:    0 Size:    32
;
; }
;
; Resource bind info for SceneDistanceFieldAssetData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for SceneObjectData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for RWCardPageHighResLastUsedBuffer
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for RWSurfaceCacheFeedbackBufferAllocator
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for RWSurfaceCacheFeedbackBuffer
; {
;
;   uint2 $Element;                                   ; Offset:    0 Size:     8
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_LumenCardScene   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_ReflectionStruct   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_VirtualVoxel   cbuffer      NA          NA     CB4            cb4     1
; UniformBufferConstants_FogStruct   cbuffer      NA          NA     CB5            cb5     1
; D3DStaticPointClampedSampler      sampler      NA          NA      S0   s1,space1000     1
; D3DStaticBilinearWrappedSampler   sampler      NA          NA      S1   s2,space1000     1
; D3DStaticBilinearClampedSampler   sampler      NA          NA      S2   s3,space1000     1
; View_DistantSkyLightLutTextureSampler   sampler      NA          NA      S3             s0     1
; ReflectionStruct_SkyLightCubemapSampler   sampler      NA          NA      S4             s1     1
; FogStruct_FogInscatteringColorSampler   sampler      NA          NA      S5             s2     1
; View_DistantSkyLightLutTexture    texture     f32          2d      T0             t0     1
; LumenCardScene_CardData           texture  struct         r/o      T1             t1     1
; LumenCardScene_MeshCardsData      texture  struct         r/o      T2             t2     1
; LumenCardScene_HeightfieldData    texture  struct         r/o      T3             t3     1
; LumenCardScene_PageTableBuffer    texture    byte         r/o      T4             t4     1
; LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer   texture    byte         r/o      T5             t5     1
; LumenCardScene_OpacityAtlas       texture     f32          2d      T6             t6     1
; LumenCardScene_DepthAtlas         texture     f32          2d      T7             t7     1
; ReflectionStruct_SkyLightCubemap   texture     f32        cube      T8             t8     1
; VirtualVoxel_PageIndexBuffer      texture     u32         buf      T9             t9     1
; VirtualVoxel_NodeDescBuffer       texture  struct         r/o     T10            t10     1
; VirtualVoxel_PageTexture          texture     u32          3d     T11            t11     1
; FogStruct_FogInscatteringColorCubemap   texture     f32        cube     T12            t12     1
; DistanceFieldIndirection2Table    texture     f32         buf     T13            t13     1
; DistanceFieldBrickTexture         texture     f32          3d     T14            t14     1
; SceneDistanceFieldAssetData       texture  struct         r/o     T15            t15     1
; SceneObjectData                   texture  struct         r/o     T16            t16     1
; FinalLightingAtlas                texture     f32          2d     T17            t17     1
; DepthAtlas                        texture     f32          2d     T18            t18     1
; NumGridCulledMeshSDFObjects       texture     u32         buf     T19            t19     1
; GridCulledMeshSDFObjectStartOffsetArray   texture     u32         buf     T20            t20     1
; GridCulledMeshSDFObjectIndicesArray   texture     u32         buf     T21            t21     1
; NumGridCulledHeightfieldObjects   texture     u32         buf     T22            t22     1
; GridCulledHeightfieldObjectStartOffsetArray   texture     u32         buf     T23            t23     1
; GridCulledHeightfieldObjectIndicesArray   texture     u32         buf     T24            t24     1
; DownsampledDepth                  texture     f32          2d     T25            t25     1
; RayBuffer                         texture     f32          2d     T26            t26     1
; RayTraceDistance                  texture     u32          2d     T27            t27     1
; CompactedTraceTexelAllocator      texture     u32         buf     T28            t28     1
; CompactedTraceTexelData           texture     u32         buf     T29            t29     1
; RWCardPageHighResLastUsedBuffer       UAV  struct         r/w      U0             u0     1
; RWSurfaceCacheFeedbackBufferAllocator       UAV  struct         r/w      U1             u1     1
; RWSurfaceCacheFeedbackBuffer          UAV  struct         r/w      U2             u2     1
; RWTraceHit                            UAV     f32          2d      U3             u3     1
; RWTraceRadiance                       UAV     f32          2d      U4             u4     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%struct.ByteAddressBuffer = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.StructuredBuffer<FPackedVirtualVoxelNodeDesc>" = type { %struct.FPackedVirtualVoxelNodeDesc }
%struct.FPackedVirtualVoxelNodeDesc = type { <3 x float>, i32, <3 x float>, i32 }
%"class.Texture3D<unsigned int>" = type { i32, %"class.Texture3D<unsigned int>::mips_type" }
%"class.Texture3D<unsigned int>::mips_type" = type { i32 }
%"class.Buffer<vector<float, 4> >" = type { <4 x float> }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<unsigned int>" = type { i32, %"class.Texture2D<unsigned int>::mips_type" }
%"class.Texture2D<unsigned int>::mips_type" = type { i32 }
%"class.Buffer<vector<unsigned int, 2> >" = type { <2 x i32> }
%"class.RWStructuredBuffer<unsigned int>" = type { i32 }
%"class.RWStructuredBuffer<vector<unsigned int, 2> >" = type { <2 x i32> }
%"class.RWTexture2D<float>" = type { float }
%"class.RWTexture2D<vector<float, 3> >" = type { <3 x float> }
%_RootShaderParameters = type { float, float, float, float, i32, i32, i32, <2 x i32>, float, i32, i32, i32, <3 x float>, <3 x float>, <3 x i32>, <3 x i32>, <3 x i32>, <3 x float>, <3 x float>, <3 x float>, <3 x float>, float, float, float, i32, <3 x float>, <3 x i32>, i32, <2 x i32>, <2 x i32>, float, float, i32, i32, i32, float, float, float, float, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_LumenCardScene = type { i32, i32, i32, i32, i32, i32, <2 x float>, <2 x float>, float, i32, float, float, float, float, <3 x float>, float, [2 x <4 x i32>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_ReflectionStruct = type { <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_VirtualVoxel = type { <3 x i32>, float, <3 x i32>, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32 }
%UniformBufferConstants_FogStruct = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @ReflectionTraceMeshSDFsCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 1 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 1 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 1 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 1 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 29, i32 29, i32 0, i8 0 }, i32 29, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 28, i32 28, i32 0, i8 0 }, i32 28, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 27, i32 27, i32 0, i8 0 }, i32 27, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 26, i32 26, i32 0, i8 0 }, i32 26, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 25, i32 25, i32 0, i8 0 }, i32 25, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 24, i32 24, i32 0, i8 0 }, i32 24, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 23, i32 23, i32 0, i8 0 }, i32 23, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 22, i32 22, i32 0, i8 0 }, i32 22, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 0 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %36 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %37 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %38 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %39 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 1000, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %40 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 1000, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %41 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 1000, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %42 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 2 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %43 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %44 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %45 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %46 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %47 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %48 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %42, %dx.types.ResourceProperties { i32 13, i32 180 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %49 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %43, %dx.types.ResourceProperties { i32 13, i32 212 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %50 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %44, %dx.types.ResourceProperties { i32 13, i32 76 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %51 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %45, %dx.types.ResourceProperties { i32 13, i32 196 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %52 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %46, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %53 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %47, %dx.types.ResourceProperties { i32 13, i32 820 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %54 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %55 = alloca [6 x i32], align 4
  %56 = alloca [6 x i32], align 4
  %57 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %58 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %57, i32 0, i32 undef)  ; BufferLoad(srv,index,wot)
  %59 = extractvalue %dx.types.ResRet.i32 %58, 0
  %60 = icmp ult i32 %54, %59
  br i1 %60, label %61, label %3545

; <label>:61                                      ; preds = %0
  %62 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 10, i32 517 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<2xU32>
  %63 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %62, i32 %54, i32 undef)  ; BufferLoad(srv,index,wot)
  %64 = extractvalue %dx.types.ResRet.i32 %63, 0
  %65 = extractvalue %dx.types.ResRet.i32 %63, 1
  %66 = and i32 %64, 65535
  %67 = lshr i32 %64, 16
  %68 = call float @dx.op.legacyF16ToF32(i32 131, i32 %65)  ; LegacyF16ToF32(value)
  %69 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %53, i32 40)  ; CBufferLoadLegacy(handle,regIndex)
  %70 = extractvalue %dx.types.CBufRet.i32 %69, 0
  %71 = mul i32 %70, %66
  %72 = mul i32 %70, %67
  %73 = uitofp i32 %71 to float
  %74 = uitofp i32 %72 to float
  %75 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %76 = extractvalue %dx.types.CBufRet.f32 %75, 0
  %77 = extractvalue %dx.types.CBufRet.f32 %75, 1
  %78 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %52, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %79 = extractvalue %dx.types.CBufRet.i32 %78, 0
  %80 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %53, i32 42)  ; CBufferLoadLegacy(handle,regIndex)
  %81 = extractvalue %dx.types.CBufRet.i32 %80, 1
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %96, label %83

; <label>:83                                      ; preds = %61
  %84 = uitofp i32 %79 to float
  %85 = fmul fast float %84, 1.250000e-01
  %86 = call float @dx.op.unary.f32(i32 22, float %85)  ; Frc(value)
  %87 = call i32 @dx.op.unary.i32(i32 30, i32 %79)  ; Bfrev(value)
  %88 = lshr i32 %87, 16
  %89 = uitofp i32 %88 to float
  %90 = fmul fast float %89, 0x3EF0000000000000
  %91 = uitofp i32 %70 to float
  %92 = fmul fast float %91, %86
  %93 = fmul fast float %90, %91
  %94 = call float @dx.op.unary.f32(i32 27, float %92)  ; Round_ni(value)
  %95 = call float @dx.op.unary.f32(i32 27, float %93)  ; Round_ni(value)
  br label %96

; <label>:96                                      ; preds = %83, %61
  %97 = phi float [ %94, %83 ], [ 0.000000e+00, %61 ]
  %98 = phi float [ %95, %83 ], [ 0.000000e+00, %61 ]
  %99 = fadd fast float %76, 5.000000e-01
  %100 = fadd fast float %99, %73
  %101 = fadd fast float %100, %97
  %102 = fadd fast float %77, 5.000000e-01
  %103 = fadd fast float %102, %74
  %104 = fadd fast float %103, %98
  %105 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 129)  ; CBufferLoadLegacy(handle,regIndex)
  %106 = extractvalue %dx.types.CBufRet.f32 %105, 0
  %107 = extractvalue %dx.types.CBufRet.f32 %105, 1
  %108 = fadd fast float %76, -1.000000e+00
  %109 = fadd fast float %108, %106
  %110 = fadd fast float %77, -1.000000e+00
  %111 = fadd fast float %110, %107
  %112 = call float @dx.op.binary.f32(i32 36, float %101, float %109)  ; FMin(a,b)
  %113 = call float @dx.op.binary.f32(i32 36, float %104, float %111)  ; FMin(a,b)
  %114 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %115 = extractvalue %dx.types.CBufRet.f32 %114, 2
  %116 = extractvalue %dx.types.CBufRet.f32 %114, 3
  %117 = fmul fast float %115, %112
  %118 = fmul fast float %116, %113
  %119 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %120 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %119, i32 0, i32 %66, i32 %67, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %121 = extractvalue %dx.types.ResRet.f32 %120, 0
  %122 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %123 = extractvalue %dx.types.CBufRet.f32 %122, 2
  %124 = extractvalue %dx.types.CBufRet.f32 %122, 3
  %125 = fsub fast float %117, %124
  %126 = fsub fast float %118, %123
  %127 = extractvalue %dx.types.CBufRet.f32 %122, 0
  %128 = extractvalue %dx.types.CBufRet.f32 %122, 1
  %129 = fdiv fast float %125, %127
  %130 = fdiv fast float %126, %128
  %131 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %132 = extractvalue %dx.types.CBufRet.f32 %131, 0
  %133 = extractvalue %dx.types.CBufRet.f32 %131, 1
  %134 = extractvalue %dx.types.CBufRet.f32 %131, 2
  %135 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %136 = extractvalue %dx.types.CBufRet.f32 %135, 0
  %137 = extractvalue %dx.types.CBufRet.f32 %135, 1
  %138 = extractvalue %dx.types.CBufRet.f32 %135, 2
  %139 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %140 = extractvalue %dx.types.CBufRet.f32 %139, 0
  %141 = extractvalue %dx.types.CBufRet.f32 %139, 1
  %142 = extractvalue %dx.types.CBufRet.f32 %139, 2
  %143 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %144 = extractvalue %dx.types.CBufRet.f32 %143, 0
  %145 = extractvalue %dx.types.CBufRet.f32 %143, 1
  %146 = extractvalue %dx.types.CBufRet.f32 %143, 2
  %147 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 65)  ; CBufferLoadLegacy(handle,regIndex)
  %148 = extractvalue %dx.types.CBufRet.f32 %147, 0
  %149 = extractvalue %dx.types.CBufRet.f32 %147, 1
  %150 = extractvalue %dx.types.CBufRet.f32 %147, 2
  %151 = fmul fast float %148, 2.097152e+06
  %152 = fmul fast float %149, 2.097152e+06
  %153 = fmul fast float %150, 2.097152e+06
  %154 = fadd fast float %151, %144
  %155 = fadd fast float %152, %145
  %156 = fadd fast float %153, %146
  %157 = fmul fast float %129, %121
  %158 = fmul fast float %130, %121
  %159 = fmul fast float %132, %157
  %160 = call float @dx.op.tertiary.f32(i32 46, float %158, float %136, float %159)  ; FMad(a,b,c)
  %161 = call float @dx.op.tertiary.f32(i32 46, float %121, float %140, float %160)  ; FMad(a,b,c)
  %162 = fadd fast float %154, %161
  %163 = fmul fast float %133, %157
  %164 = call float @dx.op.tertiary.f32(i32 46, float %158, float %137, float %163)  ; FMad(a,b,c)
  %165 = call float @dx.op.tertiary.f32(i32 46, float %121, float %141, float %164)  ; FMad(a,b,c)
  %166 = fadd fast float %155, %165
  %167 = fmul fast float %134, %157
  %168 = call float @dx.op.tertiary.f32(i32 46, float %158, float %138, float %167)  ; FMad(a,b,c)
  %169 = call float @dx.op.tertiary.f32(i32 46, float %121, float %142, float %168)  ; FMad(a,b,c)
  %170 = fadd fast float %156, %169
  %171 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 56)  ; CBufferLoadLegacy(handle,regIndex)
  %172 = extractvalue %dx.types.CBufRet.f32 %171, 0
  %173 = extractvalue %dx.types.CBufRet.f32 %171, 1
  %174 = extractvalue %dx.types.CBufRet.f32 %171, 2
  %175 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 57)  ; CBufferLoadLegacy(handle,regIndex)
  %176 = extractvalue %dx.types.CBufRet.f32 %175, 0
  %177 = extractvalue %dx.types.CBufRet.f32 %175, 1
  %178 = extractvalue %dx.types.CBufRet.f32 %175, 2
  %179 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 58)  ; CBufferLoadLegacy(handle,regIndex)
  %180 = extractvalue %dx.types.CBufRet.f32 %179, 0
  %181 = extractvalue %dx.types.CBufRet.f32 %179, 1
  %182 = extractvalue %dx.types.CBufRet.f32 %179, 2
  %183 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 59)  ; CBufferLoadLegacy(handle,regIndex)
  %184 = extractvalue %dx.types.CBufRet.f32 %183, 0
  %185 = extractvalue %dx.types.CBufRet.f32 %183, 1
  %186 = extractvalue %dx.types.CBufRet.f32 %183, 2
  %187 = fmul fast float %172, %157
  %188 = call float @dx.op.tertiary.f32(i32 46, float %158, float %176, float %187)  ; FMad(a,b,c)
  %189 = call float @dx.op.tertiary.f32(i32 46, float %121, float %180, float %188)  ; FMad(a,b,c)
  %190 = fadd fast float %189, %184
  %191 = fmul fast float %173, %157
  %192 = call float @dx.op.tertiary.f32(i32 46, float %158, float %177, float %191)  ; FMad(a,b,c)
  %193 = call float @dx.op.tertiary.f32(i32 46, float %121, float %181, float %192)  ; FMad(a,b,c)
  %194 = fadd fast float %193, %185
  %195 = fmul fast float %174, %157
  %196 = call float @dx.op.tertiary.f32(i32 46, float %158, float %178, float %195)  ; FMad(a,b,c)
  %197 = call float @dx.op.tertiary.f32(i32 46, float %121, float %182, float %196)  ; FMad(a,b,c)
  %198 = fadd fast float %197, %186
  %199 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %200 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %199, i32 0, i32 %66, i32 %67, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %201 = extractvalue %dx.types.ResRet.f32 %200, 0
  %202 = extractvalue %dx.types.ResRet.f32 %200, 1
  %203 = extractvalue %dx.types.ResRet.f32 %200, 2
  %204 = extractvalue %dx.types.ResRet.f32 %200, 3
  %205 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %206 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %205, i32 0, i32 %66, i32 %67, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %207 = extractvalue %dx.types.ResRet.i32 %206, 0
  %208 = and i32 %207, 32767
  %209 = call float @dx.op.legacyF16ToF32(i32 131, i32 %208)  ; LegacyF16ToF32(value)
  %210 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %211 = extractvalue %dx.types.CBufRet.f32 %210, 0
  %212 = fmul fast float %211, %201
  %213 = fmul fast float %211, %202
  %214 = fmul fast float %211, %203
  %215 = fadd fast float %212, %162
  %216 = fadd fast float %213, %166
  %217 = fadd fast float %214, %170
  %218 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 237)  ; CBufferLoadLegacy(handle,regIndex)
  %219 = extractvalue %dx.types.CBufRet.f32 %218, 0
  %220 = fadd fast float %219, %204
  %221 = fsub fast float %68, %211
  %222 = call float @dx.op.binary.f32(i32 35, float %221, float 0.000000e+00)  ; FMax(a,b)
  %223 = call float @dx.op.unary.f32(i32 14, float %220)  ; Tan(value)
  %224 = extractvalue %dx.types.CBufRet.i32 %80, 2
  %225 = icmp ne i32 %224, 0
  %226 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %227 = extractvalue %dx.types.CBufRet.f32 %226, 3
  %228 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %229 = extractvalue %dx.types.CBufRet.f32 %228, 0
  %230 = fmul fast float %229, %121
  %231 = extractvalue %dx.types.CBufRet.f32 %228, 1
  %232 = fadd fast float %230, %231
  %233 = call float @dx.op.unary.f32(i32 23, float %232)  ; Log(value)
  %234 = extractvalue %dx.types.CBufRet.f32 %228, 2
  %235 = fmul fast float %234, %233
  %236 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %235)  ; FMax(a,b)
  %237 = fptoui float %236 to i32
  %238 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %53, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %239 = extractvalue %dx.types.CBufRet.i32 %238, 2
  %240 = add i32 %239, -1
  %241 = call i32 @dx.op.binary.i32(i32 40, i32 %237, i32 %240)  ; UMin(a,b)
  %242 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %53, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %243 = extractvalue %dx.types.CBufRet.i32 %242, 2
  %244 = and i32 %243, 31
  %245 = lshr i32 %71, %244
  %246 = lshr i32 %72, %244
  %247 = extractvalue %dx.types.CBufRet.i32 %238, 1
  %248 = mul i32 %247, %241
  %249 = add i32 %248, %246
  %250 = extractvalue %dx.types.CBufRet.i32 %238, 0
  %251 = mul i32 %249, %250
  %252 = add i32 %251, %245
  %253 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %254 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %253, i32 %252, i32 undef)  ; BufferLoad(srv,index,wot)
  %255 = extractvalue %dx.types.ResRet.i32 %254, 0
  %256 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %257 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %256, i32 %252, i32 undef)  ; BufferLoad(srv,index,wot)
  %258 = extractvalue %dx.types.ResRet.i32 %257, 0
  %259 = fcmp fast ogt float %227, %222
  br i1 %259, label %260, label %1549

; <label>:260                                     ; preds = %96
  %261 = icmp eq i32 %255, 0
  br i1 %261, label %549, label %262

; <label>:262                                     ; preds = %260
  br label %263

; <label>:263                                     ; preds = %543, %262
  %264 = phi i32 [ %546, %543 ], [ 0, %262 ]
  %265 = phi i32 [ %544, %543 ], [ 0, %262 ]
  %266 = phi float [ %545, %543 ], [ %227, %262 ]
  %267 = add i32 %264, %258
  %268 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %269 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %268, i32 %267, i32 undef)  ; BufferLoad(srv,index,wot)
  %270 = extractvalue %dx.types.ResRet.i32 %269, 0
  %271 = mul i32 %270, 10
  %272 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %273 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %272, i32 %271, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %274 = extractvalue %dx.types.ResRet.f32 %273, 0
  %275 = extractvalue %dx.types.ResRet.f32 %273, 1
  %276 = extractvalue %dx.types.ResRet.f32 %273, 2
  %277 = or i32 %271, 1
  %278 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %272, i32 %277, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %279 = extractvalue %dx.types.ResRet.f32 %278, 0
  %280 = extractvalue %dx.types.ResRet.f32 %278, 1
  %281 = extractvalue %dx.types.ResRet.f32 %278, 2
  %282 = extractvalue %dx.types.ResRet.f32 %278, 3
  %283 = add i32 %271, 2
  %284 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %272, i32 %283, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %285 = extractvalue %dx.types.ResRet.f32 %284, 0
  %286 = extractvalue %dx.types.ResRet.f32 %284, 1
  %287 = extractvalue %dx.types.ResRet.f32 %284, 2
  %288 = extractvalue %dx.types.ResRet.f32 %284, 3
  %289 = add i32 %271, 3
  %290 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %272, i32 %289, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %291 = extractvalue %dx.types.ResRet.f32 %290, 0
  %292 = extractvalue %dx.types.ResRet.f32 %290, 1
  %293 = extractvalue %dx.types.ResRet.f32 %290, 2
  %294 = extractvalue %dx.types.ResRet.f32 %290, 3
  %295 = add i32 %271, 4
  %296 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %272, i32 %295, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %297 = extractvalue %dx.types.ResRet.f32 %296, 0
  %298 = extractvalue %dx.types.ResRet.f32 %296, 1
  %299 = extractvalue %dx.types.ResRet.f32 %296, 2
  %300 = extractvalue %dx.types.ResRet.f32 %296, 3
  %301 = call float @dx.op.unary.f32(i32 6, float %300)  ; FAbs(value)
  %302 = add i32 %271, 9
  %303 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %272, i32 %302, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %304 = extractvalue %dx.types.ResRet.f32 %303, 0
  %305 = extractvalue %dx.types.ResRet.f32 %303, 1
  %306 = extractvalue %dx.types.ResRet.f32 %303, 2
  %307 = fmul fast float %274, -2.097152e+06
  %308 = fmul fast float %275, -2.097152e+06
  %309 = fmul fast float %276, -2.097152e+06
  %310 = fmul fast float %279, %307
  %311 = call float @dx.op.tertiary.f32(i32 46, float %308, float %280, float %310)  ; FMad(a,b,c)
  %312 = call float @dx.op.tertiary.f32(i32 46, float %309, float %281, float %311)  ; FMad(a,b,c)
  %313 = fadd fast float %312, %282
  %314 = fmul fast float %285, %307
  %315 = call float @dx.op.tertiary.f32(i32 46, float %308, float %286, float %314)  ; FMad(a,b,c)
  %316 = call float @dx.op.tertiary.f32(i32 46, float %309, float %287, float %315)  ; FMad(a,b,c)
  %317 = fadd fast float %316, %288
  %318 = fmul fast float %291, %307
  %319 = call float @dx.op.tertiary.f32(i32 46, float %308, float %292, float %318)  ; FMad(a,b,c)
  %320 = call float @dx.op.tertiary.f32(i32 46, float %309, float %293, float %319)  ; FMad(a,b,c)
  %321 = fadd fast float %320, %294
  %322 = fadd fast float %301, %266
  %323 = call float @dx.op.binary.f32(i32 36, float %227, float %322)  ; FMin(a,b)
  %324 = fmul fast float %323, %201
  %325 = fmul fast float %323, %202
  %326 = fmul fast float %323, %203
  %327 = fadd fast float %324, %215
  %328 = fadd fast float %325, %216
  %329 = fadd fast float %326, %217
  %330 = fmul fast float %279, %215
  %331 = call float @dx.op.tertiary.f32(i32 46, float %216, float %280, float %330)  ; FMad(a,b,c)
  %332 = call float @dx.op.tertiary.f32(i32 46, float %217, float %281, float %331)  ; FMad(a,b,c)
  %333 = fadd fast float %313, %332
  %334 = fmul fast float %285, %215
  %335 = call float @dx.op.tertiary.f32(i32 46, float %216, float %286, float %334)  ; FMad(a,b,c)
  %336 = call float @dx.op.tertiary.f32(i32 46, float %217, float %287, float %335)  ; FMad(a,b,c)
  %337 = fadd fast float %317, %336
  %338 = fmul fast float %291, %215
  %339 = call float @dx.op.tertiary.f32(i32 46, float %216, float %292, float %338)  ; FMad(a,b,c)
  %340 = call float @dx.op.tertiary.f32(i32 46, float %217, float %293, float %339)  ; FMad(a,b,c)
  %341 = fadd fast float %321, %340
  %342 = fmul fast float %327, %279
  %343 = call float @dx.op.tertiary.f32(i32 46, float %328, float %280, float %342)  ; FMad(a,b,c)
  %344 = call float @dx.op.tertiary.f32(i32 46, float %329, float %281, float %343)  ; FMad(a,b,c)
  %345 = fmul fast float %327, %285
  %346 = call float @dx.op.tertiary.f32(i32 46, float %328, float %286, float %345)  ; FMad(a,b,c)
  %347 = call float @dx.op.tertiary.f32(i32 46, float %329, float %287, float %346)  ; FMad(a,b,c)
  %348 = fmul fast float %327, %291
  %349 = call float @dx.op.tertiary.f32(i32 46, float %328, float %292, float %348)  ; FMad(a,b,c)
  %350 = call float @dx.op.tertiary.f32(i32 46, float %329, float %293, float %349)  ; FMad(a,b,c)
  %351 = fsub fast float %344, %332
  %352 = fsub fast float %347, %336
  %353 = fsub fast float %350, %340
  %354 = fmul fast float %351, %351
  %355 = fmul fast float %352, %352
  %356 = fadd fast float %355, %354
  %357 = fmul fast float %353, %353
  %358 = fadd fast float %356, %357
  %359 = call float @dx.op.unary.f32(i32 24, float %358)  ; Sqrt(value)
  %360 = fdiv fast float %222, %323
  %361 = fmul fast float %360, %359
  %362 = fdiv fast float %351, %359
  %363 = fdiv fast float %352, %359
  %364 = fdiv fast float %353, %359
  %365 = fsub fast float -0.000000e+00, %297
  %366 = fsub fast float -0.000000e+00, %298
  %367 = fsub fast float -0.000000e+00, %299
  %368 = fdiv fast float 1.000000e+00, %351
  %369 = fdiv fast float 1.000000e+00, %352
  %370 = fdiv fast float 1.000000e+00, %353
  %371 = fsub fast float %365, %333
  %372 = fsub fast float %366, %337
  %373 = fsub fast float %367, %341
  %374 = fmul fast float %368, %371
  %375 = fmul fast float %369, %372
  %376 = fmul fast float %370, %373
  %377 = fsub fast float %297, %333
  %378 = fsub fast float %298, %337
  %379 = fsub fast float %299, %341
  %380 = fmul fast float %368, %377
  %381 = fmul fast float %369, %378
  %382 = fmul fast float %370, %379
  %383 = call float @dx.op.binary.f32(i32 36, float %374, float %380)  ; FMin(a,b)
  %384 = call float @dx.op.binary.f32(i32 36, float %375, float %381)  ; FMin(a,b)
  %385 = call float @dx.op.binary.f32(i32 36, float %376, float %382)  ; FMin(a,b)
  %386 = call float @dx.op.binary.f32(i32 35, float %374, float %380)  ; FMax(a,b)
  %387 = call float @dx.op.binary.f32(i32 35, float %375, float %381)  ; FMax(a,b)
  %388 = call float @dx.op.binary.f32(i32 35, float %376, float %382)  ; FMax(a,b)
  %389 = call float @dx.op.binary.f32(i32 35, float %384, float %385)  ; FMax(a,b)
  %390 = call float @dx.op.binary.f32(i32 35, float %383, float %389)  ; FMax(a,b)
  %391 = call float @dx.op.binary.f32(i32 36, float %387, float %388)  ; FMin(a,b)
  %392 = call float @dx.op.binary.f32(i32 36, float %386, float %391)  ; FMin(a,b)
  %393 = call float @dx.op.unary.f32(i32 7, float %390)  ; Saturate(value)
  %394 = call float @dx.op.unary.f32(i32 7, float %392)  ; Saturate(value)
  %395 = fmul fast float %393, %359
  %396 = fmul fast float %394, %359
  %397 = call float @dx.op.binary.f32(i32 35, float %395, float %361)  ; FMax(a,b)
  %398 = fcmp fast olt float %397, %396
  br i1 %398, label %399, label %543, !dx.controlflow.hints !66

; <label>:399                                     ; preds = %263
  %400 = extractvalue %dx.types.ResRet.f32 %303, 3
  %401 = bitcast float %400 to i32
  %402 = mul i32 %401, 9
  %403 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %404 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %403, i32 %402, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %405 = extractvalue %dx.types.ResRet.f32 %404, 0
  %406 = bitcast float %405 to i32
  %407 = lshr i32 %406, 30
  %408 = mul nuw nsw i32 %407, 3
  %409 = add i32 %402, -3
  %410 = add i32 %409, %408
  %411 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %403, i32 %410, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %412 = extractvalue %dx.types.ResRet.f32 %411, 0
  %413 = extractvalue %dx.types.ResRet.f32 %411, 1
  %414 = bitcast float %412 to i32
  %415 = bitcast float %413 to i32
  %416 = add i32 %410, 1
  %417 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %403, i32 %416, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %418 = extractvalue %dx.types.ResRet.f32 %417, 0
  %419 = extractvalue %dx.types.ResRet.f32 %417, 1
  %420 = extractvalue %dx.types.ResRet.f32 %417, 2
  %421 = extractvalue %dx.types.ResRet.f32 %417, 3
  %422 = add i32 %410, 2
  %423 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %403, i32 %422, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %424 = extractvalue %dx.types.ResRet.f32 %423, 0
  %425 = extractvalue %dx.types.ResRet.f32 %423, 1
  %426 = extractvalue %dx.types.ResRet.f32 %423, 2
  %427 = extractvalue %dx.types.ResRet.f32 %423, 3
  %428 = and i32 %414, 1023
  %429 = lshr i32 %414, 10
  %430 = and i32 %429, 1023
  br label %431

; <label>:431                                     ; preds = %517, %399
  %432 = phi float [ %397, %399 ], [ %514, %517 ]
  %433 = phi i32 [ 0, %399 ], [ %518, %517 ]
  %434 = phi float [ 0.000000e+00, %399 ], [ %501, %517 ]
  %435 = fmul fast float %432, %362
  %436 = fmul fast float %432, %363
  %437 = fmul fast float %432, %364
  %438 = fadd fast float %435, %333
  %439 = fadd fast float %436, %337
  %440 = fadd fast float %437, %341
  %441 = fmul fast float %438, %418
  %442 = fmul fast float %439, %419
  %443 = fmul fast float %440, %420
  %444 = fadd fast float %441, %424
  %445 = fadd fast float %442, %425
  %446 = fadd fast float %443, %426
  %447 = fptosi float %444 to i32
  %448 = fptosi float %445 to i32
  %449 = fptosi float %446 to i32
  %450 = mul i32 %449, %430
  %451 = add i32 %450, %448
  %452 = mul i32 %451, %428
  %453 = add i32 %447, %415
  %454 = add i32 %453, %452
  %455 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 10, i32 1033 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<4xF32>
  %456 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %455, i32 %454, i32 undef)  ; BufferLoad(srv,index,wot)
  %457 = extractvalue %dx.types.ResRet.f32 %456, 3
  %458 = fcmp fast ogt float %457, 0.000000e+00
  br i1 %458, label %459, label %498

; <label>:459                                     ; preds = %431
  %460 = extractvalue %dx.types.ResRet.f32 %456, 2
  %461 = extractvalue %dx.types.ResRet.f32 %456, 1
  %462 = extractvalue %dx.types.ResRet.f32 %456, 0
  %463 = sitofp i32 %447 to float
  %464 = sitofp i32 %448 to float
  %465 = sitofp i32 %449 to float
  %466 = fsub fast float %444, %463
  %467 = fsub fast float %445, %464
  %468 = fsub fast float %446, %465
  %469 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %470 = extractvalue %dx.types.CBufRet.f32 %469, 0
  %471 = extractvalue %dx.types.CBufRet.f32 %469, 1
  %472 = extractvalue %dx.types.CBufRet.f32 %469, 2
  %473 = fmul fast float %470, %462
  %474 = fmul fast float %471, %461
  %475 = fmul fast float %472, %460
  %476 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %477 = extractvalue %dx.types.CBufRet.f32 %476, 0
  %478 = extractvalue %dx.types.CBufRet.f32 %476, 1
  %479 = extractvalue %dx.types.CBufRet.f32 %476, 2
  %480 = fmul fast float %477, %466
  %481 = fmul fast float %478, %467
  %482 = fmul fast float %479, %468
  %483 = fadd fast float %480, %473
  %484 = fadd fast float %481, %474
  %485 = fadd fast float %482, %475
  %486 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %487 = extractvalue %dx.types.CBufRet.f32 %486, 0
  %488 = extractvalue %dx.types.CBufRet.f32 %486, 1
  %489 = extractvalue %dx.types.CBufRet.f32 %486, 2
  %490 = fadd fast float %483, %487
  %491 = fadd fast float %484, %488
  %492 = fadd fast float %485, %489
  %493 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %494 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %40, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %495 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %493, %dx.types.Handle %494, float %490, float %491, float %492, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %496 = extractvalue %dx.types.ResRet.f32 %495, 0
  %497 = fmul fast float %496, %421
  br label %498

; <label>:498                                     ; preds = %459, %431
  %499 = phi float [ %497, %459 ], [ %421, %431 ]
  %500 = fadd float %427, %499
  %501 = call float @dx.op.binary.f32(i32 35, float %500, float %434)  ; FMax(a,b)
  %502 = fmul fast float %301, 2.000000e+00
  %503 = fdiv fast float %501, %502
  %504 = call float @dx.op.unary.f32(i32 7, float %503)  ; Saturate(value)
  %505 = fmul fast float %504, %301
  %506 = fcmp fast olt float %500, %505
  br i1 %506, label %507, label %512

; <label>:507                                     ; preds = %498
  %508 = fadd fast float %500, %432
  %509 = fsub fast float %508, %505
  %510 = call float @dx.op.binary.f32(i32 35, float %509, float %397)  ; FMax(a,b)
  %511 = call float @dx.op.binary.f32(i32 36, float %510, float %396)  ; FMin(a,b)
  br label %522

; <label>:512                                     ; preds = %498
  %513 = call float @dx.op.binary.f32(i32 35, float %500, float 9.765625e-04)  ; FMax(a,b)
  %514 = fadd fast float %513, %432
  %515 = fadd fast float %505, %396
  %516 = fcmp fast ogt float %514, %515
  br i1 %516, label %520, label %517

; <label>:517                                     ; preds = %512
  %518 = add nuw nsw i32 %433, 1
  %519 = icmp ult i32 %518, 64
  br i1 %519, label %431, label %520, !llvm.loop !67

; <label>:520                                     ; preds = %517, %512
  %521 = phi i32 [ %518, %517 ], [ %433, %512 ]
  br label %522

; <label>:522                                     ; preds = %520, %507
  %523 = phi float [ %511, %507 ], [ %514, %520 ]
  %524 = phi i32 [ %433, %507 ], [ %521, %520 ]
  %525 = phi i1 [ true, %507 ], [ false, %520 ]
  %526 = icmp eq i32 %524, 64
  %527 = or i1 %526, %525
  br i1 %527, label %528, label %543

; <label>:528                                     ; preds = %522
  %529 = fmul fast float %362, %304
  %530 = fmul fast float %529, %523
  %531 = fmul fast float %363, %305
  %532 = fmul fast float %531, %523
  %533 = fmul fast float %364, %306
  %534 = fmul fast float %533, %523
  %535 = fmul fast float %530, %530
  %536 = fmul fast float %532, %532
  %537 = fadd fast float %535, %536
  %538 = fmul fast float %534, %534
  %539 = fadd fast float %537, %538
  %540 = call float @dx.op.unary.f32(i32 24, float %539)  ; Sqrt(value)
  %541 = fcmp fast olt float %540, %266
  br i1 %541, label %542, label %543

; <label>:542                                     ; preds = %528
  br label %543

; <label>:543                                     ; preds = %542, %528, %522, %263
  %544 = phi i32 [ %270, %542 ], [ %265, %528 ], [ %265, %522 ], [ %265, %263 ]
  %545 = phi float [ %540, %542 ], [ %266, %528 ], [ %266, %522 ], [ %266, %263 ]
  %546 = add nuw i32 %264, 1
  %547 = icmp eq i32 %546, %255
  br i1 %547, label %548, label %263

; <label>:548                                     ; preds = %543
  br label %549

; <label>:549                                     ; preds = %548, %260
  %550 = phi i32 [ 0, %260 ], [ %544, %548 ]
  %551 = phi float [ %227, %260 ], [ %545, %548 ]
  %552 = fcmp fast olt float %551, %227
  br i1 %552, label %553, label %1549

; <label>:553                                     ; preds = %549
  %554 = mul i32 %550, 10
  %555 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %556 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %555, i32 %554, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %557 = extractvalue %dx.types.ResRet.f32 %556, 0
  %558 = extractvalue %dx.types.ResRet.f32 %556, 1
  %559 = extractvalue %dx.types.ResRet.f32 %556, 2
  %560 = or i32 %554, 1
  %561 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %555, i32 %560, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %562 = extractvalue %dx.types.ResRet.f32 %561, 0
  %563 = extractvalue %dx.types.ResRet.f32 %561, 1
  %564 = extractvalue %dx.types.ResRet.f32 %561, 2
  %565 = extractvalue %dx.types.ResRet.f32 %561, 3
  %566 = add i32 %554, 2
  %567 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %555, i32 %566, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %568 = extractvalue %dx.types.ResRet.f32 %567, 0
  %569 = extractvalue %dx.types.ResRet.f32 %567, 1
  %570 = extractvalue %dx.types.ResRet.f32 %567, 2
  %571 = extractvalue %dx.types.ResRet.f32 %567, 3
  %572 = add i32 %554, 3
  %573 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %555, i32 %572, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %574 = extractvalue %dx.types.ResRet.f32 %573, 0
  %575 = extractvalue %dx.types.ResRet.f32 %573, 1
  %576 = extractvalue %dx.types.ResRet.f32 %573, 2
  %577 = extractvalue %dx.types.ResRet.f32 %573, 3
  %578 = add i32 %554, 4
  %579 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %555, i32 %578, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %580 = extractvalue %dx.types.ResRet.f32 %579, 0
  %581 = extractvalue %dx.types.ResRet.f32 %579, 1
  %582 = extractvalue %dx.types.ResRet.f32 %579, 2
  %583 = add i32 %554, 5
  %584 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %555, i32 %583, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %585 = extractvalue %dx.types.ResRet.f32 %584, 3
  %586 = bitcast float %585 to i32
  %587 = add i32 %554, 9
  %588 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %555, i32 %587, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %589 = extractvalue %dx.types.ResRet.f32 %588, 3
  %590 = bitcast float %589 to i32
  %591 = fmul fast float %557, -2.097152e+06
  %592 = fmul fast float %558, -2.097152e+06
  %593 = fmul fast float %559, -2.097152e+06
  %594 = fmul fast float %562, %591
  %595 = call float @dx.op.tertiary.f32(i32 46, float %592, float %563, float %594)  ; FMad(a,b,c)
  %596 = call float @dx.op.tertiary.f32(i32 46, float %593, float %564, float %595)  ; FMad(a,b,c)
  %597 = fadd fast float %596, %565
  %598 = fmul fast float %568, %591
  %599 = call float @dx.op.tertiary.f32(i32 46, float %592, float %569, float %598)  ; FMad(a,b,c)
  %600 = call float @dx.op.tertiary.f32(i32 46, float %593, float %570, float %599)  ; FMad(a,b,c)
  %601 = fadd fast float %600, %571
  %602 = fmul fast float %574, %591
  %603 = call float @dx.op.tertiary.f32(i32 46, float %592, float %575, float %602)  ; FMad(a,b,c)
  %604 = call float @dx.op.tertiary.f32(i32 46, float %593, float %576, float %603)  ; FMad(a,b,c)
  %605 = fadd fast float %604, %577
  %606 = fmul fast float %551, %201
  %607 = fmul fast float %551, %202
  %608 = fmul fast float %551, %203
  %609 = fadd fast float %606, %215
  %610 = fadd fast float %607, %216
  %611 = fadd fast float %608, %217
  %612 = fmul fast float %562, %609
  %613 = call float @dx.op.tertiary.f32(i32 46, float %610, float %563, float %612)  ; FMad(a,b,c)
  %614 = call float @dx.op.tertiary.f32(i32 46, float %611, float %564, float %613)  ; FMad(a,b,c)
  %615 = fadd fast float %597, %614
  %616 = fmul fast float %568, %609
  %617 = call float @dx.op.tertiary.f32(i32 46, float %610, float %569, float %616)  ; FMad(a,b,c)
  %618 = call float @dx.op.tertiary.f32(i32 46, float %611, float %570, float %617)  ; FMad(a,b,c)
  %619 = fadd fast float %601, %618
  %620 = fmul fast float %574, %609
  %621 = call float @dx.op.tertiary.f32(i32 46, float %610, float %575, float %620)  ; FMad(a,b,c)
  %622 = call float @dx.op.tertiary.f32(i32 46, float %611, float %576, float %621)  ; FMad(a,b,c)
  %623 = fadd fast float %605, %622
  %624 = fsub fast float -0.000000e+00, %580
  %625 = fsub fast float -0.000000e+00, %581
  %626 = fsub fast float -0.000000e+00, %582
  %627 = call float @dx.op.binary.f32(i32 35, float %615, float %624)  ; FMax(a,b)
  %628 = call float @dx.op.binary.f32(i32 35, float %619, float %625)  ; FMax(a,b)
  %629 = call float @dx.op.binary.f32(i32 35, float %623, float %626)  ; FMax(a,b)
  %630 = call float @dx.op.binary.f32(i32 36, float %627, float %580)  ; FMin(a,b)
  %631 = call float @dx.op.binary.f32(i32 36, float %628, float %581)  ; FMin(a,b)
  %632 = call float @dx.op.binary.f32(i32 36, float %629, float %582)  ; FMin(a,b)
  %633 = mul i32 %590, 9
  %634 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %635 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %634, i32 %633, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %636 = extractvalue %dx.types.ResRet.f32 %635, 0
  %637 = bitcast float %636 to i32
  %638 = lshr i32 %637, 30
  %639 = mul nuw nsw i32 %638, 3
  %640 = add i32 %633, -3
  %641 = add i32 %640, %639
  %642 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %634, i32 %641, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %643 = extractvalue %dx.types.ResRet.f32 %642, 0
  %644 = extractvalue %dx.types.ResRet.f32 %642, 1
  %645 = bitcast float %643 to i32
  %646 = bitcast float %644 to i32
  %647 = add i32 %641, 1
  %648 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %634, i32 %647, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %649 = extractvalue %dx.types.ResRet.f32 %648, 0
  %650 = extractvalue %dx.types.ResRet.f32 %648, 1
  %651 = extractvalue %dx.types.ResRet.f32 %648, 2
  %652 = extractvalue %dx.types.ResRet.f32 %648, 3
  %653 = add i32 %641, 2
  %654 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %634, i32 %653, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %655 = extractvalue %dx.types.ResRet.f32 %654, 0
  %656 = extractvalue %dx.types.ResRet.f32 %654, 1
  %657 = extractvalue %dx.types.ResRet.f32 %654, 2
  %658 = and i32 %645, 1023
  %659 = lshr i32 %645, 10
  %660 = and i32 %659, 1023
  %661 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %662 = extractvalue %dx.types.CBufRet.f32 %661, 0
  %663 = extractvalue %dx.types.CBufRet.f32 %661, 1
  %664 = extractvalue %dx.types.CBufRet.f32 %661, 2
  %665 = fmul fast float %662, %649
  %666 = fmul fast float %663, %650
  %667 = fmul fast float %664, %651
  %668 = fdiv fast float 5.000000e-01, %665
  %669 = fdiv fast float 5.000000e-01, %666
  %670 = fdiv fast float 5.000000e-01, %667
  %671 = fadd fast float %668, %630
  %672 = fmul fast float %671, %649
  %673 = fmul fast float %650, %631
  %674 = fmul fast float %651, %632
  %675 = fadd fast float %672, %655
  %676 = fadd fast float %656, %673
  %677 = fadd fast float %657, %674
  %678 = fptosi float %675 to i32
  %679 = fptosi float %676 to i32
  %680 = fptosi float %677 to i32
  %681 = mul i32 %680, %660
  %682 = add i32 %681, %679
  %683 = mul i32 %682, %658
  %684 = add i32 %678, %646
  %685 = add i32 %684, %683
  %686 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 10, i32 1033 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<4xF32>
  %687 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %686, i32 %685, i32 undef)  ; BufferLoad(srv,index,wot)
  %688 = extractvalue %dx.types.ResRet.f32 %687, 3
  %689 = fcmp fast ogt float %688, 0.000000e+00
  br i1 %689, label %690, label %729

; <label>:690                                     ; preds = %553
  %691 = extractvalue %dx.types.ResRet.f32 %687, 2
  %692 = extractvalue %dx.types.ResRet.f32 %687, 1
  %693 = extractvalue %dx.types.ResRet.f32 %687, 0
  %694 = sitofp i32 %678 to float
  %695 = sitofp i32 %679 to float
  %696 = sitofp i32 %680 to float
  %697 = fsub fast float %675, %694
  %698 = fsub fast float %676, %695
  %699 = fsub fast float %677, %696
  %700 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %701 = extractvalue %dx.types.CBufRet.f32 %700, 0
  %702 = extractvalue %dx.types.CBufRet.f32 %700, 1
  %703 = extractvalue %dx.types.CBufRet.f32 %700, 2
  %704 = fmul fast float %701, %693
  %705 = fmul fast float %702, %692
  %706 = fmul fast float %703, %691
  %707 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %708 = extractvalue %dx.types.CBufRet.f32 %707, 0
  %709 = extractvalue %dx.types.CBufRet.f32 %707, 1
  %710 = extractvalue %dx.types.CBufRet.f32 %707, 2
  %711 = fmul fast float %708, %697
  %712 = fmul fast float %709, %698
  %713 = fmul fast float %710, %699
  %714 = fadd fast float %711, %704
  %715 = fadd fast float %712, %705
  %716 = fadd fast float %713, %706
  %717 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %718 = extractvalue %dx.types.CBufRet.f32 %717, 0
  %719 = extractvalue %dx.types.CBufRet.f32 %717, 1
  %720 = extractvalue %dx.types.CBufRet.f32 %717, 2
  %721 = fadd fast float %714, %718
  %722 = fadd fast float %715, %719
  %723 = fadd fast float %716, %720
  %724 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %725 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %40, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %726 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %724, %dx.types.Handle %725, float %721, float %722, float %723, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %727 = extractvalue %dx.types.ResRet.f32 %726, 0
  %728 = fmul fast float %727, %652
  br label %729

; <label>:729                                     ; preds = %690, %553
  %730 = phi float [ %728, %690 ], [ %652, %553 ]
  %731 = fsub fast float %630, %668
  %732 = fmul fast float %731, %649
  %733 = fadd fast float %732, %655
  %734 = fptosi float %733 to i32
  %735 = add i32 %734, %646
  %736 = add i32 %735, %683
  %737 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %686, i32 %736, i32 undef)  ; BufferLoad(srv,index,wot)
  %738 = extractvalue %dx.types.ResRet.f32 %737, 3
  %739 = fcmp fast ogt float %738, 0.000000e+00
  br i1 %739, label %740, label %779

; <label>:740                                     ; preds = %729
  %741 = extractvalue %dx.types.ResRet.f32 %737, 2
  %742 = extractvalue %dx.types.ResRet.f32 %737, 1
  %743 = extractvalue %dx.types.ResRet.f32 %737, 0
  %744 = sitofp i32 %734 to float
  %745 = sitofp i32 %679 to float
  %746 = sitofp i32 %680 to float
  %747 = fsub fast float %733, %744
  %748 = fsub fast float %676, %745
  %749 = fsub fast float %677, %746
  %750 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %751 = extractvalue %dx.types.CBufRet.f32 %750, 0
  %752 = extractvalue %dx.types.CBufRet.f32 %750, 1
  %753 = extractvalue %dx.types.CBufRet.f32 %750, 2
  %754 = fmul fast float %751, %743
  %755 = fmul fast float %752, %742
  %756 = fmul fast float %753, %741
  %757 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %758 = extractvalue %dx.types.CBufRet.f32 %757, 0
  %759 = extractvalue %dx.types.CBufRet.f32 %757, 1
  %760 = extractvalue %dx.types.CBufRet.f32 %757, 2
  %761 = fmul fast float %758, %747
  %762 = fmul fast float %759, %748
  %763 = fmul fast float %760, %749
  %764 = fadd fast float %761, %754
  %765 = fadd fast float %762, %755
  %766 = fadd fast float %763, %756
  %767 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %768 = extractvalue %dx.types.CBufRet.f32 %767, 0
  %769 = extractvalue %dx.types.CBufRet.f32 %767, 1
  %770 = extractvalue %dx.types.CBufRet.f32 %767, 2
  %771 = fadd fast float %764, %768
  %772 = fadd fast float %765, %769
  %773 = fadd fast float %766, %770
  %774 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %775 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %40, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %776 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %774, %dx.types.Handle %775, float %771, float %772, float %773, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %777 = extractvalue %dx.types.ResRet.f32 %776, 0
  %778 = fmul fast float %777, %652
  br label %779

; <label>:779                                     ; preds = %740, %729
  %780 = phi float [ %778, %740 ], [ %652, %729 ]
  %781 = fadd fast float %669, %631
  %782 = fmul fast float %649, %630
  %783 = fmul fast float %781, %650
  %784 = fadd fast float %655, %782
  %785 = fadd fast float %783, %656
  %786 = fptosi float %784 to i32
  %787 = fptosi float %785 to i32
  %788 = add i32 %787, %681
  %789 = mul i32 %788, %658
  %790 = add i32 %786, %646
  %791 = add i32 %790, %789
  %792 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %686, i32 %791, i32 undef)  ; BufferLoad(srv,index,wot)
  %793 = extractvalue %dx.types.ResRet.f32 %792, 3
  %794 = fcmp fast ogt float %793, 0.000000e+00
  br i1 %794, label %795, label %834

; <label>:795                                     ; preds = %779
  %796 = extractvalue %dx.types.ResRet.f32 %792, 2
  %797 = extractvalue %dx.types.ResRet.f32 %792, 1
  %798 = extractvalue %dx.types.ResRet.f32 %792, 0
  %799 = sitofp i32 %786 to float
  %800 = sitofp i32 %787 to float
  %801 = sitofp i32 %680 to float
  %802 = fsub fast float %784, %799
  %803 = fsub fast float %785, %800
  %804 = fsub fast float %677, %801
  %805 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %806 = extractvalue %dx.types.CBufRet.f32 %805, 0
  %807 = extractvalue %dx.types.CBufRet.f32 %805, 1
  %808 = extractvalue %dx.types.CBufRet.f32 %805, 2
  %809 = fmul fast float %806, %798
  %810 = fmul fast float %807, %797
  %811 = fmul fast float %808, %796
  %812 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %813 = extractvalue %dx.types.CBufRet.f32 %812, 0
  %814 = extractvalue %dx.types.CBufRet.f32 %812, 1
  %815 = extractvalue %dx.types.CBufRet.f32 %812, 2
  %816 = fmul fast float %813, %802
  %817 = fmul fast float %814, %803
  %818 = fmul fast float %815, %804
  %819 = fadd fast float %816, %809
  %820 = fadd fast float %817, %810
  %821 = fadd fast float %818, %811
  %822 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %823 = extractvalue %dx.types.CBufRet.f32 %822, 0
  %824 = extractvalue %dx.types.CBufRet.f32 %822, 1
  %825 = extractvalue %dx.types.CBufRet.f32 %822, 2
  %826 = fadd fast float %819, %823
  %827 = fadd fast float %820, %824
  %828 = fadd fast float %821, %825
  %829 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %830 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %40, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %831 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %829, %dx.types.Handle %830, float %826, float %827, float %828, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %832 = extractvalue %dx.types.ResRet.f32 %831, 0
  %833 = fmul fast float %832, %652
  br label %834

; <label>:834                                     ; preds = %795, %779
  %835 = phi float [ %833, %795 ], [ %652, %779 ]
  %836 = fsub fast float %631, %669
  %837 = fmul fast float %836, %650
  %838 = fadd fast float %837, %656
  %839 = fptosi float %838 to i32
  %840 = add i32 %839, %681
  %841 = mul i32 %840, %658
  %842 = add i32 %790, %841
  %843 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %686, i32 %842, i32 undef)  ; BufferLoad(srv,index,wot)
  %844 = extractvalue %dx.types.ResRet.f32 %843, 3
  %845 = fcmp fast ogt float %844, 0.000000e+00
  br i1 %845, label %846, label %885

; <label>:846                                     ; preds = %834
  %847 = extractvalue %dx.types.ResRet.f32 %843, 2
  %848 = extractvalue %dx.types.ResRet.f32 %843, 1
  %849 = extractvalue %dx.types.ResRet.f32 %843, 0
  %850 = sitofp i32 %786 to float
  %851 = sitofp i32 %839 to float
  %852 = sitofp i32 %680 to float
  %853 = fsub fast float %784, %850
  %854 = fsub fast float %838, %851
  %855 = fsub fast float %677, %852
  %856 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %857 = extractvalue %dx.types.CBufRet.f32 %856, 0
  %858 = extractvalue %dx.types.CBufRet.f32 %856, 1
  %859 = extractvalue %dx.types.CBufRet.f32 %856, 2
  %860 = fmul fast float %857, %849
  %861 = fmul fast float %858, %848
  %862 = fmul fast float %859, %847
  %863 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %864 = extractvalue %dx.types.CBufRet.f32 %863, 0
  %865 = extractvalue %dx.types.CBufRet.f32 %863, 1
  %866 = extractvalue %dx.types.CBufRet.f32 %863, 2
  %867 = fmul fast float %864, %853
  %868 = fmul fast float %865, %854
  %869 = fmul fast float %866, %855
  %870 = fadd fast float %867, %860
  %871 = fadd fast float %868, %861
  %872 = fadd fast float %869, %862
  %873 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %874 = extractvalue %dx.types.CBufRet.f32 %873, 0
  %875 = extractvalue %dx.types.CBufRet.f32 %873, 1
  %876 = extractvalue %dx.types.CBufRet.f32 %873, 2
  %877 = fadd fast float %870, %874
  %878 = fadd fast float %871, %875
  %879 = fadd fast float %872, %876
  %880 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %881 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %40, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %882 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %880, %dx.types.Handle %881, float %877, float %878, float %879, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %883 = extractvalue %dx.types.ResRet.f32 %882, 0
  %884 = fmul fast float %883, %652
  br label %885

; <label>:885                                     ; preds = %846, %834
  %886 = phi float [ %884, %846 ], [ %652, %834 ]
  %887 = fadd fast float %670, %632
  %888 = fmul fast float %887, %651
  %889 = fadd fast float %888, %657
  %890 = fptosi float %889 to i32
  %891 = mul i32 %890, %660
  %892 = add i32 %891, %679
  %893 = mul i32 %892, %658
  %894 = add i32 %790, %893
  %895 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %686, i32 %894, i32 undef)  ; BufferLoad(srv,index,wot)
  %896 = extractvalue %dx.types.ResRet.f32 %895, 3
  %897 = fcmp fast ogt float %896, 0.000000e+00
  br i1 %897, label %898, label %937

; <label>:898                                     ; preds = %885
  %899 = extractvalue %dx.types.ResRet.f32 %895, 2
  %900 = extractvalue %dx.types.ResRet.f32 %895, 1
  %901 = extractvalue %dx.types.ResRet.f32 %895, 0
  %902 = sitofp i32 %786 to float
  %903 = sitofp i32 %679 to float
  %904 = sitofp i32 %890 to float
  %905 = fsub fast float %784, %902
  %906 = fsub fast float %676, %903
  %907 = fsub fast float %889, %904
  %908 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %909 = extractvalue %dx.types.CBufRet.f32 %908, 0
  %910 = extractvalue %dx.types.CBufRet.f32 %908, 1
  %911 = extractvalue %dx.types.CBufRet.f32 %908, 2
  %912 = fmul fast float %909, %901
  %913 = fmul fast float %910, %900
  %914 = fmul fast float %911, %899
  %915 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %916 = extractvalue %dx.types.CBufRet.f32 %915, 0
  %917 = extractvalue %dx.types.CBufRet.f32 %915, 1
  %918 = extractvalue %dx.types.CBufRet.f32 %915, 2
  %919 = fmul fast float %916, %905
  %920 = fmul fast float %917, %906
  %921 = fmul fast float %918, %907
  %922 = fadd fast float %919, %912
  %923 = fadd fast float %920, %913
  %924 = fadd fast float %921, %914
  %925 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %926 = extractvalue %dx.types.CBufRet.f32 %925, 0
  %927 = extractvalue %dx.types.CBufRet.f32 %925, 1
  %928 = extractvalue %dx.types.CBufRet.f32 %925, 2
  %929 = fadd fast float %922, %926
  %930 = fadd fast float %923, %927
  %931 = fadd fast float %924, %928
  %932 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %933 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %40, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %934 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %932, %dx.types.Handle %933, float %929, float %930, float %931, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %935 = extractvalue %dx.types.ResRet.f32 %934, 0
  %936 = fmul fast float %935, %652
  br label %937

; <label>:937                                     ; preds = %898, %885
  %938 = phi float [ %936, %898 ], [ %652, %885 ]
  %939 = fsub fast float %632, %670
  %940 = fmul fast float %939, %651
  %941 = fadd fast float %940, %657
  %942 = fptosi float %941 to i32
  %943 = mul i32 %942, %660
  %944 = add i32 %943, %679
  %945 = mul i32 %944, %658
  %946 = add i32 %790, %945
  %947 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %686, i32 %946, i32 undef)  ; BufferLoad(srv,index,wot)
  %948 = extractvalue %dx.types.ResRet.f32 %947, 3
  %949 = fcmp fast ogt float %948, 0.000000e+00
  br i1 %949, label %950, label %989

; <label>:950                                     ; preds = %937
  %951 = extractvalue %dx.types.ResRet.f32 %947, 2
  %952 = extractvalue %dx.types.ResRet.f32 %947, 1
  %953 = extractvalue %dx.types.ResRet.f32 %947, 0
  %954 = sitofp i32 %786 to float
  %955 = sitofp i32 %679 to float
  %956 = sitofp i32 %942 to float
  %957 = fsub fast float %784, %954
  %958 = fsub fast float %676, %955
  %959 = fsub fast float %941, %956
  %960 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %961 = extractvalue %dx.types.CBufRet.f32 %960, 0
  %962 = extractvalue %dx.types.CBufRet.f32 %960, 1
  %963 = extractvalue %dx.types.CBufRet.f32 %960, 2
  %964 = fmul fast float %961, %953
  %965 = fmul fast float %962, %952
  %966 = fmul fast float %963, %951
  %967 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %968 = extractvalue %dx.types.CBufRet.f32 %967, 0
  %969 = extractvalue %dx.types.CBufRet.f32 %967, 1
  %970 = extractvalue %dx.types.CBufRet.f32 %967, 2
  %971 = fmul fast float %968, %957
  %972 = fmul fast float %969, %958
  %973 = fmul fast float %970, %959
  %974 = fadd fast float %971, %964
  %975 = fadd fast float %972, %965
  %976 = fadd fast float %973, %966
  %977 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %978 = extractvalue %dx.types.CBufRet.f32 %977, 0
  %979 = extractvalue %dx.types.CBufRet.f32 %977, 1
  %980 = extractvalue %dx.types.CBufRet.f32 %977, 2
  %981 = fadd fast float %974, %978
  %982 = fadd fast float %975, %979
  %983 = fadd fast float %976, %980
  %984 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %985 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %40, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %986 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %984, %dx.types.Handle %985, float %981, float %982, float %983, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %987 = extractvalue %dx.types.ResRet.f32 %986, 0
  %988 = fmul fast float %987, %652
  br label %989

; <label>:989                                     ; preds = %950, %937
  %990 = phi float [ %988, %950 ], [ %652, %937 ]
  %991 = fsub fast float %730, %780
  %992 = fsub fast float %835, %886
  %993 = fsub fast float %938, %990
  %994 = fmul fast float %991, %991
  %995 = fmul fast float %992, %992
  %996 = fadd fast float %995, %994
  %997 = fmul fast float %993, %993
  %998 = fadd fast float %996, %997
  %999 = call float @dx.op.unary.f32(i32 24, float %998)  ; Sqrt(value)
  %1000 = fcmp fast ogt float %999, 0.000000e+00
  br i1 %1000, label %1001, label %1005

; <label>:1001                                    ; preds = %989
  %1002 = fdiv fast float %991, %999
  %1003 = fdiv fast float %992, %999
  %1004 = fdiv fast float %993, %999
  br label %1005

; <label>:1005                                    ; preds = %1001, %989
  %1006 = phi float [ %1002, %1001 ], [ 0.000000e+00, %989 ]
  %1007 = phi float [ %1003, %1001 ], [ 0.000000e+00, %989 ]
  %1008 = phi float [ %1004, %1001 ], [ 0.000000e+00, %989 ]
  %1009 = fmul fast float %1006, %562
  %1010 = call float @dx.op.tertiary.f32(i32 46, float %1007, float %568, float %1009)  ; FMad(a,b,c)
  %1011 = call float @dx.op.tertiary.f32(i32 46, float %1008, float %574, float %1010)  ; FMad(a,b,c)
  %1012 = fmul fast float %1006, %563
  %1013 = call float @dx.op.tertiary.f32(i32 46, float %1007, float %569, float %1012)  ; FMad(a,b,c)
  %1014 = call float @dx.op.tertiary.f32(i32 46, float %1008, float %575, float %1013)  ; FMad(a,b,c)
  %1015 = fmul fast float %1006, %564
  %1016 = call float @dx.op.tertiary.f32(i32 46, float %1007, float %570, float %1015)  ; FMad(a,b,c)
  %1017 = call float @dx.op.tertiary.f32(i32 46, float %1008, float %576, float %1016)  ; FMad(a,b,c)
  %1018 = fmul fast float %1011, %1011
  %1019 = fmul fast float %1014, %1014
  %1020 = fadd fast float %1019, %1018
  %1021 = fmul fast float %1017, %1017
  %1022 = fadd fast float %1020, %1021
  %1023 = call float @dx.op.unary.f32(i32 24, float %1022)  ; Sqrt(value)
  %1024 = fcmp fast ogt float %1023, 0.000000e+00
  br i1 %1024, label %1025, label %1029

; <label>:1025                                    ; preds = %1005
  %1026 = fdiv fast float %1011, %1023
  %1027 = fdiv fast float %1014, %1023
  %1028 = fdiv fast float %1017, %1023
  br label %1029

; <label>:1029                                    ; preds = %1025, %1005
  %1030 = phi float [ %1026, %1025 ], [ 0.000000e+00, %1005 ]
  %1031 = phi float [ %1027, %1025 ], [ 0.000000e+00, %1005 ]
  %1032 = phi float [ %1028, %1025 ], [ 0.000000e+00, %1005 ]
  %1033 = shl i32 %586, 2
  %1034 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1035 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1034, i32 %1033, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1036 = extractvalue %dx.types.ResRet.i32 %1035, 0
  %1037 = fmul fast float %551, %223
  %1038 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %51, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1039 = extractvalue %dx.types.CBufRet.i32 %1038, 1
  %1040 = icmp ult i32 %1036, %1039
  br i1 %1040, label %1041, label %1549

; <label>:1041                                    ; preds = %1029
  %1042 = mul i32 %1036, 7
  %1043 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1044 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1043, i32 %1042, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1045 = extractvalue %dx.types.ResRet.f32 %1044, 0
  %1046 = extractvalue %dx.types.ResRet.f32 %1044, 1
  %1047 = extractvalue %dx.types.ResRet.f32 %1044, 2
  %1048 = extractvalue %dx.types.ResRet.f32 %1044, 3
  %1049 = add i32 %1042, 1
  %1050 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1043, i32 %1049, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1051 = extractvalue %dx.types.ResRet.f32 %1050, 0
  %1052 = extractvalue %dx.types.ResRet.f32 %1050, 1
  %1053 = extractvalue %dx.types.ResRet.f32 %1050, 2
  %1054 = extractvalue %dx.types.ResRet.f32 %1050, 3
  %1055 = add i32 %1042, 2
  %1056 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1043, i32 %1055, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1057 = extractvalue %dx.types.ResRet.f32 %1056, 0
  %1058 = extractvalue %dx.types.ResRet.f32 %1056, 1
  %1059 = extractvalue %dx.types.ResRet.f32 %1056, 2
  %1060 = extractvalue %dx.types.ResRet.f32 %1056, 3
  %1061 = add i32 %1042, 3
  %1062 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1043, i32 %1061, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1063 = extractvalue %dx.types.ResRet.f32 %1062, 0
  %1064 = extractvalue %dx.types.ResRet.f32 %1062, 1
  %1065 = extractvalue %dx.types.ResRet.f32 %1062, 2
  %1066 = extractvalue %dx.types.ResRet.f32 %1062, 3
  %1067 = bitcast float %1063 to i32
  %1068 = bitcast float %1064 to i32
  %1069 = add i32 %1042, 4
  %1070 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1043, i32 %1069, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1071 = extractvalue %dx.types.ResRet.f32 %1070, 0
  %1072 = extractvalue %dx.types.ResRet.f32 %1070, 1
  %1073 = extractvalue %dx.types.ResRet.f32 %1070, 2
  %1074 = extractvalue %dx.types.ResRet.f32 %1070, 3
  %1075 = and i32 %1068, 65536
  %1076 = icmp ne i32 %1075, 0
  %1077 = and i32 %1068, 131072
  %1078 = icmp ne i32 %1077, 0
  %1079 = getelementptr inbounds [6 x i32], [6 x i32]* %56, i32 0, i32 0
  %1080 = bitcast i32* %1079 to float*
  store float %1065, float* %1080, align 4, !tbaa !69, !alias.scope !73, !noalias !76
  %1081 = getelementptr inbounds [6 x i32], [6 x i32]* %56, i32 0, i32 1
  %1082 = bitcast i32* %1081 to float*
  store float %1066, float* %1082, align 4, !tbaa !69, !alias.scope !73, !noalias !76
  %1083 = getelementptr inbounds [6 x i32], [6 x i32]* %56, i32 0, i32 2
  %1084 = bitcast i32* %1083 to float*
  store float %1071, float* %1084, align 4, !tbaa !69, !alias.scope !73, !noalias !76
  %1085 = getelementptr inbounds [6 x i32], [6 x i32]* %56, i32 0, i32 3
  %1086 = bitcast i32* %1085 to float*
  store float %1072, float* %1086, align 4, !tbaa !69, !alias.scope !73, !noalias !76
  %1087 = getelementptr inbounds [6 x i32], [6 x i32]* %56, i32 0, i32 4
  %1088 = bitcast i32* %1087 to float*
  store float %1073, float* %1088, align 4, !tbaa !69, !alias.scope !73, !noalias !76
  %1089 = getelementptr inbounds [6 x i32], [6 x i32]* %56, i32 0, i32 5
  %1090 = bitcast i32* %1089 to float*
  store float %1074, float* %1090, align 4, !tbaa !69, !alias.scope !73, !noalias !76
  %1091 = select i1 %1078, float 7.000000e+01, float 2.000000e+01
  %1092 = fsub fast float %609, %1048
  %1093 = fsub fast float %610, %1054
  %1094 = fsub fast float %611, %1060
  %1095 = fmul fast float %1092, %1045
  %1096 = call float @dx.op.tertiary.f32(i32 46, float %1093, float %1051, float %1095)  ; FMad(a,b,c)
  %1097 = call float @dx.op.tertiary.f32(i32 46, float %1094, float %1057, float %1096)  ; FMad(a,b,c)
  %1098 = fmul fast float %1092, %1046
  %1099 = call float @dx.op.tertiary.f32(i32 46, float %1093, float %1052, float %1098)  ; FMad(a,b,c)
  %1100 = call float @dx.op.tertiary.f32(i32 46, float %1094, float %1058, float %1099)  ; FMad(a,b,c)
  %1101 = fmul fast float %1092, %1047
  %1102 = call float @dx.op.tertiary.f32(i32 46, float %1093, float %1053, float %1101)  ; FMad(a,b,c)
  %1103 = call float @dx.op.tertiary.f32(i32 46, float %1094, float %1059, float %1102)  ; FMad(a,b,c)
  %1104 = fmul fast float %1045, %1030
  %1105 = call float @dx.op.tertiary.f32(i32 46, float %1031, float %1051, float %1104)  ; FMad(a,b,c)
  %1106 = call float @dx.op.tertiary.f32(i32 46, float %1032, float %1057, float %1105)  ; FMad(a,b,c)
  %1107 = fmul fast float %1046, %1030
  %1108 = call float @dx.op.tertiary.f32(i32 46, float %1031, float %1052, float %1107)  ; FMad(a,b,c)
  %1109 = call float @dx.op.tertiary.f32(i32 46, float %1032, float %1058, float %1108)  ; FMad(a,b,c)
  %1110 = fmul fast float %1047, %1030
  %1111 = call float @dx.op.tertiary.f32(i32 46, float %1031, float %1053, float %1110)  ; FMad(a,b,c)
  %1112 = call float @dx.op.tertiary.f32(i32 46, float %1032, float %1059, float %1111)  ; FMad(a,b,c)
  %1113 = fmul fast float %1106, %1106
  %1114 = fmul fast float %1109, %1109
  %1115 = fmul fast float %1112, %1112
  %1116 = fcmp fast ogt float %1113, 0.000000e+00
  br i1 %1116, label %1117, label %1122

; <label>:1117                                    ; preds = %1041
  %1118 = fcmp uge float %1106, 0.000000e+00
  %1119 = zext i1 %1118 to i32
  %1120 = getelementptr inbounds [6 x i32], [6 x i32]* %56, i32 0, i32 %1119
  %1121 = load i32, i32* %1120, align 4, !tbaa !69, !noalias !76
  br label %1122

; <label>:1122                                    ; preds = %1117, %1041
  %1123 = phi i32 [ %1121, %1117 ], [ 0, %1041 ]
  %1124 = fcmp fast ogt float %1114, 0.000000e+00
  br i1 %1124, label %1125, label %1131

; <label>:1125                                    ; preds = %1122
  %1126 = fcmp fast olt float %1109, 0.000000e+00
  %1127 = select i1 %1126, i32 2, i32 3
  %1128 = getelementptr inbounds [6 x i32], [6 x i32]* %56, i32 0, i32 %1127
  %1129 = load i32, i32* %1128, align 4, !tbaa !69, !noalias !76
  %1130 = or i32 %1129, %1123
  br label %1131

; <label>:1131                                    ; preds = %1125, %1122
  %1132 = phi i32 [ %1130, %1125 ], [ %1123, %1122 ]
  %1133 = fcmp fast ogt float %1115, 0.000000e+00
  br i1 %1133, label %1134, label %1140

; <label>:1134                                    ; preds = %1131
  %1135 = fcmp fast olt float %1112, 0.000000e+00
  %1136 = select i1 %1135, i32 4, i32 5
  %1137 = getelementptr inbounds [6 x i32], [6 x i32]* %56, i32 0, i32 %1136
  %1138 = load i32, i32* %1137, align 4, !tbaa !69, !noalias !76
  %1139 = or i32 %1138, %1132
  br label %1140

; <label>:1140                                    ; preds = %1134, %1131
  %1141 = phi i32 [ %1139, %1134 ], [ %1132, %1131 ]
  %1142 = icmp eq i32 %1141, 0
  br i1 %1142, label %1187, label %1143

; <label>:1143                                    ; preds = %1140
  br label %1144

; <label>:1144                                    ; preds = %1144, %1143
  %1145 = phi i32 [ %1150, %1144 ], [ %1141, %1143 ]
  %1146 = phi i32 [ %1184, %1144 ], [ 0, %1143 ]
  %1147 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %1145)  ; FirstbitLo(value)
  %1148 = and i32 %1147, 31
  %1149 = shl i32 1, %1148
  %1150 = xor i32 %1149, %1145
  %1151 = add i32 %1147, %1067
  %1152 = mul i32 %1151, 9
  %1153 = add i32 %1152, 5
  %1154 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1155 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1154, i32 %1153, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1156 = extractvalue %dx.types.ResRet.f32 %1155, 3
  %1157 = add i32 %1152, 6
  %1158 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1154, i32 %1157, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1159 = extractvalue %dx.types.ResRet.f32 %1158, 3
  %1160 = add i32 %1152, 7
  %1161 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1154, i32 %1160, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1162 = extractvalue %dx.types.ResRet.f32 %1161, 3
  %1163 = add i32 %1152, 8
  %1164 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1154, i32 %1163, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1165 = extractvalue %dx.types.ResRet.f32 %1164, 0
  %1166 = extractvalue %dx.types.ResRet.f32 %1164, 1
  %1167 = extractvalue %dx.types.ResRet.f32 %1164, 2
  %1168 = fsub fast float %1097, %1156
  %1169 = fsub fast float %1100, %1159
  %1170 = fsub fast float %1103, %1162
  %1171 = call float @dx.op.unary.f32(i32 6, float %1168)  ; FAbs(value)
  %1172 = call float @dx.op.unary.f32(i32 6, float %1169)  ; FAbs(value)
  %1173 = call float @dx.op.unary.f32(i32 6, float %1170)  ; FAbs(value)
  %1174 = fmul fast float %1091, 5.000000e-01
  %1175 = fadd fast float %1165, %1174
  %1176 = fadd fast float %1166, %1174
  %1177 = fadd fast float %1167, %1174
  %1178 = fcmp fast ole float %1171, %1175
  %1179 = fcmp fast ole float %1172, %1176
  %1180 = fcmp fast ole float %1173, %1177
  %1181 = and i1 %1178, %1179
  %1182 = and i1 %1181, %1180
  %1183 = select i1 %1182, i32 %1149, i32 0
  %1184 = or i32 %1183, %1146
  %1185 = icmp eq i32 %1145, %1149
  br i1 %1185, label %1186, label %1144

; <label>:1186                                    ; preds = %1144
  br label %1187

; <label>:1187                                    ; preds = %1186, %1140
  %1188 = phi i32 [ 0, %1140 ], [ %1184, %1186 ]
  %1189 = select i1 %1076, i32 1, i32 %1188
  %1190 = icmp eq i32 %1189, 0
  br i1 %1190, label %1509, label %1191

; <label>:1191                                    ; preds = %1187
  br label %1192

; <label>:1192                                    ; preds = %1215, %1191
  %1193 = phi float [ %1216, %1215 ], [ 0.000000e+00, %1191 ]
  %1194 = phi float [ %1217, %1215 ], [ 0.000000e+00, %1191 ]
  %1195 = phi float [ %1218, %1215 ], [ 0.000000e+00, %1191 ]
  %1196 = phi float [ %1219, %1215 ], [ 0.000000e+00, %1191 ]
  %1197 = phi float [ %1220, %1215 ], [ 0.000000e+00, %1191 ]
  %1198 = phi i32 [ %1221, %1215 ], [ 0, %1191 ]
  %1199 = phi i32 [ %1222, %1215 ], [ 0, %1191 ]
  %1200 = phi i32 [ %1223, %1215 ], [ 0, %1191 ]
  %1201 = phi i32 [ %1205, %1215 ], [ %1189, %1191 ]
  %1202 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %1201)  ; FirstbitLo(value)
  %1203 = and i32 %1202, 31
  %1204 = shl i32 1, %1203
  %1205 = xor i32 %1204, %1201
  %1206 = add i32 %1202, %1067
  %1207 = mul i32 %1206, 9
  %1208 = add i32 %1207, 3
  %1209 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1210 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1209, i32 %1208, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1211 = extractvalue %dx.types.ResRet.f32 %1210, 3
  %1212 = bitcast float %1211 to i32
  %1213 = and i32 %1212, 16777216
  %1214 = icmp eq i32 %1213, 0
  br i1 %1214, label %1215, label %1225

; <label>:1215                                    ; preds = %3617, %1507, %1475, %1444, %1282, %1229, %1225, %1192
  %1216 = phi float [ %1193, %1192 ], [ %1505, %1507 ], [ %1505, %1475 ], [ %1193, %3617 ], [ %1193, %1444 ], [ %1193, %1282 ], [ %1193, %1229 ], [ %1193, %1225 ]
  %1217 = phi float [ %1194, %1192 ], [ %1502, %1507 ], [ %1502, %1475 ], [ %1194, %3617 ], [ %1194, %1444 ], [ %1194, %1282 ], [ %1194, %1229 ], [ %1194, %1225 ]
  %1218 = phi float [ %1195, %1192 ], [ %1503, %1507 ], [ %1503, %1475 ], [ %1195, %3617 ], [ %1195, %1444 ], [ %1195, %1282 ], [ %1195, %1229 ], [ %1195, %1225 ]
  %1219 = phi float [ %1196, %1192 ], [ %1504, %1507 ], [ %1504, %1475 ], [ %1196, %3617 ], [ %1196, %1444 ], [ %1196, %1282 ], [ %1196, %1229 ], [ %1196, %1225 ]
  %1220 = phi float [ %1197, %1192 ], [ %3624, %1507 ], [ %1197, %1475 ], [ %1197, %3617 ], [ %1197, %1444 ], [ %1197, %1282 ], [ %1197, %1229 ], [ %1197, %1225 ]
  %1221 = phi i32 [ %1198, %1192 ], [ %1419, %1507 ], [ %1198, %1475 ], [ %1198, %3617 ], [ %1198, %1444 ], [ %1198, %1282 ], [ %1198, %1229 ], [ %1198, %1225 ]
  %1222 = phi i32 [ %1199, %1192 ], [ %1421, %1507 ], [ %1199, %1475 ], [ %1199, %3617 ], [ %1199, %1444 ], [ %1199, %1282 ], [ %1199, %1229 ], [ %1199, %1225 ]
  %1223 = phi i32 [ %1200, %1192 ], [ %1325, %1507 ], [ %1200, %1475 ], [ %1200, %3617 ], [ %1200, %1444 ], [ %1200, %1282 ], [ %1200, %1229 ], [ %1200, %1225 ]
  %1224 = icmp eq i32 %1201, %1204
  br i1 %1224, label %1508, label %1192

; <label>:1225                                    ; preds = %1192
  %1226 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %51, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1227 = extractvalue %dx.types.CBufRet.i32 %1226, 0
  %1228 = icmp ult i32 %1206, %1227
  br i1 %1228, label %1229, label %1215

; <label>:1229                                    ; preds = %1225
  %1230 = extractvalue %dx.types.ResRet.f32 %1210, 0
  %1231 = extractvalue %dx.types.ResRet.f32 %1210, 1
  %1232 = extractvalue %dx.types.ResRet.f32 %1210, 2
  %1233 = add i32 %1207, 4
  %1234 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1209, i32 %1233, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1235 = add i32 %1207, 5
  %1236 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1209, i32 %1235, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1237 = add i32 %1207, 6
  %1238 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1209, i32 %1237, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1239 = add i32 %1207, 7
  %1240 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1209, i32 %1239, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1241 = call float @dx.op.unary.f32(i32 6, float %1230)  ; FAbs(value)
  %1242 = call float @dx.op.unary.f32(i32 6, float %1231)  ; FAbs(value)
  %1243 = call float @dx.op.unary.f32(i32 6, float %1232)  ; FAbs(value)
  %1244 = lshr i32 %1212, 16
  %1245 = and i32 %1244, 15
  %1246 = extractvalue %dx.types.ResRet.f32 %1240, 3
  %1247 = extractvalue %dx.types.ResRet.f32 %1240, 2
  %1248 = extractvalue %dx.types.ResRet.f32 %1240, 1
  %1249 = extractvalue %dx.types.ResRet.f32 %1240, 0
  %1250 = extractvalue %dx.types.ResRet.f32 %1238, 3
  %1251 = extractvalue %dx.types.ResRet.f32 %1238, 2
  %1252 = extractvalue %dx.types.ResRet.f32 %1238, 1
  %1253 = extractvalue %dx.types.ResRet.f32 %1238, 0
  %1254 = extractvalue %dx.types.ResRet.f32 %1236, 3
  %1255 = extractvalue %dx.types.ResRet.f32 %1236, 2
  %1256 = extractvalue %dx.types.ResRet.f32 %1236, 1
  %1257 = extractvalue %dx.types.ResRet.f32 %1236, 0
  %1258 = fsub fast float %1097, %1254
  %1259 = fsub fast float %1100, %1250
  %1260 = fsub fast float %1103, %1246
  %1261 = fmul fast float %1258, %1257
  %1262 = call float @dx.op.tertiary.f32(i32 46, float %1259, float %1253, float %1261)  ; FMad(a,b,c)
  %1263 = call float @dx.op.tertiary.f32(i32 46, float %1260, float %1249, float %1262)  ; FMad(a,b,c)
  %1264 = fmul fast float %1258, %1256
  %1265 = call float @dx.op.tertiary.f32(i32 46, float %1259, float %1252, float %1264)  ; FMad(a,b,c)
  %1266 = call float @dx.op.tertiary.f32(i32 46, float %1260, float %1248, float %1265)  ; FMad(a,b,c)
  %1267 = fmul fast float %1258, %1255
  %1268 = call float @dx.op.tertiary.f32(i32 46, float %1259, float %1251, float %1267)  ; FMad(a,b,c)
  %1269 = call float @dx.op.tertiary.f32(i32 46, float %1260, float %1247, float %1268)  ; FMad(a,b,c)
  %1270 = call float @dx.op.unary.f32(i32 6, float %1263)  ; FAbs(value)
  %1271 = call float @dx.op.unary.f32(i32 6, float %1266)  ; FAbs(value)
  %1272 = call float @dx.op.unary.f32(i32 6, float %1269)  ; FAbs(value)
  %1273 = fmul fast float %1091, 5.000000e-01
  %1274 = fadd fast float %1241, %1273
  %1275 = fadd fast float %1242, %1273
  %1276 = fadd fast float %1243, %1273
  %1277 = fcmp fast ole float %1270, %1274
  %1278 = fcmp fast ole float %1271, %1275
  %1279 = fcmp fast ole float %1272, %1276
  %1280 = and i1 %1277, %1278
  %1281 = and i1 %1280, %1279
  br i1 %1281, label %1282, label %1215

; <label>:1282                                    ; preds = %1229
  %1283 = lshr i32 %1212, 8
  %1284 = and i32 %1283, 255
  %1285 = and i32 %1212, 255
  %1286 = extractvalue %dx.types.ResRet.f32 %1234, 3
  %1287 = extractvalue %dx.types.ResRet.f32 %1234, 2
  %1288 = extractvalue %dx.types.ResRet.f32 %1234, 1
  %1289 = extractvalue %dx.types.ResRet.f32 %1234, 0
  %1290 = fsub fast float -0.000000e+00, %1241
  %1291 = fsub fast float -0.000000e+00, %1242
  %1292 = call float @dx.op.binary.f32(i32 35, float %1263, float %1290)  ; FMax(a,b)
  %1293 = call float @dx.op.binary.f32(i32 35, float %1266, float %1291)  ; FMax(a,b)
  %1294 = call float @dx.op.binary.f32(i32 36, float %1292, float %1241)  ; FMin(a,b)
  %1295 = call float @dx.op.binary.f32(i32 36, float %1293, float %1242)  ; FMin(a,b)
  %1296 = fdiv fast float %1294, %1241
  %1297 = fdiv fast float %1295, %1242
  %1298 = fmul fast float %1296, 5.000000e-01
  %1299 = fmul fast float %1297, 5.000000e-01
  %1300 = fadd fast float %1298, 5.000000e-01
  %1301 = fsub fast float 5.000000e-01, %1299
  %1302 = call float @dx.op.unary.f32(i32 7, float %1300)  ; Saturate(value)
  %1303 = call float @dx.op.unary.f32(i32 7, float %1301)  ; Saturate(value)
  %1304 = call float @dx.op.binary.f32(i32 36, float %1302, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1305 = call float @dx.op.binary.f32(i32 36, float %1303, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1306 = select i1 %225, float %1287, float %1289
  %1307 = bitcast float %1306 to i32
  %1308 = and i32 %1307, 65535
  %1309 = lshr i32 %1307, 16
  %1310 = select i1 %225, float %1286, float %1288
  %1311 = bitcast float %1310 to i32
  %1312 = uitofp i32 %1308 to float
  %1313 = uitofp i32 %1309 to float
  %1314 = fmul fast float %1304, %1312
  %1315 = fmul fast float %1305, %1313
  %1316 = fptoui float %1314 to i32
  %1317 = fptoui float %1315 to i32
  %1318 = mul i32 %1317, %1308
  %1319 = add i32 %1316, %1311
  %1320 = add i32 %1319, %1318
  %1321 = shl i32 %1320, 3
  %1322 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1323 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1322, i32 %1321, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1324 = extractvalue %dx.types.ResRet.i32 %1323, 0
  %1325 = extractvalue %dx.types.ResRet.i32 %1323, 1
  %1326 = shl i32 %1324, 3
  %1327 = and i32 %1326, 32760
  %1328 = lshr i32 %1324, 9
  %1329 = and i32 %1328, 32760
  %1330 = lshr i32 %1324, 24
  %1331 = and i32 %1330, 15
  %1332 = lshr i32 %1324, 28
  %1333 = add nuw nsw i32 %1331, 25
  %1334 = add nuw nsw i32 %1332, 25
  %1335 = and i32 %1333, 31
  %1336 = and i32 %1334, 31
  %1337 = shl i32 1, %1335
  %1338 = shl i32 1, %1336
  %1339 = icmp ugt i32 %1331, 7
  %1340 = icmp slt i32 %1324, 0
  %1341 = select i1 %1339, i32 %1337, i32 1
  %1342 = select i1 %1340, i32 %1338, i32 1
  %1343 = uitofp i32 %1341 to float
  %1344 = uitofp i32 %1342 to float
  %1345 = fmul fast float %1343, %1304
  %1346 = fmul fast float %1344, %1305
  %1347 = fptoui float %1345 to i32
  %1348 = fptoui float %1346 to i32
  %1349 = shl i32 1, %1331
  %1350 = shl i32 1, %1332
  %1351 = call float @dx.op.unary.f32(i32 22, float %1345)  ; Frc(value)
  %1352 = call float @dx.op.unary.f32(i32 22, float %1346)  ; Frc(value)
  %1353 = icmp eq i32 %1347, 0
  %1354 = icmp eq i32 %1348, 0
  %1355 = select i1 %1353, float 0.000000e+00, float 5.000000e-01
  %1356 = select i1 %1354, float 0.000000e+00, float 5.000000e-01
  %1357 = add i32 %1347, 1
  %1358 = add i32 %1348, 1
  %1359 = icmp eq i32 %1357, %1341
  %1360 = icmp eq i32 %1358, %1342
  %1361 = uitofp i32 %1349 to float
  %1362 = select i1 %1339, float 1.280000e+02, float %1361
  %1363 = uitofp i32 %1350 to float
  %1364 = select i1 %1340, float 1.280000e+02, float %1363
  %1365 = fsub fast float %1362, %1355
  %1366 = fsub fast float %1364, %1356
  %1367 = select i1 %1359, float -0.000000e+00, float -5.000000e-01
  %1368 = fadd fast float %1365, %1367
  %1369 = select i1 %1360, float -0.000000e+00, float -5.000000e-01
  %1370 = fadd fast float %1366, %1369
  %1371 = fmul fast float %1368, %1351
  %1372 = fmul fast float %1370, %1352
  %1373 = fadd fast float %1371, %1355
  %1374 = fadd fast float %1372, %1356
  %1375 = fadd fast float %1362, -1.500000e+00
  %1376 = fadd fast float %1364, -1.500000e+00
  %1377 = call float @dx.op.binary.f32(i32 35, float %1373, float 5.000000e-01)  ; FMax(a,b)
  %1378 = call float @dx.op.binary.f32(i32 35, float %1374, float 5.000000e-01)  ; FMax(a,b)
  %1379 = call float @dx.op.binary.f32(i32 36, float %1377, float %1375)  ; FMin(a,b)
  %1380 = call float @dx.op.binary.f32(i32 36, float %1378, float %1376)  ; FMin(a,b)
  %1381 = uitofp i32 %1327 to float
  %1382 = uitofp i32 %1329 to float
  %1383 = fadd fast float %1379, %1381
  %1384 = fadd fast float %1380, %1382
  %1385 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %51, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1386 = extractvalue %dx.types.CBufRet.f32 %1385, 0
  %1387 = extractvalue %dx.types.CBufRet.f32 %1385, 1
  %1388 = fmul fast float %1386, %1383
  %1389 = fmul fast float %1387, %1384
  %1390 = call float @dx.op.binary.f32(i32 35, float %1241, float %1242)  ; FMax(a,b)
  %1391 = call float @dx.op.binary.f32(i32 35, float %1037, float 1.000000e+00)  ; FMax(a,b)
  %1392 = fdiv fast float %1390, %1391
  %1393 = call float @dx.op.unary.f32(i32 23, float %1392)  ; Log(value)
  %1394 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1395 = extractvalue %dx.types.CBufRet.f32 %1394, 2
  %1396 = fadd fast float %1395, %1393
  %1397 = call float @dx.op.binary.f32(i32 35, float %1396, float 3.000000e+00)  ; FMax(a,b)
  %1398 = call float @dx.op.binary.f32(i32 36, float %1397, float 1.100000e+01)  ; FMin(a,b)
  %1399 = fptoui float %1398 to i32
  %1400 = sub i32 %1399, %1285
  %1401 = sub i32 %1399, %1284
  %1402 = add i32 %1400, 25
  %1403 = add i32 %1401, 25
  %1404 = and i32 %1402, 31
  %1405 = and i32 %1403, 31
  %1406 = shl i32 1, %1404
  %1407 = shl i32 1, %1405
  %1408 = icmp ugt i32 %1400, 7
  %1409 = icmp ugt i32 %1401, 7
  %1410 = uitofp i32 %1406 to float
  %1411 = select i1 %1408, float %1410, float 1.000000e+00
  %1412 = uitofp i32 %1407 to float
  %1413 = select i1 %1409, float %1412, float 1.000000e+00
  %1414 = fmul fast float %1411, %1304
  %1415 = fmul fast float %1413, %1305
  %1416 = fptoui float %1414 to i32
  %1417 = fptoui float %1415 to i32
  %1418 = shl i32 %1399, 24
  %1419 = or i32 %1418, %1206
  %1420 = shl i32 %1417, 8
  %1421 = add i32 %1420, %1416
  %1422 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %51, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1423 = extractvalue %dx.types.CBufRet.f32 %1422, 2
  %1424 = extractvalue %dx.types.CBufRet.f32 %1422, 3
  %1425 = fmul fast float %1423, %1388
  %1426 = fmul fast float %1424, %1389
  %1427 = fadd fast float %1425, 0x3FE0100000000000
  %1428 = fadd fast float %1426, 0x3FE0100000000000
  %1429 = call float @dx.op.unary.f32(i32 22, float %1427)  ; Frc(value)
  %1430 = call float @dx.op.unary.f32(i32 22, float %1428)  ; Frc(value)
  %1431 = fsub fast float 1.000000e+00, %1429
  %1432 = fmul fast float %1431, %1430
  %1433 = fmul fast float %1430, %1429
  %1434 = fsub fast float 1.000000e+00, %1430
  %1435 = fmul fast float %1434, %1429
  %1436 = fmul fast float %1434, %1431
  %1437 = icmp eq i32 %1331, 0
  br i1 %1437, label %1215, label %1438

; <label>:1438                                    ; preds = %1282
  br i1 %1076, label %1444, label %1439

; <label>:1439                                    ; preds = %1438
  %1440 = icmp ult i32 %1245, 2
  br i1 %1440, label %1444, label %1441

; <label>:1441                                    ; preds = %1439
  %1442 = icmp ult i32 %1245, 4
  %1443 = select i1 %1442, float %1114, float %1115
  br label %1444

; <label>:1444                                    ; preds = %1441, %1439, %1438
  %1445 = phi float [ 1.000000e+00, %1438 ], [ %1113, %1439 ], [ %1443, %1441 ]
  %1446 = fcmp fast ogt float %1445, 0.000000e+00
  br i1 %1446, label %1447, label %1215

; <label>:1447                                    ; preds = %1444
  %1448 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1449 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %41, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1450 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1448, %dx.types.Handle %1449, float %1388, float %1389, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1451 = extractvalue %dx.types.ResRet.f32 %1450, 0
  %1452 = extractvalue %dx.types.ResRet.f32 %1450, 1
  %1453 = extractvalue %dx.types.ResRet.f32 %1450, 2
  %1454 = extractvalue %dx.types.ResRet.f32 %1450, 3
  %1455 = fdiv fast float %1269, %1243
  %1456 = fmul fast float %1455, 5.000000e-01
  %1457 = fsub fast float 5.000000e-01, %1456
  %1458 = fdiv fast float %1091, %1243
  %1459 = fmul fast float %1458, 2.500000e-01
  %1460 = fcmp uge float %1451, 1.000000e+00
  %1461 = or i1 %1076, %1460
  %1462 = select i1 %1460, float 0.000000e+00, float 1.000000e+00
  br i1 %1461, label %1470, label %1463

; <label>:1463                                    ; preds = %1447
  %1464 = fsub fast float %1457, %1451
  %1465 = call float @dx.op.unary.f32(i32 6, float %1464)  ; FAbs(value)
  %1466 = fsub fast float %1465, %1458
  %1467 = fdiv fast float %1466, %1459
  %1468 = call float @dx.op.unary.f32(i32 7, float %1467)  ; Saturate(value)
  %1469 = fsub fast float 1.000000e+00, %1468
  br label %1470

; <label>:1470                                    ; preds = %1463, %1447
  %1471 = phi float [ %1469, %1463 ], [ %1462, %1447 ]
  %1472 = fcmp uge float %1452, 1.000000e+00
  %1473 = or i1 %1076, %1472
  %1474 = select i1 %1472, float 0.000000e+00, float 1.000000e+00
  br i1 %1473, label %3593, label %3586

; <label>:1475                                    ; preds = %3617
  %1476 = fdiv fast float %3619, %3623
  %1477 = fdiv fast float %3620, %3623
  %1478 = fdiv fast float %3621, %3623
  %1479 = fdiv fast float %3622, %3623
  %1480 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1481 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1480, %dx.types.Handle %1449, float %1388, float %1389, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1482 = extractvalue %dx.types.ResRet.f32 %1481, 0
  %1483 = extractvalue %dx.types.ResRet.f32 %1481, 1
  %1484 = extractvalue %dx.types.ResRet.f32 %1481, 2
  %1485 = extractvalue %dx.types.ResRet.f32 %1481, 3
  %1486 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1480, %dx.types.Handle %1449, float %1388, float %1389, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1487 = extractvalue %dx.types.ResRet.f32 %1486, 0
  %1488 = extractvalue %dx.types.ResRet.f32 %1486, 1
  %1489 = extractvalue %dx.types.ResRet.f32 %1486, 2
  %1490 = extractvalue %dx.types.ResRet.f32 %1486, 3
  %1491 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1480, %dx.types.Handle %1449, float %1388, float %1389, float undef, float undef, i32 0, i32 0, i32 2)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1492 = extractvalue %dx.types.ResRet.f32 %1491, 0
  %1493 = extractvalue %dx.types.ResRet.f32 %1491, 1
  %1494 = extractvalue %dx.types.ResRet.f32 %1491, 2
  %1495 = extractvalue %dx.types.ResRet.f32 %1491, 3
  %1496 = call float @dx.op.dot4.f32(i32 56, float %1482, float %1483, float %1484, float %1485, float %1476, float %1477, float %1478, float %1479)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1497 = call float @dx.op.dot4.f32(i32 56, float %1487, float %1488, float %1489, float %1490, float %1476, float %1477, float %1478, float %1479)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1498 = call float @dx.op.dot4.f32(i32 56, float %1492, float %1493, float %1494, float %1495, float %1476, float %1477, float %1478, float %1479)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1499 = fmul fast float %1496, %3624
  %1500 = fmul fast float %1497, %3624
  %1501 = fmul fast float %1498, %3624
  %1502 = fadd fast float %1499, %1194
  %1503 = fadd fast float %1500, %1195
  %1504 = fadd fast float %1501, %1196
  %1505 = fadd fast float %3624, %1193
  %1506 = fcmp fast ogt float %3624, %1197
  br i1 %1506, label %1507, label %1215

; <label>:1507                                    ; preds = %1475
  br label %1215

; <label>:1508                                    ; preds = %1215
  br label %1509

; <label>:1509                                    ; preds = %1508, %1187
  %1510 = phi float [ 0.000000e+00, %1187 ], [ %1216, %1508 ]
  %1511 = phi float [ 0.000000e+00, %1187 ], [ %1217, %1508 ]
  %1512 = phi float [ 0.000000e+00, %1187 ], [ %1218, %1508 ]
  %1513 = phi float [ 0.000000e+00, %1187 ], [ %1219, %1508 ]
  %1514 = phi i32 [ 0, %1187 ], [ %1221, %1508 ]
  %1515 = phi i32 [ 0, %1187 ], [ %1222, %1508 ]
  %1516 = phi i32 [ 0, %1187 ], [ %1223, %1508 ]
  %1517 = fcmp fast ogt float %1510, 0.000000e+00
  br i1 %1517, label %1518, label %1522

; <label>:1518                                    ; preds = %1509
  %1519 = fdiv fast float %1511, %1510
  %1520 = fdiv fast float %1512, %1510
  %1521 = fdiv fast float %1513, %1510
  br label %1522

; <label>:1522                                    ; preds = %1518, %1509
  %1523 = phi float [ %1519, %1518 ], [ 0.000000e+00, %1509 ]
  %1524 = phi float [ %1520, %1518 ], [ 0.000000e+00, %1509 ]
  %1525 = phi float [ %1521, %1518 ], [ 0.000000e+00, %1509 ]
  %1526 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %53, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1527 = extractvalue %dx.types.CBufRet.i32 %1526, 0
  %1528 = extractvalue %dx.types.CBufRet.i32 %1526, 1
  %1529 = or i32 %1527, %1528
  %1530 = icmp eq i32 %1529, 0
  br i1 %1530, label %1531, label %1549

; <label>:1531                                    ; preds = %1522
  %1532 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %53, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1533 = extractvalue %dx.types.CBufRet.i32 %1532, 2
  %1534 = icmp ne i32 %1533, 0
  %1535 = fcmp fast ogt float %1510, 0x3FB99999A0000000
  %1536 = and i1 %1535, %1534
  br i1 %1536, label %1537, label %1549

; <label>:1537                                    ; preds = %1531
  %1538 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  %1539 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1538, i32 0, i32 0, i32 0, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1540 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %53, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1541 = extractvalue %dx.types.CBufRet.i32 %1540, 2
  %1542 = icmp ult i32 %1539, %1541
  br i1 %1542, label %1543, label %1545

; <label>:1543                                    ; preds = %1537
  %1544 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4108, i32 8 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=8>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1544, i32 %1539, i32 0, i32 %1514, i32 %1515, i32 undef, i32 undef, i8 3, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %1545

; <label>:1545                                    ; preds = %1543, %1537
  %1546 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %53, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1547 = extractvalue %dx.types.CBufRet.i32 %1546, 3
  %1548 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1548, i32 %1516, i32 0, i32 %1547, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %1549

; <label>:1549                                    ; preds = %1545, %1531, %1522, %1029, %549, %96
  %1550 = phi float [ %209, %96 ], [ %551, %1029 ], [ %551, %1522 ], [ %551, %1531 ], [ %551, %1545 ], [ %551, %549 ]
  %1551 = phi float [ 1.000000e+00, %96 ], [ 0.000000e+00, %1029 ], [ 0.000000e+00, %1522 ], [ 0.000000e+00, %1531 ], [ 0.000000e+00, %1545 ], [ 1.000000e+00, %549 ]
  %1552 = phi float [ 0.000000e+00, %96 ], [ 0.000000e+00, %1029 ], [ %1523, %1522 ], [ %1523, %1531 ], [ %1523, %1545 ], [ 0.000000e+00, %549 ]
  %1553 = phi float [ 0.000000e+00, %96 ], [ 0.000000e+00, %1029 ], [ %1524, %1522 ], [ %1524, %1531 ], [ %1524, %1545 ], [ 0.000000e+00, %549 ]
  %1554 = phi float [ 0.000000e+00, %96 ], [ 0.000000e+00, %1029 ], [ %1525, %1522 ], [ %1525, %1531 ], [ %1525, %1545 ], [ 0.000000e+00, %549 ]
  %1555 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1556 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1555, i32 %252, i32 undef)  ; BufferLoad(srv,index,wot)
  %1557 = extractvalue %dx.types.ResRet.i32 %1556, 0
  %1558 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1559 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1558, i32 %252, i32 undef)  ; BufferLoad(srv,index,wot)
  %1560 = extractvalue %dx.types.ResRet.i32 %1559, 0
  br i1 %259, label %1561, label %2790

; <label>:1561                                    ; preds = %1549
  %1562 = call float @dx.op.binary.f32(i32 36, float %227, float %1550)  ; FMin(a,b)
  %1563 = icmp eq i32 %1557, 0
  br i1 %1563, label %2258, label %1564

; <label>:1564                                    ; preds = %1561
  br label %1565

; <label>:1565                                    ; preds = %2243, %1564
  %1566 = phi float [ %2252, %2243 ], [ %1562, %1564 ]
  %1567 = phi i32 [ %2253, %2243 ], [ 0, %1564 ]
  %1568 = phi i32 [ %2254, %2243 ], [ 0, %1564 ]
  %1569 = phi i32 [ %2255, %2243 ], [ 0, %1564 ]
  %1570 = add i32 %1569, %1560
  %1571 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1572 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1571, i32 %1570, i32 undef)  ; BufferLoad(srv,index,wot)
  %1573 = extractvalue %dx.types.ResRet.i32 %1572, 0
  %1574 = mul i32 %1573, 3
  %1575 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1576 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1575, i32 %1574, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1577 = extractvalue %dx.types.ResRet.f32 %1576, 3
  %1578 = bitcast float %1577 to i32
  %1579 = mul i32 %1578, 7
  %1580 = add i32 %1579, 3
  %1581 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1582 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1581, i32 %1580, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1583 = extractvalue %dx.types.ResRet.f32 %1582, 0
  %1584 = bitcast float %1583 to i32
  %1585 = mul i32 %1584, 9
  %1586 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1587 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1586, i32 %1585, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1588 = extractvalue %dx.types.ResRet.f32 %1587, 0
  %1589 = extractvalue %dx.types.ResRet.f32 %1587, 1
  %1590 = extractvalue %dx.types.ResRet.f32 %1587, 2
  %1591 = extractvalue %dx.types.ResRet.f32 %1587, 3
  %1592 = add i32 %1585, 1
  %1593 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1586, i32 %1592, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1594 = extractvalue %dx.types.ResRet.f32 %1593, 0
  %1595 = extractvalue %dx.types.ResRet.f32 %1593, 1
  %1596 = extractvalue %dx.types.ResRet.f32 %1593, 2
  %1597 = extractvalue %dx.types.ResRet.f32 %1593, 3
  %1598 = add i32 %1585, 2
  %1599 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1586, i32 %1598, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1600 = extractvalue %dx.types.ResRet.f32 %1599, 0
  %1601 = extractvalue %dx.types.ResRet.f32 %1599, 1
  %1602 = extractvalue %dx.types.ResRet.f32 %1599, 2
  %1603 = extractvalue %dx.types.ResRet.f32 %1599, 3
  %1604 = add i32 %1585, 3
  %1605 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1586, i32 %1604, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1606 = extractvalue %dx.types.ResRet.f32 %1605, 0
  %1607 = extractvalue %dx.types.ResRet.f32 %1605, 1
  %1608 = extractvalue %dx.types.ResRet.f32 %1605, 2
  %1609 = add i32 %1585, 4
  %1610 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1586, i32 %1609, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1611 = extractvalue %dx.types.ResRet.f32 %1610, 0
  %1612 = extractvalue %dx.types.ResRet.f32 %1610, 1
  %1613 = add i32 %1585, 8
  %1614 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1586, i32 %1613, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1615 = extractvalue %dx.types.ResRet.f32 %1614, 3
  %1616 = call float @dx.op.unary.f32(i32 6, float %1606)  ; FAbs(value)
  %1617 = call float @dx.op.unary.f32(i32 6, float %1607)  ; FAbs(value)
  %1618 = call float @dx.op.unary.f32(i32 6, float %1608)  ; FAbs(value)
  %1619 = bitcast float %1611 to i32
  %1620 = and i32 %1619, 65535
  %1621 = lshr i32 %1619, 16
  %1622 = bitcast float %1612 to i32
  %1623 = fsub fast float %215, %1591
  %1624 = fsub fast float %216, %1597
  %1625 = fsub fast float %217, %1603
  %1626 = fmul fast float %1623, %1588
  %1627 = call float @dx.op.tertiary.f32(i32 46, float %1624, float %1594, float %1626)  ; FMad(a,b,c)
  %1628 = call float @dx.op.tertiary.f32(i32 46, float %1625, float %1600, float %1627)  ; FMad(a,b,c)
  %1629 = fmul fast float %1623, %1589
  %1630 = call float @dx.op.tertiary.f32(i32 46, float %1624, float %1595, float %1629)  ; FMad(a,b,c)
  %1631 = call float @dx.op.tertiary.f32(i32 46, float %1625, float %1601, float %1630)  ; FMad(a,b,c)
  %1632 = fmul fast float %1623, %1590
  %1633 = call float @dx.op.tertiary.f32(i32 46, float %1624, float %1596, float %1632)  ; FMad(a,b,c)
  %1634 = call float @dx.op.tertiary.f32(i32 46, float %1625, float %1602, float %1633)  ; FMad(a,b,c)
  %1635 = fmul fast float %1588, %201
  %1636 = call float @dx.op.tertiary.f32(i32 46, float %202, float %1594, float %1635)  ; FMad(a,b,c)
  %1637 = call float @dx.op.tertiary.f32(i32 46, float %203, float %1600, float %1636)  ; FMad(a,b,c)
  %1638 = fmul fast float %1589, %201
  %1639 = call float @dx.op.tertiary.f32(i32 46, float %202, float %1595, float %1638)  ; FMad(a,b,c)
  %1640 = call float @dx.op.tertiary.f32(i32 46, float %203, float %1601, float %1639)  ; FMad(a,b,c)
  %1641 = fmul fast float %1590, %201
  %1642 = call float @dx.op.tertiary.f32(i32 46, float %202, float %1596, float %1641)  ; FMad(a,b,c)
  %1643 = call float @dx.op.tertiary.f32(i32 46, float %203, float %1602, float %1642)  ; FMad(a,b,c)
  %1644 = fmul fast float %1637, %1562
  %1645 = fmul fast float %1640, %1562
  %1646 = fmul fast float %1643, %1562
  %1647 = fsub fast float -0.000000e+00, %1616
  %1648 = fsub fast float -0.000000e+00, %1617
  %1649 = fsub fast float -0.000000e+00, %1618
  %1650 = fdiv fast float 1.000000e+00, %1644
  %1651 = fdiv fast float 1.000000e+00, %1645
  %1652 = fdiv fast float 1.000000e+00, %1646
  %1653 = fsub fast float %1647, %1628
  %1654 = fsub fast float %1648, %1631
  %1655 = fsub fast float %1649, %1634
  %1656 = fmul fast float %1650, %1653
  %1657 = fmul fast float %1651, %1654
  %1658 = fmul fast float %1652, %1655
  %1659 = fsub fast float %1616, %1628
  %1660 = fsub fast float %1617, %1631
  %1661 = fsub fast float %1618, %1634
  %1662 = fmul fast float %1650, %1659
  %1663 = fmul fast float %1651, %1660
  %1664 = fmul fast float %1652, %1661
  %1665 = call float @dx.op.binary.f32(i32 36, float %1656, float %1662)  ; FMin(a,b)
  %1666 = call float @dx.op.binary.f32(i32 36, float %1657, float %1663)  ; FMin(a,b)
  %1667 = call float @dx.op.binary.f32(i32 36, float %1658, float %1664)  ; FMin(a,b)
  %1668 = call float @dx.op.binary.f32(i32 35, float %1656, float %1662)  ; FMax(a,b)
  %1669 = call float @dx.op.binary.f32(i32 35, float %1657, float %1663)  ; FMax(a,b)
  %1670 = call float @dx.op.binary.f32(i32 35, float %1658, float %1664)  ; FMax(a,b)
  %1671 = call float @dx.op.binary.f32(i32 35, float %1666, float %1667)  ; FMax(a,b)
  %1672 = call float @dx.op.binary.f32(i32 35, float %1665, float %1671)  ; FMax(a,b)
  %1673 = call float @dx.op.binary.f32(i32 36, float %1669, float %1670)  ; FMin(a,b)
  %1674 = call float @dx.op.binary.f32(i32 36, float %1668, float %1673)  ; FMin(a,b)
  %1675 = call float @dx.op.unary.f32(i32 7, float %1672)  ; Saturate(value)
  %1676 = call float @dx.op.unary.f32(i32 7, float %1674)  ; Saturate(value)
  %1677 = fmul fast float %1644, %1644
  %1678 = fmul fast float %1645, %1645
  %1679 = fadd fast float %1678, %1677
  %1680 = fmul fast float %1646, %1646
  %1681 = fadd fast float %1679, %1680
  %1682 = call float @dx.op.unary.f32(i32 24, float %1681)  ; Sqrt(value)
  %1683 = fmul fast float %1682, %1675
  %1684 = fmul fast float %1682, %1676
  %1685 = call float @dx.op.binary.f32(i32 35, float %1683, float %222)  ; FMax(a,b)
  %1686 = call float @dx.op.binary.f32(i32 36, float %1684, float %1562)  ; FMin(a,b)
  %1687 = fcmp fast olt float %1685, %1686
  br i1 %1687, label %1688, label %2243

; <label>:1688                                    ; preds = %1565
  %1689 = extractvalue %dx.types.ResRet.f32 %1605, 3
  %1690 = bitcast float %1689 to i32
  %1691 = and i32 %1690, 16777216
  %1692 = icmp eq i32 %1691, 0
  br i1 %1692, label %2243, label %1693

; <label>:1693                                    ; preds = %1688
  %1694 = fmul fast float %1685, %1637
  %1695 = fmul fast float %1685, %1640
  %1696 = fmul fast float %1685, %1643
  %1697 = fadd fast float %1694, %1628
  %1698 = fadd fast float %1695, %1631
  %1699 = fadd fast float %1696, %1634
  %1700 = fdiv fast float %1697, %1616
  %1701 = fdiv fast float %1698, %1617
  %1702 = fmul fast float %1700, 5.000000e-01
  %1703 = fmul fast float %1701, 5.000000e-01
  %1704 = fadd fast float %1702, 5.000000e-01
  %1705 = fsub fast float 5.000000e-01, %1703
  %1706 = call float @dx.op.unary.f32(i32 7, float %1704)  ; Saturate(value)
  %1707 = call float @dx.op.unary.f32(i32 7, float %1705)  ; Saturate(value)
  %1708 = call float @dx.op.binary.f32(i32 36, float %1706, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1709 = call float @dx.op.binary.f32(i32 36, float %1707, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1710 = uitofp i32 %1620 to float
  %1711 = uitofp i32 %1621 to float
  %1712 = fmul fast float %1708, %1710
  %1713 = fmul fast float %1709, %1711
  %1714 = fptoui float %1712 to i32
  %1715 = fptoui float %1713 to i32
  %1716 = mul i32 %1715, %1620
  %1717 = add i32 %1714, %1622
  %1718 = add i32 %1717, %1716
  %1719 = shl i32 %1718, 3
  %1720 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1721 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1720, i32 %1719, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1722 = extractvalue %dx.types.ResRet.i32 %1721, 0
  %1723 = shl i32 %1722, 3
  %1724 = and i32 %1723, 32760
  %1725 = lshr i32 %1722, 9
  %1726 = and i32 %1725, 32760
  %1727 = lshr i32 %1722, 24
  %1728 = and i32 %1727, 15
  %1729 = lshr i32 %1722, 28
  %1730 = add nuw nsw i32 %1728, 25
  %1731 = add nuw nsw i32 %1729, 25
  %1732 = and i32 %1730, 31
  %1733 = and i32 %1731, 31
  %1734 = shl i32 1, %1732
  %1735 = shl i32 1, %1733
  %1736 = icmp ugt i32 %1728, 7
  %1737 = icmp slt i32 %1722, 0
  %1738 = select i1 %1736, i32 %1734, i32 1
  %1739 = select i1 %1737, i32 %1735, i32 1
  %1740 = uitofp i32 %1738 to float
  %1741 = uitofp i32 %1739 to float
  %1742 = fmul fast float %1740, %1708
  %1743 = fmul fast float %1741, %1709
  %1744 = fptoui float %1742 to i32
  %1745 = fptoui float %1743 to i32
  %1746 = shl i32 1, %1728
  %1747 = shl i32 1, %1729
  %1748 = call float @dx.op.unary.f32(i32 22, float %1742)  ; Frc(value)
  %1749 = call float @dx.op.unary.f32(i32 22, float %1743)  ; Frc(value)
  %1750 = icmp eq i32 %1744, 0
  %1751 = icmp eq i32 %1745, 0
  %1752 = select i1 %1750, float 0.000000e+00, float 5.000000e-01
  %1753 = select i1 %1751, float 0.000000e+00, float 5.000000e-01
  %1754 = add i32 %1744, 1
  %1755 = add i32 %1745, 1
  %1756 = icmp eq i32 %1754, %1738
  %1757 = icmp eq i32 %1755, %1739
  %1758 = uitofp i32 %1746 to float
  %1759 = select i1 %1736, float 1.280000e+02, float %1758
  %1760 = uitofp i32 %1747 to float
  %1761 = select i1 %1737, float 1.280000e+02, float %1760
  %1762 = fsub fast float %1759, %1752
  %1763 = fsub fast float %1761, %1753
  %1764 = select i1 %1756, float -0.000000e+00, float -5.000000e-01
  %1765 = fadd fast float %1762, %1764
  %1766 = select i1 %1757, float -0.000000e+00, float -5.000000e-01
  %1767 = fadd fast float %1763, %1766
  %1768 = fmul fast float %1765, %1748
  %1769 = fmul fast float %1767, %1749
  %1770 = fadd fast float %1768, %1752
  %1771 = fadd fast float %1769, %1753
  %1772 = fadd fast float %1759, -1.500000e+00
  %1773 = fadd fast float %1761, -1.500000e+00
  %1774 = call float @dx.op.binary.f32(i32 35, float %1770, float 5.000000e-01)  ; FMax(a,b)
  %1775 = call float @dx.op.binary.f32(i32 35, float %1771, float 5.000000e-01)  ; FMax(a,b)
  %1776 = call float @dx.op.binary.f32(i32 36, float %1774, float %1772)  ; FMin(a,b)
  %1777 = call float @dx.op.binary.f32(i32 36, float %1775, float %1773)  ; FMin(a,b)
  %1778 = uitofp i32 %1724 to float
  %1779 = uitofp i32 %1726 to float
  %1780 = fadd fast float %1776, %1778
  %1781 = fadd fast float %1777, %1779
  %1782 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %51, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1783 = extractvalue %dx.types.CBufRet.f32 %1782, 0
  %1784 = extractvalue %dx.types.CBufRet.f32 %1782, 1
  %1785 = fmul fast float %1783, %1780
  %1786 = fmul fast float %1784, %1781
  %1787 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1788 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %39, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1789 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1787, %dx.types.Handle %1788, float %1785, float %1786, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1790 = extractvalue %dx.types.ResRet.f32 %1789, 0
  %1791 = fmul fast float %1790, 2.000000e+00
  %1792 = fadd fast float %1791, -1.000000e+00
  %1793 = fmul fast float %1792, %1618
  %1794 = fsub fast float -0.000000e+00, %1793
  %1795 = fcmp fast ogt float %1699, %1794
  %1796 = zext i1 %1795 to i32
  %1797 = fcmp fast olt float %1685, %1615
  br i1 %1797, label %1798, label %1998

; <label>:1798                                    ; preds = %1693
  %1799 = fmul fast float %1637, %1615
  %1800 = fmul fast float %1640, %1615
  %1801 = fmul fast float %1643, %1615
  %1802 = fadd fast float %1799, %1628
  %1803 = fadd fast float %1800, %1631
  %1804 = fadd fast float %1801, %1634
  %1805 = fdiv fast float %1802, %1616
  %1806 = fdiv fast float %1803, %1617
  %1807 = fmul fast float %1805, 5.000000e-01
  %1808 = fmul fast float %1806, 5.000000e-01
  %1809 = fadd fast float %1807, 5.000000e-01
  %1810 = fsub fast float 5.000000e-01, %1808
  %1811 = call float @dx.op.unary.f32(i32 7, float %1809)  ; Saturate(value)
  %1812 = call float @dx.op.unary.f32(i32 7, float %1810)  ; Saturate(value)
  %1813 = call float @dx.op.binary.f32(i32 36, float %1811, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1814 = call float @dx.op.binary.f32(i32 36, float %1812, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1815 = fmul fast float %1813, %1710
  %1816 = fmul fast float %1814, %1711
  %1817 = fptoui float %1815 to i32
  %1818 = fptoui float %1816 to i32
  %1819 = mul i32 %1818, %1620
  %1820 = add i32 %1817, %1622
  %1821 = add i32 %1820, %1819
  %1822 = shl i32 %1821, 3
  %1823 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1720, i32 %1822, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1824 = extractvalue %dx.types.ResRet.i32 %1823, 0
  %1825 = shl i32 %1824, 3
  %1826 = and i32 %1825, 32760
  %1827 = lshr i32 %1824, 9
  %1828 = and i32 %1827, 32760
  %1829 = lshr i32 %1824, 24
  %1830 = and i32 %1829, 15
  %1831 = lshr i32 %1824, 28
  %1832 = add nuw nsw i32 %1830, 25
  %1833 = add nuw nsw i32 %1831, 25
  %1834 = and i32 %1832, 31
  %1835 = and i32 %1833, 31
  %1836 = shl i32 1, %1834
  %1837 = shl i32 1, %1835
  %1838 = icmp ugt i32 %1830, 7
  %1839 = icmp slt i32 %1824, 0
  %1840 = select i1 %1838, i32 %1836, i32 1
  %1841 = select i1 %1839, i32 %1837, i32 1
  %1842 = uitofp i32 %1840 to float
  %1843 = uitofp i32 %1841 to float
  %1844 = fmul fast float %1842, %1813
  %1845 = fmul fast float %1843, %1814
  %1846 = fptoui float %1844 to i32
  %1847 = fptoui float %1845 to i32
  %1848 = shl i32 1, %1830
  %1849 = shl i32 1, %1831
  %1850 = call float @dx.op.unary.f32(i32 22, float %1844)  ; Frc(value)
  %1851 = call float @dx.op.unary.f32(i32 22, float %1845)  ; Frc(value)
  %1852 = icmp eq i32 %1846, 0
  %1853 = icmp eq i32 %1847, 0
  %1854 = select i1 %1852, float 0.000000e+00, float 5.000000e-01
  %1855 = select i1 %1853, float 0.000000e+00, float 5.000000e-01
  %1856 = add i32 %1846, 1
  %1857 = add i32 %1847, 1
  %1858 = icmp eq i32 %1856, %1840
  %1859 = icmp eq i32 %1857, %1841
  %1860 = uitofp i32 %1848 to float
  %1861 = select i1 %1838, float 1.280000e+02, float %1860
  %1862 = uitofp i32 %1849 to float
  %1863 = select i1 %1839, float 1.280000e+02, float %1862
  %1864 = fsub fast float %1861, %1854
  %1865 = fsub fast float %1863, %1855
  %1866 = select i1 %1858, float -0.000000e+00, float -5.000000e-01
  %1867 = fadd fast float %1864, %1866
  %1868 = select i1 %1859, float -0.000000e+00, float -5.000000e-01
  %1869 = fadd fast float %1865, %1868
  %1870 = fmul fast float %1867, %1850
  %1871 = fmul fast float %1869, %1851
  %1872 = fadd fast float %1870, %1854
  %1873 = fadd fast float %1871, %1855
  %1874 = fadd fast float %1861, -1.500000e+00
  %1875 = fadd fast float %1863, -1.500000e+00
  %1876 = call float @dx.op.binary.f32(i32 35, float %1872, float 5.000000e-01)  ; FMax(a,b)
  %1877 = call float @dx.op.binary.f32(i32 35, float %1873, float 5.000000e-01)  ; FMax(a,b)
  %1878 = call float @dx.op.binary.f32(i32 36, float %1876, float %1874)  ; FMin(a,b)
  %1879 = call float @dx.op.binary.f32(i32 36, float %1877, float %1875)  ; FMin(a,b)
  %1880 = uitofp i32 %1826 to float
  %1881 = uitofp i32 %1828 to float
  %1882 = fadd fast float %1878, %1880
  %1883 = fadd fast float %1879, %1881
  %1884 = fmul fast float %1783, %1882
  %1885 = fmul fast float %1784, %1883
  %1886 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1787, %dx.types.Handle %1788, float %1884, float %1885, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1887 = extractvalue %dx.types.ResRet.f32 %1886, 0
  %1888 = fmul fast float %1887, 2.000000e+00
  %1889 = fadd fast float %1888, -1.000000e+00
  %1890 = fmul fast float %1889, %1618
  %1891 = fsub fast float -0.000000e+00, %1890
  %1892 = fcmp fast ogt float %1804, %1891
  %1893 = zext i1 %1892 to i32
  br i1 %1795, label %1894, label %1998

; <label>:1894                                    ; preds = %1798
  br i1 %1892, label %1998, label %1895

; <label>:1895                                    ; preds = %1894
  %1896 = fadd fast float %1793, %1699
  %1897 = fsub fast float %1685, %1615
  %1898 = fmul fast float %1897, %1643
  %1899 = fadd fast float %1793, %1898
  %1900 = fsub fast float %1899, %1890
  %1901 = fdiv fast float %1896, %1900
  %1902 = fmul fast float %1901, %1615
  %1903 = fadd fast float %1902, %1685
  %1904 = call float @dx.op.binary.f32(i32 35, float %1903, float %1685)  ; FMax(a,b)
  %1905 = call float @dx.op.binary.f32(i32 36, float %1904, float %1686)  ; FMin(a,b)
  %1906 = fmul fast float %1905, %1637
  %1907 = fmul fast float %1905, %1640
  %1908 = fadd fast float %1906, %1628
  %1909 = fadd fast float %1907, %1631
  %1910 = fdiv fast float %1908, %1616
  %1911 = fdiv fast float %1909, %1617
  %1912 = fmul fast float %1910, 5.000000e-01
  %1913 = fmul fast float %1911, 5.000000e-01
  %1914 = fadd fast float %1912, 5.000000e-01
  %1915 = fsub fast float 5.000000e-01, %1913
  %1916 = call float @dx.op.unary.f32(i32 7, float %1914)  ; Saturate(value)
  %1917 = call float @dx.op.unary.f32(i32 7, float %1915)  ; Saturate(value)
  %1918 = call float @dx.op.binary.f32(i32 36, float %1916, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1919 = call float @dx.op.binary.f32(i32 36, float %1917, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1920 = fmul fast float %1918, %1710
  %1921 = fmul fast float %1919, %1711
  %1922 = fptoui float %1920 to i32
  %1923 = fptoui float %1921 to i32
  %1924 = mul i32 %1923, %1620
  %1925 = add i32 %1922, %1622
  %1926 = add i32 %1925, %1924
  %1927 = shl i32 %1926, 3
  %1928 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1720, i32 %1927, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1929 = extractvalue %dx.types.ResRet.i32 %1928, 0
  %1930 = shl i32 %1929, 3
  %1931 = and i32 %1930, 32760
  %1932 = lshr i32 %1929, 9
  %1933 = and i32 %1932, 32760
  %1934 = lshr i32 %1929, 24
  %1935 = and i32 %1934, 15
  %1936 = lshr i32 %1929, 28
  %1937 = add nuw nsw i32 %1935, 25
  %1938 = add nuw nsw i32 %1936, 25
  %1939 = and i32 %1937, 31
  %1940 = and i32 %1938, 31
  %1941 = shl i32 1, %1939
  %1942 = shl i32 1, %1940
  %1943 = icmp ugt i32 %1935, 7
  %1944 = icmp slt i32 %1929, 0
  %1945 = select i1 %1943, i32 %1941, i32 1
  %1946 = select i1 %1944, i32 %1942, i32 1
  %1947 = uitofp i32 %1945 to float
  %1948 = uitofp i32 %1946 to float
  %1949 = fmul fast float %1947, %1918
  %1950 = fmul fast float %1948, %1919
  %1951 = fptoui float %1949 to i32
  %1952 = fptoui float %1950 to i32
  %1953 = shl i32 1, %1935
  %1954 = shl i32 1, %1936
  %1955 = call float @dx.op.unary.f32(i32 22, float %1949)  ; Frc(value)
  %1956 = call float @dx.op.unary.f32(i32 22, float %1950)  ; Frc(value)
  %1957 = icmp eq i32 %1951, 0
  %1958 = icmp eq i32 %1952, 0
  %1959 = select i1 %1957, float 0.000000e+00, float 5.000000e-01
  %1960 = select i1 %1958, float 0.000000e+00, float 5.000000e-01
  %1961 = add i32 %1951, 1
  %1962 = add i32 %1952, 1
  %1963 = icmp eq i32 %1961, %1945
  %1964 = icmp eq i32 %1962, %1946
  %1965 = uitofp i32 %1953 to float
  %1966 = select i1 %1943, float 1.280000e+02, float %1965
  %1967 = uitofp i32 %1954 to float
  %1968 = select i1 %1944, float 1.280000e+02, float %1967
  %1969 = fsub fast float %1966, %1959
  %1970 = fsub fast float %1968, %1960
  %1971 = select i1 %1963, float -0.000000e+00, float -5.000000e-01
  %1972 = fadd fast float %1969, %1971
  %1973 = select i1 %1964, float -0.000000e+00, float -5.000000e-01
  %1974 = fadd fast float %1970, %1973
  %1975 = fmul fast float %1972, %1955
  %1976 = fmul fast float %1974, %1956
  %1977 = fadd fast float %1975, %1959
  %1978 = fadd fast float %1976, %1960
  %1979 = fadd fast float %1966, -1.500000e+00
  %1980 = fadd fast float %1968, -1.500000e+00
  %1981 = call float @dx.op.binary.f32(i32 35, float %1977, float 5.000000e-01)  ; FMax(a,b)
  %1982 = call float @dx.op.binary.f32(i32 35, float %1978, float 5.000000e-01)  ; FMax(a,b)
  %1983 = call float @dx.op.binary.f32(i32 36, float %1981, float %1979)  ; FMin(a,b)
  %1984 = call float @dx.op.binary.f32(i32 36, float %1982, float %1980)  ; FMin(a,b)
  %1985 = uitofp i32 %1931 to float
  %1986 = uitofp i32 %1933 to float
  %1987 = fadd fast float %1983, %1985
  %1988 = fadd fast float %1984, %1986
  %1989 = fmul fast float %1783, %1987
  %1990 = fmul fast float %1784, %1988
  %1991 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1992 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1991, %dx.types.Handle %1788, float %1989, float %1990, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1993 = extractvalue %dx.types.ResRet.f32 %1992, 0
  %1994 = fcmp fast ogt float %1993, 5.000000e-01
  %1995 = select i1 %1994, float %1905, float %1562
  %1996 = zext i1 %1994 to i32
  %1997 = zext i1 %1994 to i32
  br label %1998

; <label>:1998                                    ; preds = %1895, %1894, %1798, %1693
  %1999 = phi float [ %1685, %1693 ], [ %1615, %1894 ], [ %1615, %1798 ], [ %1615, %1895 ]
  %2000 = phi i32 [ %1796, %1693 ], [ %1893, %1894 ], [ %1893, %1798 ], [ %1893, %1895 ]
  %2001 = phi float [ %1794, %1693 ], [ %1891, %1894 ], [ %1891, %1798 ], [ %1891, %1895 ]
  %2002 = phi float [ %1699, %1693 ], [ %1804, %1894 ], [ %1804, %1798 ], [ %1804, %1895 ]
  %2003 = phi float [ %1562, %1693 ], [ %1562, %1894 ], [ %1562, %1798 ], [ %1995, %1895 ]
  %2004 = phi i32 [ 0, %1693 ], [ 0, %1894 ], [ 0, %1798 ], [ %1996, %1895 ]
  %2005 = phi i32 [ 0, %1693 ], [ 0, %1894 ], [ 0, %1798 ], [ %1997, %1895 ]
  %2006 = icmp eq i32 %2005, 0
  br i1 %2006, label %2007, label %2243

; <label>:2007                                    ; preds = %1998
  %2008 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %53, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %2009 = extractvalue %dx.types.CBufRet.i32 %2008, 0
  %2010 = fsub fast float %1686, %1999
  %2011 = sitofp i32 %2009 to float
  %2012 = fdiv fast float %2010, %2011
  %2013 = call float @dx.op.binary.f32(i32 35, float %1615, float %2012)  ; FMax(a,b)
  %2014 = icmp sgt i32 %2009, 0
  br i1 %2014, label %2015, label %2243

; <label>:2015                                    ; preds = %2007
  br label %2016

; <label>:2016                                    ; preds = %2238, %2015
  %2017 = phi float [ %2025, %2238 ], [ %1999, %2015 ]
  %2018 = phi i32 [ %2239, %2238 ], [ 0, %2015 ]
  %2019 = phi i32 [ %2126, %2238 ], [ %2000, %2015 ]
  %2020 = phi float [ %2124, %2238 ], [ %2001, %2015 ]
  %2021 = phi float [ %2031, %2238 ], [ %2002, %2015 ]
  %2022 = phi float [ %2232, %2238 ], [ %2003, %2015 ]
  %2023 = phi i32 [ %2233, %2238 ], [ %2004, %2015 ]
  %2024 = fadd fast float %2017, %2013
  %2025 = call float @dx.op.binary.f32(i32 36, float %2024, float %1686)  ; FMin(a,b)
  %2026 = fmul fast float %2025, %1637
  %2027 = fmul fast float %2025, %1640
  %2028 = fmul fast float %2025, %1643
  %2029 = fadd fast float %2026, %1628
  %2030 = fadd fast float %2027, %1631
  %2031 = fadd fast float %2028, %1634
  %2032 = fdiv fast float %2029, %1616
  %2033 = fdiv fast float %2030, %1617
  %2034 = fmul fast float %2032, 5.000000e-01
  %2035 = fmul fast float %2033, 5.000000e-01
  %2036 = fadd fast float %2034, 5.000000e-01
  %2037 = fsub fast float 5.000000e-01, %2035
  %2038 = call float @dx.op.unary.f32(i32 7, float %2036)  ; Saturate(value)
  %2039 = call float @dx.op.unary.f32(i32 7, float %2037)  ; Saturate(value)
  %2040 = call float @dx.op.binary.f32(i32 36, float %2038, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2041 = call float @dx.op.binary.f32(i32 36, float %2039, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2042 = fmul fast float %2040, %1710
  %2043 = fmul fast float %2041, %1711
  %2044 = fptoui float %2042 to i32
  %2045 = fptoui float %2043 to i32
  %2046 = mul i32 %2045, %1620
  %2047 = add i32 %2044, %1622
  %2048 = add i32 %2047, %2046
  %2049 = shl i32 %2048, 3
  %2050 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %2051 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2050, i32 %2049, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2052 = extractvalue %dx.types.ResRet.i32 %2051, 0
  %2053 = shl i32 %2052, 3
  %2054 = and i32 %2053, 32760
  %2055 = lshr i32 %2052, 9
  %2056 = and i32 %2055, 32760
  %2057 = lshr i32 %2052, 24
  %2058 = and i32 %2057, 15
  %2059 = lshr i32 %2052, 28
  %2060 = add nuw nsw i32 %2058, 25
  %2061 = add nuw nsw i32 %2059, 25
  %2062 = and i32 %2060, 31
  %2063 = and i32 %2061, 31
  %2064 = shl i32 1, %2062
  %2065 = shl i32 1, %2063
  %2066 = icmp ugt i32 %2058, 7
  %2067 = icmp slt i32 %2052, 0
  %2068 = select i1 %2066, i32 %2064, i32 1
  %2069 = select i1 %2067, i32 %2065, i32 1
  %2070 = uitofp i32 %2068 to float
  %2071 = uitofp i32 %2069 to float
  %2072 = fmul fast float %2070, %2040
  %2073 = fmul fast float %2071, %2041
  %2074 = fptoui float %2072 to i32
  %2075 = fptoui float %2073 to i32
  %2076 = shl i32 1, %2058
  %2077 = shl i32 1, %2059
  %2078 = call float @dx.op.unary.f32(i32 22, float %2072)  ; Frc(value)
  %2079 = call float @dx.op.unary.f32(i32 22, float %2073)  ; Frc(value)
  %2080 = icmp eq i32 %2074, 0
  %2081 = icmp eq i32 %2075, 0
  %2082 = select i1 %2080, float 0.000000e+00, float 5.000000e-01
  %2083 = select i1 %2081, float 0.000000e+00, float 5.000000e-01
  %2084 = add i32 %2074, 1
  %2085 = add i32 %2075, 1
  %2086 = icmp eq i32 %2084, %2068
  %2087 = icmp eq i32 %2085, %2069
  %2088 = uitofp i32 %2076 to float
  %2089 = select i1 %2066, float 1.280000e+02, float %2088
  %2090 = uitofp i32 %2077 to float
  %2091 = select i1 %2067, float 1.280000e+02, float %2090
  %2092 = fsub fast float %2089, %2082
  %2093 = fsub fast float %2091, %2083
  %2094 = select i1 %2086, float -0.000000e+00, float -5.000000e-01
  %2095 = fadd fast float %2092, %2094
  %2096 = select i1 %2087, float -0.000000e+00, float -5.000000e-01
  %2097 = fadd fast float %2093, %2096
  %2098 = fmul fast float %2095, %2078
  %2099 = fmul fast float %2097, %2079
  %2100 = fadd fast float %2098, %2082
  %2101 = fadd fast float %2099, %2083
  %2102 = fadd fast float %2089, -1.500000e+00
  %2103 = fadd fast float %2091, -1.500000e+00
  %2104 = call float @dx.op.binary.f32(i32 35, float %2100, float 5.000000e-01)  ; FMax(a,b)
  %2105 = call float @dx.op.binary.f32(i32 35, float %2101, float 5.000000e-01)  ; FMax(a,b)
  %2106 = call float @dx.op.binary.f32(i32 36, float %2104, float %2102)  ; FMin(a,b)
  %2107 = call float @dx.op.binary.f32(i32 36, float %2105, float %2103)  ; FMin(a,b)
  %2108 = uitofp i32 %2054 to float
  %2109 = uitofp i32 %2056 to float
  %2110 = fadd fast float %2106, %2108
  %2111 = fadd fast float %2107, %2109
  %2112 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %51, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2113 = extractvalue %dx.types.CBufRet.f32 %2112, 0
  %2114 = extractvalue %dx.types.CBufRet.f32 %2112, 1
  %2115 = fmul fast float %2113, %2110
  %2116 = fmul fast float %2114, %2111
  %2117 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2118 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %39, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2119 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2117, %dx.types.Handle %2118, float %2115, float %2116, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2120 = extractvalue %dx.types.ResRet.f32 %2119, 0
  %2121 = fmul fast float %2120, 2.000000e+00
  %2122 = fadd fast float %2121, -1.000000e+00
  %2123 = fmul fast float %2122, %1618
  %2124 = fsub fast float -0.000000e+00, %2123
  %2125 = fcmp fast ogt float %2031, %2124
  %2126 = zext i1 %2125 to i32
  %2127 = icmp ne i32 %2019, 0
  %2128 = xor i1 %2127, %2125
  br i1 %2128, label %2129, label %2231

; <label>:2129                                    ; preds = %2016
  %2130 = fsub fast float %2021, %2020
  %2131 = fsub fast float %2130, %2031
  %2132 = fsub fast float %2131, %2123
  %2133 = fdiv fast float %2130, %2132
  %2134 = fmul fast float %2133, %2013
  %2135 = fadd fast float %2134, %2017
  %2136 = call float @dx.op.binary.f32(i32 35, float %2135, float %1999)  ; FMax(a,b)
  %2137 = call float @dx.op.binary.f32(i32 36, float %2136, float %1686)  ; FMin(a,b)
  %2138 = fmul fast float %2137, %1637
  %2139 = fmul fast float %2137, %1640
  %2140 = fadd fast float %2138, %1628
  %2141 = fadd fast float %2139, %1631
  %2142 = fdiv fast float %2140, %1616
  %2143 = fdiv fast float %2141, %1617
  %2144 = fmul fast float %2142, 5.000000e-01
  %2145 = fmul fast float %2143, 5.000000e-01
  %2146 = fadd fast float %2144, 5.000000e-01
  %2147 = fsub fast float 5.000000e-01, %2145
  %2148 = call float @dx.op.unary.f32(i32 7, float %2146)  ; Saturate(value)
  %2149 = call float @dx.op.unary.f32(i32 7, float %2147)  ; Saturate(value)
  %2150 = call float @dx.op.binary.f32(i32 36, float %2148, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2151 = call float @dx.op.binary.f32(i32 36, float %2149, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2152 = fmul fast float %2150, %1710
  %2153 = fmul fast float %2151, %1711
  %2154 = fptoui float %2152 to i32
  %2155 = fptoui float %2153 to i32
  %2156 = mul i32 %2155, %1620
  %2157 = add i32 %2154, %1622
  %2158 = add i32 %2157, %2156
  %2159 = shl i32 %2158, 3
  %2160 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2050, i32 %2159, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2161 = extractvalue %dx.types.ResRet.i32 %2160, 0
  %2162 = shl i32 %2161, 3
  %2163 = and i32 %2162, 32760
  %2164 = lshr i32 %2161, 9
  %2165 = and i32 %2164, 32760
  %2166 = lshr i32 %2161, 24
  %2167 = and i32 %2166, 15
  %2168 = lshr i32 %2161, 28
  %2169 = add nuw nsw i32 %2167, 25
  %2170 = add nuw nsw i32 %2168, 25
  %2171 = and i32 %2169, 31
  %2172 = and i32 %2170, 31
  %2173 = shl i32 1, %2171
  %2174 = shl i32 1, %2172
  %2175 = icmp ugt i32 %2167, 7
  %2176 = icmp slt i32 %2161, 0
  %2177 = select i1 %2175, i32 %2173, i32 1
  %2178 = select i1 %2176, i32 %2174, i32 1
  %2179 = uitofp i32 %2177 to float
  %2180 = uitofp i32 %2178 to float
  %2181 = fmul fast float %2179, %2150
  %2182 = fmul fast float %2180, %2151
  %2183 = fptoui float %2181 to i32
  %2184 = fptoui float %2182 to i32
  %2185 = shl i32 1, %2167
  %2186 = shl i32 1, %2168
  %2187 = call float @dx.op.unary.f32(i32 22, float %2181)  ; Frc(value)
  %2188 = call float @dx.op.unary.f32(i32 22, float %2182)  ; Frc(value)
  %2189 = icmp eq i32 %2183, 0
  %2190 = icmp eq i32 %2184, 0
  %2191 = select i1 %2189, float 0.000000e+00, float 5.000000e-01
  %2192 = select i1 %2190, float 0.000000e+00, float 5.000000e-01
  %2193 = add i32 %2183, 1
  %2194 = add i32 %2184, 1
  %2195 = icmp eq i32 %2193, %2177
  %2196 = icmp eq i32 %2194, %2178
  %2197 = uitofp i32 %2185 to float
  %2198 = select i1 %2175, float 1.280000e+02, float %2197
  %2199 = uitofp i32 %2186 to float
  %2200 = select i1 %2176, float 1.280000e+02, float %2199
  %2201 = fsub fast float %2198, %2191
  %2202 = fsub fast float %2200, %2192
  %2203 = select i1 %2195, float -0.000000e+00, float -5.000000e-01
  %2204 = fadd fast float %2201, %2203
  %2205 = select i1 %2196, float -0.000000e+00, float -5.000000e-01
  %2206 = fadd fast float %2202, %2205
  %2207 = fmul fast float %2204, %2187
  %2208 = fmul fast float %2206, %2188
  %2209 = fadd fast float %2207, %2191
  %2210 = fadd fast float %2208, %2192
  %2211 = fadd fast float %2198, -1.500000e+00
  %2212 = fadd fast float %2200, -1.500000e+00
  %2213 = call float @dx.op.binary.f32(i32 35, float %2209, float 5.000000e-01)  ; FMax(a,b)
  %2214 = call float @dx.op.binary.f32(i32 35, float %2210, float 5.000000e-01)  ; FMax(a,b)
  %2215 = call float @dx.op.binary.f32(i32 36, float %2213, float %2211)  ; FMin(a,b)
  %2216 = call float @dx.op.binary.f32(i32 36, float %2214, float %2212)  ; FMin(a,b)
  %2217 = uitofp i32 %2163 to float
  %2218 = uitofp i32 %2165 to float
  %2219 = fadd fast float %2215, %2217
  %2220 = fadd fast float %2216, %2218
  %2221 = fmul fast float %2113, %2219
  %2222 = fmul fast float %2114, %2220
  %2223 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2224 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2223, %dx.types.Handle %2118, float %2221, float %2222, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2225 = extractvalue %dx.types.ResRet.f32 %2224, 0
  %2226 = fcmp fast ogt float %2225, 5.000000e-01
  %2227 = xor i32 %2126, 1
  %2228 = select i1 %2226, float %2137, float %2022
  %2229 = select i1 %2226, i32 %2227, i32 %2023
  %2230 = zext i1 %2226 to i32
  br label %2231

; <label>:2231                                    ; preds = %2129, %2016
  %2232 = phi float [ %2022, %2016 ], [ %2228, %2129 ]
  %2233 = phi i32 [ %2023, %2016 ], [ %2229, %2129 ]
  %2234 = phi i32 [ 0, %2016 ], [ %2230, %2129 ]
  %2235 = icmp ne i32 %2234, 0
  %2236 = fcmp fast oge float %2025, %1686
  %2237 = or i1 %2236, %2235
  br i1 %2237, label %2241, label %2238

; <label>:2238                                    ; preds = %2231
  %2239 = add nuw nsw i32 %2018, 1
  %2240 = icmp slt i32 %2239, %2009
  br i1 %2240, label %2016, label %2241

; <label>:2241                                    ; preds = %2238, %2231
  %2242 = phi i32 [ 0, %2238 ], [ %2234, %2231 ]
  br label %2243

; <label>:2243                                    ; preds = %2241, %2007, %1998, %1688, %1565
  %2244 = phi float [ %2003, %1998 ], [ %1562, %1688 ], [ %1562, %1565 ], [ %2003, %2007 ], [ %2232, %2241 ]
  %2245 = phi i32 [ %2004, %1998 ], [ 0, %1688 ], [ 0, %1565 ], [ %2004, %2007 ], [ %2233, %2241 ]
  %2246 = phi i32 [ %2005, %1998 ], [ 0, %1688 ], [ 0, %1565 ], [ 0, %2007 ], [ %2242, %2241 ]
  %2247 = icmp ne i32 %2246, 0
  %2248 = fcmp fast olt float %2244, %1566
  %2249 = and i1 %2248, %2247
  %2250 = icmp ne i32 %2245, 0
  %2251 = zext i1 %2250 to i32
  %2252 = select i1 %2249, float %2244, float %1566
  %2253 = select i1 %2249, i32 %1573, i32 %1567
  %2254 = select i1 %2249, i32 %2251, i32 %1568
  %2255 = add nuw i32 %1569, 1
  %2256 = icmp eq i32 %2255, %1557
  br i1 %2256, label %2257, label %1565

; <label>:2257                                    ; preds = %2243
  br label %2258

; <label>:2258                                    ; preds = %2257, %1561
  %2259 = phi float [ %1562, %1561 ], [ %2252, %2257 ]
  %2260 = phi i32 [ 0, %1561 ], [ %2253, %2257 ]
  %2261 = phi i32 [ 0, %1561 ], [ %2254, %2257 ]
  %2262 = fcmp fast olt float %2259, %1562
  br i1 %2262, label %2263, label %2781

; <label>:2263                                    ; preds = %2258
  %2264 = mul i32 %2260, 3
  %2265 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %2266 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2265, i32 %2264, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2267 = extractvalue %dx.types.ResRet.f32 %2266, 3
  %2268 = bitcast float %2267 to i32
  %2269 = fmul fast float %2259, %201
  %2270 = fmul fast float %2259, %202
  %2271 = fmul fast float %2259, %203
  %2272 = fadd fast float %2269, %215
  %2273 = fadd fast float %2270, %216
  %2274 = fadd fast float %2271, %217
  %2275 = fmul fast float %2259, %223
  %2276 = call float @dx.op.binary.f32(i32 35, float %2275, float 0.000000e+00)  ; FMax(a,b)
  %2277 = icmp eq i32 %2261, 0
  br i1 %2277, label %2781, label %2278

; <label>:2278                                    ; preds = %2263
  %2279 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %51, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2280 = extractvalue %dx.types.CBufRet.i32 %2279, 1
  %2281 = icmp ult i32 %2268, %2280
  br i1 %2281, label %2282, label %2781

; <label>:2282                                    ; preds = %2278
  %2283 = mul i32 %2268, 7
  %2284 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %2285 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2284, i32 %2283, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2286 = extractvalue %dx.types.ResRet.f32 %2285, 0
  %2287 = extractvalue %dx.types.ResRet.f32 %2285, 1
  %2288 = extractvalue %dx.types.ResRet.f32 %2285, 2
  %2289 = extractvalue %dx.types.ResRet.f32 %2285, 3
  %2290 = add i32 %2283, 1
  %2291 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2284, i32 %2290, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2292 = extractvalue %dx.types.ResRet.f32 %2291, 0
  %2293 = extractvalue %dx.types.ResRet.f32 %2291, 1
  %2294 = extractvalue %dx.types.ResRet.f32 %2291, 2
  %2295 = extractvalue %dx.types.ResRet.f32 %2291, 3
  %2296 = add i32 %2283, 2
  %2297 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2284, i32 %2296, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2298 = extractvalue %dx.types.ResRet.f32 %2297, 0
  %2299 = extractvalue %dx.types.ResRet.f32 %2297, 1
  %2300 = extractvalue %dx.types.ResRet.f32 %2297, 2
  %2301 = extractvalue %dx.types.ResRet.f32 %2297, 3
  %2302 = add i32 %2283, 3
  %2303 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2284, i32 %2302, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2304 = extractvalue %dx.types.ResRet.f32 %2303, 0
  %2305 = extractvalue %dx.types.ResRet.f32 %2303, 1
  %2306 = extractvalue %dx.types.ResRet.f32 %2303, 2
  %2307 = extractvalue %dx.types.ResRet.f32 %2303, 3
  %2308 = bitcast float %2304 to i32
  %2309 = bitcast float %2305 to i32
  %2310 = add i32 %2283, 4
  %2311 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2284, i32 %2310, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2312 = extractvalue %dx.types.ResRet.f32 %2311, 0
  %2313 = extractvalue %dx.types.ResRet.f32 %2311, 1
  %2314 = extractvalue %dx.types.ResRet.f32 %2311, 2
  %2315 = extractvalue %dx.types.ResRet.f32 %2311, 3
  %2316 = and i32 %2309, 65536
  %2317 = icmp ne i32 %2316, 0
  %2318 = and i32 %2309, 131072
  %2319 = icmp ne i32 %2318, 0
  %2320 = getelementptr inbounds [6 x i32], [6 x i32]* %55, i32 0, i32 0
  %2321 = bitcast i32* %2320 to float*
  store float %2306, float* %2321, align 4, !tbaa !69, !alias.scope !83, !noalias !86
  %2322 = getelementptr inbounds [6 x i32], [6 x i32]* %55, i32 0, i32 1
  %2323 = bitcast i32* %2322 to float*
  store float %2307, float* %2323, align 4, !tbaa !69, !alias.scope !83, !noalias !86
  %2324 = getelementptr inbounds [6 x i32], [6 x i32]* %55, i32 0, i32 2
  %2325 = bitcast i32* %2324 to float*
  store float %2312, float* %2325, align 4, !tbaa !69, !alias.scope !83, !noalias !86
  %2326 = getelementptr inbounds [6 x i32], [6 x i32]* %55, i32 0, i32 3
  %2327 = bitcast i32* %2326 to float*
  store float %2313, float* %2327, align 4, !tbaa !69, !alias.scope !83, !noalias !86
  %2328 = getelementptr inbounds [6 x i32], [6 x i32]* %55, i32 0, i32 4
  %2329 = bitcast i32* %2328 to float*
  store float %2314, float* %2329, align 4, !tbaa !69, !alias.scope !83, !noalias !86
  %2330 = getelementptr inbounds [6 x i32], [6 x i32]* %55, i32 0, i32 5
  %2331 = bitcast i32* %2330 to float*
  store float %2315, float* %2331, align 4, !tbaa !69, !alias.scope !83, !noalias !86
  %2332 = select i1 %2319, float 7.000000e+01, float 2.000000e+01
  %2333 = fsub fast float %2272, %2289
  %2334 = fsub fast float %2273, %2295
  %2335 = fsub fast float %2274, %2301
  %2336 = fmul fast float %2333, %2286
  %2337 = call float @dx.op.tertiary.f32(i32 46, float %2334, float %2292, float %2336)  ; FMad(a,b,c)
  %2338 = call float @dx.op.tertiary.f32(i32 46, float %2335, float %2298, float %2337)  ; FMad(a,b,c)
  %2339 = fmul fast float %2333, %2287
  %2340 = call float @dx.op.tertiary.f32(i32 46, float %2334, float %2293, float %2339)  ; FMad(a,b,c)
  %2341 = call float @dx.op.tertiary.f32(i32 46, float %2335, float %2299, float %2340)  ; FMad(a,b,c)
  %2342 = fmul fast float %2333, %2288
  %2343 = call float @dx.op.tertiary.f32(i32 46, float %2334, float %2294, float %2342)  ; FMad(a,b,c)
  %2344 = call float @dx.op.tertiary.f32(i32 46, float %2335, float %2300, float %2343)  ; FMad(a,b,c)
  %2345 = fmul fast float %2298, %2298
  %2346 = fmul fast float %2299, %2299
  %2347 = fmul fast float %2300, %2300
  %2348 = fcmp fast ogt float %2345, 0.000000e+00
  br i1 %2348, label %2349, label %2354

; <label>:2349                                    ; preds = %2282
  %2350 = fcmp uge float %2298, 0.000000e+00
  %2351 = zext i1 %2350 to i32
  %2352 = getelementptr inbounds [6 x i32], [6 x i32]* %55, i32 0, i32 %2351
  %2353 = load i32, i32* %2352, align 4, !tbaa !69, !noalias !86
  br label %2354

; <label>:2354                                    ; preds = %2349, %2282
  %2355 = phi i32 [ %2353, %2349 ], [ 0, %2282 ]
  %2356 = fcmp fast ogt float %2346, 0.000000e+00
  br i1 %2356, label %2357, label %2363

; <label>:2357                                    ; preds = %2354
  %2358 = fcmp fast olt float %2299, 0.000000e+00
  %2359 = select i1 %2358, i32 2, i32 3
  %2360 = getelementptr inbounds [6 x i32], [6 x i32]* %55, i32 0, i32 %2359
  %2361 = load i32, i32* %2360, align 4, !tbaa !69, !noalias !86
  %2362 = or i32 %2361, %2355
  br label %2363

; <label>:2363                                    ; preds = %2357, %2354
  %2364 = phi i32 [ %2362, %2357 ], [ %2355, %2354 ]
  %2365 = fcmp fast ogt float %2347, 0.000000e+00
  br i1 %2365, label %2366, label %2372

; <label>:2366                                    ; preds = %2363
  %2367 = fcmp fast olt float %2300, 0.000000e+00
  %2368 = select i1 %2367, i32 4, i32 5
  %2369 = getelementptr inbounds [6 x i32], [6 x i32]* %55, i32 0, i32 %2368
  %2370 = load i32, i32* %2369, align 4, !tbaa !69, !noalias !86
  %2371 = or i32 %2370, %2364
  br label %2372

; <label>:2372                                    ; preds = %2366, %2363
  %2373 = phi i32 [ %2371, %2366 ], [ %2364, %2363 ]
  %2374 = icmp eq i32 %2373, 0
  br i1 %2374, label %2419, label %2375

; <label>:2375                                    ; preds = %2372
  br label %2376

; <label>:2376                                    ; preds = %2376, %2375
  %2377 = phi i32 [ %2382, %2376 ], [ %2373, %2375 ]
  %2378 = phi i32 [ %2416, %2376 ], [ 0, %2375 ]
  %2379 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %2377)  ; FirstbitLo(value)
  %2380 = and i32 %2379, 31
  %2381 = shl i32 1, %2380
  %2382 = xor i32 %2381, %2377
  %2383 = add i32 %2379, %2308
  %2384 = mul i32 %2383, 9
  %2385 = add i32 %2384, 5
  %2386 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %2387 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2386, i32 %2385, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2388 = extractvalue %dx.types.ResRet.f32 %2387, 3
  %2389 = add i32 %2384, 6
  %2390 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2386, i32 %2389, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2391 = extractvalue %dx.types.ResRet.f32 %2390, 3
  %2392 = add i32 %2384, 7
  %2393 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2386, i32 %2392, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2394 = extractvalue %dx.types.ResRet.f32 %2393, 3
  %2395 = add i32 %2384, 8
  %2396 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2386, i32 %2395, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2397 = extractvalue %dx.types.ResRet.f32 %2396, 0
  %2398 = extractvalue %dx.types.ResRet.f32 %2396, 1
  %2399 = extractvalue %dx.types.ResRet.f32 %2396, 2
  %2400 = fsub fast float %2338, %2388
  %2401 = fsub fast float %2341, %2391
  %2402 = fsub fast float %2344, %2394
  %2403 = call float @dx.op.unary.f32(i32 6, float %2400)  ; FAbs(value)
  %2404 = call float @dx.op.unary.f32(i32 6, float %2401)  ; FAbs(value)
  %2405 = call float @dx.op.unary.f32(i32 6, float %2402)  ; FAbs(value)
  %2406 = fmul fast float %2332, 5.000000e-01
  %2407 = fadd fast float %2397, %2406
  %2408 = fadd fast float %2398, %2406
  %2409 = fadd fast float %2399, %2406
  %2410 = fcmp fast ole float %2403, %2407
  %2411 = fcmp fast ole float %2404, %2408
  %2412 = fcmp fast ole float %2405, %2409
  %2413 = and i1 %2410, %2411
  %2414 = and i1 %2413, %2412
  %2415 = select i1 %2414, i32 %2381, i32 0
  %2416 = or i32 %2415, %2378
  %2417 = icmp eq i32 %2377, %2381
  br i1 %2417, label %2418, label %2376

; <label>:2418                                    ; preds = %2376
  br label %2419

; <label>:2419                                    ; preds = %2418, %2372
  %2420 = phi i32 [ 0, %2372 ], [ %2416, %2418 ]
  %2421 = select i1 %2317, i32 1, i32 %2420
  %2422 = icmp eq i32 %2421, 0
  br i1 %2422, label %2741, label %2423

; <label>:2423                                    ; preds = %2419
  br label %2424

; <label>:2424                                    ; preds = %2447, %2423
  %2425 = phi float [ %2448, %2447 ], [ 0.000000e+00, %2423 ]
  %2426 = phi float [ %2449, %2447 ], [ 0.000000e+00, %2423 ]
  %2427 = phi float [ %2450, %2447 ], [ 0.000000e+00, %2423 ]
  %2428 = phi float [ %2451, %2447 ], [ 0.000000e+00, %2423 ]
  %2429 = phi float [ %2452, %2447 ], [ 0.000000e+00, %2423 ]
  %2430 = phi i32 [ %2453, %2447 ], [ 0, %2423 ]
  %2431 = phi i32 [ %2454, %2447 ], [ 0, %2423 ]
  %2432 = phi i32 [ %2455, %2447 ], [ 0, %2423 ]
  %2433 = phi i32 [ %2437, %2447 ], [ %2421, %2423 ]
  %2434 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %2433)  ; FirstbitLo(value)
  %2435 = and i32 %2434, 31
  %2436 = shl i32 1, %2435
  %2437 = xor i32 %2436, %2433
  %2438 = add i32 %2434, %2308
  %2439 = mul i32 %2438, 9
  %2440 = add i32 %2439, 3
  %2441 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %2442 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2441, i32 %2440, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2443 = extractvalue %dx.types.ResRet.f32 %2442, 3
  %2444 = bitcast float %2443 to i32
  %2445 = and i32 %2444, 16777216
  %2446 = icmp eq i32 %2445, 0
  br i1 %2446, label %2447, label %2457

; <label>:2447                                    ; preds = %3577, %2739, %2707, %2676, %2514, %2461, %2457, %2424
  %2448 = phi float [ %2425, %2424 ], [ %2737, %2739 ], [ %2737, %2707 ], [ %2425, %3577 ], [ %2425, %2676 ], [ %2425, %2514 ], [ %2425, %2461 ], [ %2425, %2457 ]
  %2449 = phi float [ %2426, %2424 ], [ %2734, %2739 ], [ %2734, %2707 ], [ %2426, %3577 ], [ %2426, %2676 ], [ %2426, %2514 ], [ %2426, %2461 ], [ %2426, %2457 ]
  %2450 = phi float [ %2427, %2424 ], [ %2735, %2739 ], [ %2735, %2707 ], [ %2427, %3577 ], [ %2427, %2676 ], [ %2427, %2514 ], [ %2427, %2461 ], [ %2427, %2457 ]
  %2451 = phi float [ %2428, %2424 ], [ %2736, %2739 ], [ %2736, %2707 ], [ %2428, %3577 ], [ %2428, %2676 ], [ %2428, %2514 ], [ %2428, %2461 ], [ %2428, %2457 ]
  %2452 = phi float [ %2429, %2424 ], [ %3584, %2739 ], [ %2429, %2707 ], [ %2429, %3577 ], [ %2429, %2676 ], [ %2429, %2514 ], [ %2429, %2461 ], [ %2429, %2457 ]
  %2453 = phi i32 [ %2430, %2424 ], [ %2651, %2739 ], [ %2430, %2707 ], [ %2430, %3577 ], [ %2430, %2676 ], [ %2430, %2514 ], [ %2430, %2461 ], [ %2430, %2457 ]
  %2454 = phi i32 [ %2431, %2424 ], [ %2653, %2739 ], [ %2431, %2707 ], [ %2431, %3577 ], [ %2431, %2676 ], [ %2431, %2514 ], [ %2431, %2461 ], [ %2431, %2457 ]
  %2455 = phi i32 [ %2432, %2424 ], [ %2557, %2739 ], [ %2432, %2707 ], [ %2432, %3577 ], [ %2432, %2676 ], [ %2432, %2514 ], [ %2432, %2461 ], [ %2432, %2457 ]
  %2456 = icmp eq i32 %2433, %2436
  br i1 %2456, label %2740, label %2424

; <label>:2457                                    ; preds = %2424
  %2458 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %51, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2459 = extractvalue %dx.types.CBufRet.i32 %2458, 0
  %2460 = icmp ult i32 %2438, %2459
  br i1 %2460, label %2461, label %2447

; <label>:2461                                    ; preds = %2457
  %2462 = extractvalue %dx.types.ResRet.f32 %2442, 0
  %2463 = extractvalue %dx.types.ResRet.f32 %2442, 1
  %2464 = extractvalue %dx.types.ResRet.f32 %2442, 2
  %2465 = add i32 %2439, 4
  %2466 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2441, i32 %2465, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2467 = add i32 %2439, 5
  %2468 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2441, i32 %2467, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2469 = add i32 %2439, 6
  %2470 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2441, i32 %2469, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2471 = add i32 %2439, 7
  %2472 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2441, i32 %2471, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2473 = call float @dx.op.unary.f32(i32 6, float %2462)  ; FAbs(value)
  %2474 = call float @dx.op.unary.f32(i32 6, float %2463)  ; FAbs(value)
  %2475 = call float @dx.op.unary.f32(i32 6, float %2464)  ; FAbs(value)
  %2476 = lshr i32 %2444, 16
  %2477 = and i32 %2476, 15
  %2478 = extractvalue %dx.types.ResRet.f32 %2472, 3
  %2479 = extractvalue %dx.types.ResRet.f32 %2472, 2
  %2480 = extractvalue %dx.types.ResRet.f32 %2472, 1
  %2481 = extractvalue %dx.types.ResRet.f32 %2472, 0
  %2482 = extractvalue %dx.types.ResRet.f32 %2470, 3
  %2483 = extractvalue %dx.types.ResRet.f32 %2470, 2
  %2484 = extractvalue %dx.types.ResRet.f32 %2470, 1
  %2485 = extractvalue %dx.types.ResRet.f32 %2470, 0
  %2486 = extractvalue %dx.types.ResRet.f32 %2468, 3
  %2487 = extractvalue %dx.types.ResRet.f32 %2468, 2
  %2488 = extractvalue %dx.types.ResRet.f32 %2468, 1
  %2489 = extractvalue %dx.types.ResRet.f32 %2468, 0
  %2490 = fsub fast float %2338, %2486
  %2491 = fsub fast float %2341, %2482
  %2492 = fsub fast float %2344, %2478
  %2493 = fmul fast float %2490, %2489
  %2494 = call float @dx.op.tertiary.f32(i32 46, float %2491, float %2485, float %2493)  ; FMad(a,b,c)
  %2495 = call float @dx.op.tertiary.f32(i32 46, float %2492, float %2481, float %2494)  ; FMad(a,b,c)
  %2496 = fmul fast float %2490, %2488
  %2497 = call float @dx.op.tertiary.f32(i32 46, float %2491, float %2484, float %2496)  ; FMad(a,b,c)
  %2498 = call float @dx.op.tertiary.f32(i32 46, float %2492, float %2480, float %2497)  ; FMad(a,b,c)
  %2499 = fmul fast float %2490, %2487
  %2500 = call float @dx.op.tertiary.f32(i32 46, float %2491, float %2483, float %2499)  ; FMad(a,b,c)
  %2501 = call float @dx.op.tertiary.f32(i32 46, float %2492, float %2479, float %2500)  ; FMad(a,b,c)
  %2502 = call float @dx.op.unary.f32(i32 6, float %2495)  ; FAbs(value)
  %2503 = call float @dx.op.unary.f32(i32 6, float %2498)  ; FAbs(value)
  %2504 = call float @dx.op.unary.f32(i32 6, float %2501)  ; FAbs(value)
  %2505 = fmul fast float %2332, 5.000000e-01
  %2506 = fadd fast float %2473, %2505
  %2507 = fadd fast float %2474, %2505
  %2508 = fadd fast float %2475, %2505
  %2509 = fcmp fast ole float %2502, %2506
  %2510 = fcmp fast ole float %2503, %2507
  %2511 = fcmp fast ole float %2504, %2508
  %2512 = and i1 %2509, %2510
  %2513 = and i1 %2512, %2511
  br i1 %2513, label %2514, label %2447

; <label>:2514                                    ; preds = %2461
  %2515 = lshr i32 %2444, 8
  %2516 = and i32 %2515, 255
  %2517 = and i32 %2444, 255
  %2518 = extractvalue %dx.types.ResRet.f32 %2466, 3
  %2519 = extractvalue %dx.types.ResRet.f32 %2466, 2
  %2520 = extractvalue %dx.types.ResRet.f32 %2466, 1
  %2521 = extractvalue %dx.types.ResRet.f32 %2466, 0
  %2522 = fsub fast float -0.000000e+00, %2473
  %2523 = fsub fast float -0.000000e+00, %2474
  %2524 = call float @dx.op.binary.f32(i32 35, float %2495, float %2522)  ; FMax(a,b)
  %2525 = call float @dx.op.binary.f32(i32 35, float %2498, float %2523)  ; FMax(a,b)
  %2526 = call float @dx.op.binary.f32(i32 36, float %2524, float %2473)  ; FMin(a,b)
  %2527 = call float @dx.op.binary.f32(i32 36, float %2525, float %2474)  ; FMin(a,b)
  %2528 = fdiv fast float %2526, %2473
  %2529 = fdiv fast float %2527, %2474
  %2530 = fmul fast float %2528, 5.000000e-01
  %2531 = fmul fast float %2529, 5.000000e-01
  %2532 = fadd fast float %2530, 5.000000e-01
  %2533 = fsub fast float 5.000000e-01, %2531
  %2534 = call float @dx.op.unary.f32(i32 7, float %2532)  ; Saturate(value)
  %2535 = call float @dx.op.unary.f32(i32 7, float %2533)  ; Saturate(value)
  %2536 = call float @dx.op.binary.f32(i32 36, float %2534, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2537 = call float @dx.op.binary.f32(i32 36, float %2535, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %2538 = select i1 %225, float %2519, float %2521
  %2539 = bitcast float %2538 to i32
  %2540 = and i32 %2539, 65535
  %2541 = lshr i32 %2539, 16
  %2542 = select i1 %225, float %2518, float %2520
  %2543 = bitcast float %2542 to i32
  %2544 = uitofp i32 %2540 to float
  %2545 = uitofp i32 %2541 to float
  %2546 = fmul fast float %2536, %2544
  %2547 = fmul fast float %2537, %2545
  %2548 = fptoui float %2546 to i32
  %2549 = fptoui float %2547 to i32
  %2550 = mul i32 %2549, %2540
  %2551 = add i32 %2548, %2543
  %2552 = add i32 %2551, %2550
  %2553 = shl i32 %2552, 3
  %2554 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %2555 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2554, i32 %2553, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2556 = extractvalue %dx.types.ResRet.i32 %2555, 0
  %2557 = extractvalue %dx.types.ResRet.i32 %2555, 1
  %2558 = shl i32 %2556, 3
  %2559 = and i32 %2558, 32760
  %2560 = lshr i32 %2556, 9
  %2561 = and i32 %2560, 32760
  %2562 = lshr i32 %2556, 24
  %2563 = and i32 %2562, 15
  %2564 = lshr i32 %2556, 28
  %2565 = add nuw nsw i32 %2563, 25
  %2566 = add nuw nsw i32 %2564, 25
  %2567 = and i32 %2565, 31
  %2568 = and i32 %2566, 31
  %2569 = shl i32 1, %2567
  %2570 = shl i32 1, %2568
  %2571 = icmp ugt i32 %2563, 7
  %2572 = icmp slt i32 %2556, 0
  %2573 = select i1 %2571, i32 %2569, i32 1
  %2574 = select i1 %2572, i32 %2570, i32 1
  %2575 = uitofp i32 %2573 to float
  %2576 = uitofp i32 %2574 to float
  %2577 = fmul fast float %2575, %2536
  %2578 = fmul fast float %2576, %2537
  %2579 = fptoui float %2577 to i32
  %2580 = fptoui float %2578 to i32
  %2581 = shl i32 1, %2563
  %2582 = shl i32 1, %2564
  %2583 = call float @dx.op.unary.f32(i32 22, float %2577)  ; Frc(value)
  %2584 = call float @dx.op.unary.f32(i32 22, float %2578)  ; Frc(value)
  %2585 = icmp eq i32 %2579, 0
  %2586 = icmp eq i32 %2580, 0
  %2587 = select i1 %2585, float 0.000000e+00, float 5.000000e-01
  %2588 = select i1 %2586, float 0.000000e+00, float 5.000000e-01
  %2589 = add i32 %2579, 1
  %2590 = add i32 %2580, 1
  %2591 = icmp eq i32 %2589, %2573
  %2592 = icmp eq i32 %2590, %2574
  %2593 = uitofp i32 %2581 to float
  %2594 = select i1 %2571, float 1.280000e+02, float %2593
  %2595 = uitofp i32 %2582 to float
  %2596 = select i1 %2572, float 1.280000e+02, float %2595
  %2597 = fsub fast float %2594, %2587
  %2598 = fsub fast float %2596, %2588
  %2599 = select i1 %2591, float -0.000000e+00, float -5.000000e-01
  %2600 = fadd fast float %2597, %2599
  %2601 = select i1 %2592, float -0.000000e+00, float -5.000000e-01
  %2602 = fadd fast float %2598, %2601
  %2603 = fmul fast float %2600, %2583
  %2604 = fmul fast float %2602, %2584
  %2605 = fadd fast float %2603, %2587
  %2606 = fadd fast float %2604, %2588
  %2607 = fadd fast float %2594, -1.500000e+00
  %2608 = fadd fast float %2596, -1.500000e+00
  %2609 = call float @dx.op.binary.f32(i32 35, float %2605, float 5.000000e-01)  ; FMax(a,b)
  %2610 = call float @dx.op.binary.f32(i32 35, float %2606, float 5.000000e-01)  ; FMax(a,b)
  %2611 = call float @dx.op.binary.f32(i32 36, float %2609, float %2607)  ; FMin(a,b)
  %2612 = call float @dx.op.binary.f32(i32 36, float %2610, float %2608)  ; FMin(a,b)
  %2613 = uitofp i32 %2559 to float
  %2614 = uitofp i32 %2561 to float
  %2615 = fadd fast float %2611, %2613
  %2616 = fadd fast float %2612, %2614
  %2617 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %51, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2618 = extractvalue %dx.types.CBufRet.f32 %2617, 0
  %2619 = extractvalue %dx.types.CBufRet.f32 %2617, 1
  %2620 = fmul fast float %2618, %2615
  %2621 = fmul fast float %2619, %2616
  %2622 = call float @dx.op.binary.f32(i32 35, float %2473, float %2474)  ; FMax(a,b)
  %2623 = call float @dx.op.binary.f32(i32 35, float %2276, float 1.000000e+00)  ; FMax(a,b)
  %2624 = fdiv fast float %2622, %2623
  %2625 = call float @dx.op.unary.f32(i32 23, float %2624)  ; Log(value)
  %2626 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %2627 = extractvalue %dx.types.CBufRet.f32 %2626, 2
  %2628 = fadd fast float %2627, %2625
  %2629 = call float @dx.op.binary.f32(i32 35, float %2628, float 3.000000e+00)  ; FMax(a,b)
  %2630 = call float @dx.op.binary.f32(i32 36, float %2629, float 1.100000e+01)  ; FMin(a,b)
  %2631 = fptoui float %2630 to i32
  %2632 = sub i32 %2631, %2517
  %2633 = sub i32 %2631, %2516
  %2634 = add i32 %2632, 25
  %2635 = add i32 %2633, 25
  %2636 = and i32 %2634, 31
  %2637 = and i32 %2635, 31
  %2638 = shl i32 1, %2636
  %2639 = shl i32 1, %2637
  %2640 = icmp ugt i32 %2632, 7
  %2641 = icmp ugt i32 %2633, 7
  %2642 = uitofp i32 %2638 to float
  %2643 = select i1 %2640, float %2642, float 1.000000e+00
  %2644 = uitofp i32 %2639 to float
  %2645 = select i1 %2641, float %2644, float 1.000000e+00
  %2646 = fmul fast float %2643, %2536
  %2647 = fmul fast float %2645, %2537
  %2648 = fptoui float %2646 to i32
  %2649 = fptoui float %2647 to i32
  %2650 = shl i32 %2631, 24
  %2651 = or i32 %2650, %2438
  %2652 = shl i32 %2649, 8
  %2653 = add i32 %2652, %2648
  %2654 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %51, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %2655 = extractvalue %dx.types.CBufRet.f32 %2654, 2
  %2656 = extractvalue %dx.types.CBufRet.f32 %2654, 3
  %2657 = fmul fast float %2655, %2620
  %2658 = fmul fast float %2656, %2621
  %2659 = fadd fast float %2657, 0x3FE0100000000000
  %2660 = fadd fast float %2658, 0x3FE0100000000000
  %2661 = call float @dx.op.unary.f32(i32 22, float %2659)  ; Frc(value)
  %2662 = call float @dx.op.unary.f32(i32 22, float %2660)  ; Frc(value)
  %2663 = fsub fast float 1.000000e+00, %2661
  %2664 = fmul fast float %2663, %2662
  %2665 = fmul fast float %2662, %2661
  %2666 = fsub fast float 1.000000e+00, %2662
  %2667 = fmul fast float %2666, %2661
  %2668 = fmul fast float %2666, %2663
  %2669 = icmp eq i32 %2563, 0
  br i1 %2669, label %2447, label %2670

; <label>:2670                                    ; preds = %2514
  br i1 %2317, label %2676, label %2671

; <label>:2671                                    ; preds = %2670
  %2672 = icmp ult i32 %2477, 2
  br i1 %2672, label %2676, label %2673

; <label>:2673                                    ; preds = %2671
  %2674 = icmp ult i32 %2477, 4
  %2675 = select i1 %2674, float %2346, float %2347
  br label %2676

; <label>:2676                                    ; preds = %2673, %2671, %2670
  %2677 = phi float [ 1.000000e+00, %2670 ], [ %2345, %2671 ], [ %2675, %2673 ]
  %2678 = fcmp fast ogt float %2677, 0.000000e+00
  br i1 %2678, label %2679, label %2447

; <label>:2679                                    ; preds = %2676
  %2680 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2681 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %41, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2682 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %2680, %dx.types.Handle %2681, float %2620, float %2621, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %2683 = extractvalue %dx.types.ResRet.f32 %2682, 0
  %2684 = extractvalue %dx.types.ResRet.f32 %2682, 1
  %2685 = extractvalue %dx.types.ResRet.f32 %2682, 2
  %2686 = extractvalue %dx.types.ResRet.f32 %2682, 3
  %2687 = fdiv fast float %2501, %2475
  %2688 = fmul fast float %2687, 5.000000e-01
  %2689 = fsub fast float 5.000000e-01, %2688
  %2690 = fdiv fast float %2332, %2475
  %2691 = fmul fast float %2690, 2.500000e-01
  %2692 = fcmp uge float %2683, 1.000000e+00
  %2693 = or i1 %2317, %2692
  %2694 = select i1 %2692, float 0.000000e+00, float 1.000000e+00
  br i1 %2693, label %2702, label %2695

; <label>:2695                                    ; preds = %2679
  %2696 = fsub fast float %2689, %2683
  %2697 = call float @dx.op.unary.f32(i32 6, float %2696)  ; FAbs(value)
  %2698 = fsub fast float %2697, %2690
  %2699 = fdiv fast float %2698, %2691
  %2700 = call float @dx.op.unary.f32(i32 7, float %2699)  ; Saturate(value)
  %2701 = fsub fast float 1.000000e+00, %2700
  br label %2702

; <label>:2702                                    ; preds = %2695, %2679
  %2703 = phi float [ %2701, %2695 ], [ %2694, %2679 ]
  %2704 = fcmp uge float %2684, 1.000000e+00
  %2705 = or i1 %2317, %2704
  %2706 = select i1 %2704, float 0.000000e+00, float 1.000000e+00
  br i1 %2705, label %3553, label %3546

; <label>:2707                                    ; preds = %3577
  %2708 = fdiv fast float %3579, %3583
  %2709 = fdiv fast float %3580, %3583
  %2710 = fdiv fast float %3581, %3583
  %2711 = fdiv fast float %3582, %3583
  %2712 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2713 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %2712, %dx.types.Handle %2681, float %2620, float %2621, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %2714 = extractvalue %dx.types.ResRet.f32 %2713, 0
  %2715 = extractvalue %dx.types.ResRet.f32 %2713, 1
  %2716 = extractvalue %dx.types.ResRet.f32 %2713, 2
  %2717 = extractvalue %dx.types.ResRet.f32 %2713, 3
  %2718 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %2712, %dx.types.Handle %2681, float %2620, float %2621, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %2719 = extractvalue %dx.types.ResRet.f32 %2718, 0
  %2720 = extractvalue %dx.types.ResRet.f32 %2718, 1
  %2721 = extractvalue %dx.types.ResRet.f32 %2718, 2
  %2722 = extractvalue %dx.types.ResRet.f32 %2718, 3
  %2723 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %2712, %dx.types.Handle %2681, float %2620, float %2621, float undef, float undef, i32 0, i32 0, i32 2)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %2724 = extractvalue %dx.types.ResRet.f32 %2723, 0
  %2725 = extractvalue %dx.types.ResRet.f32 %2723, 1
  %2726 = extractvalue %dx.types.ResRet.f32 %2723, 2
  %2727 = extractvalue %dx.types.ResRet.f32 %2723, 3
  %2728 = call float @dx.op.dot4.f32(i32 56, float %2714, float %2715, float %2716, float %2717, float %2708, float %2709, float %2710, float %2711)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2729 = call float @dx.op.dot4.f32(i32 56, float %2719, float %2720, float %2721, float %2722, float %2708, float %2709, float %2710, float %2711)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2730 = call float @dx.op.dot4.f32(i32 56, float %2724, float %2725, float %2726, float %2727, float %2708, float %2709, float %2710, float %2711)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2731 = fmul fast float %2728, %3584
  %2732 = fmul fast float %2729, %3584
  %2733 = fmul fast float %2730, %3584
  %2734 = fadd fast float %2731, %2426
  %2735 = fadd fast float %2732, %2427
  %2736 = fadd fast float %2733, %2428
  %2737 = fadd fast float %3584, %2425
  %2738 = fcmp fast ogt float %3584, %2429
  br i1 %2738, label %2739, label %2447

; <label>:2739                                    ; preds = %2707
  br label %2447

; <label>:2740                                    ; preds = %2447
  br label %2741

; <label>:2741                                    ; preds = %2740, %2419
  %2742 = phi float [ 0.000000e+00, %2419 ], [ %2448, %2740 ]
  %2743 = phi float [ 0.000000e+00, %2419 ], [ %2449, %2740 ]
  %2744 = phi float [ 0.000000e+00, %2419 ], [ %2450, %2740 ]
  %2745 = phi float [ 0.000000e+00, %2419 ], [ %2451, %2740 ]
  %2746 = phi i32 [ 0, %2419 ], [ %2453, %2740 ]
  %2747 = phi i32 [ 0, %2419 ], [ %2454, %2740 ]
  %2748 = phi i32 [ 0, %2419 ], [ %2455, %2740 ]
  %2749 = fcmp fast ogt float %2742, 0.000000e+00
  br i1 %2749, label %2750, label %2754

; <label>:2750                                    ; preds = %2741
  %2751 = fdiv fast float %2743, %2742
  %2752 = fdiv fast float %2744, %2742
  %2753 = fdiv fast float %2745, %2742
  br label %2754

; <label>:2754                                    ; preds = %2750, %2741
  %2755 = phi float [ %2751, %2750 ], [ 0.000000e+00, %2741 ]
  %2756 = phi float [ %2752, %2750 ], [ 0.000000e+00, %2741 ]
  %2757 = phi float [ %2753, %2750 ], [ 0.000000e+00, %2741 ]
  %2758 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %53, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %2759 = extractvalue %dx.types.CBufRet.i32 %2758, 0
  %2760 = extractvalue %dx.types.CBufRet.i32 %2758, 1
  %2761 = or i32 %2759, %2760
  %2762 = icmp eq i32 %2761, 0
  br i1 %2762, label %2763, label %2781

; <label>:2763                                    ; preds = %2754
  %2764 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %53, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %2765 = extractvalue %dx.types.CBufRet.i32 %2764, 2
  %2766 = icmp ne i32 %2765, 0
  %2767 = fcmp fast ogt float %2742, 0x3FB99999A0000000
  %2768 = and i1 %2767, %2766
  br i1 %2768, label %2769, label %2781

; <label>:2769                                    ; preds = %2763
  %2770 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  %2771 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %2770, i32 0, i32 0, i32 0, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %2772 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %53, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %2773 = extractvalue %dx.types.CBufRet.i32 %2772, 2
  %2774 = icmp ult i32 %2771, %2773
  br i1 %2774, label %2775, label %2777

; <label>:2775                                    ; preds = %2769
  %2776 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4108, i32 8 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=8>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %2776, i32 %2771, i32 0, i32 %2746, i32 %2747, i32 undef, i32 undef, i8 3, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %2777

; <label>:2777                                    ; preds = %2775, %2769
  %2778 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %53, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %2779 = extractvalue %dx.types.CBufRet.i32 %2778, 3
  %2780 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %2780, i32 %2748, i32 0, i32 %2779, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %2781

; <label>:2781                                    ; preds = %2777, %2763, %2754, %2278, %2263, %2258
  %2782 = phi float [ 0.000000e+00, %2258 ], [ %2755, %2777 ], [ %2755, %2763 ], [ %2755, %2754 ], [ 0.000000e+00, %2278 ], [ 0.000000e+00, %2263 ]
  %2783 = phi float [ 0.000000e+00, %2258 ], [ %2756, %2777 ], [ %2756, %2763 ], [ %2756, %2754 ], [ 0.000000e+00, %2278 ], [ 0.000000e+00, %2263 ]
  %2784 = phi float [ 0.000000e+00, %2258 ], [ %2757, %2777 ], [ %2757, %2763 ], [ %2757, %2754 ], [ 0.000000e+00, %2278 ], [ 0.000000e+00, %2263 ]
  %2785 = select i1 %2262, float %2259, float %1550
  %2786 = select i1 %2262, float 0.000000e+00, float %1551
  %2787 = select i1 %2262, float %2782, float %1552
  %2788 = select i1 %2262, float %2783, float %1553
  %2789 = select i1 %2262, float %2784, float %1554
  br label %2790

; <label>:2790                                    ; preds = %2781, %1549
  %2791 = phi float [ %1550, %1549 ], [ %2785, %2781 ]
  %2792 = phi float [ %1551, %1549 ], [ %2786, %2781 ]
  %2793 = phi float [ %1552, %1549 ], [ %2787, %2781 ]
  %2794 = phi float [ %1553, %1549 ], [ %2788, %2781 ]
  %2795 = phi float [ %1554, %1549 ], [ %2789, %2781 ]
  %2796 = call float @dx.op.binary.f32(i32 36, float %209, float %2791)  ; FMin(a,b)
  %2797 = fmul fast float %2796, %201
  %2798 = fmul fast float %2796, %202
  %2799 = fmul fast float %2796, %203
  %2800 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %49, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %2801 = extractvalue %dx.types.CBufRet.i32 %2800, 1
  %2802 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %52, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %2803 = extractvalue %dx.types.CBufRet.i32 %2802, 0
  %2804 = icmp ugt i32 %2801, 1
  %2805 = select i1 %2804, i32 0, i32 %2803
  %2806 = mul i32 %66, 1664525
  %2807 = mul i32 %67, 1664525
  %2808 = mul i32 %2805, 1664525
  %2809 = add i32 %2806, 1013904223
  %2810 = add i32 %2807, 1013904223
  %2811 = add i32 %2808, 1013904223
  %2812 = mul i32 %2811, %2810
  %2813 = add i32 %2809, %2812
  %2814 = mul i32 %2813, %2811
  %2815 = add i32 %2814, %2810
  %2816 = mul i32 %2815, %2813
  %2817 = add i32 %2816, %2811
  %2818 = mul i32 %2817, %2815
  %2819 = add i32 %2818, %2813
  %2820 = add i32 %2806, 1042201148
  %2821 = add i32 %2807, 1042201148
  %2822 = mul i32 %2811, %2821
  %2823 = add i32 %2820, %2822
  %2824 = mul i32 %2823, %2811
  %2825 = add i32 %2824, %2821
  %2826 = icmp eq i32 %2801, 0
  br i1 %2826, label %2854, label %2827

; <label>:2827                                    ; preds = %2790
  %2828 = mul i32 %2825, %2823
  %2829 = add i32 %2828, %2811
  %2830 = mul i32 %2829, %2825
  %2831 = add i32 %2830, %2823
  %2832 = lshr i32 %2831, 16
  %2833 = mul i32 %2819, %2817
  %2834 = add i32 %2833, %2815
  %2835 = lshr i32 %2819, 16
  %2836 = uitofp i32 %2805 to float
  %2837 = fmul fast float %2836, 1.250000e-01
  %2838 = uitofp i32 %2835 to float
  %2839 = fmul fast float %2838, 0x3EF0000000000000
  %2840 = fadd fast float %2839, %2837
  %2841 = call float @dx.op.unary.f32(i32 22, float %2840)  ; Frc(value)
  %2842 = call i32 @dx.op.unary.i32(i32 30, i32 %2805)  ; Bfrev(value)
  %2843 = xor i32 %2842, %2834
  %2844 = lshr i32 %2843, 16
  %2845 = uitofp i32 %2844 to float
  %2846 = fmul fast float %2845, 0x3EF0000000000000
  %2847 = uitofp i32 %2832 to float
  %2848 = fmul fast float %2847, 0x3EF0000000000000
  %2849 = fadd fast float %2848, %2837
  %2850 = call float @dx.op.unary.f32(i32 22, float %2849)  ; Frc(value)
  %2851 = fadd float %2841, -5.000000e-01
  %2852 = fadd float %2846, -5.000000e-01
  %2853 = fadd float %2850, -5.000000e-01
  br label %2854

; <label>:2854                                    ; preds = %2827, %2790
  %2855 = phi float [ %2851, %2827 ], [ -5.000000e-01, %2790 ]
  %2856 = phi float [ %2852, %2827 ], [ -5.000000e-01, %2790 ]
  %2857 = phi float [ %2853, %2827 ], [ -5.000000e-01, %2790 ]
  %2858 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %2859 = extractvalue %dx.types.CBufRet.f32 %2858, 0
  %2860 = fmul fast float %2859, %201
  %2861 = fmul fast float %2859, %202
  %2862 = fmul fast float %2859, %203
  %2863 = fadd fast float %2855, %2860
  %2864 = fadd fast float %2856, %2861
  %2865 = fadd fast float %2857, %2862
  %2866 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %49, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2867 = extractvalue %dx.types.CBufRet.i32 %2866, 0
  %2868 = extractvalue %dx.types.CBufRet.i32 %2866, 1
  %2869 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %49, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2870 = extractvalue %dx.types.CBufRet.i32 %2869, 0
  %2871 = extractvalue %dx.types.CBufRet.i32 %2869, 1
  %2872 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %49, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %2873 = extractvalue %dx.types.CBufRet.f32 %2872, 0
  %2874 = extractvalue %dx.types.CBufRet.f32 %2858, 3
  %2875 = extractvalue %dx.types.CBufRet.i32 %2800, 0
  %2876 = icmp eq i32 %2875, 0
  br i1 %2876, label %3141, label %2877

; <label>:2877                                    ; preds = %2854
  br label %2878

; <label>:2878                                    ; preds = %3132, %2877
  %2879 = phi i32 [ %3136, %3132 ], [ 0, %2877 ]
  %2880 = phi i32 [ %3135, %3132 ], [ 0, %2877 ]
  %2881 = phi float [ %3134, %3132 ], [ %2796, %2877 ]
  %2882 = phi float [ %3133, %3132 ], [ 1.000000e+00, %2877 ]
  %2883 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 524, i32 32 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=32>
  %2884 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2883, i32 %2879, i32 0, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2885 = extractvalue %dx.types.ResRet.f32 %2884, 0
  %2886 = extractvalue %dx.types.ResRet.f32 %2884, 1
  %2887 = extractvalue %dx.types.ResRet.f32 %2884, 2
  %2888 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2883, i32 %2879, i32 12, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2889 = extractvalue %dx.types.ResRet.i32 %2888, 0
  %2890 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2883, i32 %2879, i32 16, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2891 = extractvalue %dx.types.ResRet.f32 %2890, 0
  %2892 = extractvalue %dx.types.ResRet.f32 %2890, 1
  %2893 = extractvalue %dx.types.ResRet.f32 %2890, 2
  %2894 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2883, i32 %2879, i32 28, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2895 = extractvalue %dx.types.ResRet.i32 %2894, 0
  %2896 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %49, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2897 = extractvalue %dx.types.CBufRet.i32 %2896, 0
  %2898 = and i32 %2889, 255
  %2899 = lshr i32 %2889, 8
  %2900 = and i32 %2899, 255
  %2901 = lshr i32 %2889, 16
  %2902 = and i32 %2901, 255
  %2903 = mul i32 %2897, %2898
  %2904 = mul i32 %2897, %2900
  %2905 = mul i32 %2897, %2902
  %2906 = and i32 %2895, 4194303
  %2907 = lshr i32 %2895, 22
  %2908 = uitofp i32 %2907 to float
  %2909 = fmul fast float %2908, 0x3F84050140000000
  %2910 = icmp ne i32 %2898, 0
  %2911 = icmp ne i32 %2900, 0
  %2912 = icmp ne i32 %2902, 0
  %2913 = and i1 %2910, %2911
  %2914 = and i1 %2912, %2913
  %2915 = fmul fast float %2909, %2863
  %2916 = fmul fast float %2909, %2864
  %2917 = fmul fast float %2909, %2865
  %2918 = fadd fast float %190, %2915
  %2919 = fadd fast float %194, %2916
  %2920 = fadd fast float %198, %2917
  %2921 = fdiv fast float 0x4059933340000000, %2908
  br i1 %2914, label %2922, label %3123

; <label>:2922                                    ; preds = %2878
  %2923 = fsub fast float %2797, %2915
  %2924 = fsub fast float %2798, %2916
  %2925 = fsub fast float %2799, %2917
  %2926 = fdiv fast float 1.000000e+00, %2923
  %2927 = fdiv fast float 1.000000e+00, %2924
  %2928 = fdiv fast float 1.000000e+00, %2925
  %2929 = fsub fast float %2885, %2918
  %2930 = fsub fast float %2886, %2919
  %2931 = fsub fast float %2887, %2920
  %2932 = fmul fast float %2926, %2929
  %2933 = fmul fast float %2927, %2930
  %2934 = fmul fast float %2928, %2931
  %2935 = fsub fast float %2891, %2918
  %2936 = fsub fast float %2892, %2919
  %2937 = fsub fast float %2893, %2920
  %2938 = fmul fast float %2926, %2935
  %2939 = fmul fast float %2927, %2936
  %2940 = fmul fast float %2928, %2937
  %2941 = call float @dx.op.binary.f32(i32 36, float %2932, float %2938)  ; FMin(a,b)
  %2942 = call float @dx.op.binary.f32(i32 36, float %2933, float %2939)  ; FMin(a,b)
  %2943 = call float @dx.op.binary.f32(i32 36, float %2934, float %2940)  ; FMin(a,b)
  %2944 = call float @dx.op.binary.f32(i32 35, float %2932, float %2938)  ; FMax(a,b)
  %2945 = call float @dx.op.binary.f32(i32 35, float %2933, float %2939)  ; FMax(a,b)
  %2946 = call float @dx.op.binary.f32(i32 35, float %2934, float %2940)  ; FMax(a,b)
  %2947 = call float @dx.op.binary.f32(i32 35, float %2942, float %2943)  ; FMax(a,b)
  %2948 = call float @dx.op.binary.f32(i32 35, float %2941, float %2947)  ; FMax(a,b)
  %2949 = call float @dx.op.binary.f32(i32 36, float %2945, float %2946)  ; FMin(a,b)
  %2950 = call float @dx.op.binary.f32(i32 36, float %2944, float %2949)  ; FMin(a,b)
  %2951 = call float @dx.op.unary.f32(i32 7, float %2948)  ; Saturate(value)
  %2952 = call float @dx.op.unary.f32(i32 7, float %2950)  ; Saturate(value)
  %2953 = fcmp fast olt float %2951, %2952
  br i1 %2953, label %2954, label %3123

; <label>:2954                                    ; preds = %2922
  %2955 = fmul fast float %2951, %2923
  %2956 = fmul fast float %2951, %2924
  %2957 = fmul fast float %2951, %2925
  %2958 = fadd fast float %2955, %2918
  %2959 = fadd fast float %2956, %2919
  %2960 = fadd fast float %2957, %2920
  %2961 = fsub fast float %2952, %2951
  %2962 = fmul fast float %2923, %2961
  %2963 = fsub fast float %2952, %2951
  %2964 = fmul fast float %2924, %2963
  %2965 = fsub fast float %2952, %2951
  %2966 = fmul fast float %2925, %2965
  %2967 = fmul fast float %2962, %2962
  %2968 = fmul fast float %2964, %2964
  %2969 = fadd fast float %2967, %2968
  %2970 = fmul fast float %2966, %2966
  %2971 = fadd fast float %2969, %2970
  %2972 = call float @dx.op.unary.f32(i32 24, float %2971)  ; Sqrt(value)
  %2973 = call float @dx.op.binary.f32(i32 36, float %2972, float %2796)  ; FMin(a,b)
  %2974 = call float @dx.op.dot3.f32(i32 55, float %2962, float %2964, float %2966, float %2962, float %2964, float %2966)  ; Dot3(ax,ay,az,bx,by,bz)
  %2975 = call float @dx.op.unary.f32(i32 25, float %2974)  ; Rsqrt(value)
  %2976 = fdiv fast float %2973, %2909
  %2977 = call float @dx.op.unary.f32(i32 28, float %2976)  ; Round_pi(value)
  %2978 = call float @dx.op.binary.f32(i32 36, float %2977, float 1.024000e+03)  ; FMin(a,b)
  %2979 = fdiv fast float %2973, %2978
  %2980 = fcmp fast ogt float %2978, 0.000000e+00
  br i1 %2980, label %2981, label %3123

; <label>:2981                                    ; preds = %2954
  br label %2982

; <label>:2982                                    ; preds = %3115, %2981
  %2983 = phi i32 [ %3066, %3115 ], [ 9999, %2981 ]
  %2984 = phi i32 [ %3067, %3115 ], [ 9999, %2981 ]
  %2985 = phi i32 [ %3068, %3115 ], [ 9999, %2981 ]
  %2986 = phi i32 [ %3069, %3115 ], [ 0, %2981 ]
  %2987 = phi i32 [ %3070, %3115 ], [ 0, %2981 ]
  %2988 = phi i32 [ %3071, %3115 ], [ 0, %2981 ]
  %2989 = phi i32 [ %3072, %3115 ], [ 0, %2981 ]
  %2990 = phi float [ %3119, %3115 ], [ 1.000000e+00, %2981 ]
  %2991 = phi float [ %3120, %3115 ], [ 0.000000e+00, %2981 ]
  %2992 = phi float [ %3116, %3115 ], [ 0.000000e+00, %2981 ]
  %2993 = fmul fast float %2990, %2979
  %2994 = call float @dx.op.binary.f32(i32 35, float %2993, float 0.000000e+00)  ; FMax(a,b)
  %2995 = fmul fast float %2962, %2909
  %2996 = fmul fast float %2995, %2975
  %2997 = fmul fast float %2996, %2991
  %2998 = fmul fast float %2964, %2909
  %2999 = fmul fast float %2998, %2975
  %3000 = fmul fast float %2999, %2991
  %3001 = fmul fast float %2966, %2909
  %3002 = fmul fast float %3001, %2975
  %3003 = fmul fast float %3002, %2991
  %3004 = fadd fast float %2958, %2997
  %3005 = fadd fast float %2959, %3000
  %3006 = fadd fast float %2960, %3003
  %3007 = fmul fast float %2855, %2994
  %3008 = fmul fast float %2856, %2994
  %3009 = fmul fast float %2857, %2994
  %3010 = fadd fast float %3004, %3007
  %3011 = fadd fast float %3005, %3008
  %3012 = fadd fast float %3006, %3009
  %3013 = add i32 %2903, -1
  %3014 = add i32 %2904, -1
  %3015 = add i32 %2905, -1
  %3016 = fsub fast float %3010, %2885
  %3017 = fsub fast float %3011, %2886
  %3018 = fsub fast float %3012, %2887
  %3019 = fsub fast float %2891, %2885
  %3020 = fsub fast float %2892, %2886
  %3021 = fsub fast float %2893, %2887
  %3022 = fdiv fast float %3016, %3019
  %3023 = fdiv fast float %3017, %3020
  %3024 = fdiv fast float %3018, %3021
  %3025 = call float @dx.op.unary.f32(i32 7, float %3022)  ; Saturate(value)
  %3026 = call float @dx.op.unary.f32(i32 7, float %3023)  ; Saturate(value)
  %3027 = call float @dx.op.unary.f32(i32 7, float %3024)  ; Saturate(value)
  %3028 = uitofp i32 %2903 to float
  %3029 = uitofp i32 %2904 to float
  %3030 = uitofp i32 %2905 to float
  %3031 = fmul fast float %3025, %3028
  %3032 = fmul fast float %3026, %3029
  %3033 = fmul fast float %3027, %3030
  %3034 = fptoui float %3031 to i32
  %3035 = fptoui float %3032 to i32
  %3036 = fptoui float %3033 to i32
  %3037 = call i32 @dx.op.binary.i32(i32 40, i32 %3034, i32 %3013)  ; UMin(a,b)
  %3038 = call i32 @dx.op.binary.i32(i32 40, i32 %3035, i32 %3014)  ; UMin(a,b)
  %3039 = call i32 @dx.op.binary.i32(i32 40, i32 %3036, i32 %3015)  ; UMin(a,b)
  %3040 = and i32 %2871, 31
  %3041 = lshr i32 %3037, %3040
  %3042 = lshr i32 %3038, %3040
  %3043 = lshr i32 %3039, %3040
  %3044 = icmp ne i32 %3041, %2983
  %3045 = icmp ne i32 %3042, %2984
  %3046 = icmp ne i32 %3043, %2985
  %3047 = or i1 %3044, %3045
  %3048 = or i1 %3047, %3046
  br i1 %3048, label %3049, label %3065

; <label>:3049                                    ; preds = %2982
  %3050 = mul i32 %3043, %2900
  %3051 = add i32 %3050, %3042
  %3052 = mul i32 %3051, %2898
  %3053 = add i32 %3041, %2906
  %3054 = add i32 %3053, %3052
  %3055 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %3056 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %3055, i32 %3054, i32 undef)  ; BufferLoad(srv,index,wot)
  %3057 = extractvalue %dx.types.ResRet.i32 %3056, 0
  %3058 = icmp ne i32 %3057, -1
  %3059 = zext i1 %3058 to i32
  %3060 = mul i32 %2867, %2868
  %3061 = urem i32 %3057, %3060
  %3062 = urem i32 %3061, %2867
  %3063 = udiv i32 %3061, %2867
  %3064 = udiv i32 %3057, %3060
  br label %3065

; <label>:3065                                    ; preds = %3049, %2982
  %3066 = phi i32 [ %3041, %3049 ], [ %2983, %2982 ]
  %3067 = phi i32 [ %3042, %3049 ], [ %2984, %2982 ]
  %3068 = phi i32 [ %3043, %3049 ], [ %2985, %2982 ]
  %3069 = phi i32 [ %3059, %3049 ], [ %2986, %2982 ]
  %3070 = phi i32 [ %3062, %3049 ], [ %2987, %2982 ]
  %3071 = phi i32 [ %3063, %3049 ], [ %2988, %2982 ]
  %3072 = phi i32 [ %3064, %3049 ], [ %2989, %2982 ]
  %3073 = icmp eq i32 %3069, 0
  br i1 %3073, label %3115, label %3074

; <label>:3074                                    ; preds = %3065
  %3075 = shl i32 %3070, %3040
  %3076 = shl i32 %3071, %3040
  %3077 = shl i32 %3072, %3040
  %3078 = shl i32 %3041, %3040
  %3079 = shl i32 %3042, %3040
  %3080 = shl i32 %3043, %3040
  %3081 = sub i32 %3037, %3078
  %3082 = sub i32 %3038, %3079
  %3083 = sub i32 %3039, %3080
  %3084 = add i32 %3081, %3075
  %3085 = add i32 %3082, %3076
  %3086 = add i32 %3083, %3077
  %3087 = fmul fast float %2994, %2921
  %3088 = call float @dx.op.unary.f32(i32 23, float %3087)  ; Log(value)
  %3089 = fptoui float %3088 to i32
  %3090 = and i32 %3089, 31
  %3091 = lshr i32 %3084, %3090
  %3092 = lshr i32 %3085, %3090
  %3093 = lshr i32 %3086, %3090
  %3094 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %3095 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %3094, i32 %3089, i32 %3091, i32 %3092, i32 %3093, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %3096 = extractvalue %dx.types.ResRet.i32 %3095, 0
  %3097 = and i32 %3096, 16777215
  %3098 = uitofp i32 %3097 to float
  %3099 = fmul fast float %2873, 0x3F50624DE0000000
  %3100 = fmul fast float %3099, %2921
  %3101 = fmul fast float %3100, %2994
  %3102 = fmul fast float %3101, %3098
  %3103 = fadd fast float %3102, %2992
  %3104 = fcmp fast ogt float %3103, 1.000000e+00
  br i1 %3104, label %3105, label %3115

; <label>:3105                                    ; preds = %3074
  %3106 = fsub fast float %3010, %2918
  %3107 = fsub fast float %3011, %2919
  %3108 = fsub fast float %3012, %2920
  %3109 = fmul fast float %3106, %3106
  %3110 = fmul fast float %3107, %3107
  %3111 = fadd fast float %3109, %3110
  %3112 = fmul fast float %3108, %3108
  %3113 = fadd fast float %3111, %3112
  %3114 = call float @dx.op.unary.f32(i32 24, float %3113)  ; Sqrt(value)
  br label %3123

; <label>:3115                                    ; preds = %3074, %3065
  %3116 = phi float [ %3103, %3074 ], [ %2992, %3065 ]
  %3117 = fmul fast float %2990, %2874
  %3118 = uitofp i32 %2870 to float
  %3119 = call float @dx.op.binary.f32(i32 36, float %3118, float %3117)  ; FMin(a,b)
  %3120 = fadd fast float %3119, %2991
  %3121 = fcmp fast olt float %3120, %2978
  br i1 %3121, label %2982, label %3122

; <label>:3122                                    ; preds = %3115
  br label %3123

; <label>:3123                                    ; preds = %3122, %3105, %2954, %2922, %2878
  %3124 = phi float [ %3114, %3105 ], [ -1.000000e+00, %2922 ], [ -1.000000e+00, %2878 ], [ -1.000000e+00, %2954 ], [ -1.000000e+00, %3122 ]
  %3125 = phi float [ %3103, %3105 ], [ 0.000000e+00, %2922 ], [ 0.000000e+00, %2878 ], [ 0.000000e+00, %2954 ], [ %3116, %3122 ]
  %3126 = fcmp fast ult float %3124, 0.000000e+00
  br i1 %3126, label %3132, label %3127

; <label>:3127                                    ; preds = %3123
  %3128 = fsub fast float 1.000000e+00, %3125
  %3129 = call float @dx.op.unary.f32(i32 7, float %3128)  ; Saturate(value)
  %3130 = call float @dx.op.binary.f32(i32 36, float %2882, float %3129)  ; FMin(a,b)
  %3131 = call float @dx.op.binary.f32(i32 36, float %2881, float %3124)  ; FMin(a,b)
  br label %3132

; <label>:3132                                    ; preds = %3127, %3123
  %3133 = phi float [ %3130, %3127 ], [ %2882, %3123 ]
  %3134 = phi float [ %3131, %3127 ], [ %2881, %3123 ]
  %3135 = phi i32 [ 1, %3127 ], [ %2880, %3123 ]
  %3136 = add nuw i32 %2879, 1
  %3137 = fcmp fast ogt float %3133, 0x3F847AE140000000
  %3138 = icmp ult i32 %3136, %2875
  %3139 = and i1 %3137, %3138
  br i1 %3139, label %2878, label %3140

; <label>:3140                                    ; preds = %3132
  br label %3141

; <label>:3141                                    ; preds = %3140, %2854
  %3142 = phi i32 [ 0, %2854 ], [ %3135, %3140 ]
  %3143 = phi float [ %2796, %2854 ], [ %3134, %3140 ]
  %3144 = phi float [ 1.000000e+00, %2854 ], [ %3133, %3140 ]
  %3145 = icmp ne i32 %3142, 0
  %3146 = fcmp fast olt float %3143, %2796
  %3147 = and i1 %3146, %3145
  br i1 %3147, label %3148, label %3154

; <label>:3148                                    ; preds = %3141
  %3149 = fmul fast float %3144, %2793
  %3150 = fmul fast float %3144, %2794
  %3151 = fmul fast float %3144, %2795
  %3152 = fmul fast float %3144, %2792
  %3153 = call float @dx.op.binary.f32(i32 36, float %3143, float %2791)  ; FMin(a,b)
  br label %3154

; <label>:3154                                    ; preds = %3148, %3141
  %3155 = phi float [ %3153, %3148 ], [ %2791, %3141 ]
  %3156 = phi float [ %3152, %3148 ], [ %2792, %3141 ]
  %3157 = phi float [ %3149, %3148 ], [ %2793, %3141 ]
  %3158 = phi float [ %3150, %3148 ], [ %2794, %3141 ]
  %3159 = phi float [ %3151, %3148 ], [ %2795, %3141 ]
  %3160 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %3161 = extractvalue %dx.types.CBufRet.f32 %3160, 1
  %3162 = fmul fast float %3161, %3157
  %3163 = fmul fast float %3161, %3158
  %3164 = fmul fast float %3161, %3159
  %3165 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %3166 = extractvalue %dx.types.CBufRet.f32 %3165, 0
  %3167 = extractvalue %dx.types.CBufRet.f32 %3165, 1
  %3168 = extractvalue %dx.types.CBufRet.f32 %3165, 2
  %3169 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %3170 = extractvalue %dx.types.CBufRet.f32 %3169, 0
  %3171 = extractvalue %dx.types.CBufRet.f32 %3169, 1
  %3172 = extractvalue %dx.types.CBufRet.f32 %3169, 2
  %3173 = fmul fast float %3166, 2.097152e+06
  %3174 = fmul fast float %3167, 2.097152e+06
  %3175 = fmul fast float %3168, 2.097152e+06
  %3176 = fsub fast float %3170, %162
  %3177 = fadd fast float %3176, %3173
  %3178 = fsub fast float %3171, %166
  %3179 = fadd fast float %3178, %3174
  %3180 = fsub fast float %3172, %170
  %3181 = fadd fast float %3180, %3175
  %3182 = fmul fast float %3177, %3177
  %3183 = fmul fast float %3179, %3179
  %3184 = fadd fast float %3182, %3183
  %3185 = fmul fast float %3181, %3181
  %3186 = fadd fast float %3184, %3185
  %3187 = call float @dx.op.unary.f32(i32 24, float %3186)  ; Sqrt(value)
  %3188 = fmul fast float %3187, 4.000000e+00
  %3189 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %3190 = extractvalue %dx.types.CBufRet.f32 %3189, 1
  %3191 = fdiv fast float %3188, %3190
  %3192 = fadd fast float %3191, -3.000000e+00
  %3193 = call float @dx.op.unary.f32(i32 7, float %3192)  ; Saturate(value)
  %3194 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %3195 = extractvalue %dx.types.CBufRet.f32 %3194, 3
  %3196 = fmul fast float %3195, 0x3FE6666660000000
  %3197 = fsub fast float %3155, %3196
  %3198 = fmul fast float %3195, 0x3FD3333340000000
  %3199 = fdiv fast float %3197, %3198
  %3200 = call float @dx.op.unary.f32(i32 7, float %3199)  ; Saturate(value)
  %3201 = call float @dx.op.binary.f32(i32 35, float %3193, float %3200)  ; FMax(a,b)
  %3202 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %53, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %3203 = extractvalue %dx.types.CBufRet.i32 %3202, 0
  %3204 = icmp eq i32 %3203, 0
  %3205 = fsub fast float 1.000000e+00, %3156
  br i1 %3204, label %3467, label %3206

; <label>:3206                                    ; preds = %3154
  %3207 = call float @dx.op.unary.f32(i32 7, float %3205)  ; Saturate(value)
  %3208 = fmul fast float %3155, %201
  %3209 = fmul fast float %3155, %202
  %3210 = fmul fast float %3155, %203
  %3211 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %3212 = extractvalue %dx.types.CBufRet.f32 %3211, 3
  %3213 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %3214 = extractvalue %dx.types.CBufRet.f32 %3213, 2
  %3215 = fadd fast float %3175, %3172
  %3216 = call float @dx.op.binary.f32(i32 36, float %3215, float %3214)  ; FMin(a,b)
  %3217 = fsub fast float %3210, %3216
  %3218 = fadd fast float %3217, %3172
  %3219 = fadd fast float %3218, %3175
  %3220 = call float @dx.op.dot3.f32(i32 55, float %3208, float %3209, float %3219, float %3208, float %3209, float %3219)  ; Dot3(ax,ay,az,bx,by,bz)
  %3221 = call float @dx.op.binary.f32(i32 35, float %3220, float 0x3E45798EE0000000)  ; FMax(a,b)
  %3222 = call float @dx.op.unary.f32(i32 25, float %3221)  ; Rsqrt(value)
  %3223 = fmul fast float %3222, %3220
  %3224 = fmul fast float %3222, %3208
  %3225 = fmul fast float %3222, %3209
  %3226 = fmul fast float %3219, %3222
  %3227 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %3228 = extractvalue %dx.types.CBufRet.f32 %3213, 3
  %3229 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %3228)  ; FMax(a,b)
  %3230 = fcmp fast ogt float %3229, 0.000000e+00
  %3231 = extractvalue %dx.types.CBufRet.f32 %3213, 1
  %3232 = extractvalue %dx.types.CBufRet.f32 %3227, 1
  br i1 %3230, label %3236, label %3233

; <label>:3233                                    ; preds = %3206
  %3234 = extractvalue %dx.types.CBufRet.f32 %3227, 0
  %3235 = extractvalue %dx.types.CBufRet.f32 %3213, 0
  br label %3260

; <label>:3236                                    ; preds = %3206
  %3237 = fmul fast float %3229, %3222
  %3238 = fmul fast float %3237, %3219
  %3239 = fadd fast float %3238, %3216
  %3240 = fsub fast float %3219, %3238
  %3241 = fsub fast float 1.000000e+00, %3237
  %3242 = fmul fast float %3241, %3223
  %3243 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %3244 = extractvalue %dx.types.CBufRet.f32 %3243, 1
  %3245 = fsub fast float %3239, %3244
  %3246 = fmul fast float %3245, %3231
  %3247 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %3246)  ; FMax(a,b)
  %3248 = extractvalue %dx.types.CBufRet.f32 %3243, 0
  %3249 = fsub fast float -0.000000e+00, %3247
  %3250 = call float @dx.op.unary.f32(i32 21, float %3249)  ; Exp(value)
  %3251 = fmul fast float %3248, %3250
  %3252 = extractvalue %dx.types.CBufRet.f32 %3227, 3
  %3253 = fsub fast float %3239, %3252
  %3254 = fmul fast float %3253, %3232
  %3255 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %3254)  ; FMax(a,b)
  %3256 = extractvalue %dx.types.CBufRet.f32 %3227, 2
  %3257 = fsub fast float -0.000000e+00, %3255
  %3258 = call float @dx.op.unary.f32(i32 21, float %3257)  ; Exp(value)
  %3259 = fmul fast float %3256, %3258
  br label %3260

; <label>:3260                                    ; preds = %3236, %3233
  %3261 = phi float [ %3251, %3236 ], [ %3235, %3233 ]
  %3262 = phi float [ %3259, %3236 ], [ %3234, %3233 ]
  %3263 = phi float [ %3242, %3236 ], [ %3223, %3233 ]
  %3264 = phi float [ %3240, %3236 ], [ %3219, %3233 ]
  %3265 = fmul fast float %3231, %3264
  %3266 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %3265)  ; FMax(a,b)
  %3267 = fsub fast float -0.000000e+00, %3266
  %3268 = call float @dx.op.unary.f32(i32 21, float %3267)  ; Exp(value)
  %3269 = fsub fast float 1.000000e+00, %3268
  %3270 = fdiv fast float %3269, %3266
  %3271 = fmul fast float %3266, 0x3FCEBFBE00000000
  %3272 = fsub fast float 0x3FE62E4300000000, %3271
  %3273 = call float @dx.op.unary.f32(i32 6, float %3266)  ; FAbs(value)
  %3274 = fcmp fast ogt float %3273, 0x3F847AE140000000
  %3275 = select i1 %3274, float %3270, float %3272
  %3276 = fmul fast float %3275, %3261
  %3277 = fmul fast float %3232, %3264
  %3278 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %3277)  ; FMax(a,b)
  %3279 = fsub fast float -0.000000e+00, %3278
  %3280 = call float @dx.op.unary.f32(i32 21, float %3279)  ; Exp(value)
  %3281 = fsub fast float 1.000000e+00, %3280
  %3282 = fdiv fast float %3281, %3278
  %3283 = fmul fast float %3278, 0x3FCEBFBE00000000
  %3284 = fsub fast float 0x3FE62E4300000000, %3283
  %3285 = call float @dx.op.unary.f32(i32 6, float %3278)  ; FAbs(value)
  %3286 = fcmp fast ogt float %3285, 0x3F847AE140000000
  %3287 = select i1 %3286, float %3282, float %3284
  %3288 = fmul fast float %3287, %3262
  %3289 = fadd fast float %3288, %3276
  %3290 = extractvalue %dx.types.CBufRet.f32 %3211, 0
  %3291 = extractvalue %dx.types.CBufRet.f32 %3211, 1
  %3292 = extractvalue %dx.types.CBufRet.f32 %3211, 2
  %3293 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %3294 = extractvalue %dx.types.CBufRet.f32 %3293, 2
  %3295 = fcmp fast ogt float %3294, 0.000000e+00
  br i1 %3295, label %3296, label %3332, !dx.controlflow.hints !94

; <label>:3296                                    ; preds = %3260
  %3297 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %3298 = extractvalue %dx.types.CBufRet.f32 %3297, 0
  %3299 = fmul fast float %3298, %3223
  %3300 = extractvalue %dx.types.CBufRet.f32 %3297, 1
  %3301 = fadd fast float %3299, %3300
  %3302 = call float @dx.op.unary.f32(i32 7, float %3301)  ; Saturate(value)
  %3303 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %3304 = extractvalue %dx.types.CBufRet.f32 %3303, 1
  %3305 = extractvalue %dx.types.CBufRet.f32 %3303, 0
  %3306 = fsub fast float -0.000000e+00, %3305
  %3307 = call float @dx.op.dot2.f32(i32 54, float %3208, float %3209, float %3304, float %3306)  ; Dot2(ax,ay,bx,by)
  %3308 = call float @dx.op.dot2.f32(i32 54, float %3208, float %3209, float %3305, float %3304)  ; Dot2(ax,ay,bx,by)
  %3309 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %3310 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3311 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3309, %dx.types.Handle %3310, float %3307, float %3308, float %3219, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3312 = extractvalue %dx.types.ResRet.f32 %3311, 0
  %3313 = extractvalue %dx.types.ResRet.f32 %3311, 1
  %3314 = extractvalue %dx.types.ResRet.f32 %3311, 2
  %3315 = extractvalue %dx.types.CBufRet.f32 %3297, 2
  %3316 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3309, %dx.types.Handle %3310, float %3307, float %3308, float %3219, float undef, i32 undef, i32 undef, i32 undef, float %3315)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3317 = extractvalue %dx.types.ResRet.f32 %3316, 0
  %3318 = extractvalue %dx.types.ResRet.f32 %3316, 1
  %3319 = extractvalue %dx.types.ResRet.f32 %3316, 2
  %3320 = fsub fast float %3312, %3317
  %3321 = fsub fast float %3313, %3318
  %3322 = fsub fast float %3314, %3319
  %3323 = fmul fast float %3320, %3302
  %3324 = fmul fast float %3321, %3302
  %3325 = fmul fast float %3322, %3302
  %3326 = fadd fast float %3323, %3317
  %3327 = fadd fast float %3324, %3318
  %3328 = fadd fast float %3325, %3319
  %3329 = fmul fast float %3326, %3290
  %3330 = fmul fast float %3327, %3291
  %3331 = fmul fast float %3328, %3292
  br label %3332

; <label>:3332                                    ; preds = %3296, %3260
  %3333 = phi float [ %3329, %3296 ], [ %3290, %3260 ]
  %3334 = phi float [ %3330, %3296 ], [ %3291, %3260 ]
  %3335 = phi float [ %3331, %3296 ], [ %3292, %3260 ]
  %3336 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %3337 = extractvalue %dx.types.CBufRet.f32 %3336, 0
  %3338 = extractvalue %dx.types.CBufRet.f32 %3336, 1
  %3339 = extractvalue %dx.types.CBufRet.f32 %3336, 2
  %3340 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 179)  ; CBufferLoadLegacy(handle,regIndex)
  %3341 = extractvalue %dx.types.CBufRet.f32 %3340, 1
  %3342 = fmul fast float %3341, %3337
  %3343 = fmul fast float %3341, %3338
  %3344 = fmul fast float %3341, %3339
  %3345 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3346 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %38, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3347 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3345, %dx.types.Handle %3346, float 5.000000e-01, float 5.000000e-01, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3348 = extractvalue %dx.types.ResRet.f32 %3347, 0
  %3349 = extractvalue %dx.types.ResRet.f32 %3347, 1
  %3350 = extractvalue %dx.types.ResRet.f32 %3347, 2
  %3351 = fmul fast float %3342, %3348
  %3352 = fmul fast float %3343, %3349
  %3353 = fmul fast float %3344, %3350
  %3354 = fadd fast float %3351, %3333
  %3355 = fadd fast float %3352, %3334
  %3356 = fadd fast float %3353, %3335
  %3357 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %3358 = extractvalue %dx.types.CBufRet.f32 %3357, 3
  %3359 = fcmp fast oge float %3358, 0.000000e+00
  %3360 = fcmp fast oeq float %3294, 0.000000e+00
  %3361 = and i1 %3359, %3360
  br i1 %3361, label %3362, label %3433

; <label>:3362                                    ; preds = %3332
  %3363 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %48, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %3364 = extractvalue %dx.types.CBufRet.f32 %3363, 0
  %3365 = extractvalue %dx.types.CBufRet.f32 %3363, 1
  %3366 = extractvalue %dx.types.CBufRet.f32 %3363, 2
  %3367 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 163)  ; CBufferLoadLegacy(handle,regIndex)
  %3368 = extractvalue %dx.types.CBufRet.f32 %3367, 0
  %3369 = extractvalue %dx.types.CBufRet.f32 %3367, 1
  %3370 = extractvalue %dx.types.CBufRet.f32 %3367, 2
  %3371 = fmul fast float %3341, 0x3FB45F3060000000
  %3372 = fmul fast float %3371, %3368
  %3373 = fmul fast float %3371, %3369
  %3374 = fmul fast float %3371, %3370
  %3375 = fadd fast float %3372, %3364
  %3376 = fadd fast float %3373, %3365
  %3377 = fadd fast float %3374, %3366
  %3378 = extractvalue %dx.types.CBufRet.f32 %3363, 3
  %3379 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 161)  ; CBufferLoadLegacy(handle,regIndex)
  %3380 = extractvalue %dx.types.CBufRet.f32 %3379, 0
  %3381 = extractvalue %dx.types.CBufRet.f32 %3379, 1
  %3382 = extractvalue %dx.types.CBufRet.f32 %3379, 2
  %3383 = call float @dx.op.dot3.f32(i32 55, float %3224, float %3225, float %3226, float %3380, float %3381, float %3382)  ; Dot3(ax,ay,az,bx,by,bz)
  %3384 = call float @dx.op.unary.f32(i32 7, float %3383)  ; Saturate(value)
  %3385 = call float @dx.op.unary.f32(i32 23, float %3384)  ; Log(value)
  %3386 = fmul fast float %3385, %3378
  %3387 = call float @dx.op.unary.f32(i32 21, float %3386)  ; Exp(value)
  %3388 = fmul fast float %3387, %3375
  %3389 = fmul fast float %3387, %3376
  %3390 = fmul fast float %3387, %3377
  %3391 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 164)  ; CBufferLoadLegacy(handle,regIndex)
  %3392 = extractvalue %dx.types.CBufRet.f32 %3391, 3
  %3393 = fcmp fast ogt float %3392, 0.000000e+00
  br i1 %3393, label %3394, label %3419

; <label>:3394                                    ; preds = %3362
  %3395 = extractvalue %dx.types.CBufRet.f32 %3391, 0
  %3396 = extractvalue %dx.types.CBufRet.f32 %3391, 1
  %3397 = extractvalue %dx.types.CBufRet.f32 %3391, 2
  %3398 = fmul fast float %3371, %3395
  %3399 = fmul fast float %3371, %3396
  %3400 = fmul fast float %3371, %3397
  %3401 = fadd fast float %3398, %3364
  %3402 = fadd fast float %3399, %3365
  %3403 = fadd fast float %3400, %3366
  %3404 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 162)  ; CBufferLoadLegacy(handle,regIndex)
  %3405 = extractvalue %dx.types.CBufRet.f32 %3404, 0
  %3406 = extractvalue %dx.types.CBufRet.f32 %3404, 1
  %3407 = extractvalue %dx.types.CBufRet.f32 %3404, 2
  %3408 = call float @dx.op.dot3.f32(i32 55, float %3224, float %3225, float %3226, float %3405, float %3406, float %3407)  ; Dot3(ax,ay,az,bx,by,bz)
  %3409 = call float @dx.op.unary.f32(i32 7, float %3408)  ; Saturate(value)
  %3410 = call float @dx.op.unary.f32(i32 23, float %3409)  ; Log(value)
  %3411 = fmul fast float %3410, %3378
  %3412 = call float @dx.op.unary.f32(i32 21, float %3411)  ; Exp(value)
  %3413 = fmul fast float %3412, %3401
  %3414 = fmul fast float %3412, %3402
  %3415 = fmul fast float %3412, %3403
  %3416 = fadd fast float %3413, %3388
  %3417 = fadd fast float %3414, %3389
  %3418 = fadd fast float %3415, %3390
  br label %3419

; <label>:3419                                    ; preds = %3394, %3362
  %3420 = phi float [ %3416, %3394 ], [ %3388, %3362 ]
  %3421 = phi float [ %3417, %3394 ], [ %3389, %3362 ]
  %3422 = phi float [ %3418, %3394 ], [ %3390, %3362 ]
  %3423 = fsub fast float %3263, %3358
  %3424 = call float @dx.op.binary.f32(i32 35, float %3423, float 0.000000e+00)  ; FMax(a,b)
  %3425 = fmul fast float %3289, %3424
  %3426 = fsub fast float -0.000000e+00, %3425
  %3427 = call float @dx.op.unary.f32(i32 21, float %3426)  ; Exp(value)
  %3428 = call float @dx.op.unary.f32(i32 7, float %3427)  ; Saturate(value)
  %3429 = fsub fast float 1.000000e+00, %3428
  %3430 = fmul fast float %3429, %3420
  %3431 = fmul fast float %3429, %3421
  %3432 = fmul fast float %3429, %3422
  br label %3433

; <label>:3433                                    ; preds = %3419, %3332
  %3434 = phi float [ %3430, %3419 ], [ 0.000000e+00, %3332 ]
  %3435 = phi float [ %3431, %3419 ], [ 0.000000e+00, %3332 ]
  %3436 = phi float [ %3432, %3419 ], [ 0.000000e+00, %3332 ]
  %3437 = fmul fast float %3263, %3289
  %3438 = fsub fast float -0.000000e+00, %3437
  %3439 = call float @dx.op.unary.f32(i32 21, float %3438)  ; Exp(value)
  %3440 = call float @dx.op.unary.f32(i32 7, float %3439)  ; Saturate(value)
  %3441 = call float @dx.op.binary.f32(i32 35, float %3440, float %3212)  ; FMax(a,b)
  %3442 = extractvalue %dx.types.CBufRet.f32 %3293, 3
  %3443 = fcmp fast ogt float %3442, 0.000000e+00
  %3444 = fcmp fast ogt float %3223, %3442
  %3445 = and i1 %3443, %3444
  %3446 = select i1 %3445, float 0.000000e+00, float %3434
  %3447 = select i1 %3445, float 0.000000e+00, float %3435
  %3448 = select i1 %3445, float 0.000000e+00, float %3436
  %3449 = select i1 %3445, float 1.000000e+00, float %3441
  %3450 = fsub fast float 1.000000e+00, %3449
  %3451 = fmul fast float %3450, %3354
  %3452 = fmul fast float %3450, %3355
  %3453 = fmul fast float %3450, %3356
  %3454 = fadd fast float %3451, %3446
  %3455 = fadd fast float %3452, %3447
  %3456 = fadd fast float %3453, %3448
  %3457 = fmul fast float %3449, %3162
  %3458 = fmul fast float %3449, %3163
  %3459 = fmul fast float %3449, %3164
  %3460 = fmul fast float %3161, %3207
  %3461 = fmul fast float %3460, %3454
  %3462 = fmul fast float %3460, %3455
  %3463 = fmul fast float %3460, %3456
  %3464 = fadd fast float %3461, %3457
  %3465 = fadd fast float %3462, %3458
  %3466 = fadd fast float %3463, %3459
  br label %3467

; <label>:3467                                    ; preds = %3433, %3154
  %3468 = phi float [ %3464, %3433 ], [ %3162, %3154 ]
  %3469 = phi float [ %3465, %3433 ], [ %3163, %3154 ]
  %3470 = phi float [ %3466, %3433 ], [ %3164, %3154 ]
  %3471 = fmul fast float %3201, %3205
  %3472 = fadd fast float %3471, %3156
  %3473 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %50, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %3474 = extractvalue %dx.types.CBufRet.f32 %3473, 1
  %3475 = fcmp fast ogt float %3474, 0.000000e+00
  br i1 %3475, label %3476, label %3508

; <label>:3476                                    ; preds = %3467
  %3477 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %3478 = extractvalue %dx.types.CBufRet.f32 %3477, 1
  %3479 = fcmp fast ogt float %3478, 0.000000e+00
  br i1 %3479, label %3480, label %3508

; <label>:3480                                    ; preds = %3476
  %3481 = extractvalue %dx.types.CBufRet.f32 %3477, 2
  %3482 = extractvalue %dx.types.CBufRet.f32 %3473, 0
  %3483 = call float @dx.op.binary.f32(i32 35, float %3481, float 0x3F50624DE0000000)  ; FMax(a,b)
  %3484 = call float @dx.op.unary.f32(i32 23, float %3483)  ; Log(value)
  %3485 = fmul fast float %3484, 0x3FF3333340000000
  %3486 = fadd fast float %3482, -2.000000e+00
  %3487 = fadd fast float %3486, %3485
  %3488 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %3489 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3490 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3488, %dx.types.Handle %3489, float %201, float %202, float %203, float undef, i32 undef, i32 undef, i32 undef, float %3487)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3491 = extractvalue %dx.types.ResRet.f32 %3490, 0
  %3492 = extractvalue %dx.types.ResRet.f32 %3490, 1
  %3493 = extractvalue %dx.types.ResRet.f32 %3490, 2
  %3494 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %52, i32 187)  ; CBufferLoadLegacy(handle,regIndex)
  %3495 = extractvalue %dx.types.CBufRet.f32 %3494, 0
  %3496 = extractvalue %dx.types.CBufRet.f32 %3494, 1
  %3497 = extractvalue %dx.types.CBufRet.f32 %3494, 2
  %3498 = fmul fast float %3495, %3491
  %3499 = fmul fast float %3496, %3492
  %3500 = fmul fast float %3497, %3493
  %3501 = extractvalue %dx.types.CBufRet.f32 %3477, 3
  %3502 = fmul fast float %3501, %3155
  %3503 = call float @dx.op.unary.f32(i32 7, float %3502)  ; Saturate(value)
  %3504 = fmul fast float %3503, %3478
  %3505 = fmul fast float %3498, %3504
  %3506 = fmul fast float %3499, %3504
  %3507 = fmul fast float %3500, %3504
  br label %3508

; <label>:3508                                    ; preds = %3480, %3476, %3467
  %3509 = phi float [ %3505, %3480 ], [ 0.000000e+00, %3476 ], [ 0.000000e+00, %3467 ]
  %3510 = phi float [ %3506, %3480 ], [ 0.000000e+00, %3476 ], [ 0.000000e+00, %3467 ]
  %3511 = phi float [ %3507, %3480 ], [ 0.000000e+00, %3476 ], [ 0.000000e+00, %3467 ]
  %3512 = fmul fast float %3161, %3509
  %3513 = fmul fast float %3161, %3510
  %3514 = fmul fast float %3161, %3511
  %3515 = fadd fast float %3512, %3468
  %3516 = fadd fast float %3513, %3469
  %3517 = fadd fast float %3514, %3470
  %3518 = call float @dx.op.binary.f32(i32 35, float %3516, float %3517)  ; FMax(a,b)
  %3519 = call float @dx.op.binary.f32(i32 35, float %3515, float %3518)  ; FMax(a,b)
  %3520 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %53, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %3521 = extractvalue %dx.types.CBufRet.f32 %3520, 2
  %3522 = fcmp fast ogt float %3519, %3521
  br i1 %3522, label %3523, label %3528

; <label>:3523                                    ; preds = %3508
  %3524 = fdiv fast float %3521, %3519
  %3525 = fmul fast float %3524, %3515
  %3526 = fmul fast float %3524, %3516
  %3527 = fmul fast float %3524, %3517
  br label %3528

; <label>:3528                                    ; preds = %3523, %3508
  %3529 = phi float [ %3525, %3523 ], [ %3515, %3508 ]
  %3530 = phi float [ %3526, %3523 ], [ %3516, %3508 ]
  %3531 = phi float [ %3527, %3523 ], [ %3517, %3508 ]
  %3532 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 777 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<3xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3532, i32 %66, i32 %67, i32 undef, float %3529, float %3530, float %3531, float %3529, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %3533 = uitofp i32 %66 to float
  %3534 = uitofp i32 %67 to float
  %3535 = fadd fast float %3533, 5.000000e-01
  %3536 = fadd fast float %3534, 5.000000e-01
  %3537 = call float @dx.op.dot2.f32(i32 54, float %3535, float %3536, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %3538 = call float @dx.op.unary.f32(i32 22, float %3537)  ; Frc(value)
  %3539 = fmul fast float %3538, 0x404A7DD040000000
  %3540 = call float @dx.op.unary.f32(i32 22, float %3539)  ; Frc(value)
  %3541 = fcmp fast olt float %3472, %3540
  %3542 = select i1 %3541, float -1.000000e+00, float 1.000000e+00
  %3543 = fmul fast float %3542, %3155
  %3544 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 265 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<F32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3544, i32 %66, i32 %67, i32 undef, float %3543, float %3543, float %3543, float %3543, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %3545

; <label>:3545                                    ; preds = %3528, %0
  ret void

; <label>:3546                                    ; preds = %2702
  %3547 = fsub fast float %2689, %2684
  %3548 = call float @dx.op.unary.f32(i32 6, float %3547)  ; FAbs(value)
  %3549 = fsub fast float %3548, %2690
  %3550 = fdiv fast float %3549, %2691
  %3551 = call float @dx.op.unary.f32(i32 7, float %3550)  ; Saturate(value)
  %3552 = fsub fast float 1.000000e+00, %3551
  br label %3553

; <label>:3553                                    ; preds = %3546, %2702
  %3554 = phi float [ %3552, %3546 ], [ %2706, %2702 ]
  %3555 = fcmp uge float %2685, 1.000000e+00
  %3556 = or i1 %2317, %3555
  %3557 = select i1 %3555, float 0.000000e+00, float 1.000000e+00
  br i1 %3556, label %3565, label %3558

; <label>:3558                                    ; preds = %3553
  %3559 = fsub fast float %2689, %2685
  %3560 = call float @dx.op.unary.f32(i32 6, float %3559)  ; FAbs(value)
  %3561 = fsub fast float %3560, %2690
  %3562 = fdiv fast float %3561, %2691
  %3563 = call float @dx.op.unary.f32(i32 7, float %3562)  ; Saturate(value)
  %3564 = fsub fast float 1.000000e+00, %3563
  br label %3565

; <label>:3565                                    ; preds = %3558, %3553
  %3566 = phi float [ %3564, %3558 ], [ %3557, %3553 ]
  %3567 = fcmp uge float %2686, 1.000000e+00
  %3568 = or i1 %2317, %3567
  %3569 = select i1 %3567, float 0.000000e+00, float 1.000000e+00
  br i1 %3568, label %3577, label %3570

; <label>:3570                                    ; preds = %3565
  %3571 = fsub fast float %2689, %2686
  %3572 = call float @dx.op.unary.f32(i32 6, float %3571)  ; FAbs(value)
  %3573 = fsub fast float %3572, %2690
  %3574 = fdiv fast float %3573, %2691
  %3575 = call float @dx.op.unary.f32(i32 7, float %3574)  ; Saturate(value)
  %3576 = fsub fast float 1.000000e+00, %3575
  br label %3577

; <label>:3577                                    ; preds = %3570, %3565
  %3578 = phi float [ %3576, %3570 ], [ %3569, %3565 ]
  %3579 = fmul fast float %2703, %2664
  %3580 = fmul fast float %3554, %2665
  %3581 = fmul fast float %3566, %2667
  %3582 = fmul fast float %3578, %2668
  %3583 = call float @dx.op.dot4.f32(i32 56, float %3579, float %3580, float %3581, float %3582, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %3584 = fmul fast float %3583, %2677
  %3585 = fcmp fast ogt float %3584, 0.000000e+00
  br i1 %3585, label %2707, label %2447

; <label>:3586                                    ; preds = %1470
  %3587 = fsub fast float %1457, %1452
  %3588 = call float @dx.op.unary.f32(i32 6, float %3587)  ; FAbs(value)
  %3589 = fsub fast float %3588, %1458
  %3590 = fdiv fast float %3589, %1459
  %3591 = call float @dx.op.unary.f32(i32 7, float %3590)  ; Saturate(value)
  %3592 = fsub fast float 1.000000e+00, %3591
  br label %3593

; <label>:3593                                    ; preds = %3586, %1470
  %3594 = phi float [ %3592, %3586 ], [ %1474, %1470 ]
  %3595 = fcmp uge float %1453, 1.000000e+00
  %3596 = or i1 %1076, %3595
  %3597 = select i1 %3595, float 0.000000e+00, float 1.000000e+00
  br i1 %3596, label %3605, label %3598

; <label>:3598                                    ; preds = %3593
  %3599 = fsub fast float %1457, %1453
  %3600 = call float @dx.op.unary.f32(i32 6, float %3599)  ; FAbs(value)
  %3601 = fsub fast float %3600, %1458
  %3602 = fdiv fast float %3601, %1459
  %3603 = call float @dx.op.unary.f32(i32 7, float %3602)  ; Saturate(value)
  %3604 = fsub fast float 1.000000e+00, %3603
  br label %3605

; <label>:3605                                    ; preds = %3598, %3593
  %3606 = phi float [ %3604, %3598 ], [ %3597, %3593 ]
  %3607 = fcmp uge float %1454, 1.000000e+00
  %3608 = or i1 %1076, %3607
  %3609 = select i1 %3607, float 0.000000e+00, float 1.000000e+00
  br i1 %3608, label %3617, label %3610

; <label>:3610                                    ; preds = %3605
  %3611 = fsub fast float %1457, %1454
  %3612 = call float @dx.op.unary.f32(i32 6, float %3611)  ; FAbs(value)
  %3613 = fsub fast float %3612, %1458
  %3614 = fdiv fast float %3613, %1459
  %3615 = call float @dx.op.unary.f32(i32 7, float %3614)  ; Saturate(value)
  %3616 = fsub fast float 1.000000e+00, %3615
  br label %3617

; <label>:3617                                    ; preds = %3610, %3605
  %3618 = phi float [ %3616, %3610 ], [ %3609, %3605 ]
  %3619 = fmul fast float %1471, %1432
  %3620 = fmul fast float %3594, %1433
  %3621 = fmul fast float %3606, %1435
  %3622 = fmul fast float %3618, %1436
  %3623 = call float @dx.op.dot4.f32(i32 56, float %3619, float %3620, float %3621, float %3622, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %3624 = fmul fast float %3623, %1445
  %3625 = fcmp fast ogt float %3624, 0.000000e+00
  br i1 %3625, label %1475, label %1215
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.rawBufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8, i32) #2

; Function Attrs: nounwind
declare i32 @dx.op.atomicBinOp.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.unary.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.unaryBits.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!62}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !40, !48, !55}
!5 = !{!6, !8, !10, !11, !12, !13, !14, !15, !16, !17, !19, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 12, i32 0, !9}
!9 = !{i32 1, i32 16}
!10 = !{i32 2, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 12, i32 0, !9}
!11 = !{i32 3, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 12, i32 0, !9}
!12 = !{i32 4, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 4, i32 1, i32 11, i32 0, null}
!13 = !{i32 5, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 5, i32 1, i32 11, i32 0, null}
!14 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !7}
!15 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !7}
!16 = !{i32 8, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 5, i32 0, !7}
!17 = !{i32 9, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 9, i32 1, i32 10, i32 0, !18}
!18 = !{i32 0, i32 5}
!19 = !{i32 10, %"class.StructuredBuffer<FPackedVirtualVoxelNodeDesc>"* undef, !"", i32 0, i32 10, i32 1, i32 12, i32 0, !20}
!20 = !{i32 1, i32 32}
!21 = !{i32 11, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 11, i32 1, i32 4, i32 0, !18}
!22 = !{i32 12, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 5, i32 0, !7}
!23 = !{i32 13, %"class.Buffer<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 10, i32 0, !7}
!24 = !{i32 14, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 4, i32 0, !7}
!25 = !{i32 15, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 12, i32 0, !9}
!26 = !{i32 16, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 16, i32 1, i32 12, i32 0, !9}
!27 = !{i32 17, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 17, i32 1, i32 2, i32 0, !7}
!28 = !{i32 18, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 18, i32 1, i32 2, i32 0, !7}
!29 = !{i32 19, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 19, i32 1, i32 10, i32 0, !18}
!30 = !{i32 20, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 20, i32 1, i32 10, i32 0, !18}
!31 = !{i32 21, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 21, i32 1, i32 10, i32 0, !18}
!32 = !{i32 22, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 22, i32 1, i32 10, i32 0, !18}
!33 = !{i32 23, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 23, i32 1, i32 10, i32 0, !18}
!34 = !{i32 24, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 24, i32 1, i32 10, i32 0, !18}
!35 = !{i32 25, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 25, i32 1, i32 2, i32 0, !7}
!36 = !{i32 26, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 26, i32 1, i32 2, i32 0, !7}
!37 = !{i32 27, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 27, i32 1, i32 2, i32 0, !18}
!38 = !{i32 28, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 28, i32 1, i32 10, i32 0, !18}
!39 = !{i32 29, %"class.Buffer<vector<unsigned int, 2> >"* undef, !"", i32 0, i32 29, i32 1, i32 10, i32 0, !18}
!40 = !{!41, !43, !44, !46, !47}
!41 = !{i32 0, %"class.RWStructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 0, i32 1, i32 12, i1 false, i1 false, i1 false, !42}
!42 = !{i32 1, i32 4}
!43 = !{i32 1, %"class.RWStructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 1, i32 1, i32 12, i1 false, i1 false, i1 false, !42}
!44 = !{i32 2, %"class.RWStructuredBuffer<vector<unsigned int, 2> >"* undef, !"", i32 0, i32 2, i32 1, i32 12, i1 false, i1 false, i1 false, !45}
!45 = !{i32 1, i32 8}
!46 = !{i32 3, %"class.RWTexture2D<float>"* undef, !"", i32 0, i32 3, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!47 = !{i32 4, %"class.RWTexture2D<vector<float, 3> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!48 = !{!49, !50, !51, !52, !53, !54}
!49 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 820, null}
!50 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!51 = !{i32 2, %UniformBufferConstants_LumenCardScene* undef, !"", i32 0, i32 2, i32 1, i32 196, null}
!52 = !{i32 3, %UniformBufferConstants_ReflectionStruct* undef, !"", i32 0, i32 3, i32 1, i32 76, null}
!53 = !{i32 4, %UniformBufferConstants_VirtualVoxel* undef, !"", i32 0, i32 4, i32 1, i32 212, null}
!54 = !{i32 5, %UniformBufferConstants_FogStruct* undef, !"", i32 0, i32 5, i32 1, i32 180, null}
!55 = !{!56, !57, !58, !59, !60, !61}
!56 = !{i32 0, %struct.SamplerState* undef, !"", i32 1000, i32 1, i32 1, i32 0, null}
!57 = !{i32 1, %struct.SamplerState* undef, !"", i32 1000, i32 2, i32 1, i32 0, null}
!58 = !{i32 2, %struct.SamplerState* undef, !"", i32 1000, i32 3, i32 1, i32 0, null}
!59 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!60 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!61 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!62 = !{void ()* @ReflectionTraceMeshSDFsCS, !"ReflectionTraceMeshSDFsCS", null, !4, !63}
!63 = !{i32 0, i64 16, i32 4, !64, i32 5, !65}
!64 = !{i32 64, i32 1, i32 1}
!65 = !{i32 0}
!66 = distinct !{!66, !"dx.controlflow.hints", i32 1}
!67 = distinct !{!67, !68}
!68 = !{!"llvm.loop.unroll.disable"}
!69 = !{!70, !70, i64 0}
!70 = !{!"int", !71, i64 0}
!71 = !{!"omnipotent char", !72, i64 0}
!72 = !{!"Simple C/C++ TBAA"}
!73 = !{!74}
!74 = distinct !{!74, !75, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z: %agg.result"}
!75 = distinct !{!75, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z"}
!76 = !{!77, !79, !81}
!77 = distinct !{!77, !78, !"\01?SampleLumenMeshCards@@YA?AUFSurfaceCacheSample@@V?$vector@I$01@@IV?$vector@M$02@@1MM_NI@Z: %agg.result"}
!78 = distinct !{!78, !"\01?SampleLumenMeshCards@@YA?AUFSurfaceCacheSample@@V?$vector@I$01@@IV?$vector@M$02@@1MM_NI@Z"}
!79 = distinct !{!79, !80, !"\01?ConeTraceMeshSDFsAndInterpolateFromCards@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!80 = distinct !{!80, !"\01?ConeTraceMeshSDFsAndInterpolateFromCards@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z"}
!81 = distinct !{!81, !82, !"\01?ConeTraceLumenSceneCards@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!82 = distinct !{!82, !"\01?ConeTraceLumenSceneCards@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z"}
!83 = !{!84}
!84 = distinct !{!84, !85, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z: %agg.result"}
!85 = distinct !{!85, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z"}
!86 = !{!87, !89, !91, !92}
!87 = distinct !{!87, !88, !"\01?SampleLumenMeshCards@@YA?AUFSurfaceCacheSample@@V?$vector@I$01@@IV?$vector@M$02@@1MM_NI@Z: %agg.result"}
!88 = distinct !{!88, !"\01?SampleLumenMeshCards@@YA?AUFSurfaceCacheSample@@V?$vector@I$01@@IV?$vector@M$02@@1MM_NI@Z"}
!89 = distinct !{!89, !90, !"\01?ConeTraceHeightfield@@YA?AUFTraceMeshHeightfieldResult@@UFConeTraceInput@@UFConeTraceResult@@@Z: %agg.result"}
!90 = distinct !{!90, !"\01?ConeTraceHeightfield@@YA?AUFTraceMeshHeightfieldResult@@UFConeTraceInput@@UFConeTraceResult@@@Z"}
!91 = distinct !{!91, !90, !"\01?ConeTraceHeightfield@@YA?AUFTraceMeshHeightfieldResult@@UFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!92 = distinct !{!92, !93, !"\01?ConeTraceLumenSceneHeightfields@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!93 = distinct !{!93, !"\01?ConeTraceLumenSceneHeightfields@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z"}
!94 = distinct !{!94, !"dx.controlflow.hints", i32 1}
