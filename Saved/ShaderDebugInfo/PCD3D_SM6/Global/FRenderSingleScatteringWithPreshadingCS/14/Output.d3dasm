;
; Note: shader requires additional functionality:
;       Typed UAV Load Additional Formats
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 178f524edec0a69bb69cba647c5aab63
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(64,1,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct hostlayout._RootShaderParameters
;   {
;
;       int bApplyEmissionAndTransmittance;           ; Offset:   96
;       int bApplyDirectLighting;                     ; Offset:  100
;       int LightType;                                ; Offset:  104
;       float VolumetricScatteringIntensity;          ; Offset:  128
;       row_major float4x4 TranslatedWorldToShadowMatrix;; Offset:  160
;       float4 ShadowmapMinMax;                       ; Offset:  224
;       float4 DepthBiasParameters;                   ; Offset:  240
;       float4 ShadowInjectParams;                    ; Offset:  256
;       row_major float4x4 ShadowViewProjectionMatrices[6];; Offset:  352
;       float InvShadowmapResolution;                 ; Offset:  736
;       uint bStaticallyShadowed;                     ; Offset:  752
;       row_major float4x4 TranslatedWorldToStaticShadowMatrix;; Offset:  784
;       float4 StaticShadowBufferSize;                ; Offset:  848
;       uint VirtualShadowMapId;                      ; Offset:  880
;       int MipLevel;                                 ; Offset:  912
;       uint3 LightingCacheResolution;                ; Offset:  944
;       float MaxTraceDistance;                       ; Offset:  976
;       float StepSize;                               ; Offset:  980
;       int MaxStepCount;                             ; Offset:  984
;       int bJitter;                                  ; Offset:  988
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   992
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_SparseVoxelUniformBuffer
; {
;
;   struct hostlayout.UniformBufferConstants_SparseVoxelUniformBuffer
;   {
;
;       row_major float4x4 SparseVoxelUniformBuffer_LocalToWorld;; Offset:    0
;       row_major float4x4 SparseVoxelUniformBuffer_WorldToLocal;; Offset:   64
;       float3 SparseVoxelUniformBuffer_LocalBoundsOrigin;; Offset:  128
;       float PrePadding_SparseVoxelUniformBuffer_140;; Offset:  140
;       float3 SparseVoxelUniformBuffer_LocalBoundsExtent;; Offset:  144
;       float PrePadding_SparseVoxelUniformBuffer_156;; Offset:  156
;       int3 SparseVoxelUniformBuffer_VolumeResolution;; Offset:  160
;       int PrePadding_SparseVoxelUniformBuffer_172;  ; Offset:  172
;       uint BindlessResource_SparseVoxelUniformBuffer_ExtinctionTexture;; Offset:  176
;       uint PrePadding_SparseVoxelUniformBuffer_180; ; Offset:  180
;       uint BindlessResource_SparseVoxelUniformBuffer_EmissionTexture;; Offset:  184
;       uint PrePadding_SparseVoxelUniformBuffer_188; ; Offset:  188
;       uint BindlessResource_SparseVoxelUniformBuffer_AlbedoTexture;; Offset:  192
;       uint PrePadding_SparseVoxelUniformBuffer_196; ; Offset:  196
;       uint BindlessSampler_SparseVoxelUniformBuffer_TextureSampler;; Offset:  200
;       uint PrePadding_SparseVoxelUniformBuffer_204; ; Offset:  204
;       int3 SparseVoxelUniformBuffer_LightingCacheResolution;; Offset:  208
;       int PrePadding_SparseVoxelUniformBuffer_220;  ; Offset:  220
;       uint BindlessResource_SparseVoxelUniformBuffer_NumVoxelsBuffer;; Offset:  224
;       uint PrePadding_SparseVoxelUniformBuffer_228; ; Offset:  228
;       uint BindlessResource_SparseVoxelUniformBuffer_VoxelBuffer;; Offset:  232
;       uint PrePadding_SparseVoxelUniformBuffer_236; ; Offset:  236
;       int SparseVoxelUniformBuffer_MipLevel;        ; Offset:  240
;       float SparseVoxelUniformBuffer_MaxTraceDistance;; Offset:  244
;       float SparseVoxelUniformBuffer_MaxShadowTraceDistance;; Offset:  248
;       float SparseVoxelUniformBuffer_StepSize;      ; Offset:  252
;       float SparseVoxelUniformBuffer_ShadowStepSize;; Offset:  256
;   
;   } UniformBufferConstants_SparseVoxelUniformBuffer;; Offset:    0 Size:   260
;
; }
;
; cbuffer UniformBufferConstants_DeferredLightUniforms
; {
;
;   struct UniformBufferConstants_DeferredLightUniforms
;   {
;
;       float4 DeferredLightUniforms_ShadowMapChannelMask;; Offset:    0
;       float2 DeferredLightUniforms_DistanceFadeMAD; ; Offset:   16
;       float DeferredLightUniforms_ContactShadowLength;; Offset:   24
;       float DeferredLightUniforms_ContactShadowCastingIntensity;; Offset:   28
;       float DeferredLightUniforms_ContactShadowNonCastingIntensity;; Offset:   32
;       float DeferredLightUniforms_VolumetricScatteringIntensity;; Offset:   36
;       uint DeferredLightUniforms_ShadowedBits;      ; Offset:   40
;       uint DeferredLightUniforms_LightingChannelMask;; Offset:   44
;       float3 DeferredLightUniforms_TranslatedWorldPosition;; Offset:   48
;       float DeferredLightUniforms_InvRadius;        ; Offset:   60
;       float3 DeferredLightUniforms_Color;           ; Offset:   64
;       float DeferredLightUniforms_FalloffExponent;  ; Offset:   76
;       float3 DeferredLightUniforms_Direction;       ; Offset:   80
;       float DeferredLightUniforms_SpecularScale;    ; Offset:   92
;       float3 DeferredLightUniforms_Tangent;         ; Offset:   96
;       float DeferredLightUniforms_SourceRadius;     ; Offset:  108
;       float2 DeferredLightUniforms_SpotAngles;      ; Offset:  112
;       float DeferredLightUniforms_SoftSourceRadius; ; Offset:  120
;       float DeferredLightUniforms_SourceLength;     ; Offset:  124
;       float DeferredLightUniforms_RectLightBarnCosAngle;; Offset:  128
;       float DeferredLightUniforms_RectLightBarnLength;; Offset:  132
;       float2 DeferredLightUniforms_RectLightAtlasUVOffset;; Offset:  136
;       float2 DeferredLightUniforms_RectLightAtlasUVScale;; Offset:  144
;       float DeferredLightUniforms_RectLightAtlasMaxLevel;; Offset:  152
;       float DeferredLightUniforms_IESAtlasIndex;    ; Offset:  156
;   
;   } UniformBufferConstants_DeferredLightUniforms;   ; Offset:    0 Size:   160
;
; }
;
; cbuffer UniformBufferConstants_ForwardLightData
; {
;
;   struct hostlayout.UniformBufferConstants_ForwardLightData
;   {
;
;       uint ForwardLightData_NumLocalLights;         ; Offset:    0
;       uint ForwardLightData_NumReflectionCaptures;  ; Offset:    4
;       uint ForwardLightData_HasDirectionalLight;    ; Offset:    8
;       uint ForwardLightData_NumGridCells;           ; Offset:   12
;       int3 ForwardLightData_CulledGridSize;         ; Offset:   16
;       uint ForwardLightData_MaxCulledLightsPerCell; ; Offset:   28
;       uint ForwardLightData_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_ForwardLightData_36;          ; Offset:   36
;       uint PrePadding_ForwardLightData_40;          ; Offset:   40
;       uint PrePadding_ForwardLightData_44;          ; Offset:   44
;       float3 ForwardLightData_LightGridZParams;     ; Offset:   48
;       float PrePadding_ForwardLightData_60;         ; Offset:   60
;       float3 ForwardLightData_DirectionalLightDirection;; Offset:   64
;       float ForwardLightData_DirectionalLightSourceRadius;; Offset:   76
;       float3 ForwardLightData_DirectionalLightColor;; Offset:   80
;       float ForwardLightData_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint ForwardLightData_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_ForwardLightData_100;         ; Offset:  100
;       float2 ForwardLightData_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint ForwardLightData_NumDirectionalLightCascades;; Offset:  112
;       int ForwardLightData_DirectionalLightVSM;     ; Offset:  116
;       int PrePadding_ForwardLightData_120;          ; Offset:  120
;       int PrePadding_ForwardLightData_124;          ; Offset:  124
;       float4 ForwardLightData_CascadeEndDepths;     ; Offset:  128
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 ForwardLightData_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float ForwardLightData_DirectionalLightDepthBias;; Offset:  480
;       uint ForwardLightData_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint ForwardLightData_SimpleLightsEndIndex;   ; Offset:  488
;       uint ForwardLightData_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint ForwardLightData_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_ForwardLightData_500;         ; Offset:  500
;       uint PrePadding_ForwardLightData_504;         ; Offset:  504
;       uint PrePadding_ForwardLightData_508;         ; Offset:  508
;       float4 ForwardLightData_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint ForwardLightData_DirectLightingShowFlag; ; Offset:  592
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_604;; Offset:  604
;       float ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_ForwardLightData_644;         ; Offset:  644
;       uint PrePadding_ForwardLightData_648;         ; Offset:  648
;       uint PrePadding_ForwardLightData_652;         ; Offset:  652
;       uint BindlessResource_ForwardLightData_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_ForwardLightData_660;         ; Offset:  660
;       uint BindlessSampler_ForwardLightData_ShadowmapSampler;; Offset:  664
;       uint PrePadding_ForwardLightData_668;         ; Offset:  668
;       uint BindlessResource_ForwardLightData_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_ForwardLightData_676;         ; Offset:  676
;       uint BindlessSampler_ForwardLightData_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_ForwardLightData_684;         ; Offset:  684
;       uint BindlessResource_ForwardLightData_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_ForwardLightData_692;         ; Offset:  692
;       uint BindlessResource_ForwardLightData_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_ForwardLightData_700;         ; Offset:  700
;       uint BindlessResource_ForwardLightData_CulledLightDataGrid;; Offset:  704
;   
;   } UniformBufferConstants_ForwardLightData;        ; Offset:    0 Size:   708
;
; }
;
; Resource bind info for VirtualShadowMap_PageTable
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for VoxelsPerTileBuffer
; {
;
;   struct struct.FVoxelDataPacked
;   {
;
;       uint LinearIndex;                             ; Offset:    0
;       uint MipLevel;                                ; Offset:    4
;   
;   } $Element;                                       ; Offset:    0 Size:     8
;
; }
;
; Resource bind info for RayMarchingTilesBuffer
; {
;
;   struct struct.FRayMarchingTile
;   {
;
;       uint2 PixelOffset;                            ; Offset:    0
;       uint Voxels[2];                               ; Offset:    8
;       uint Id;                                      ; Offset:   16
;       uint Padding[3];                              ; Offset:   20
;   
;   } $Element;                                       ; Offset:    0 Size:    32
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_SparseVoxelUniformBuffer   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_DeferredLightUniforms   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_ForwardLightData   cbuffer      NA          NA     CB4            cb4     1
; SparseVoxelUniformBuffer_TextureSampler   sampler      NA          NA      S0             s0     1
; ForwardLightData_ShadowmapSampler   sampler      NA          NA      S1             s1     1
; ShadowDepthTextureSampler         sampler      NA          NA      S2             s2     1
; ShadowDepthCubeTextureSampler     sampler      NA          NA      S3             s3     1
; StaticShadowDepthTextureSampler   sampler      NA          NA      S4             s4     1
; VirtualShadowMap_ProjectionData   texture    byte         r/o      T0             t0     1
; VirtualShadowMap_PageTable        texture  struct         r/o      T1             t1     1
; VirtualShadowMap_PhysicalPagePool   texture     u32     2darray      T2             t2     1
; SparseVoxelUniformBuffer_ExtinctionTexture   texture     f32          3d      T3             t3     1
; SparseVoxelUniformBuffer_EmissionTexture   texture     f32          3d      T4             t4     1
; SparseVoxelUniformBuffer_AlbedoTexture   texture     f32          3d      T5             t5     1
; ForwardLightData_DirectionalLightShadowmapAtlas   texture     f32          2d      T6             t6     1
; SceneDepthTexture                 texture     f32          2d      T7             t7     1
; VoxelsPerTileBuffer               texture  struct         r/o      T8             t8     1
; ShadowDepthTexture                texture     f32          2d      T9             t9     1
; ShadowDepthCubeTexture            texture     f32        cube     T10            t10     1
; StaticShadowDepthTexture          texture     f32          2d     T11            t11     1
; RayMarchingTilesBuffer            texture  struct         r/o     T12            t12     1
; RWLightingTexture                     UAV     f32          2d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Texture2DArray<unsigned int>" = type { i32, %"class.Texture2DArray<unsigned int>::mips_type" }
%"class.Texture2DArray<unsigned int>::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.StructuredBuffer<FVoxelDataPacked>" = type { %struct.FVoxelDataPacked }
%struct.FVoxelDataPacked = type { i32, i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.StructuredBuffer<FRayMarchingTile>" = type { %struct.FRayMarchingTile }
%struct.FRayMarchingTile = type { <2 x i32>, [2 x i32], i32, [3 x i32] }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }
%hostlayout._RootShaderParameters = type { i32, i32, i32, float, [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float>, [6 x [4 x <4 x float>]], float, i32, [4 x <4 x float>], <4 x float>, i32, i32, <3 x i32>, float, float, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%hostlayout.UniformBufferConstants_SparseVoxelUniformBuffer = type { [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, i32, float, float, float, float }
%UniformBufferConstants_DeferredLightUniforms = type { <4 x float>, <2 x float>, float, float, float, float, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, float, float, <2 x float>, <2 x float>, float, float }
%hostlayout.UniformBufferConstants_ForwardLightData = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }
%struct.SamplerComparisonState = type { i32 }

define void @RenderSingleScatteringWithPreshadingCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 13, i32 708 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %26 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 13, i32 160 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %27 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 13, i32 260 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %28 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %29 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 13, i32 992 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %30 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %31 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 0)  ; ThreadIdInGroup(component)
  %32 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %25, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %33 = extractvalue %dx.types.CBufRet.i32 %32, 0
  %34 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %35 = extractvalue %dx.types.CBufRet.f32 %34, 0
  %36 = extractvalue %dx.types.CBufRet.f32 %34, 1
  %37 = extractvalue %dx.types.CBufRet.f32 %34, 2
  %38 = extractvalue %dx.types.CBufRet.f32 %34, 3
  %39 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %40 = extractvalue %dx.types.CBufRet.f32 %39, 0
  %41 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 524, i32 32 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=32>
  %42 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %41, i32 %30, i32 0, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %43 = extractvalue %dx.types.ResRet.i32 %42, 0
  %44 = extractvalue %dx.types.ResRet.i32 %42, 1
  %45 = and i32 %31, 7
  %46 = lshr i32 %31, 3
  %47 = add i32 %43, %45
  %48 = add i32 %44, %46
  %49 = uitofp i32 %47 to float
  %50 = uitofp i32 %48 to float
  %51 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 129)  ; CBufferLoadLegacy(handle,regIndex)
  %52 = extractvalue %dx.types.CBufRet.f32 %51, 0
  %53 = extractvalue %dx.types.CBufRet.f32 %51, 1
  %54 = fcmp fast oge float %49, %52
  %55 = fcmp fast oge float %50, %53
  %56 = or i1 %54, %55
  br i1 %56, label %2009, label %57

; <label>:57                                      ; preds = %0
  %58 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %59 = extractvalue %dx.types.CBufRet.f32 %58, 0
  %60 = extractvalue %dx.types.CBufRet.f32 %58, 1
  %61 = fadd fast float %59, %49
  %62 = fadd fast float %60, %50
  %63 = fptosi float %61 to i32
  %64 = fptosi float %62 to i32
  %65 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %66 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %65, i32 0, i32 %63, i32 %64, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %67 = extractvalue %dx.types.ResRet.f32 %66, 0
  %68 = call float @dx.op.binary.f32(i32 35, float 0x3D71979980000000, float %67)  ; FMax(a,b)
  %69 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %70 = extractvalue %dx.types.CBufRet.f32 %69, 0
  %71 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %72 = extractvalue %dx.types.CBufRet.f32 %71, 0
  %73 = fmul fast float %72, %68
  %74 = extractvalue %dx.types.CBufRet.f32 %71, 1
  %75 = fadd fast float %73, %74
  %76 = extractvalue %dx.types.CBufRet.f32 %71, 2
  %77 = fmul fast float %76, %68
  %78 = extractvalue %dx.types.CBufRet.f32 %71, 3
  %79 = fsub fast float %77, %78
  %80 = fdiv fast float 1.000000e+00, %79
  %81 = fadd fast float %75, %80
  %82 = call float @dx.op.binary.f32(i32 36, float %81, float %70)  ; FMin(a,b)
  %83 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %84 = extractvalue %dx.types.CBufRet.f32 %83, 3
  %85 = fcmp fast ult float %84, 1.000000e+00
  br i1 %85, label %92, label %86, !dx.controlflow.hints !42

; <label>:86                                      ; preds = %57
  %87 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %88 = extractvalue %dx.types.CBufRet.f32 %87, 2
  %89 = fmul fast float %88, %82
  %90 = extractvalue %dx.types.CBufRet.f32 %83, 2
  %91 = fadd fast float %89, %90
  br label %96

; <label>:92                                      ; preds = %57
  %93 = fadd fast float %78, %82
  %94 = fmul fast float %93, %76
  %95 = fdiv fast float 1.000000e+00, %94
  br label %96

; <label>:96                                      ; preds = %92, %86
  %97 = phi float [ %91, %86 ], [ %95, %92 ]
  %98 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %99 = extractvalue %dx.types.CBufRet.i32 %98, 3
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %113, label %101

; <label>:101                                     ; preds = %96
  %102 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %28, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %103 = extractvalue %dx.types.CBufRet.i32 %102, 0
  %104 = uitofp i32 %103 to float
  %105 = fmul fast float %104, 0x4040551EC0000000
  %106 = fmul fast float %104, 0x4027A147A0000000
  %107 = fadd fast float %105, %61
  %108 = fadd fast float %106, %62
  %109 = call float @dx.op.dot2.f32(i32 54, float %107, float %108, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %110 = call float @dx.op.unary.f32(i32 22, float %109)  ; Frc(value)
  %111 = fmul fast float %110, 0x404A7DD040000000
  %112 = call float @dx.op.unary.f32(i32 22, float %111)  ; Frc(value)
  br label %113

; <label>:113                                     ; preds = %101, %96
  %114 = phi float [ %112, %101 ], [ 0.000000e+00, %96 ]
  %115 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %116 = extractvalue %dx.types.CBufRet.f32 %115, 0
  %117 = extractvalue %dx.types.CBufRet.f32 %115, 1
  %118 = extractvalue %dx.types.CBufRet.f32 %115, 2
  %119 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %120 = extractvalue %dx.types.CBufRet.f32 %119, 0
  %121 = extractvalue %dx.types.CBufRet.f32 %119, 1
  %122 = extractvalue %dx.types.CBufRet.f32 %119, 2
  %123 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %124 = extractvalue %dx.types.CBufRet.f32 %123, 0
  %125 = extractvalue %dx.types.CBufRet.f32 %123, 1
  %126 = extractvalue %dx.types.CBufRet.f32 %123, 2
  %127 = fsub fast float %124, %120
  %128 = fsub fast float %125, %121
  %129 = fsub fast float %126, %122
  %130 = fmul fast float %116, 2.097152e+06
  %131 = fmul fast float %117, 2.097152e+06
  %132 = fmul fast float %118, 2.097152e+06
  %133 = fadd fast float %127, %130
  %134 = fadd fast float %128, %131
  %135 = fadd fast float %129, %132
  %136 = fadd fast float %61, 5.000000e-01
  %137 = fadd fast float %62, 5.000000e-01
  %138 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %139 = extractvalue %dx.types.CBufRet.f32 %138, 0
  %140 = extractvalue %dx.types.CBufRet.f32 %138, 1
  %141 = extractvalue %dx.types.CBufRet.f32 %138, 2
  %142 = extractvalue %dx.types.CBufRet.f32 %138, 3
  %143 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %144 = extractvalue %dx.types.CBufRet.f32 %143, 0
  %145 = extractvalue %dx.types.CBufRet.f32 %143, 1
  %146 = extractvalue %dx.types.CBufRet.f32 %143, 2
  %147 = extractvalue %dx.types.CBufRet.f32 %143, 3
  %148 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %149 = extractvalue %dx.types.CBufRet.f32 %148, 0
  %150 = extractvalue %dx.types.CBufRet.f32 %148, 1
  %151 = extractvalue %dx.types.CBufRet.f32 %148, 2
  %152 = extractvalue %dx.types.CBufRet.f32 %148, 3
  %153 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %154 = extractvalue %dx.types.CBufRet.f32 %153, 0
  %155 = extractvalue %dx.types.CBufRet.f32 %153, 1
  %156 = extractvalue %dx.types.CBufRet.f32 %153, 2
  %157 = extractvalue %dx.types.CBufRet.f32 %153, 3
  %158 = fmul fast float %139, %136
  %159 = call float @dx.op.tertiary.f32(i32 46, float %137, float %144, float %158)  ; FMad(a,b,c)
  %160 = call float @dx.op.tertiary.f32(i32 46, float %97, float %149, float %159)  ; FMad(a,b,c)
  %161 = fadd fast float %160, %154
  %162 = fmul fast float %140, %136
  %163 = call float @dx.op.tertiary.f32(i32 46, float %137, float %145, float %162)  ; FMad(a,b,c)
  %164 = call float @dx.op.tertiary.f32(i32 46, float %97, float %150, float %163)  ; FMad(a,b,c)
  %165 = fadd fast float %164, %155
  %166 = fmul fast float %141, %136
  %167 = call float @dx.op.tertiary.f32(i32 46, float %137, float %146, float %166)  ; FMad(a,b,c)
  %168 = call float @dx.op.tertiary.f32(i32 46, float %97, float %151, float %167)  ; FMad(a,b,c)
  %169 = fadd fast float %168, %156
  %170 = fmul fast float %142, %136
  %171 = call float @dx.op.tertiary.f32(i32 46, float %137, float %147, float %170)  ; FMad(a,b,c)
  %172 = call float @dx.op.tertiary.f32(i32 46, float %97, float %152, float %171)  ; FMad(a,b,c)
  %173 = fadd fast float %172, %157
  %174 = fdiv fast float %161, %173
  %175 = fdiv fast float %165, %173
  %176 = fdiv fast float %169, %173
  %177 = fsub fast float %174, %120
  %178 = fsub fast float %175, %121
  %179 = fsub fast float %176, %122
  %180 = fadd fast float %177, %130
  %181 = fadd fast float %178, %131
  %182 = fadd fast float %179, %132
  %183 = fsub fast float %174, %124
  %184 = fsub fast float %175, %125
  %185 = fsub fast float %176, %126
  %186 = fmul fast float %183, %183
  %187 = fmul fast float %184, %184
  %188 = fadd fast float %186, %187
  %189 = fmul fast float %185, %185
  %190 = fadd fast float %188, %189
  %191 = call float @dx.op.unary.f32(i32 24, float %190)  ; Sqrt(value)
  %192 = fdiv fast float %183, %191
  %193 = fdiv fast float %184, %191
  %194 = fdiv fast float %185, %191
  %195 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %196 = extractvalue %dx.types.CBufRet.f32 %195, 0
  %197 = extractvalue %dx.types.CBufRet.f32 %195, 1
  %198 = extractvalue %dx.types.CBufRet.f32 %195, 2
  %199 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %200 = extractvalue %dx.types.CBufRet.f32 %199, 0
  %201 = extractvalue %dx.types.CBufRet.f32 %199, 1
  %202 = extractvalue %dx.types.CBufRet.f32 %199, 2
  %203 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %204 = extractvalue %dx.types.CBufRet.f32 %203, 0
  %205 = extractvalue %dx.types.CBufRet.f32 %203, 1
  %206 = extractvalue %dx.types.CBufRet.f32 %203, 2
  %207 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %208 = extractvalue %dx.types.CBufRet.f32 %207, 0
  %209 = extractvalue %dx.types.CBufRet.f32 %207, 1
  %210 = extractvalue %dx.types.CBufRet.f32 %207, 2
  %211 = fmul fast float %196, %133
  %212 = call float @dx.op.tertiary.f32(i32 46, float %134, float %200, float %211)  ; FMad(a,b,c)
  %213 = call float @dx.op.tertiary.f32(i32 46, float %135, float %204, float %212)  ; FMad(a,b,c)
  %214 = fadd fast float %213, %208
  %215 = fmul fast float %197, %133
  %216 = call float @dx.op.tertiary.f32(i32 46, float %134, float %201, float %215)  ; FMad(a,b,c)
  %217 = call float @dx.op.tertiary.f32(i32 46, float %135, float %205, float %216)  ; FMad(a,b,c)
  %218 = fadd fast float %217, %209
  %219 = fmul fast float %198, %133
  %220 = call float @dx.op.tertiary.f32(i32 46, float %134, float %202, float %219)  ; FMad(a,b,c)
  %221 = call float @dx.op.tertiary.f32(i32 46, float %135, float %206, float %220)  ; FMad(a,b,c)
  %222 = fadd fast float %221, %210
  %223 = fmul fast float %196, %180
  %224 = call float @dx.op.tertiary.f32(i32 46, float %181, float %200, float %223)  ; FMad(a,b,c)
  %225 = call float @dx.op.tertiary.f32(i32 46, float %182, float %204, float %224)  ; FMad(a,b,c)
  %226 = fmul fast float %197, %180
  %227 = call float @dx.op.tertiary.f32(i32 46, float %181, float %201, float %226)  ; FMad(a,b,c)
  %228 = call float @dx.op.tertiary.f32(i32 46, float %182, float %205, float %227)  ; FMad(a,b,c)
  %229 = fmul fast float %198, %180
  %230 = call float @dx.op.tertiary.f32(i32 46, float %181, float %202, float %229)  ; FMad(a,b,c)
  %231 = call float @dx.op.tertiary.f32(i32 46, float %182, float %206, float %230)  ; FMad(a,b,c)
  %232 = fsub fast float %225, %213
  %233 = fsub fast float %228, %217
  %234 = fsub fast float %231, %221
  %235 = fmul fast float %232, %232
  %236 = fmul fast float %233, %233
  %237 = fadd fast float %236, %235
  %238 = fmul fast float %234, %234
  %239 = fadd fast float %237, %238
  %240 = call float @dx.op.unary.f32(i32 24, float %239)  ; Sqrt(value)
  %241 = fdiv fast float %232, %240
  %242 = fdiv fast float %233, %240
  %243 = fdiv fast float %234, %240
  %244 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %245 = extractvalue %dx.types.CBufRet.f32 %244, 0
  %246 = extractvalue %dx.types.CBufRet.f32 %244, 1
  %247 = extractvalue %dx.types.CBufRet.f32 %244, 2
  %248 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %249 = extractvalue %dx.types.CBufRet.f32 %248, 0
  %250 = extractvalue %dx.types.CBufRet.f32 %248, 1
  %251 = extractvalue %dx.types.CBufRet.f32 %248, 2
  %252 = fsub fast float %245, %249
  %253 = fsub fast float %246, %250
  %254 = fsub fast float %247, %251
  %255 = fadd fast float %249, %245
  %256 = fadd fast float %250, %246
  %257 = fadd fast float %251, %247
  %258 = fdiv fast float 1.000000e+00, %241
  %259 = fdiv fast float 1.000000e+00, %242
  %260 = fdiv fast float 1.000000e+00, %243
  %261 = fsub fast float %252, %214
  %262 = fsub fast float %253, %218
  %263 = fsub fast float %254, %222
  %264 = fmul fast float %261, %258
  %265 = fmul fast float %259, %262
  %266 = fmul fast float %260, %263
  %267 = fsub fast float %255, %214
  %268 = fsub fast float %256, %218
  %269 = fsub fast float %257, %222
  %270 = fmul fast float %267, %258
  %271 = fmul fast float %268, %259
  %272 = fmul fast float %269, %260
  %273 = call float @dx.op.binary.f32(i32 36, float %264, float %270)  ; FMin(a,b)
  %274 = call float @dx.op.binary.f32(i32 36, float %265, float %271)  ; FMin(a,b)
  %275 = call float @dx.op.binary.f32(i32 36, float %266, float %272)  ; FMin(a,b)
  %276 = call float @dx.op.binary.f32(i32 35, float %264, float %270)  ; FMax(a,b)
  %277 = call float @dx.op.binary.f32(i32 35, float %265, float %271)  ; FMax(a,b)
  %278 = call float @dx.op.binary.f32(i32 35, float %266, float %272)  ; FMax(a,b)
  %279 = call float @dx.op.binary.f32(i32 35, float %274, float %275)  ; FMax(a,b)
  %280 = call float @dx.op.binary.f32(i32 35, float %273, float %279)  ; FMax(a,b)
  %281 = call float @dx.op.binary.f32(i32 36, float %277, float %278)  ; FMin(a,b)
  %282 = call float @dx.op.binary.f32(i32 36, float %276, float %281)  ; FMin(a,b)
  %283 = call float @dx.op.binary.f32(i32 35, float %280, float 0.000000e+00)  ; FMax(a,b)
  %284 = call float @dx.op.binary.f32(i32 36, float %282, float %240)  ; FMin(a,b)
  %285 = fsub fast float %284, %283
  %286 = fcmp fast ugt float %285, 0.000000e+00
  br i1 %286, label %287, label %2009

; <label>:287                                     ; preds = %113
  %288 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %41, i32 %30, i32 12, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %289 = extractvalue %dx.types.ResRet.i32 %288, 0
  %290 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %41, i32 %30, i32 8, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %291 = extractvalue %dx.types.ResRet.i32 %290, 0
  %292 = icmp ult i32 %291, %289
  br i1 %292, label %293, label %390

; <label>:293                                     ; preds = %287
  br label %294

; <label>:294                                     ; preds = %294, %293
  %295 = phi float [ %385, %294 ], [ %284, %293 ]
  %296 = phi float [ %386, %294 ], [ %284, %293 ]
  %297 = phi i32 [ %387, %294 ], [ %291, %293 ]
  %298 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 524, i32 8 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=8>
  %299 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %298, i32 %297, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %300 = extractvalue %dx.types.ResRet.i32 %299, 0
  %301 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %298, i32 %297, i32 4, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %302 = extractvalue %dx.types.ResRet.i32 %301, 0
  %303 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %304 = extractvalue %dx.types.CBufRet.i32 %303, 0
  %305 = extractvalue %dx.types.CBufRet.i32 %303, 1
  %306 = and i32 %302, 31
  %307 = lshr i32 %304, %306
  %308 = lshr i32 %305, %306
  %309 = mul i32 %307, %308
  %310 = urem i32 %300, %309
  %311 = urem i32 %310, %307
  %312 = udiv i32 %310, %307
  %313 = udiv i32 %300, %309
  %314 = extractvalue %dx.types.CBufRet.i32 %303, 2
  %315 = ashr i32 %304, %306
  %316 = sitofp i32 %315 to float
  %317 = ashr i32 %305, %306
  %318 = sitofp i32 %317 to float
  %319 = ashr i32 %314, %306
  %320 = sitofp i32 %319 to float
  %321 = uitofp i32 %311 to float
  %322 = uitofp i32 %312 to float
  %323 = uitofp i32 %313 to float
  %324 = fdiv fast float %321, %316
  %325 = fdiv fast float %322, %318
  %326 = fdiv fast float %323, %320
  %327 = add i32 %311, 1
  %328 = add i32 %312, 1
  %329 = add i32 %313, 1
  %330 = uitofp i32 %327 to float
  %331 = uitofp i32 %328 to float
  %332 = uitofp i32 %329 to float
  %333 = fdiv fast float %330, %316
  %334 = fdiv fast float %331, %318
  %335 = fdiv fast float %332, %320
  %336 = fadd fast float %249, %249
  %337 = fadd fast float %250, %250
  %338 = fadd fast float %251, %251
  %339 = fmul fast float %324, %336
  %340 = fmul fast float %325, %337
  %341 = fmul fast float %326, %338
  %342 = fmul fast float %333, %336
  %343 = fmul fast float %334, %337
  %344 = fmul fast float %335, %338
  %345 = fsub fast float 0xBF1A36E2E0000000, %214
  %346 = fadd fast float %345, %252
  %347 = fadd fast float %346, %339
  %348 = fsub fast float 0xBF1A36E2E0000000, %218
  %349 = fadd fast float %348, %253
  %350 = fadd fast float %349, %340
  %351 = fsub fast float 0xBF1A36E2E0000000, %222
  %352 = fadd fast float %351, %254
  %353 = fadd fast float %352, %341
  %354 = fmul fast float %258, %347
  %355 = fmul fast float %259, %350
  %356 = fmul fast float %260, %353
  %357 = fsub fast float 0x3F1A36E2E0000000, %214
  %358 = fadd fast float %357, %252
  %359 = fadd fast float %358, %342
  %360 = fsub fast float 0x3F1A36E2E0000000, %218
  %361 = fadd fast float %360, %253
  %362 = fadd fast float %361, %343
  %363 = fsub fast float 0x3F1A36E2E0000000, %222
  %364 = fadd fast float %363, %254
  %365 = fadd fast float %364, %344
  %366 = fmul fast float %359, %258
  %367 = fmul fast float %362, %259
  %368 = fmul fast float %365, %260
  %369 = call float @dx.op.binary.f32(i32 36, float %354, float %366)  ; FMin(a,b)
  %370 = call float @dx.op.binary.f32(i32 36, float %355, float %367)  ; FMin(a,b)
  %371 = call float @dx.op.binary.f32(i32 36, float %356, float %368)  ; FMin(a,b)
  %372 = call float @dx.op.binary.f32(i32 35, float %354, float %366)  ; FMax(a,b)
  %373 = call float @dx.op.binary.f32(i32 35, float %355, float %367)  ; FMax(a,b)
  %374 = call float @dx.op.binary.f32(i32 35, float %356, float %368)  ; FMax(a,b)
  %375 = call float @dx.op.binary.f32(i32 35, float %370, float %371)  ; FMax(a,b)
  %376 = call float @dx.op.binary.f32(i32 35, float %369, float %375)  ; FMax(a,b)
  %377 = call float @dx.op.binary.f32(i32 36, float %373, float %374)  ; FMin(a,b)
  %378 = call float @dx.op.binary.f32(i32 36, float %372, float %377)  ; FMin(a,b)
  %379 = call float @dx.op.binary.f32(i32 35, float %376, float 0.000000e+00)  ; FMax(a,b)
  %380 = call float @dx.op.binary.f32(i32 36, float %378, float %284)  ; FMin(a,b)
  %381 = fsub fast float %380, %379
  %382 = fcmp fast ogt float %381, 0.000000e+00
  %383 = fcmp fast olt float %379, %295
  %384 = and i1 %383, %382
  %385 = select i1 %384, float %379, float %295
  %386 = select i1 %384, float %380, float %296
  %387 = add nuw i32 %297, 1
  %388 = icmp eq i32 %387, %289
  br i1 %388, label %389, label %294

; <label>:389                                     ; preds = %294
  br label %390

; <label>:390                                     ; preds = %389, %287
  %391 = phi float [ %284, %287 ], [ %385, %389 ]
  %392 = phi float [ %284, %287 ], [ %386, %389 ]
  %393 = fsub fast float %392, %391
  %394 = fcmp fast ogt float %393, 0.000000e+00
  br i1 %394, label %395, label %1975

; <label>:395                                     ; preds = %390
  br label %396

; <label>:396                                     ; preds = %1969, %395
  %397 = phi float [ %1860, %1969 ], [ 0.000000e+00, %395 ]
  %398 = phi float [ %1861, %1969 ], [ 0.000000e+00, %395 ]
  %399 = phi float [ %1862, %1969 ], [ 0.000000e+00, %395 ]
  %400 = phi float [ %1863, %1969 ], [ 1.000000e+00, %395 ]
  %401 = phi float [ %1864, %1969 ], [ 1.000000e+00, %395 ]
  %402 = phi float [ %1865, %1969 ], [ 1.000000e+00, %395 ]
  %403 = phi float [ %1970, %1969 ], [ %391, %395 ]
  %404 = phi float [ %1971, %1969 ], [ %392, %395 ]
  %405 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %406 = extractvalue %dx.types.CBufRet.i32 %405, 1
  %407 = extractvalue %dx.types.CBufRet.i32 %405, 0
  %408 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %409 = extractvalue %dx.types.CBufRet.i32 %408, 2
  %410 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %411 = extractvalue %dx.types.CBufRet.f32 %410, 1
  %412 = fmul fast float %404, %241
  %413 = fmul fast float %404, %242
  %414 = fmul fast float %404, %243
  %415 = fadd fast float %412, %214
  %416 = fadd fast float %413, %218
  %417 = fadd fast float %414, %222
  %418 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %419 = extractvalue %dx.types.CBufRet.f32 %418, 0
  %420 = extractvalue %dx.types.CBufRet.f32 %418, 1
  %421 = extractvalue %dx.types.CBufRet.f32 %418, 2
  %422 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %423 = extractvalue %dx.types.CBufRet.f32 %422, 0
  %424 = extractvalue %dx.types.CBufRet.f32 %422, 1
  %425 = extractvalue %dx.types.CBufRet.f32 %422, 2
  %426 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %427 = extractvalue %dx.types.CBufRet.f32 %426, 0
  %428 = extractvalue %dx.types.CBufRet.f32 %426, 1
  %429 = extractvalue %dx.types.CBufRet.f32 %426, 2
  %430 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %431 = extractvalue %dx.types.CBufRet.f32 %430, 0
  %432 = extractvalue %dx.types.CBufRet.f32 %430, 1
  %433 = extractvalue %dx.types.CBufRet.f32 %430, 2
  %434 = fmul fast float %419, %415
  %435 = call float @dx.op.tertiary.f32(i32 46, float %416, float %423, float %434)  ; FMad(a,b,c)
  %436 = call float @dx.op.tertiary.f32(i32 46, float %417, float %427, float %435)  ; FMad(a,b,c)
  %437 = fmul fast float %420, %415
  %438 = call float @dx.op.tertiary.f32(i32 46, float %416, float %424, float %437)  ; FMad(a,b,c)
  %439 = call float @dx.op.tertiary.f32(i32 46, float %417, float %428, float %438)  ; FMad(a,b,c)
  %440 = fmul fast float %421, %415
  %441 = call float @dx.op.tertiary.f32(i32 46, float %416, float %425, float %440)  ; FMad(a,b,c)
  %442 = call float @dx.op.tertiary.f32(i32 46, float %417, float %429, float %441)  ; FMad(a,b,c)
  %443 = fsub fast float %431, %133
  %444 = fadd fast float %443, %436
  %445 = fsub fast float %432, %134
  %446 = fadd fast float %445, %439
  %447 = fsub fast float %433, %135
  %448 = fadd fast float %447, %442
  %449 = fmul fast float %444, %444
  %450 = fmul fast float %446, %446
  %451 = fadd fast float %450, %449
  %452 = fmul fast float %448, %448
  %453 = fadd fast float %451, %452
  %454 = call float @dx.op.unary.f32(i32 24, float %453)  ; Sqrt(value)
  %455 = fdiv fast float %454, %404
  %456 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %457 = extractvalue %dx.types.CBufRet.f32 %456, 0
  %458 = extractvalue %dx.types.CBufRet.i32 %405, 2
  %459 = icmp ne i32 %458, 0
  %460 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %461 = extractvalue %dx.types.CBufRet.f32 %460, 0
  %462 = extractvalue %dx.types.CBufRet.f32 %460, 1
  %463 = extractvalue %dx.types.CBufRet.f32 %460, 2
  %464 = extractvalue %dx.types.CBufRet.f32 %460, 3
  %465 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %466 = extractvalue %dx.types.CBufRet.f32 %465, 0
  %467 = extractvalue %dx.types.CBufRet.f32 %465, 1
  %468 = extractvalue %dx.types.CBufRet.f32 %465, 2
  %469 = extractvalue %dx.types.CBufRet.f32 %465, 3
  %470 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %471 = extractvalue %dx.types.CBufRet.f32 %470, 0
  %472 = extractvalue %dx.types.CBufRet.f32 %470, 1
  %473 = extractvalue %dx.types.CBufRet.f32 %470, 2
  %474 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %475 = extractvalue %dx.types.CBufRet.f32 %474, 0
  %476 = extractvalue %dx.types.CBufRet.f32 %474, 1
  %477 = extractvalue %dx.types.CBufRet.f32 %474, 2
  %478 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %479 = extractvalue %dx.types.CBufRet.f32 %478, 0
  %480 = extractvalue %dx.types.CBufRet.f32 %478, 1
  %481 = extractvalue %dx.types.CBufRet.f32 %474, 3
  %482 = fsub fast float -0.000000e+00, %481
  %483 = extractvalue %dx.types.CBufRet.f32 %478, 3
  %484 = select i1 %459, float %483, float 0.000000e+00
  %485 = fsub fast float -0.000000e+00, %484
  %486 = fcmp fast oeq float %469, 0.000000e+00
  %487 = and i1 %459, %486
  %488 = icmp eq i32 %458, 2
  %489 = icmp eq i32 %458, 3
  %490 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %491 = extractvalue %dx.types.CBufRet.f32 %490, 0
  %492 = extractvalue %dx.types.CBufRet.f32 %490, 1
  %493 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %494 = extractvalue %dx.types.CBufRet.f32 %493, 0
  %495 = extractvalue %dx.types.CBufRet.f32 %493, 1
  %496 = extractvalue %dx.types.CBufRet.f32 %493, 2
  %497 = fmul fast float %494, 2.000000e+00
  %498 = fmul fast float %495, 2.000000e+00
  %499 = fmul fast float %496, 2.000000e+00
  %500 = fmul fast float %497, %497
  %501 = fmul fast float %498, %498
  %502 = fadd fast float %500, %501
  %503 = fmul fast float %499, %499
  %504 = fadd fast float %502, %503
  %505 = call float @dx.op.unary.f32(i32 24, float %504)  ; Sqrt(value)
  %506 = fdiv fast float %505, %411
  %507 = call float @dx.op.binary.f32(i32 35, float %506, float 1.000000e+00)  ; FMax(a,b)
  %508 = fptoui float %507 to i32
  %509 = icmp ugt i32 %508, %409
  %510 = uitofp i32 %409 to float
  %511 = fdiv fast float %505, %510
  %512 = select i1 %509, float %511, float %411
  %513 = fsub fast float %404, %403
  %514 = call float @dx.op.unary.f32(i32 6, float %513)  ; FAbs(value)
  %515 = fdiv fast float %514, %512
  %516 = call float @dx.op.unary.f32(i32 28, float %515)  ; Round_pi(value)
  %517 = call float @dx.op.binary.f32(i32 35, float %516, float 1.000000e+00)  ; FMax(a,b)
  %518 = fptoui float %517 to i32
  %519 = icmp eq i32 %518, 0
  br i1 %519, label %1859, label %520

; <label>:520                                     ; preds = %396
  br label %521

; <label>:521                                     ; preds = %1852, %520
  %522 = phi i32 [ %1853, %1852 ], [ 0, %520 ]
  %523 = phi float [ %1834, %1852 ], [ %397, %520 ]
  %524 = phi float [ %1835, %1852 ], [ %398, %520 ]
  %525 = phi float [ %1836, %1852 ], [ %399, %520 ]
  %526 = phi float [ %1844, %1852 ], [ %400, %520 ]
  %527 = phi float [ %1845, %1852 ], [ %401, %520 ]
  %528 = phi float [ %1846, %1852 ], [ %402, %520 ]
  %529 = uitofp i32 %522 to float
  %530 = fadd fast float %529, %114
  %531 = fmul fast float %530, %512
  %532 = fadd fast float %531, %403
  %533 = fmul fast float %532, %241
  %534 = fmul fast float %532, %242
  %535 = fmul fast float %532, %243
  %536 = fadd fast float %533, %214
  %537 = fadd fast float %534, %218
  %538 = fadd fast float %535, %222
  %539 = fmul fast float %455, %192
  %540 = fmul fast float %539, %532
  %541 = fmul fast float %455, %193
  %542 = fmul fast float %541, %532
  %543 = fmul fast float %455, %194
  %544 = fmul fast float %543, %532
  %545 = fadd fast float %133, %540
  %546 = fadd fast float %134, %542
  %547 = fadd fast float %135, %544
  %548 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %549 = extractvalue %dx.types.CBufRet.f32 %548, 0
  %550 = extractvalue %dx.types.CBufRet.f32 %548, 1
  %551 = extractvalue %dx.types.CBufRet.f32 %548, 2
  %552 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %553 = extractvalue %dx.types.CBufRet.f32 %552, 0
  %554 = extractvalue %dx.types.CBufRet.f32 %552, 1
  %555 = extractvalue %dx.types.CBufRet.f32 %552, 2
  %556 = fsub fast float %549, %553
  %557 = fsub fast float %550, %554
  %558 = fsub fast float %551, %555
  %559 = fsub fast float %536, %556
  %560 = fsub fast float %537, %557
  %561 = fsub fast float %538, %558
  %562 = fadd fast float %553, %553
  %563 = fadd fast float %554, %554
  %564 = fadd fast float %555, %555
  %565 = fdiv fast float %559, %562
  %566 = fdiv fast float %560, %563
  %567 = fdiv fast float %561, %564
  %568 = icmp eq i32 %407, 0
  br i1 %568, label %585, label %569

; <label>:569                                     ; preds = %521
  %570 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %571 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %572 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %570, %dx.types.Handle %571, float %565, float %566, float %567, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %573 = extractvalue %dx.types.ResRet.f32 %572, 0
  %574 = extractvalue %dx.types.ResRet.f32 %572, 1
  %575 = extractvalue %dx.types.ResRet.f32 %572, 2
  %576 = fmul fast float %526, %512
  %577 = fmul fast float %576, %573
  %578 = fmul fast float %527, %512
  %579 = fmul fast float %578, %574
  %580 = fmul fast float %528, %512
  %581 = fmul fast float %580, %575
  %582 = fadd fast float %577, %523
  %583 = fadd fast float %579, %524
  %584 = fadd fast float %581, %525
  br label %585

; <label>:585                                     ; preds = %569, %521
  %586 = phi float [ %582, %569 ], [ %523, %521 ]
  %587 = phi float [ %583, %569 ], [ %524, %521 ]
  %588 = phi float [ %584, %569 ], [ %525, %521 ]
  %589 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %590 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %591 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %589, %dx.types.Handle %590, float %565, float %566, float %567, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %592 = extractvalue %dx.types.ResRet.f32 %591, 0
  %593 = extractvalue %dx.types.ResRet.f32 %591, 1
  %594 = extractvalue %dx.types.ResRet.f32 %591, 2
  %595 = icmp eq i32 %406, 0
  br i1 %595, label %1833, label %596

; <label>:596                                     ; preds = %585
  %597 = fcmp fast ogt float %592, 0.000000e+00
  %598 = fcmp fast ogt float %593, 0.000000e+00
  %599 = fcmp fast ogt float %594, 0.000000e+00
  %600 = or i1 %597, %598
  %601 = or i1 %599, %600
  br i1 %601, label %602, label %1833

; <label>:602                                     ; preds = %596
  %603 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %604 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %603, %dx.types.Handle %590, float %565, float %566, float %567, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %605 = extractvalue %dx.types.ResRet.f32 %604, 0
  %606 = extractvalue %dx.types.ResRet.f32 %604, 1
  %607 = extractvalue %dx.types.ResRet.f32 %604, 2
  %608 = fcmp fast ogt float %605, 0.000000e+00
  %609 = fcmp fast ogt float %606, 0.000000e+00
  %610 = fcmp fast ogt float %607, 0.000000e+00
  %611 = or i1 %608, %609
  %612 = or i1 %610, %611
  br i1 %612, label %613, label %1833

; <label>:613                                     ; preds = %602
  %614 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %615 = extractvalue %dx.types.CBufRet.f32 %614, 0
  %616 = extractvalue %dx.types.CBufRet.f32 %614, 1
  %617 = extractvalue %dx.types.CBufRet.f32 %614, 2
  %618 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %619 = extractvalue %dx.types.CBufRet.f32 %618, 0
  %620 = extractvalue %dx.types.CBufRet.f32 %618, 1
  %621 = extractvalue %dx.types.CBufRet.f32 %618, 2
  %622 = fadd fast float %545, %619
  %623 = fadd fast float %546, %620
  %624 = fadd fast float %547, %621
  %625 = fmul fast float %615, 2.097152e+06
  %626 = fmul fast float %616, 2.097152e+06
  %627 = fmul fast float %617, 2.097152e+06
  %628 = fsub fast float %622, %625
  %629 = fsub fast float %623, %626
  %630 = fsub fast float %624, %627
  %631 = icmp eq i32 %458, 0
  br i1 %631, label %939, label %632

; <label>:632                                     ; preds = %613
  %633 = fsub fast float %461, %628
  %634 = fsub fast float %462, %629
  %635 = fsub fast float %463, %630
  %636 = call float @dx.op.dot3.f32(i32 55, float %633, float %634, float %635, float %633, float %634, float %635)  ; Dot3(ax,ay,az,bx,by,bz)
  %637 = call float @dx.op.unary.f32(i32 25, float %636)  ; Rsqrt(value)
  %638 = fmul fast float %637, %633
  %639 = fmul fast float %637, %634
  %640 = fmul fast float %637, %635
  br i1 %487, label %641, label %648

; <label>:641                                     ; preds = %632
  %642 = fmul fast float %464, %464
  %643 = fmul fast float %642, %636
  %644 = fmul fast float %643, %643
  %645 = fsub fast float 1.000000e+00, %644
  %646 = call float @dx.op.unary.f32(i32 7, float %645)  ; Saturate(value)
  %647 = fmul fast float %646, %646
  br label %658

; <label>:648                                     ; preds = %632
  %649 = fmul fast float %633, %464
  %650 = fmul fast float %634, %464
  %651 = fmul fast float %635, %464
  %652 = call float @dx.op.dot3.f32(i32 55, float %649, float %650, float %651, float %649, float %650, float %651)  ; Dot3(ax,ay,az,bx,by,bz)
  %653 = call float @dx.op.unary.f32(i32 7, float %652)  ; Saturate(value)
  %654 = fsub fast float 1.000000e+00, %653
  %655 = call float @dx.op.unary.f32(i32 23, float %654)  ; Log(value)
  %656 = fmul fast float %655, %469
  %657 = call float @dx.op.unary.f32(i32 21, float %656)  ; Exp(value)
  br label %658

; <label>:658                                     ; preds = %648, %641
  %659 = phi float [ %647, %641 ], [ %657, %648 ]
  br i1 %488, label %660, label %667

; <label>:660                                     ; preds = %658
  %661 = call float @dx.op.dot3.f32(i32 55, float %638, float %639, float %640, float %471, float %472, float %473)  ; Dot3(ax,ay,az,bx,by,bz)
  %662 = fsub fast float %661, %479
  %663 = fmul fast float %662, %480
  %664 = call float @dx.op.unary.f32(i32 7, float %663)  ; Saturate(value)
  %665 = fmul fast float %664, %664
  %666 = fmul fast float %665, %659
  br label %667

; <label>:667                                     ; preds = %660, %658
  %668 = phi float [ %666, %660 ], [ %659, %658 ]
  br i1 %489, label %669, label %673

; <label>:669                                     ; preds = %667
  %670 = call float @dx.op.dot3.f32(i32 55, float %471, float %472, float %473, float %638, float %639, float %640)  ; Dot3(ax,ay,az,bx,by,bz)
  %671 = fcmp fast olt float %670, 0.000000e+00
  %672 = select i1 %671, float 0.000000e+00, float %668
  br label %673

; <label>:673                                     ; preds = %669, %667
  %674 = phi float [ %672, %669 ], [ %668, %667 ]
  br i1 %489, label %675, label %910

; <label>:675                                     ; preds = %673
  %676 = fmul fast float %476, %473
  %677 = fmul fast float %477, %472
  %678 = fsub fast float %676, %677
  %679 = fmul fast float %477, %471
  %680 = fmul fast float %475, %473
  %681 = fsub fast float %679, %680
  %682 = fmul fast float %475, %472
  %683 = fmul fast float %476, %471
  %684 = fsub fast float %682, %683
  %685 = fcmp fast ogt float %491, 0x3FA1EB8520000000
  br i1 %685, label %686, label %781

; <label>:686                                     ; preds = %675
  %687 = fmul fast float %633, %678
  %688 = call float @dx.op.tertiary.f32(i32 46, float %681, float %634, float %687)  ; FMad(a,b,c)
  %689 = call float @dx.op.tertiary.f32(i32 46, float %684, float %635, float %688)  ; FMad(a,b,c)
  %690 = fmul fast float %633, %475
  %691 = call float @dx.op.tertiary.f32(i32 46, float %476, float %634, float %690)  ; FMad(a,b,c)
  %692 = call float @dx.op.tertiary.f32(i32 46, float %477, float %635, float %691)  ; FMad(a,b,c)
  %693 = fmul fast float %633, %471
  %694 = call float @dx.op.tertiary.f32(i32 46, float %472, float %634, float %693)  ; FMad(a,b,c)
  %695 = call float @dx.op.tertiary.f32(i32 46, float %473, float %635, float %694)  ; FMad(a,b,c)
  %696 = fmul fast float %491, %491
  %697 = fsub fast float 1.000000e+00, %696
  %698 = call float @dx.op.unary.f32(i32 24, float %697)  ; Sqrt(value)
  %699 = fmul fast float %492, %491
  %700 = call float @dx.op.binary.f32(i32 36, float %695, float %699)  ; FMin(a,b)
  %701 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %699)  ; FMax(a,b)
  %702 = fdiv fast float %700, %701
  %703 = fmul fast float %698, %492
  %704 = fmul fast float %703, %702
  %705 = fcmp fast ogt float %689, 0.000000e+00
  %706 = fcmp fast ogt float %692, 0.000000e+00
  %707 = fcmp fast olt float %689, 0.000000e+00
  %708 = fcmp fast olt float %692, 0.000000e+00
  %709 = zext i1 %705 to i32
  %710 = zext i1 %706 to i32
  %711 = zext i1 %707 to i32
  %712 = zext i1 %708 to i32
  %713 = sub nsw i32 %709, %711
  %714 = sub nsw i32 %710, %712
  %715 = sitofp i32 %713 to float
  %716 = sitofp i32 %714 to float
  %717 = fadd fast float %704, %481
  %718 = fadd fast float %704, %484
  %719 = call float @dx.op.unary.f32(i32 6, float %689)  ; FAbs(value)
  %720 = call float @dx.op.unary.f32(i32 6, float %692)  ; FAbs(value)
  %721 = call float @dx.op.binary.f32(i32 35, float %719, float %717)  ; FMax(a,b)
  %722 = call float @dx.op.binary.f32(i32 35, float %720, float %718)  ; FMax(a,b)
  %723 = fsub fast float %482, %704
  %724 = fadd fast float %723, %721
  %725 = fmul fast float %724, %715
  %726 = fsub fast float %485, %704
  %727 = fadd fast float %726, %722
  %728 = fmul fast float %727, %716
  %729 = fsub fast float %695, %700
  %730 = call float @dx.op.binary.f32(i32 35, float %729, float 0x3F50624DE0000000)  ; FMax(a,b)
  %731 = call float @dx.op.unary.f32(i32 6, float %725)  ; FAbs(value)
  %732 = call float @dx.op.unary.f32(i32 6, float %728)  ; FAbs(value)
  %733 = fdiv fast float %731, %730
  %734 = fdiv fast float %732, %730
  %735 = fmul fast float %733, %700
  %736 = fmul fast float %734, %700
  %737 = fsub fast float %735, %704
  %738 = fsub fast float %736, %704
  %739 = fsub fast float -0.000000e+00, %715
  %740 = fsub fast float -0.000000e+00, %716
  %741 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %739)  ; FMax(a,b)
  %742 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %740)  ; FMax(a,b)
  %743 = fmul fast float %737, %741
  %744 = fmul fast float %738, %742
  %745 = fsub fast float %743, %481
  %746 = fsub fast float %744, %484
  %747 = call float @dx.op.binary.f32(i32 35, float %745, float %482)  ; FMax(a,b)
  %748 = call float @dx.op.binary.f32(i32 35, float %746, float %485)  ; FMax(a,b)
  %749 = call float @dx.op.binary.f32(i32 36, float %747, float %481)  ; FMin(a,b)
  %750 = call float @dx.op.binary.f32(i32 36, float %748, float %484)  ; FMin(a,b)
  %751 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %715)  ; FMax(a,b)
  %752 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %716)  ; FMax(a,b)
  %753 = fmul fast float %751, %737
  %754 = fmul fast float %752, %738
  %755 = fsub fast float %481, %753
  %756 = fsub fast float %484, %754
  %757 = call float @dx.op.binary.f32(i32 35, float %755, float %482)  ; FMax(a,b)
  %758 = call float @dx.op.binary.f32(i32 35, float %756, float %485)  ; FMax(a,b)
  %759 = call float @dx.op.binary.f32(i32 36, float %757, float %481)  ; FMin(a,b)
  %760 = call float @dx.op.binary.f32(i32 36, float %758, float %484)  ; FMin(a,b)
  %761 = fadd fast float %759, %749
  %762 = fadd fast float %760, %750
  %763 = fmul fast float %761, 5.000000e-01
  %764 = fmul fast float %762, 5.000000e-01
  %765 = fsub fast float %759, %749
  %766 = fsub fast float %760, %750
  %767 = fmul fast float %765, 5.000000e-01
  %768 = fmul fast float %766, 5.000000e-01
  %769 = fmul fast float %763, %678
  %770 = fmul fast float %763, %681
  %771 = fmul fast float %763, %684
  %772 = fsub fast float %633, %769
  %773 = fsub fast float %634, %770
  %774 = fsub fast float %635, %771
  %775 = fmul fast float %764, %475
  %776 = fmul fast float %764, %476
  %777 = fmul fast float %764, %477
  %778 = fsub fast float %772, %775
  %779 = fsub fast float %773, %776
  %780 = fsub fast float %774, %777
  br label %781

; <label>:781                                     ; preds = %686, %675
  %782 = phi float [ %778, %686 ], [ %633, %675 ]
  %783 = phi float [ %779, %686 ], [ %634, %675 ]
  %784 = phi float [ %780, %686 ], [ %635, %675 ]
  %785 = phi float [ %767, %686 ], [ %481, %675 ]
  %786 = phi float [ %768, %686 ], [ %484, %675 ]
  %787 = fcmp fast oeq float %785, 0.000000e+00
  %788 = fcmp fast oeq float %786, 0.000000e+00
  %789 = or i1 %787, %788
  br i1 %789, label %907, label %790

; <label>:790                                     ; preds = %781
  %791 = call float @dx.op.dot3.f32(i32 55, float %678, float %681, float %684, float %782, float %783, float %784)  ; Dot3(ax,ay,az,bx,by,bz)
  %792 = call float @dx.op.dot3.f32(i32 55, float %475, float %476, float %477, float %782, float %783, float %784)  ; Dot3(ax,ay,az,bx,by,bz)
  %793 = call float @dx.op.dot3.f32(i32 55, float %471, float %472, float %473, float %782, float %783, float %784)  ; Dot3(ax,ay,az,bx,by,bz)
  %794 = fsub fast float %791, %785
  %795 = fadd fast float %791, %785
  %796 = fsub fast float %792, %786
  %797 = fadd fast float %792, %786
  %798 = fmul fast float %793, %793
  %799 = call float @dx.op.dot2.f32(i32 54, float %794, float %796, float %794, float %796)  ; Dot2(ax,ay,bx,by)
  %800 = fadd fast float %799, %798
  %801 = call float @dx.op.unary.f32(i32 25, float %800)  ; Rsqrt(value)
  %802 = fmul fast float %801, %794
  %803 = fmul fast float %801, %796
  %804 = fmul fast float %801, %793
  %805 = call float @dx.op.dot2.f32(i32 54, float %795, float %796, float %795, float %796)  ; Dot2(ax,ay,bx,by)
  %806 = fadd fast float %805, %798
  %807 = call float @dx.op.unary.f32(i32 25, float %806)  ; Rsqrt(value)
  %808 = fmul fast float %807, %795
  %809 = fmul fast float %807, %796
  %810 = fmul fast float %807, %793
  %811 = call float @dx.op.dot2.f32(i32 54, float %795, float %797, float %795, float %797)  ; Dot2(ax,ay,bx,by)
  %812 = fadd fast float %811, %798
  %813 = call float @dx.op.unary.f32(i32 25, float %812)  ; Rsqrt(value)
  %814 = fmul fast float %813, %795
  %815 = fmul fast float %813, %797
  %816 = fmul fast float %813, %793
  %817 = call float @dx.op.dot2.f32(i32 54, float %794, float %797, float %794, float %797)  ; Dot2(ax,ay,bx,by)
  %818 = fadd fast float %817, %798
  %819 = call float @dx.op.unary.f32(i32 25, float %818)  ; Rsqrt(value)
  %820 = fmul fast float %819, %794
  %821 = fmul fast float %819, %797
  %822 = fmul fast float %819, %793
  %823 = call float @dx.op.dot3.f32(i32 55, float %802, float %803, float %804, float %808, float %809, float %810)  ; Dot3(ax,ay,az,bx,by,bz)
  %824 = call float @dx.op.dot3.f32(i32 55, float %808, float %809, float %810, float %814, float %815, float %816)  ; Dot3(ax,ay,az,bx,by,bz)
  %825 = call float @dx.op.dot3.f32(i32 55, float %814, float %815, float %816, float %820, float %821, float %822)  ; Dot3(ax,ay,az,bx,by,bz)
  %826 = call float @dx.op.dot3.f32(i32 55, float %820, float %821, float %822, float %802, float %803, float %804)  ; Dot3(ax,ay,az,bx,by,bz)
  %827 = fmul fast float %823, 0x3FC6666660000000
  %828 = fsub fast float 0x3FF921FF20000000, %827
  %829 = fadd fast float %823, 1.000000e+00
  %830 = call float @dx.op.unary.f32(i32 25, float %829)  ; Rsqrt(value)
  %831 = fmul fast float %824, 0x3FC6666660000000
  %832 = fsub fast float 0x3FF921FF20000000, %831
  %833 = fadd fast float %824, 1.000000e+00
  %834 = call float @dx.op.unary.f32(i32 25, float %833)  ; Rsqrt(value)
  %835 = fmul fast float %834, %832
  %836 = fmul fast float %825, 0x3FC6666660000000
  %837 = fsub fast float 0x3FF921FF20000000, %836
  %838 = fadd fast float %825, 1.000000e+00
  %839 = call float @dx.op.unary.f32(i32 25, float %838)  ; Rsqrt(value)
  %840 = fmul fast float %826, 0x3FC6666660000000
  %841 = fsub fast float 0x3FF921FF20000000, %840
  %842 = fadd fast float %826, 1.000000e+00
  %843 = call float @dx.op.unary.f32(i32 25, float %842)  ; Rsqrt(value)
  %844 = fmul fast float %843, %841
  %845 = fmul fast float %828, %830
  %846 = fsub fast float -0.000000e+00, %845
  %847 = fmul fast float %802, %846
  %848 = fmul fast float %803, %846
  %849 = fmul fast float %804, %846
  %850 = fmul fast float %835, %814
  %851 = fmul fast float %835, %815
  %852 = fmul fast float %835, %816
  %853 = fadd fast float %850, %847
  %854 = fadd fast float %851, %848
  %855 = fadd fast float %852, %849
  %856 = fmul fast float %855, %809
  %857 = fmul fast float %854, %810
  %858 = fsub fast float %856, %857
  %859 = fmul fast float %853, %810
  %860 = fmul fast float %855, %808
  %861 = fsub fast float %859, %860
  %862 = fmul fast float %854, %808
  %863 = fmul fast float %853, %809
  %864 = fsub fast float %862, %863
  %865 = fmul fast float %844, %802
  %866 = fmul fast float %844, %803
  %867 = fmul fast float %844, %804
  %868 = fmul fast float %837, %839
  %869 = fsub fast float -0.000000e+00, %868
  %870 = fmul fast float %814, %869
  %871 = fmul fast float %815, %869
  %872 = fmul fast float %816, %869
  %873 = fadd fast float %865, %870
  %874 = fadd fast float %866, %871
  %875 = fadd fast float %867, %872
  %876 = fmul fast float %875, %821
  %877 = fmul fast float %874, %822
  %878 = fsub fast float %876, %877
  %879 = fmul fast float %873, %822
  %880 = fmul fast float %875, %820
  %881 = fsub fast float %879, %880
  %882 = fmul fast float %874, %820
  %883 = fmul fast float %873, %821
  %884 = fsub fast float %882, %883
  %885 = fadd fast float %878, %858
  %886 = fadd fast float %881, %861
  %887 = fadd fast float %884, %864
  %888 = fmul fast float %885, %678
  %889 = fmul fast float %885, %681
  %890 = fmul fast float %885, %684
  %891 = fmul fast float %886, %475
  %892 = fmul fast float %886, %476
  %893 = fmul fast float %886, %477
  %894 = fadd fast float %888, %891
  %895 = fadd fast float %889, %892
  %896 = fadd fast float %890, %893
  %897 = fmul fast float %887, %471
  %898 = fmul fast float %887, %472
  %899 = fmul fast float %887, %473
  %900 = fadd fast float %894, %897
  %901 = fadd fast float %895, %898
  %902 = fadd fast float %896, %899
  %903 = call float @dx.op.dot3.f32(i32 55, float %900, float %901, float %902, float %900, float %901, float %902)  ; Dot3(ax,ay,az,bx,by,bz)
  %904 = call float @dx.op.unary.f32(i32 25, float %903)  ; Rsqrt(value)
  %905 = fmul fast float %903, 5.000000e-01
  %906 = fmul fast float %905, %904
  br label %907

; <label>:907                                     ; preds = %790, %781
  %908 = phi float [ %906, %790 ], [ 0.000000e+00, %781 ]
  %909 = fmul fast float %908, %674
  br label %939

; <label>:910                                     ; preds = %673
  %911 = fmul fast float %484, 5.000000e-01
  %912 = fmul fast float %911, %475
  %913 = fmul fast float %911, %476
  %914 = fmul fast float %911, %477
  %915 = fsub fast float %633, %912
  %916 = fsub fast float %634, %913
  %917 = fsub fast float %635, %914
  %918 = fadd fast float %633, %912
  %919 = fadd fast float %634, %913
  %920 = fadd fast float %635, %914
  %921 = fcmp fast ogt float %484, 0.000000e+00
  %922 = call float @dx.op.dot3.f32(i32 55, float %915, float %916, float %917, float %915, float %916, float %917)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %921, label %923, label %933, !dx.controlflow.hints !43

; <label>:923                                     ; preds = %910
  %924 = call float @dx.op.dot3.f32(i32 55, float %918, float %919, float %920, float %918, float %919, float %920)  ; Dot3(ax,ay,az,bx,by,bz)
  %925 = call float @dx.op.unary.f32(i32 25, float %922)  ; Rsqrt(value)
  %926 = call float @dx.op.unary.f32(i32 25, float %924)  ; Rsqrt(value)
  %927 = fmul fast float %926, %925
  %928 = call float @dx.op.dot3.f32(i32 55, float %915, float %916, float %917, float %918, float %919, float %920)  ; Dot3(ax,ay,az,bx,by,bz)
  %929 = fmul fast float %927, 5.000000e-01
  %930 = fmul fast float %929, %928
  %931 = fadd fast float %930, 5.000000e-01
  %932 = fdiv fast float %927, %931
  br label %935

; <label>:933                                     ; preds = %910
  %934 = fdiv fast float 1.000000e+00, %922
  br label %935

; <label>:935                                     ; preds = %933, %923
  %936 = phi float [ %932, %923 ], [ %934, %933 ]
  %937 = select i1 %487, float %936, float 1.000000e+00
  %938 = fmul fast float %937, %674
  br label %939

; <label>:939                                     ; preds = %935, %907, %613
  %940 = phi float [ %909, %907 ], [ %938, %935 ], [ 1.000000e+00, %613 ]
  br i1 %631, label %941, label %1034

; <label>:941                                     ; preds = %939
  %942 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 66)  ; CBufferLoadLegacy(handle,regIndex)
  %943 = extractvalue %dx.types.CBufRet.f32 %942, 0
  %944 = extractvalue %dx.types.CBufRet.f32 %942, 1
  %945 = extractvalue %dx.types.CBufRet.f32 %942, 2
  %946 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %947 = extractvalue %dx.types.CBufRet.f32 %946, 0
  %948 = extractvalue %dx.types.CBufRet.f32 %946, 1
  %949 = extractvalue %dx.types.CBufRet.f32 %946, 2
  %950 = fsub fast float %628, %947
  %951 = fsub fast float %629, %948
  %952 = fsub fast float %630, %949
  %953 = call float @dx.op.dot3.f32(i32 55, float %950, float %951, float %952, float %943, float %944, float %945)  ; Dot3(ax,ay,az,bx,by,bz)
  %954 = icmp eq i32 %33, 0
  br i1 %954, label %1347, label %955

; <label>:955                                     ; preds = %941
  %956 = fcmp fast oge float %953, %35
  %957 = fcmp fast oge float %953, %36
  %958 = fcmp fast oge float %953, %37
  %959 = fcmp fast oge float %953, %38
  %960 = zext i1 %956 to i32
  %961 = zext i1 %957 to i32
  %962 = zext i1 %958 to i32
  %963 = zext i1 %959 to i32
  %964 = add nuw nsw i32 %960, %961
  %965 = add nuw nsw i32 %964, %962
  %966 = add nuw nsw i32 %965, %963
  %967 = icmp ult i32 %966, %33
  br i1 %967, label %968, label %1347

; <label>:968                                     ; preds = %955
  %969 = shl nuw nsw i32 %966, 2
  %970 = add nuw nsw i32 %969, 9
  %971 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 %970)  ; CBufferLoadLegacy(handle,regIndex)
  %972 = extractvalue %dx.types.CBufRet.f32 %971, 0
  %973 = extractvalue %dx.types.CBufRet.f32 %971, 1
  %974 = extractvalue %dx.types.CBufRet.f32 %971, 3
  %975 = add nuw nsw i32 %969, 10
  %976 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 %975)  ; CBufferLoadLegacy(handle,regIndex)
  %977 = extractvalue %dx.types.CBufRet.f32 %976, 0
  %978 = extractvalue %dx.types.CBufRet.f32 %976, 1
  %979 = extractvalue %dx.types.CBufRet.f32 %976, 3
  %980 = add nuw nsw i32 %969, 11
  %981 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 %980)  ; CBufferLoadLegacy(handle,regIndex)
  %982 = extractvalue %dx.types.CBufRet.f32 %981, 0
  %983 = extractvalue %dx.types.CBufRet.f32 %981, 1
  %984 = extractvalue %dx.types.CBufRet.f32 %981, 3
  %985 = add nuw nsw i32 %969, 12
  %986 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 %985)  ; CBufferLoadLegacy(handle,regIndex)
  %987 = extractvalue %dx.types.CBufRet.f32 %986, 0
  %988 = extractvalue %dx.types.CBufRet.f32 %986, 1
  %989 = extractvalue %dx.types.CBufRet.f32 %986, 3
  %990 = fmul fast float %972, %628
  %991 = call float @dx.op.tertiary.f32(i32 46, float %629, float %977, float %990)  ; FMad(a,b,c)
  %992 = call float @dx.op.tertiary.f32(i32 46, float %630, float %982, float %991)  ; FMad(a,b,c)
  %993 = fadd fast float %992, %987
  %994 = fmul fast float %973, %628
  %995 = call float @dx.op.tertiary.f32(i32 46, float %629, float %978, float %994)  ; FMad(a,b,c)
  %996 = call float @dx.op.tertiary.f32(i32 46, float %630, float %983, float %995)  ; FMad(a,b,c)
  %997 = fadd fast float %996, %988
  %998 = fmul fast float %974, %628
  %999 = call float @dx.op.tertiary.f32(i32 46, float %629, float %979, float %998)  ; FMad(a,b,c)
  %1000 = call float @dx.op.tertiary.f32(i32 46, float %630, float %984, float %999)  ; FMad(a,b,c)
  %1001 = fadd fast float %1000, %989
  %1002 = fdiv fast float %993, %1001
  %1003 = fdiv fast float %997, %1001
  %1004 = add nuw nsw i32 %966, 25
  %1005 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 %1004)  ; CBufferLoadLegacy(handle,regIndex)
  %1006 = extractvalue %dx.types.CBufRet.f32 %1005, 0
  %1007 = extractvalue %dx.types.CBufRet.f32 %1005, 1
  %1008 = extractvalue %dx.types.CBufRet.f32 %1005, 2
  %1009 = extractvalue %dx.types.CBufRet.f32 %1005, 3
  %1010 = fcmp fast ole float %1002, %1008
  %1011 = fcmp fast ole float %1003, %1009
  %1012 = fcmp fast oge float %1002, %1006
  %1013 = fcmp fast oge float %1003, %1007
  %1014 = and i1 %1012, %1010
  %1015 = and i1 %1013, %1011
  %1016 = and i1 %1014, %1015
  br i1 %1016, label %1017, label %1347

; <label>:1017                                    ; preds = %968
  %1018 = extractvalue %dx.types.CBufRet.f32 %986, 2
  %1019 = extractvalue %dx.types.CBufRet.f32 %981, 2
  %1020 = extractvalue %dx.types.CBufRet.f32 %976, 2
  %1021 = extractvalue %dx.types.CBufRet.f32 %971, 2
  %1022 = fmul fast float %1021, %628
  %1023 = call float @dx.op.tertiary.f32(i32 46, float %629, float %1020, float %1022)  ; FMad(a,b,c)
  %1024 = call float @dx.op.tertiary.f32(i32 46, float %630, float %1019, float %1023)  ; FMad(a,b,c)
  %1025 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1026 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1027 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1025, %dx.types.Handle %1026, float %1002, float %1003, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1028 = extractvalue %dx.types.ResRet.f32 %1027, 0
  %1029 = fsub fast float 1.000000e+00, %1018
  %1030 = fsub fast float %1029, %1024
  %1031 = fsub fast float %1028, %40
  %1032 = fcmp fast olt float %1030, %1031
  %1033 = uitofp i1 %1032 to float
  br label %1347

; <label>:1034                                    ; preds = %939
  %1035 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 47)  ; CBufferLoadLegacy(handle,regIndex)
  %1036 = extractvalue %dx.types.CBufRet.i32 %1035, 0
  %1037 = icmp eq i32 %1036, 0
  br i1 %1037, label %1196, label %1038, !dx.controlflow.hints !44

; <label>:1038                                    ; preds = %1034
  br i1 %488, label %1086, label %1039, !dx.controlflow.hints !45

; <label>:1039                                    ; preds = %1038
  %1040 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1041 = extractvalue %dx.types.CBufRet.f32 %1040, 0
  %1042 = extractvalue %dx.types.CBufRet.f32 %1040, 1
  %1043 = extractvalue %dx.types.CBufRet.f32 %1040, 2
  %1044 = fsub fast float %628, %1041
  %1045 = fsub fast float %629, %1042
  %1046 = fsub fast float %630, %1043
  %1047 = fmul fast float %1044, %1044
  %1048 = fmul fast float %1045, %1045
  %1049 = fadd fast float %1047, %1048
  %1050 = fmul fast float %1046, %1046
  %1051 = fadd fast float %1049, %1050
  %1052 = call float @dx.op.unary.f32(i32 24, float %1051)  ; Sqrt(value)
  %1053 = fdiv fast float %1044, %1052
  %1054 = fdiv fast float %1045, %1052
  %1055 = fdiv fast float %1046, %1052
  %1056 = fdiv fast float %1054, %1053
  %1057 = call float @dx.op.unary.f32(i32 17, float %1056)  ; Atan(value)
  %1058 = fadd fast float %1057, 0x400921FB60000000
  %1059 = fadd fast float %1057, 0xC00921FB60000000
  %1060 = fcmp fast olt float %1053, 0.000000e+00
  %1061 = fcmp fast oeq float %1053, 0.000000e+00
  %1062 = fcmp fast oge float %1054, 0.000000e+00
  %1063 = fcmp fast olt float %1054, 0.000000e+00
  %1064 = and i1 %1060, %1062
  %1065 = select i1 %1064, float %1058, float %1057
  %1066 = and i1 %1060, %1063
  %1067 = select i1 %1066, float %1059, float %1065
  %1068 = and i1 %1061, %1063
  %1069 = and i1 %1061, %1062
  %1070 = fmul fast float %1067, 0x3FC45F3060000000
  %1071 = select i1 %1068, float -2.500000e-01, float %1070
  %1072 = select i1 %1069, float 2.500000e-01, float %1071
  %1073 = fcmp fast ogt float %1072, 0.000000e+00
  %1074 = fadd fast float %1072, 1.000000e+00
  %1075 = select i1 %1073, float %1072, float %1074
  %1076 = call float @dx.op.unary.f32(i32 15, float %1055)  ; Acos(value)
  %1077 = fmul fast float %1076, 0x3FD45F3060000000
  %1078 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1079 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1080 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1078, %dx.types.Handle %1079, float %1075, float %1077, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1081 = extractvalue %dx.types.ResRet.f32 %1080, 0
  %1082 = extractvalue %dx.types.CBufRet.f32 %1040, 3
  %1083 = fmul fast float %1082, %1052
  %1084 = fcmp fast olt float %1083, %1081
  %1085 = uitofp i1 %1084 to float
  br label %1196

; <label>:1086                                    ; preds = %1038
  %1087 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %1088 = extractvalue %dx.types.CBufRet.f32 %1087, 0
  %1089 = extractvalue %dx.types.CBufRet.f32 %1087, 1
  %1090 = extractvalue %dx.types.CBufRet.f32 %1087, 3
  %1091 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %1092 = extractvalue %dx.types.CBufRet.f32 %1091, 0
  %1093 = extractvalue %dx.types.CBufRet.f32 %1091, 1
  %1094 = extractvalue %dx.types.CBufRet.f32 %1091, 3
  %1095 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %1096 = extractvalue %dx.types.CBufRet.f32 %1095, 0
  %1097 = extractvalue %dx.types.CBufRet.f32 %1095, 1
  %1098 = extractvalue %dx.types.CBufRet.f32 %1095, 3
  %1099 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %1100 = extractvalue %dx.types.CBufRet.f32 %1099, 0
  %1101 = extractvalue %dx.types.CBufRet.f32 %1099, 1
  %1102 = extractvalue %dx.types.CBufRet.f32 %1099, 3
  %1103 = fmul fast float %1088, %628
  %1104 = call float @dx.op.tertiary.f32(i32 46, float %629, float %1092, float %1103)  ; FMad(a,b,c)
  %1105 = call float @dx.op.tertiary.f32(i32 46, float %630, float %1096, float %1104)  ; FMad(a,b,c)
  %1106 = fadd fast float %1105, %1100
  %1107 = fmul fast float %1089, %628
  %1108 = call float @dx.op.tertiary.f32(i32 46, float %629, float %1093, float %1107)  ; FMad(a,b,c)
  %1109 = call float @dx.op.tertiary.f32(i32 46, float %630, float %1097, float %1108)  ; FMad(a,b,c)
  %1110 = fadd fast float %1109, %1101
  %1111 = fmul fast float %1090, %628
  %1112 = call float @dx.op.tertiary.f32(i32 46, float %629, float %1094, float %1111)  ; FMad(a,b,c)
  %1113 = call float @dx.op.tertiary.f32(i32 46, float %630, float %1098, float %1112)  ; FMad(a,b,c)
  %1114 = fadd fast float %1113, %1102
  %1115 = fdiv fast float %1106, %1114
  %1116 = fdiv fast float %1110, %1114
  %1117 = fcmp fast ole float %1115, 1.000000e+00
  %1118 = fcmp fast ole float %1116, 1.000000e+00
  %1119 = fcmp fast oge float %1115, 0.000000e+00
  %1120 = fcmp fast oge float %1116, 0.000000e+00
  %1121 = and i1 %1119, %1117
  %1122 = and i1 %1120, %1118
  %1123 = and i1 %1121, %1122
  br i1 %1123, label %1124, label %1196

; <label>:1124                                    ; preds = %1086
  %1125 = extractvalue %dx.types.CBufRet.f32 %1099, 2
  %1126 = extractvalue %dx.types.CBufRet.f32 %1095, 2
  %1127 = extractvalue %dx.types.CBufRet.f32 %1091, 2
  %1128 = extractvalue %dx.types.CBufRet.f32 %1087, 2
  %1129 = fmul fast float %1128, %628
  %1130 = call float @dx.op.tertiary.f32(i32 46, float %629, float %1127, float %1129)  ; FMad(a,b,c)
  %1131 = call float @dx.op.tertiary.f32(i32 46, float %630, float %1126, float %1130)  ; FMad(a,b,c)
  %1132 = fadd fast float %1131, %1125
  %1133 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %1134 = extractvalue %dx.types.CBufRet.f32 %1133, 0
  %1135 = extractvalue %dx.types.CBufRet.f32 %1133, 1
  %1136 = extractvalue %dx.types.CBufRet.f32 %1133, 2
  %1137 = extractvalue %dx.types.CBufRet.f32 %1133, 3
  %1138 = fmul fast float %1134, %1115
  %1139 = fmul fast float %1135, %1116
  %1140 = fadd fast float %1138, -5.000000e-01
  %1141 = fadd fast float %1139, -5.000000e-01
  %1142 = call float @dx.op.unary.f32(i32 22, float %1140)  ; Frc(value)
  %1143 = call float @dx.op.unary.f32(i32 22, float %1141)  ; Frc(value)
  %1144 = call float @dx.op.unary.f32(i32 27, float %1140)  ; Round_ni(value)
  %1145 = call float @dx.op.unary.f32(i32 27, float %1141)  ; Round_ni(value)
  %1146 = fadd fast float %1144, 1.000000e+00
  %1147 = fadd fast float %1145, 1.000000e+00
  %1148 = fmul fast float %1146, %1136
  %1149 = fmul fast float %1147, %1137
  %1150 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1151 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1152 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1150, %dx.types.Handle %1151, float %1148, float %1149, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1153 = extractvalue %dx.types.ResRet.f32 %1152, 0
  %1154 = extractvalue %dx.types.ResRet.f32 %1152, 1
  %1155 = extractvalue %dx.types.ResRet.f32 %1152, 2
  %1156 = extractvalue %dx.types.ResRet.f32 %1152, 3
  %1157 = fmul fast float %1132, 4.000000e+01
  %1158 = fadd fast float %1157, -1.000000e+00
  %1159 = fmul fast float %1153, 4.000000e+01
  %1160 = fmul fast float %1154, 4.000000e+01
  %1161 = fmul fast float %1155, 4.000000e+01
  %1162 = fmul fast float %1156, 4.000000e+01
  %1163 = fsub fast float %1159, %1158
  %1164 = fsub fast float %1160, %1158
  %1165 = fsub fast float %1161, %1158
  %1166 = fsub fast float %1162, %1158
  %1167 = call float @dx.op.unary.f32(i32 7, float %1163)  ; Saturate(value)
  %1168 = call float @dx.op.unary.f32(i32 7, float %1164)  ; Saturate(value)
  %1169 = call float @dx.op.unary.f32(i32 7, float %1165)  ; Saturate(value)
  %1170 = call float @dx.op.unary.f32(i32 7, float %1166)  ; Saturate(value)
  %1171 = fcmp fast ogt float %1153, 0x3FEFAE1480000000
  %1172 = fcmp fast ogt float %1154, 0x3FEFAE1480000000
  %1173 = fcmp fast ogt float %1155, 0x3FEFAE1480000000
  %1174 = fcmp fast ogt float %1156, 0x3FEFAE1480000000
  %1175 = uitofp i1 %1171 to float
  %1176 = uitofp i1 %1172 to float
  %1177 = uitofp i1 %1173 to float
  %1178 = uitofp i1 %1174 to float
  %1179 = fadd fast float %1175, %1167
  %1180 = fadd fast float %1176, %1168
  %1181 = fadd fast float %1169, %1177
  %1182 = fadd fast float %1170, %1178
  %1183 = call float @dx.op.unary.f32(i32 7, float %1179)  ; Saturate(value)
  %1184 = call float @dx.op.unary.f32(i32 7, float %1180)  ; Saturate(value)
  %1185 = call float @dx.op.unary.f32(i32 7, float %1181)  ; Saturate(value)
  %1186 = call float @dx.op.unary.f32(i32 7, float %1182)  ; Saturate(value)
  %1187 = fsub fast float %1185, %1186
  %1188 = fsub fast float %1184, %1183
  %1189 = fmul fast float %1187, %1142
  %1190 = fmul fast float %1188, %1142
  %1191 = fadd fast float %1189, %1186
  %1192 = fadd fast float %1190, %1183
  %1193 = fsub fast float %1192, %1191
  %1194 = fmul fast float %1193, %1143
  %1195 = fadd fast float %1194, %1191
  br label %1196

; <label>:1196                                    ; preds = %1124, %1086, %1039, %1034
  %1197 = phi float [ %1085, %1039 ], [ %1195, %1124 ], [ 1.000000e+00, %1086 ], [ 1.000000e+00, %1034 ]
  %1198 = phi i32 [ 1, %1039 ], [ 1, %1124 ], [ 0, %1086 ], [ 0, %1034 ]
  br i1 %488, label %1275, label %1199

; <label>:1199                                    ; preds = %1196
  %1200 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 46)  ; CBufferLoadLegacy(handle,regIndex)
  %1201 = extractvalue %dx.types.CBufRet.f32 %1200, 0
  %1202 = fmul fast float %1201, 0x402EB851E0000000
  %1203 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1204 = extractvalue %dx.types.CBufRet.f32 %1203, 3
  %1205 = extractvalue %dx.types.CBufRet.f32 %1203, 0
  %1206 = extractvalue %dx.types.CBufRet.f32 %1203, 1
  %1207 = extractvalue %dx.types.CBufRet.f32 %1203, 2
  %1208 = fsub fast float %1205, %628
  %1209 = fsub fast float %1206, %629
  %1210 = fsub fast float %1207, %630
  %1211 = fmul fast float %1208, %1208
  %1212 = fmul fast float %1209, %1209
  %1213 = fadd fast float %1211, %1212
  %1214 = fmul fast float %1210, %1210
  %1215 = fadd fast float %1213, %1214
  %1216 = call float @dx.op.unary.f32(i32 24, float %1215)  ; Sqrt(value)
  %1217 = fmul fast float %1216, %1204
  %1218 = fcmp fast olt float %1217, 1.000000e+00
  br i1 %1218, label %1219, label %1272, !dx.controlflow.hints !46

; <label>:1219                                    ; preds = %1199
  %1220 = call float @dx.op.unary.f32(i32 6, float %1208)  ; FAbs(value)
  %1221 = call float @dx.op.unary.f32(i32 6, float %1209)  ; FAbs(value)
  %1222 = call float @dx.op.unary.f32(i32 6, float %1210)  ; FAbs(value)
  %1223 = call float @dx.op.binary.f32(i32 35, float %1221, float %1222)  ; FMax(a,b)
  %1224 = call float @dx.op.binary.f32(i32 35, float %1220, float %1223)  ; FMax(a,b)
  %1225 = fcmp fast oeq float %1224, %1220
  br i1 %1225, label %1226, label %1229

; <label>:1226                                    ; preds = %1219
  %1227 = fcmp fast oeq float %1220, %1208
  %1228 = select i1 %1227, i32 0, i32 4
  br label %1237

; <label>:1229                                    ; preds = %1219
  %1230 = fcmp fast oeq float %1224, %1221
  br i1 %1230, label %1231, label %1234

; <label>:1231                                    ; preds = %1229
  %1232 = fcmp fast oeq float %1221, %1209
  %1233 = select i1 %1232, i32 8, i32 12
  br label %1237

; <label>:1234                                    ; preds = %1229
  %1235 = fcmp fast oeq float %1222, %1210
  %1236 = select i1 %1235, i32 16, i32 20
  br label %1237

; <label>:1237                                    ; preds = %1234, %1231, %1226
  %1238 = phi i32 [ %1228, %1226 ], [ %1233, %1231 ], [ %1236, %1234 ]
  %1239 = add nuw nsw i32 %1238, 22
  %1240 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 %1239)  ; CBufferLoadLegacy(handle,regIndex)
  %1241 = extractvalue %dx.types.CBufRet.f32 %1240, 2
  %1242 = extractvalue %dx.types.CBufRet.f32 %1240, 3
  %1243 = add nuw nsw i32 %1238, 23
  %1244 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 %1243)  ; CBufferLoadLegacy(handle,regIndex)
  %1245 = extractvalue %dx.types.CBufRet.f32 %1244, 2
  %1246 = extractvalue %dx.types.CBufRet.f32 %1244, 3
  %1247 = add nuw nsw i32 %1238, 24
  %1248 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 %1247)  ; CBufferLoadLegacy(handle,regIndex)
  %1249 = extractvalue %dx.types.CBufRet.f32 %1248, 2
  %1250 = extractvalue %dx.types.CBufRet.f32 %1248, 3
  %1251 = add nuw nsw i32 %1238, 25
  %1252 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 %1251)  ; CBufferLoadLegacy(handle,regIndex)
  %1253 = extractvalue %dx.types.CBufRet.f32 %1252, 2
  %1254 = extractvalue %dx.types.CBufRet.f32 %1252, 3
  %1255 = fsub fast float -0.000000e+00, %1208
  %1256 = fsub fast float -0.000000e+00, %1209
  %1257 = fsub fast float -0.000000e+00, %1210
  %1258 = fmul fast float %1241, %1255
  %1259 = call float @dx.op.tertiary.f32(i32 46, float %1256, float %1245, float %1258)  ; FMad(a,b,c)
  %1260 = call float @dx.op.tertiary.f32(i32 46, float %1257, float %1249, float %1259)  ; FMad(a,b,c)
  %1261 = fmul fast float %1242, %1255
  %1262 = call float @dx.op.tertiary.f32(i32 46, float %1256, float %1246, float %1261)  ; FMad(a,b,c)
  %1263 = call float @dx.op.tertiary.f32(i32 46, float %1257, float %1250, float %1262)  ; FMad(a,b,c)
  %1264 = fadd fast float %1263, %1254
  %1265 = fadd fast float %1253, %1202
  %1266 = fadd fast float %1265, %1260
  %1267 = fdiv fast float %1266, %1264
  %1268 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %1269 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 32782, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerComparisonState
  %1270 = call %dx.types.ResRet.f32 @dx.op.sampleCmpLevelZero.f32(i32 65, %dx.types.Handle %1268, %dx.types.Handle %1269, float %1208, float %1209, float %1210, float undef, i32 undef, i32 undef, i32 undef, float %1267)  ; SampleCmpLevelZero(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,compareValue)
  %1271 = extractvalue %dx.types.ResRet.f32 %1270, 0
  br label %1272

; <label>:1272                                    ; preds = %1237, %1199
  %1273 = phi float [ %1271, %1237 ], [ 1.000000e+00, %1199 ]
  %1274 = fsub fast float 1.000000e+00, %1273
  br label %1341

; <label>:1275                                    ; preds = %1196
  %1276 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1277 = extractvalue %dx.types.CBufRet.f32 %1276, 0
  %1278 = extractvalue %dx.types.CBufRet.f32 %1276, 1
  %1279 = extractvalue %dx.types.CBufRet.f32 %1276, 2
  %1280 = extractvalue %dx.types.CBufRet.f32 %1276, 3
  %1281 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %1282 = extractvalue %dx.types.CBufRet.f32 %1281, 0
  %1283 = extractvalue %dx.types.CBufRet.f32 %1281, 1
  %1284 = extractvalue %dx.types.CBufRet.f32 %1281, 2
  %1285 = extractvalue %dx.types.CBufRet.f32 %1281, 3
  %1286 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %1287 = extractvalue %dx.types.CBufRet.f32 %1286, 0
  %1288 = extractvalue %dx.types.CBufRet.f32 %1286, 1
  %1289 = extractvalue %dx.types.CBufRet.f32 %1286, 2
  %1290 = extractvalue %dx.types.CBufRet.f32 %1286, 3
  %1291 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %1292 = extractvalue %dx.types.CBufRet.f32 %1291, 0
  %1293 = extractvalue %dx.types.CBufRet.f32 %1291, 1
  %1294 = extractvalue %dx.types.CBufRet.f32 %1291, 2
  %1295 = extractvalue %dx.types.CBufRet.f32 %1291, 3
  %1296 = fmul fast float %1277, %628
  %1297 = call float @dx.op.tertiary.f32(i32 46, float %629, float %1282, float %1296)  ; FMad(a,b,c)
  %1298 = call float @dx.op.tertiary.f32(i32 46, float %630, float %1287, float %1297)  ; FMad(a,b,c)
  %1299 = fadd fast float %1298, %1292
  %1300 = fmul fast float %1278, %628
  %1301 = call float @dx.op.tertiary.f32(i32 46, float %629, float %1283, float %1300)  ; FMad(a,b,c)
  %1302 = call float @dx.op.tertiary.f32(i32 46, float %630, float %1288, float %1301)  ; FMad(a,b,c)
  %1303 = fadd fast float %1302, %1293
  %1304 = fmul fast float %1279, %628
  %1305 = call float @dx.op.tertiary.f32(i32 46, float %629, float %1284, float %1304)  ; FMad(a,b,c)
  %1306 = call float @dx.op.tertiary.f32(i32 46, float %630, float %1289, float %1305)  ; FMad(a,b,c)
  %1307 = fmul fast float %1280, %628
  %1308 = call float @dx.op.tertiary.f32(i32 46, float %629, float %1285, float %1307)  ; FMad(a,b,c)
  %1309 = call float @dx.op.tertiary.f32(i32 46, float %630, float %1290, float %1308)  ; FMad(a,b,c)
  %1310 = fadd fast float %1309, %1295
  %1311 = fdiv fast float %1299, %1310
  %1312 = fdiv fast float %1303, %1310
  %1313 = fsub fast float 1.000000e+00, %1294
  %1314 = fsub fast float %1313, %1306
  %1315 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %1316 = extractvalue %dx.types.CBufRet.f32 %1315, 0
  %1317 = extractvalue %dx.types.CBufRet.f32 %1315, 1
  %1318 = fcmp fast oge float %1311, %1316
  %1319 = fcmp fast oge float %1312, %1317
  %1320 = and i1 %1318, %1319
  br i1 %1320, label %1321, label %1341

; <label>:1321                                    ; preds = %1275
  %1322 = extractvalue %dx.types.CBufRet.f32 %1315, 2
  %1323 = extractvalue %dx.types.CBufRet.f32 %1315, 3
  %1324 = fcmp fast ole float %1311, %1322
  %1325 = fcmp fast ole float %1312, %1323
  %1326 = and i1 %1324, %1325
  br i1 %1326, label %1327, label %1341

; <label>:1327                                    ; preds = %1321
  %1328 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1329 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1330 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1328, %dx.types.Handle %1329, float %1311, float %1312, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1331 = extractvalue %dx.types.ResRet.f32 %1330, 0
  %1332 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %1333 = extractvalue %dx.types.CBufRet.f32 %1332, 0
  %1334 = fsub fast float %1331, %1333
  %1335 = fcmp fast olt float %1314, %1334
  %1336 = uitofp i1 %1335 to float
  %1337 = fcmp fast oeq float %1331, 1.000000e+00
  %1338 = uitofp i1 %1337 to float
  %1339 = fadd fast float %1336, %1338
  %1340 = call float @dx.op.unary.f32(i32 7, float %1339)  ; Saturate(value)
  br label %1341

; <label>:1341                                    ; preds = %1327, %1321, %1275, %1272
  %1342 = phi float [ %1274, %1272 ], [ %1340, %1327 ], [ 1.000000e+00, %1321 ], [ 1.000000e+00, %1275 ]
  %1343 = phi i32 [ 1, %1272 ], [ 1, %1327 ], [ %1198, %1321 ], [ %1198, %1275 ]
  %1344 = call float @dx.op.binary.f32(i32 36, float %1197, float %1342)  ; FMin(a,b)
  %1345 = icmp ne i32 %1343, 0
  %1346 = select i1 %1345, float %1344, float 1.000000e+00
  br label %1347

; <label>:1347                                    ; preds = %1341, %1017, %968, %955, %941
  %1348 = phi float [ %1346, %1341 ], [ %1033, %1017 ], [ 1.000000e+00, %968 ], [ 1.000000e+00, %955 ], [ 1.000000e+00, %941 ]
  %1349 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %1350 = extractvalue %dx.types.CBufRet.i32 %1349, 0
  %1351 = icmp eq i32 %1350, -1
  br i1 %1351, label %1806, label %1352

; <label>:1352                                    ; preds = %1347
  %1353 = fsub fast float %628, %619
  %1354 = fsub fast float %629, %620
  %1355 = fsub fast float %630, %621
  %1356 = mul i32 %1350, 336
  %1357 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1358 = add i32 %1356, 128
  %1359 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1358, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1360 = add i32 %1356, 144
  %1361 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1360, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1362 = add i32 %1356, 160
  %1363 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1362, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1364 = add i32 %1356, 176
  %1365 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1364, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1366 = add i32 %1356, 256
  %1367 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1366, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1368 = extractvalue %dx.types.ResRet.i32 %1367, 0
  %1369 = extractvalue %dx.types.ResRet.i32 %1367, 1
  %1370 = extractvalue %dx.types.ResRet.i32 %1367, 2
  %1371 = bitcast i32 %1368 to float
  %1372 = bitcast i32 %1369 to float
  %1373 = bitcast i32 %1370 to float
  %1374 = add i32 %1356, 268
  %1375 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1374, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1376 = extractvalue %dx.types.ResRet.i32 %1375, 0
  %1377 = add i32 %1356, 272
  %1378 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1377, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1379 = add i32 %1356, 288
  %1380 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1379, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1381 = icmp eq i32 %1376, 0
  %1382 = fadd fast float %1371, %615
  %1383 = fadd fast float %1372, %616
  %1384 = fadd fast float %1373, %617
  %1385 = fmul fast float %1382, 2.097152e+06
  %1386 = fmul fast float %1383, 2.097152e+06
  %1387 = fmul fast float %1384, 2.097152e+06
  %1388 = fadd fast float %1385, %1353
  %1389 = fadd fast float %1386, %1354
  %1390 = fadd fast float %1387, %1355
  br i1 %1381, label %1391, label %1631

; <label>:1391                                    ; preds = %1352
  %1392 = extractvalue %dx.types.ResRet.i32 %1380, 2
  %1393 = bitcast i32 %1392 to float
  %1394 = extractvalue %dx.types.ResRet.i32 %1380, 1
  %1395 = bitcast i32 %1394 to float
  %1396 = extractvalue %dx.types.ResRet.i32 %1380, 0
  %1397 = bitcast i32 %1396 to float
  %1398 = add i32 %1356, 320
  %1399 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1398, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1400 = extractvalue %dx.types.ResRet.i32 %1399, 0
  %1401 = add i32 %1356, 316
  %1402 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1401, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1403 = extractvalue %dx.types.ResRet.i32 %1402, 0
  %1404 = add i32 %1356, 300
  %1405 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1404, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1406 = extractvalue %dx.types.ResRet.i32 %1405, 0
  %1407 = bitcast i32 %1406 to float
  %1408 = fadd fast float %1388, %1397
  %1409 = fadd fast float %1389, %1395
  %1410 = fadd fast float %1390, %1393
  %1411 = fmul fast float %1408, %1408
  %1412 = fmul fast float %1409, %1409
  %1413 = fadd fast float %1411, %1412
  %1414 = fmul fast float %1410, %1410
  %1415 = fadd fast float %1413, %1414
  %1416 = call float @dx.op.unary.f32(i32 24, float %1415)  ; Sqrt(value)
  %1417 = call float @dx.op.unary.f32(i32 23, float %1416)  ; Log(value)
  %1418 = fadd fast float %1417, %1407
  %1419 = call float @dx.op.unary.f32(i32 27, float %1418)  ; Round_ni(value)
  %1420 = fptosi float %1419 to i32
  %1421 = sub nsw i32 %1420, %1403
  %1422 = call i32 @dx.op.binary.i32(i32 37, i32 0, i32 %1421)  ; IMax(a,b)
  %1423 = icmp slt i32 %1422, %1400
  br i1 %1423, label %1424, label %1803

; <label>:1424                                    ; preds = %1391
  %1425 = add nsw i32 %1422, %1350
  %1426 = mul i32 %1425, 336
  %1427 = add i32 %1426, 112
  %1428 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1427, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1429 = extractvalue %dx.types.ResRet.i32 %1428, 2
  %1430 = bitcast i32 %1429 to float
  %1431 = add i32 %1426, 128
  %1432 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1431, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1433 = extractvalue %dx.types.ResRet.i32 %1432, 0
  %1434 = extractvalue %dx.types.ResRet.i32 %1432, 1
  %1435 = extractvalue %dx.types.ResRet.i32 %1432, 2
  %1436 = bitcast i32 %1433 to float
  %1437 = bitcast i32 %1434 to float
  %1438 = bitcast i32 %1435 to float
  %1439 = add i32 %1426, 144
  %1440 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1439, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1441 = extractvalue %dx.types.ResRet.i32 %1440, 0
  %1442 = extractvalue %dx.types.ResRet.i32 %1440, 1
  %1443 = extractvalue %dx.types.ResRet.i32 %1440, 2
  %1444 = bitcast i32 %1441 to float
  %1445 = bitcast i32 %1442 to float
  %1446 = bitcast i32 %1443 to float
  %1447 = add i32 %1426, 160
  %1448 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1447, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1449 = extractvalue %dx.types.ResRet.i32 %1448, 0
  %1450 = extractvalue %dx.types.ResRet.i32 %1448, 1
  %1451 = extractvalue %dx.types.ResRet.i32 %1448, 2
  %1452 = bitcast i32 %1449 to float
  %1453 = bitcast i32 %1450 to float
  %1454 = bitcast i32 %1451 to float
  %1455 = add i32 %1426, 176
  %1456 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1455, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1457 = extractvalue %dx.types.ResRet.i32 %1456, 0
  %1458 = extractvalue %dx.types.ResRet.i32 %1456, 1
  %1459 = extractvalue %dx.types.ResRet.i32 %1456, 2
  %1460 = bitcast i32 %1457 to float
  %1461 = bitcast i32 %1458 to float
  %1462 = bitcast i32 %1459 to float
  %1463 = add i32 %1426, 256
  %1464 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1463, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1465 = extractvalue %dx.types.ResRet.i32 %1464, 0
  %1466 = extractvalue %dx.types.ResRet.i32 %1464, 1
  %1467 = extractvalue %dx.types.ResRet.i32 %1464, 2
  %1468 = bitcast i32 %1465 to float
  %1469 = bitcast i32 %1466 to float
  %1470 = bitcast i32 %1467 to float
  %1471 = add i32 %1426, 272
  %1472 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1471, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1473 = extractvalue %dx.types.ResRet.i32 %1472, 0
  %1474 = extractvalue %dx.types.ResRet.i32 %1472, 1
  %1475 = extractvalue %dx.types.ResRet.i32 %1472, 2
  %1476 = bitcast i32 %1473 to float
  %1477 = bitcast i32 %1474 to float
  %1478 = bitcast i32 %1475 to float
  %1479 = fadd fast float %1468, %615
  %1480 = fadd fast float %1469, %616
  %1481 = fadd fast float %1470, %617
  %1482 = fmul fast float %1479, 2.097152e+06
  %1483 = fmul fast float %1480, 2.097152e+06
  %1484 = fmul fast float %1481, 2.097152e+06
  %1485 = fadd fast float %1482, %1353
  %1486 = fadd fast float %1485, %1476
  %1487 = fadd fast float %1483, %1354
  %1488 = fadd fast float %1487, %1477
  %1489 = fadd fast float %1484, %1355
  %1490 = fadd fast float %1489, %1478
  %1491 = fmul fast float %1486, %1436
  %1492 = call float @dx.op.tertiary.f32(i32 46, float %1488, float %1444, float %1491)  ; FMad(a,b,c)
  %1493 = call float @dx.op.tertiary.f32(i32 46, float %1490, float %1452, float %1492)  ; FMad(a,b,c)
  %1494 = fadd fast float %1493, %1460
  %1495 = fmul fast float %1486, %1437
  %1496 = call float @dx.op.tertiary.f32(i32 46, float %1488, float %1445, float %1495)  ; FMad(a,b,c)
  %1497 = call float @dx.op.tertiary.f32(i32 46, float %1490, float %1453, float %1496)  ; FMad(a,b,c)
  %1498 = fadd fast float %1497, %1461
  %1499 = fmul fast float %1486, %1438
  %1500 = call float @dx.op.tertiary.f32(i32 46, float %1488, float %1446, float %1499)  ; FMad(a,b,c)
  %1501 = call float @dx.op.tertiary.f32(i32 46, float %1490, float %1454, float %1500)  ; FMad(a,b,c)
  %1502 = fadd fast float %1501, %1462
  %1503 = fmul fast float %1494, 1.280000e+02
  %1504 = fmul fast float %1498, 1.280000e+02
  %1505 = fptoui float %1503 to i32
  %1506 = fptoui float %1504 to i32
  %1507 = icmp ult i32 %1425, 8192
  br i1 %1507, label %1514, label %1508

; <label>:1508                                    ; preds = %1424
  %1509 = mul i32 %1425, 21845
  %1510 = shl i32 %1506, 7
  %1511 = add i32 %1509, -178946048
  %1512 = add i32 %1511, %1505
  %1513 = add i32 %1512, %1510
  br label %1514

; <label>:1514                                    ; preds = %1508, %1424
  %1515 = phi i32 [ %1513, %1508 ], [ %1425, %1424 ]
  %1516 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1517 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1516, i32 %1515, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1518 = extractvalue %dx.types.ResRet.i32 %1517, 0
  %1519 = lshr i32 %1518, 20
  %1520 = and i32 %1519, 63
  %1521 = and i32 %1518, 134217728
  %1522 = icmp eq i32 %1521, 0
  br i1 %1522, label %1625, label %1523

; <label>:1523                                    ; preds = %1514
  %1524 = icmp eq i32 %1520, 0
  %1525 = zext i1 %1524 to i32
  %1526 = add i32 %1520, %1425
  %1527 = fmul fast float %1494, 1.638400e+04
  %1528 = fmul fast float %1498, 1.638400e+04
  %1529 = fptoui float %1527 to i32
  %1530 = fptoui float %1528 to i32
  br i1 %1524, label %1602, label %1531

; <label>:1531                                    ; preds = %1523
  %1532 = add i32 %1426, 304
  %1533 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1532, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1534 = extractvalue %dx.types.ResRet.i32 %1533, 0
  %1535 = extractvalue %dx.types.ResRet.i32 %1533, 1
  %1536 = mul i32 %1526, 336
  %1537 = add i32 %1536, 112
  %1538 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1537, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1539 = extractvalue %dx.types.ResRet.i32 %1538, 2
  %1540 = bitcast i32 %1539 to float
  %1541 = add i32 %1536, 304
  %1542 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1541, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1543 = extractvalue %dx.types.ResRet.i32 %1542, 0
  %1544 = extractvalue %dx.types.ResRet.i32 %1542, 1
  %1545 = shl i32 %1534, 5
  %1546 = shl i32 %1535, 5
  %1547 = shl i32 %1543, 5
  %1548 = shl i32 %1544, 5
  %1549 = sub i32 %1505, %1545
  %1550 = sub i32 %1506, %1546
  %1551 = and i32 %1519, 31
  %1552 = shl i32 %1547, %1551
  %1553 = shl i32 %1548, %1551
  %1554 = add i32 %1549, %1552
  %1555 = add i32 %1550, %1553
  %1556 = lshr i32 %1554, %1551
  %1557 = lshr i32 %1555, %1551
  %1558 = shl i32 %1556, 7
  %1559 = shl i32 %1557, 7
  %1560 = or i32 %1558, 127
  %1561 = or i32 %1559, 127
  %1562 = sitofp i32 %1534 to float
  %1563 = sitofp i32 %1535 to float
  %1564 = sitofp i32 %1543 to float
  %1565 = sitofp i32 %1544 to float
  %1566 = shl i32 1, %1551
  %1567 = uitofp i32 %1566 to float
  %1568 = fdiv fast float 1.000000e+00, %1567
  %1569 = fmul fast float %1568, %1562
  %1570 = fmul fast float %1568, %1563
  %1571 = fsub fast float %1564, %1569
  %1572 = fsub fast float %1565, %1570
  %1573 = fmul fast float %1571, 2.500000e-01
  %1574 = fmul fast float %1572, 2.500000e-01
  %1575 = fmul fast float %1568, %1430
  %1576 = fsub fast float %1540, %1575
  %1577 = fmul fast float %1568, %1494
  %1578 = fmul fast float %1568, %1498
  %1579 = fadd fast float %1573, %1577
  %1580 = fadd fast float %1574, %1578
  %1581 = fmul fast float %1579, 1.638400e+04
  %1582 = fmul fast float %1580, 1.638400e+04
  %1583 = fptoui float %1581 to i32
  %1584 = fptoui float %1582 to i32
  %1585 = call i32 @dx.op.binary.i32(i32 39, i32 %1583, i32 %1558)  ; UMax(a,b)
  %1586 = call i32 @dx.op.binary.i32(i32 39, i32 %1584, i32 %1559)  ; UMax(a,b)
  %1587 = call i32 @dx.op.binary.i32(i32 40, i32 %1585, i32 %1560)  ; UMin(a,b)
  %1588 = call i32 @dx.op.binary.i32(i32 40, i32 %1586, i32 %1561)  ; UMin(a,b)
  %1589 = icmp ult i32 %1526, 8192
  br i1 %1589, label %1595, label %1590

; <label>:1590                                    ; preds = %1531
  %1591 = mul i32 %1526, 21845
  %1592 = add i32 %1591, -178946048
  %1593 = add i32 %1592, %1556
  %1594 = add i32 %1593, %1559
  br label %1595

; <label>:1595                                    ; preds = %1590, %1531
  %1596 = phi i32 [ %1594, %1590 ], [ %1526, %1531 ]
  %1597 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1516, i32 %1596, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1598 = extractvalue %dx.types.ResRet.i32 %1597, 0
  %1599 = and i32 %1598, 200278016
  %1600 = icmp eq i32 %1599, 134217728
  %1601 = zext i1 %1600 to i32
  br label %1602

; <label>:1602                                    ; preds = %1595, %1523
  %1603 = phi i32 [ %1587, %1595 ], [ %1529, %1523 ]
  %1604 = phi i32 [ %1588, %1595 ], [ %1530, %1523 ]
  %1605 = phi float [ %1568, %1595 ], [ 1.000000e+00, %1523 ]
  %1606 = phi float [ %1576, %1595 ], [ 0.000000e+00, %1523 ]
  %1607 = phi i32 [ %1601, %1595 ], [ %1525, %1523 ]
  %1608 = phi i32 [ %1598, %1595 ], [ %1518, %1523 ]
  %1609 = icmp eq i32 %1607, 0
  br i1 %1609, label %1625, label %1610

; <label>:1610                                    ; preds = %1602
  %1611 = shl i32 %1608, 7
  %1612 = and i32 %1611, 130944
  %1613 = lshr i32 %1608, 3
  %1614 = and i32 %1613, 130944
  %1615 = and i32 %1603, 127
  %1616 = and i32 %1604, 127
  %1617 = or i32 %1612, %1615
  %1618 = or i32 %1614, %1616
  %1619 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1620 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1619, i32 0, i32 %1617, i32 %1618, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1621 = extractvalue %dx.types.ResRet.i32 %1620, 0
  %1622 = bitcast i32 %1621 to float
  %1623 = fsub fast float %1622, %1606
  %1624 = fdiv fast float %1623, %1605
  br label %1625

; <label>:1625                                    ; preds = %1610, %1602, %1514
  %1626 = phi float [ %1624, %1610 ], [ 0.000000e+00, %1602 ], [ 0.000000e+00, %1514 ]
  %1627 = phi i1 [ true, %1610 ], [ false, %1602 ], [ false, %1514 ]
  %1628 = fcmp fast ogt float %1626, %1502
  %1629 = and i1 %1627, %1628
  %1630 = select i1 %1629, float 0.000000e+00, float 1.000000e+00
  br label %1803

; <label>:1631                                    ; preds = %1352
  %1632 = extractvalue %dx.types.ResRet.i32 %1365, 3
  %1633 = extractvalue %dx.types.ResRet.i32 %1365, 2
  %1634 = extractvalue %dx.types.ResRet.i32 %1365, 1
  %1635 = extractvalue %dx.types.ResRet.i32 %1365, 0
  %1636 = extractvalue %dx.types.ResRet.i32 %1363, 3
  %1637 = extractvalue %dx.types.ResRet.i32 %1363, 2
  %1638 = extractvalue %dx.types.ResRet.i32 %1363, 1
  %1639 = extractvalue %dx.types.ResRet.i32 %1363, 0
  %1640 = extractvalue %dx.types.ResRet.i32 %1361, 3
  %1641 = extractvalue %dx.types.ResRet.i32 %1361, 2
  %1642 = extractvalue %dx.types.ResRet.i32 %1361, 1
  %1643 = extractvalue %dx.types.ResRet.i32 %1361, 0
  %1644 = extractvalue %dx.types.ResRet.i32 %1359, 3
  %1645 = extractvalue %dx.types.ResRet.i32 %1359, 2
  %1646 = extractvalue %dx.types.ResRet.i32 %1359, 1
  %1647 = extractvalue %dx.types.ResRet.i32 %1359, 0
  %1648 = extractvalue %dx.types.ResRet.i32 %1378, 2
  %1649 = bitcast i32 %1648 to float
  %1650 = extractvalue %dx.types.ResRet.i32 %1378, 1
  %1651 = bitcast i32 %1650 to float
  %1652 = extractvalue %dx.types.ResRet.i32 %1378, 0
  %1653 = bitcast i32 %1652 to float
  %1654 = fadd fast float %1388, %1653
  %1655 = fadd fast float %1389, %1651
  %1656 = fadd fast float %1390, %1649
  %1657 = icmp eq i32 %1376, 2
  br i1 %1657, label %1704, label %1658

; <label>:1658                                    ; preds = %1631
  %1659 = call float @dx.op.unary.f32(i32 6, float %1654)  ; FAbs(value)
  %1660 = call float @dx.op.unary.f32(i32 6, float %1655)  ; FAbs(value)
  %1661 = fcmp fast ult float %1659, %1660
  %1662 = call float @dx.op.unary.f32(i32 6, float %1656)  ; FAbs(value)
  %1663 = fcmp fast ult float %1659, %1662
  %1664 = or i1 %1661, %1663
  br i1 %1664, label %1668, label %1665

; <label>:1665                                    ; preds = %1658
  %1666 = fcmp ule float %1654, 0.000000e+00
  %1667 = zext i1 %1666 to i32
  br label %1676

; <label>:1668                                    ; preds = %1658
  %1669 = fcmp fast ogt float %1660, %1662
  br i1 %1669, label %1670, label %1673

; <label>:1670                                    ; preds = %1668
  %1671 = fcmp fast ogt float %1655, 0.000000e+00
  %1672 = select i1 %1671, i32 2, i32 3
  br label %1676

; <label>:1673                                    ; preds = %1668
  %1674 = fcmp fast ogt float %1656, 0.000000e+00
  %1675 = select i1 %1674, i32 4, i32 5
  br label %1676

; <label>:1676                                    ; preds = %1673, %1670, %1665
  %1677 = phi i32 [ %1667, %1665 ], [ %1672, %1670 ], [ %1675, %1673 ]
  %1678 = add i32 %1677, %1350
  %1679 = mul i32 %1678, 336
  %1680 = add i32 %1679, 128
  %1681 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1680, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1682 = extractvalue %dx.types.ResRet.i32 %1681, 0
  %1683 = extractvalue %dx.types.ResRet.i32 %1681, 1
  %1684 = extractvalue %dx.types.ResRet.i32 %1681, 2
  %1685 = extractvalue %dx.types.ResRet.i32 %1681, 3
  %1686 = add i32 %1679, 144
  %1687 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1686, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1688 = extractvalue %dx.types.ResRet.i32 %1687, 0
  %1689 = extractvalue %dx.types.ResRet.i32 %1687, 1
  %1690 = extractvalue %dx.types.ResRet.i32 %1687, 2
  %1691 = extractvalue %dx.types.ResRet.i32 %1687, 3
  %1692 = add i32 %1679, 160
  %1693 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1692, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1694 = extractvalue %dx.types.ResRet.i32 %1693, 0
  %1695 = extractvalue %dx.types.ResRet.i32 %1693, 1
  %1696 = extractvalue %dx.types.ResRet.i32 %1693, 2
  %1697 = extractvalue %dx.types.ResRet.i32 %1693, 3
  %1698 = add i32 %1679, 176
  %1699 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1357, i32 %1698, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1700 = extractvalue %dx.types.ResRet.i32 %1699, 0
  %1701 = extractvalue %dx.types.ResRet.i32 %1699, 1
  %1702 = extractvalue %dx.types.ResRet.i32 %1699, 2
  %1703 = extractvalue %dx.types.ResRet.i32 %1699, 3
  br label %1704

; <label>:1704                                    ; preds = %1676, %1631
  %1705 = phi i32 [ %1682, %1676 ], [ %1647, %1631 ]
  %1706 = phi i32 [ %1683, %1676 ], [ %1646, %1631 ]
  %1707 = phi i32 [ %1684, %1676 ], [ %1645, %1631 ]
  %1708 = phi i32 [ %1685, %1676 ], [ %1644, %1631 ]
  %1709 = phi i32 [ %1688, %1676 ], [ %1643, %1631 ]
  %1710 = phi i32 [ %1689, %1676 ], [ %1642, %1631 ]
  %1711 = phi i32 [ %1690, %1676 ], [ %1641, %1631 ]
  %1712 = phi i32 [ %1691, %1676 ], [ %1640, %1631 ]
  %1713 = phi i32 [ %1694, %1676 ], [ %1639, %1631 ]
  %1714 = phi i32 [ %1695, %1676 ], [ %1638, %1631 ]
  %1715 = phi i32 [ %1696, %1676 ], [ %1637, %1631 ]
  %1716 = phi i32 [ %1697, %1676 ], [ %1636, %1631 ]
  %1717 = phi i32 [ %1700, %1676 ], [ %1635, %1631 ]
  %1718 = phi i32 [ %1701, %1676 ], [ %1634, %1631 ]
  %1719 = phi i32 [ %1702, %1676 ], [ %1633, %1631 ]
  %1720 = phi i32 [ %1703, %1676 ], [ %1632, %1631 ]
  %1721 = phi i32 [ %1678, %1676 ], [ %1350, %1631 ]
  %1722 = bitcast i32 %1720 to float
  %1723 = bitcast i32 %1719 to float
  %1724 = bitcast i32 %1718 to float
  %1725 = bitcast i32 %1717 to float
  %1726 = bitcast i32 %1716 to float
  %1727 = bitcast i32 %1715 to float
  %1728 = bitcast i32 %1714 to float
  %1729 = bitcast i32 %1713 to float
  %1730 = bitcast i32 %1712 to float
  %1731 = bitcast i32 %1711 to float
  %1732 = bitcast i32 %1710 to float
  %1733 = bitcast i32 %1709 to float
  %1734 = bitcast i32 %1708 to float
  %1735 = bitcast i32 %1707 to float
  %1736 = bitcast i32 %1706 to float
  %1737 = bitcast i32 %1705 to float
  %1738 = fmul fast float %1737, %1654
  %1739 = call float @dx.op.tertiary.f32(i32 46, float %1655, float %1733, float %1738)  ; FMad(a,b,c)
  %1740 = call float @dx.op.tertiary.f32(i32 46, float %1656, float %1729, float %1739)  ; FMad(a,b,c)
  %1741 = fadd fast float %1740, %1725
  %1742 = fmul fast float %1736, %1654
  %1743 = call float @dx.op.tertiary.f32(i32 46, float %1655, float %1732, float %1742)  ; FMad(a,b,c)
  %1744 = call float @dx.op.tertiary.f32(i32 46, float %1656, float %1728, float %1743)  ; FMad(a,b,c)
  %1745 = fadd fast float %1744, %1724
  %1746 = fmul fast float %1735, %1654
  %1747 = call float @dx.op.tertiary.f32(i32 46, float %1655, float %1731, float %1746)  ; FMad(a,b,c)
  %1748 = call float @dx.op.tertiary.f32(i32 46, float %1656, float %1727, float %1747)  ; FMad(a,b,c)
  %1749 = fadd fast float %1748, %1723
  %1750 = fmul fast float %1734, %1654
  %1751 = call float @dx.op.tertiary.f32(i32 46, float %1655, float %1730, float %1750)  ; FMad(a,b,c)
  %1752 = call float @dx.op.tertiary.f32(i32 46, float %1656, float %1726, float %1751)  ; FMad(a,b,c)
  %1753 = fadd fast float %1752, %1722
  %1754 = fdiv fast float %1741, %1753
  %1755 = fdiv fast float %1745, %1753
  %1756 = fdiv fast float %1749, %1753
  %1757 = icmp ult i32 %1721, 8192
  br i1 %1757, label %1768, label %1758

; <label>:1758                                    ; preds = %1704
  %1759 = fmul fast float %1755, 1.280000e+02
  %1760 = fptoui float %1759 to i32
  %1761 = fmul fast float %1754, 1.280000e+02
  %1762 = fptoui float %1761 to i32
  %1763 = mul i32 %1721, 21845
  %1764 = shl i32 %1760, 7
  %1765 = add i32 %1763, -178946048
  %1766 = add i32 %1765, %1762
  %1767 = add i32 %1766, %1764
  br label %1768

; <label>:1768                                    ; preds = %1758, %1704
  %1769 = phi i32 [ %1767, %1758 ], [ %1721, %1704 ]
  %1770 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1771 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1770, i32 %1769, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1772 = extractvalue %dx.types.ResRet.i32 %1771, 0
  %1773 = lshr i32 %1772, 20
  %1774 = and i32 %1772, 134217728
  %1775 = icmp eq i32 %1774, 0
  %1776 = and i32 %1773, 31
  %1777 = lshr i32 16384, %1776
  %1778 = uitofp i32 %1777 to float
  %1779 = select i1 %1757, float 1.280000e+02, float %1778
  br i1 %1775, label %1797, label %1780

; <label>:1780                                    ; preds = %1768
  %1781 = lshr i32 %1772, 3
  %1782 = and i32 %1781, 130944
  %1783 = fmul fast float %1779, %1755
  %1784 = fptoui float %1783 to i32
  %1785 = and i32 %1784, 127
  %1786 = or i32 %1785, %1782
  %1787 = shl i32 %1772, 7
  %1788 = and i32 %1787, 130944
  %1789 = fmul fast float %1779, %1754
  %1790 = fptoui float %1789 to i32
  %1791 = and i32 %1790, 127
  %1792 = or i32 %1791, %1788
  %1793 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1794 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1793, i32 0, i32 %1792, i32 %1786, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1795 = extractvalue %dx.types.ResRet.i32 %1794, 0
  %1796 = bitcast i32 %1795 to float
  br label %1797

; <label>:1797                                    ; preds = %1780, %1768
  %1798 = phi float [ %1796, %1780 ], [ 0.000000e+00, %1768 ]
  %1799 = phi i1 [ true, %1780 ], [ false, %1768 ]
  %1800 = fcmp fast ogt float %1798, %1756
  %1801 = and i1 %1799, %1800
  %1802 = select i1 %1801, float 0.000000e+00, float 1.000000e+00
  br label %1803

; <label>:1803                                    ; preds = %1797, %1625, %1391
  %1804 = phi float [ 1.000000e+00, %1391 ], [ %1630, %1625 ], [ %1802, %1797 ]
  %1805 = fmul fast float %1804, %1348
  br label %1806

; <label>:1806                                    ; preds = %1803, %1347
  %1807 = phi float [ %1805, %1803 ], [ %1348, %1347 ]
  %1808 = fmul fast float %457, 0x3FB45F3060000000
  %1809 = fmul fast float %1808, %466
  %1810 = fmul fast float %1809, %512
  %1811 = fmul fast float %1810, %526
  %1812 = fmul fast float %1811, %592
  %1813 = fmul fast float %1812, %605
  %1814 = fmul fast float %1813, %940
  %1815 = fmul fast float %1814, %1807
  %1816 = fmul fast float %1808, %467
  %1817 = fmul fast float %1816, %512
  %1818 = fmul fast float %1817, %527
  %1819 = fmul fast float %1818, %593
  %1820 = fmul fast float %1819, %606
  %1821 = fmul fast float %1820, %940
  %1822 = fmul fast float %1821, %1807
  %1823 = fmul fast float %1808, %468
  %1824 = fmul fast float %1823, %512
  %1825 = fmul fast float %1824, %528
  %1826 = fmul fast float %1825, %594
  %1827 = fmul fast float %1826, %607
  %1828 = fmul fast float %1827, %940
  %1829 = fmul fast float %1828, %1807
  %1830 = fadd fast float %1815, %586
  %1831 = fadd fast float %1822, %587
  %1832 = fadd fast float %1829, %588
  br label %1833

; <label>:1833                                    ; preds = %1806, %602, %596, %585
  %1834 = phi float [ %1830, %1806 ], [ %586, %602 ], [ %586, %596 ], [ %586, %585 ]
  %1835 = phi float [ %1831, %1806 ], [ %587, %602 ], [ %587, %596 ], [ %587, %585 ]
  %1836 = phi float [ %1832, %1806 ], [ %588, %602 ], [ %588, %596 ], [ %588, %585 ]
  %1837 = fmul fast float %512, 0xBFF7154760000000
  %1838 = fmul fast float %1837, %592
  %1839 = fmul fast float %1837, %593
  %1840 = fmul fast float %1837, %594
  %1841 = call float @dx.op.unary.f32(i32 21, float %1838)  ; Exp(value)
  %1842 = call float @dx.op.unary.f32(i32 21, float %1839)  ; Exp(value)
  %1843 = call float @dx.op.unary.f32(i32 21, float %1840)  ; Exp(value)
  %1844 = fmul fast float %1841, %526
  %1845 = fmul fast float %1842, %527
  %1846 = fmul fast float %1843, %528
  %1847 = fcmp fast olt float %1844, 0x3E7AD7F2A0000000
  %1848 = fcmp fast olt float %1845, 0x3E7AD7F2A0000000
  %1849 = fcmp fast olt float %1846, 0x3E7AD7F2A0000000
  %1850 = and i1 %1847, %1848
  %1851 = and i1 %1850, %1849
  br i1 %1851, label %1855, label %1852

; <label>:1852                                    ; preds = %1833
  %1853 = add nuw i32 %522, 1
  %1854 = icmp ult i32 %1853, %518
  br i1 %1854, label %521, label %1855

; <label>:1855                                    ; preds = %1852, %1833
  %1856 = phi float [ %1844, %1852 ], [ 0.000000e+00, %1833 ]
  %1857 = phi float [ %1845, %1852 ], [ 0.000000e+00, %1833 ]
  %1858 = phi float [ %1846, %1852 ], [ 0.000000e+00, %1833 ]
  br label %1859

; <label>:1859                                    ; preds = %1855, %396
  %1860 = phi float [ %397, %396 ], [ %1834, %1855 ]
  %1861 = phi float [ %398, %396 ], [ %1835, %1855 ]
  %1862 = phi float [ %399, %396 ], [ %1836, %1855 ]
  %1863 = phi float [ %400, %396 ], [ %1856, %1855 ]
  %1864 = phi float [ %401, %396 ], [ %1857, %1855 ]
  %1865 = phi float [ %402, %396 ], [ %1858, %1855 ]
  %1866 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %41, i32 %30, i32 12, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1867 = extractvalue %dx.types.ResRet.i32 %1866, 0
  %1868 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %41, i32 %30, i32 8, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1869 = extractvalue %dx.types.ResRet.i32 %1868, 0
  %1870 = fadd fast float %404, 0x3F847AE140000000
  %1871 = icmp ult i32 %1869, %1867
  br i1 %1871, label %1872, label %1969

; <label>:1872                                    ; preds = %1859
  br label %1873

; <label>:1873                                    ; preds = %1873, %1872
  %1874 = phi float [ %1964, %1873 ], [ %284, %1872 ]
  %1875 = phi float [ %1965, %1873 ], [ %284, %1872 ]
  %1876 = phi i32 [ %1966, %1873 ], [ %1869, %1872 ]
  %1877 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 524, i32 8 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=8>
  %1878 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1877, i32 %1876, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1879 = extractvalue %dx.types.ResRet.i32 %1878, 0
  %1880 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1877, i32 %1876, i32 4, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1881 = extractvalue %dx.types.ResRet.i32 %1880, 0
  %1882 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1883 = extractvalue %dx.types.CBufRet.i32 %1882, 0
  %1884 = extractvalue %dx.types.CBufRet.i32 %1882, 1
  %1885 = and i32 %1881, 31
  %1886 = lshr i32 %1883, %1885
  %1887 = lshr i32 %1884, %1885
  %1888 = mul i32 %1886, %1887
  %1889 = urem i32 %1879, %1888
  %1890 = urem i32 %1889, %1886
  %1891 = udiv i32 %1889, %1886
  %1892 = udiv i32 %1879, %1888
  %1893 = extractvalue %dx.types.CBufRet.i32 %1882, 2
  %1894 = ashr i32 %1883, %1885
  %1895 = sitofp i32 %1894 to float
  %1896 = ashr i32 %1884, %1885
  %1897 = sitofp i32 %1896 to float
  %1898 = ashr i32 %1893, %1885
  %1899 = sitofp i32 %1898 to float
  %1900 = uitofp i32 %1890 to float
  %1901 = uitofp i32 %1891 to float
  %1902 = uitofp i32 %1892 to float
  %1903 = fdiv fast float %1900, %1895
  %1904 = fdiv fast float %1901, %1897
  %1905 = fdiv fast float %1902, %1899
  %1906 = add i32 %1890, 1
  %1907 = add i32 %1891, 1
  %1908 = add i32 %1892, 1
  %1909 = uitofp i32 %1906 to float
  %1910 = uitofp i32 %1907 to float
  %1911 = uitofp i32 %1908 to float
  %1912 = fdiv fast float %1909, %1895
  %1913 = fdiv fast float %1910, %1897
  %1914 = fdiv fast float %1911, %1899
  %1915 = fadd fast float %249, %249
  %1916 = fadd fast float %250, %250
  %1917 = fadd fast float %251, %251
  %1918 = fmul fast float %1903, %1915
  %1919 = fmul fast float %1904, %1916
  %1920 = fmul fast float %1905, %1917
  %1921 = fmul fast float %1912, %1915
  %1922 = fmul fast float %1913, %1916
  %1923 = fmul fast float %1914, %1917
  %1924 = fsub fast float 0xBF1A36E2E0000000, %214
  %1925 = fadd fast float %1924, %252
  %1926 = fadd fast float %1925, %1918
  %1927 = fsub fast float 0xBF1A36E2E0000000, %218
  %1928 = fadd fast float %1927, %253
  %1929 = fadd fast float %1928, %1919
  %1930 = fsub fast float 0xBF1A36E2E0000000, %222
  %1931 = fadd fast float %1930, %254
  %1932 = fadd fast float %1931, %1920
  %1933 = fmul fast float %258, %1926
  %1934 = fmul fast float %259, %1929
  %1935 = fmul fast float %260, %1932
  %1936 = fsub fast float 0x3F1A36E2E0000000, %214
  %1937 = fadd fast float %1936, %252
  %1938 = fadd fast float %1937, %1921
  %1939 = fsub fast float 0x3F1A36E2E0000000, %218
  %1940 = fadd fast float %1939, %253
  %1941 = fadd fast float %1940, %1922
  %1942 = fsub fast float 0x3F1A36E2E0000000, %222
  %1943 = fadd fast float %1942, %254
  %1944 = fadd fast float %1943, %1923
  %1945 = fmul fast float %1938, %258
  %1946 = fmul fast float %1941, %259
  %1947 = fmul fast float %1944, %260
  %1948 = call float @dx.op.binary.f32(i32 36, float %1933, float %1945)  ; FMin(a,b)
  %1949 = call float @dx.op.binary.f32(i32 36, float %1934, float %1946)  ; FMin(a,b)
  %1950 = call float @dx.op.binary.f32(i32 36, float %1935, float %1947)  ; FMin(a,b)
  %1951 = call float @dx.op.binary.f32(i32 35, float %1933, float %1945)  ; FMax(a,b)
  %1952 = call float @dx.op.binary.f32(i32 35, float %1934, float %1946)  ; FMax(a,b)
  %1953 = call float @dx.op.binary.f32(i32 35, float %1935, float %1947)  ; FMax(a,b)
  %1954 = call float @dx.op.binary.f32(i32 35, float %1949, float %1950)  ; FMax(a,b)
  %1955 = call float @dx.op.binary.f32(i32 35, float %1948, float %1954)  ; FMax(a,b)
  %1956 = call float @dx.op.binary.f32(i32 36, float %1952, float %1953)  ; FMin(a,b)
  %1957 = call float @dx.op.binary.f32(i32 36, float %1951, float %1956)  ; FMin(a,b)
  %1958 = call float @dx.op.binary.f32(i32 35, float %1955, float %1870)  ; FMax(a,b)
  %1959 = call float @dx.op.binary.f32(i32 36, float %1957, float %284)  ; FMin(a,b)
  %1960 = fsub fast float %1959, %1958
  %1961 = fcmp fast ogt float %1960, 0.000000e+00
  %1962 = fcmp fast olt float %1958, %1874
  %1963 = and i1 %1962, %1961
  %1964 = select i1 %1963, float %1958, float %1874
  %1965 = select i1 %1963, float %1959, float %1875
  %1966 = add nuw i32 %1876, 1
  %1967 = icmp eq i32 %1966, %1867
  br i1 %1967, label %1968, label %1873

; <label>:1968                                    ; preds = %1873
  br label %1969

; <label>:1969                                    ; preds = %1968, %1859
  %1970 = phi float [ %284, %1859 ], [ %1964, %1968 ]
  %1971 = phi float [ %284, %1859 ], [ %1965, %1968 ]
  %1972 = fsub fast float %1971, %1970
  %1973 = fcmp fast ogt float %1972, 0.000000e+00
  br i1 %1973, label %396, label %1974

; <label>:1974                                    ; preds = %1969
  br label %1975

; <label>:1975                                    ; preds = %1974, %390
  %1976 = phi float [ 0.000000e+00, %390 ], [ %1860, %1974 ]
  %1977 = phi float [ 0.000000e+00, %390 ], [ %1861, %1974 ]
  %1978 = phi float [ 0.000000e+00, %390 ], [ %1862, %1974 ]
  %1979 = phi float [ 1.000000e+00, %390 ], [ %1863, %1974 ]
  %1980 = phi float [ 1.000000e+00, %390 ], [ %1864, %1974 ]
  %1981 = phi float [ 1.000000e+00, %390 ], [ %1865, %1974 ]
  %1982 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1983 = extractvalue %dx.types.CBufRet.i32 %1982, 0
  %1984 = icmp ne i32 %1983, 0
  %1985 = fsub fast float 1.000000e+00, %1979
  %1986 = fsub fast float 1.000000e+00, %1980
  %1987 = fsub fast float 1.000000e+00, %1981
  %1988 = select i1 %1984, float %1985, float 0.000000e+00
  %1989 = select i1 %1984, float %1986, float 0.000000e+00
  %1990 = select i1 %1984, float %1987, float 0.000000e+00
  %1991 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1992 = extractvalue %dx.types.CBufRet.f32 %1991, 1
  %1993 = fmul fast float %1992, %1976
  %1994 = fmul fast float %1992, %1977
  %1995 = fmul fast float %1992, %1978
  %1996 = call float @dx.op.dot3.f32(i32 55, float %1988, float %1989, float %1990, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1997 = fptoui float %61 to i32
  %1998 = fptoui float %62 to i32
  %1999 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  %2000 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1999, i32 undef, i32 %1997, i32 %1998, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2001 = extractvalue %dx.types.ResRet.f32 %2000, 0
  %2002 = extractvalue %dx.types.ResRet.f32 %2000, 1
  %2003 = extractvalue %dx.types.ResRet.f32 %2000, 2
  %2004 = extractvalue %dx.types.ResRet.f32 %2000, 3
  %2005 = fadd fast float %2001, %1993
  %2006 = fadd fast float %2002, %1994
  %2007 = fadd fast float %2003, %1995
  %2008 = fadd fast float %2004, %1996
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1999, i32 %1997, i32 %1998, i32 undef, float %2005, float %2006, float %2007, float %2008, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %2009

; <label>:2009                                    ; preds = %1975, %113, %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadIdInGroup.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleCmpLevelZero.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!38}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !24, !26, !32}
!5 = !{!6, !7, !9, !11, !13, !14, !15, !16, !17, !19, !20, !21, !22}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 0, i32 1, i32 11, i32 0, null}
!7 = !{i32 1, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 1, i32 1, i32 12, i32 0, !8}
!8 = !{i32 1, i32 4}
!9 = !{i32 2, %"class.Texture2DArray<unsigned int>"* undef, !"", i32 0, i32 2, i32 1, i32 7, i32 0, !10}
!10 = !{i32 0, i32 5}
!11 = !{i32 3, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 4, i32 0, !12}
!12 = !{i32 0, i32 9}
!13 = !{i32 4, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 4, i32 0, !12}
!14 = !{i32 5, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 4, i32 0, !12}
!15 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !12}
!16 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !12}
!17 = !{i32 8, %"class.StructuredBuffer<FVoxelDataPacked>"* undef, !"", i32 0, i32 8, i32 1, i32 12, i32 0, !18}
!18 = !{i32 1, i32 8}
!19 = !{i32 9, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 2, i32 0, !12}
!20 = !{i32 10, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 5, i32 0, !12}
!21 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !12}
!22 = !{i32 12, %"class.StructuredBuffer<FRayMarchingTile>"* undef, !"", i32 0, i32 12, i32 1, i32 12, i32 0, !23}
!23 = !{i32 1, i32 32}
!24 = !{!25}
!25 = !{i32 0, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !12}
!26 = !{!27, !28, !29, !30, !31}
!27 = !{i32 0, %hostlayout._RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 992, null}
!28 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!29 = !{i32 2, %hostlayout.UniformBufferConstants_SparseVoxelUniformBuffer* undef, !"", i32 0, i32 2, i32 1, i32 260, null}
!30 = !{i32 3, %UniformBufferConstants_DeferredLightUniforms* undef, !"", i32 0, i32 3, i32 1, i32 160, null}
!31 = !{i32 4, %hostlayout.UniformBufferConstants_ForwardLightData* undef, !"", i32 0, i32 4, i32 1, i32 708, null}
!32 = !{!33, !34, !35, !36, !37}
!33 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!34 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!35 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!36 = !{i32 3, %struct.SamplerComparisonState* undef, !"", i32 0, i32 3, i32 1, i32 1, null}
!37 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!38 = !{void ()* @RenderSingleScatteringWithPreshadingCS, !"RenderSingleScatteringWithPreshadingCS", null, !4, !39}
!39 = !{i32 0, i64 8208, i32 4, !40, i32 5, !41}
!40 = !{i32 64, i32 1, i32 1}
!41 = !{i32 0}
!42 = distinct !{!42, !"dx.controlflow.hints", i32 2}
!43 = distinct !{!43, !"dx.controlflow.hints", i32 1}
!44 = distinct !{!44, !"dx.controlflow.hints", i32 1}
!45 = distinct !{!45, !"dx.controlflow.hints", i32 1}
!46 = distinct !{!46, !"dx.controlflow.hints", i32 1}
