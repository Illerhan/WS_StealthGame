;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 348286d354119329bb492091b959f130
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(8,8,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       float DiffuseColorBoost;                      ; Offset:   48
;       float SkylightLeaking;                        ; Offset:   52
;       float SkylightLeakingRoughness;               ; Offset:   56
;       float InvFullSkylightLeakingDistance;         ; Offset:   60
;       uint SampleHeightFog;                         ; Offset:   64
;       uint SurfaceCacheFeedbackBufferSize;          ; Offset:  152
;       uint SurfaceCacheFeedbackBufferTileWrapMask;  ; Offset:  156
;       uint2 SurfaceCacheFeedbackBufferTileJitter;   ; Offset:  160
;       float SurfaceCacheFeedbackResLevelBias;       ; Offset:  168
;       uint SurfaceCacheUpdateFrameIndex;            ; Offset:  172
;       uint NumSceneObjects;                         ; Offset:  272
;       uint NumSceneHeightfieldObjects;              ; Offset:  296
;       float3 DistanceFieldBrickSize;                ; Offset:  352
;       float3 DistanceFieldUniqueDataBrickSize;      ; Offset:  368
;       uint3 DistanceFieldBrickAtlasSizeInBricks;    ; Offset:  384
;       uint3 DistanceFieldBrickAtlasMask;            ; Offset:  400
;       uint3 DistanceFieldBrickAtlasSizeLog2;        ; Offset:  416
;       float3 DistanceFieldBrickAtlasTexelSize;      ; Offset:  432
;       float3 DistanceFieldBrickAtlasHalfTexelSize;  ; Offset:  448
;       float3 DistanceFieldBrickOffsetToAtlasUVScale;; Offset:  464
;       float3 DistanceFieldUniqueDataBrickSizeInAtlasTexels;; Offset:  480
;       float MeshSDFNotCoveredExpandSurfaceScale;    ; Offset:  496
;       float MeshSDFNotCoveredMinStepScale;          ; Offset:  500
;       float MeshSDFDitheredTransparencyStepThreshold;; Offset:  504
;       uint CardGridPixelSizeShift;                  ; Offset:  536
;       uint3 CullGridSize;                           ; Offset:  560
;       uint2 InputViewSize;                          ; Offset:  624
;       uint2 InputViewOffset;                        ; Offset:  632
;       uint2 OutputViewSize;                         ; Offset:  640
;       uint2 OutputViewOffset;                       ; Offset:  648
;       uint VisualizeHiResSurface;                   ; Offset:  656
;       int Tonemap;                                  ; Offset:  660
;       uint VisualizeMode;                           ; Offset:  664
;       float VisualizeStepFactor;                    ; Offset:  704
;       float MinTraceDistance;                       ; Offset:  708
;       float MaxTraceDistance;                       ; Offset:  712
;       float MaxMeshSDFTraceDistanceForVoxelTracing; ; Offset:  716
;       float MaxMeshSDFTraceDistance;                ; Offset:  720
;       float CardInterpolateInfluenceRadius;         ; Offset:  724
;       int HeightfieldMaxTracingSteps;               ; Offset:  728
;       float ReprojectionRadiusScale;                ; Offset:  736
;       float InvClipmapFadeSize;                     ; Offset:  748
;       uint2 ProbeAtlasResolutionInProbes;           ; Offset:  752
;       uint RadianceProbeClipmapResolution;          ; Offset:  760
;       uint NumRadianceProbeClipmaps;                ; Offset:  764
;       uint RadianceProbeResolution;                 ; Offset:  768
;       uint FinalProbeResolution;                    ; Offset:  772
;       uint FinalRadianceAtlasMaxMip;                ; Offset:  776
;       uint CalculateIrradiance;                     ; Offset:  780
;       uint IrradianceProbeResolution;               ; Offset:  784
;       uint OcclusionProbeResolution;                ; Offset:  788
;       float4 RadianceProbeSettings[6];              ; Offset:  848
;       float4 PaddedWorldPositionToRadianceProbeCoordBias[6];; Offset:  944
;       float4 PaddedRadianceProbeCoordToWorldPositionBias[6];; Offset: 1040
;       float2 InvProbeFinalRadianceAtlasResolution;  ; Offset: 1136
;       float2 InvProbeFinalIrradianceAtlasResolution;; Offset: 1144
;       float2 InvProbeDepthAtlasResolution;          ; Offset: 1152
;       uint OverrideCacheOcclusionLighting;          ; Offset: 1160
;       uint ShowBlackRadianceCacheLighting;          ; Offset: 1164
;       uint ProbeAtlasResolutionModuloMask;          ; Offset: 1168
;       uint ProbeAtlasResolutionDivideShift;         ; Offset: 1172
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:  1176
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_LumenCardScene
; {
;
;   struct UniformBufferConstants_LumenCardScene
;   {
;
;       uint LumenCardScene_NumCards;                 ; Offset:    0
;       uint LumenCardScene_NumMeshCards;             ; Offset:    4
;       uint LumenCardScene_NumCardPages;             ; Offset:    8
;       uint LumenCardScene_NumHeightfields;          ; Offset:   12
;       uint LumenCardScene_MaxConeSteps;             ; Offset:   16
;       uint PrePadding_LumenCardScene_20;            ; Offset:   20
;       float2 LumenCardScene_PhysicalAtlasSize;      ; Offset:   24
;       float2 LumenCardScene_InvPhysicalAtlasSize;   ; Offset:   32
;       float LumenCardScene_IndirectLightingAtlasDownsampleFactor;; Offset:   40
;       uint LumenCardScene_NumDistantCards;          ; Offset:   44
;       float LumenCardScene_DistantSceneMaxTraceDistance;; Offset:   48
;       float PrePadding_LumenCardScene_52;           ; Offset:   52
;       float PrePadding_LumenCardScene_56;           ; Offset:   56
;       float PrePadding_LumenCardScene_60;           ; Offset:   60
;       float3 LumenCardScene_DistantSceneDirection;  ; Offset:   64
;       float PrePadding_LumenCardScene_76;           ; Offset:   76
;       uint4 LumenCardScene_DistantCardIndices[2];   ; Offset:   80
;       uint BindlessResource_LumenCardScene_CardData;; Offset:  112
;       uint PrePadding_LumenCardScene_116;           ; Offset:  116
;       uint BindlessResource_LumenCardScene_CardPageData;; Offset:  120
;       uint PrePadding_LumenCardScene_124;           ; Offset:  124
;       uint BindlessResource_LumenCardScene_MeshCardsData;; Offset:  128
;       uint PrePadding_LumenCardScene_132;           ; Offset:  132
;       uint BindlessResource_LumenCardScene_HeightfieldData;; Offset:  136
;       uint PrePadding_LumenCardScene_140;           ; Offset:  140
;       uint BindlessResource_LumenCardScene_PageTableBuffer;; Offset:  144
;       uint PrePadding_LumenCardScene_148;           ; Offset:  148
;       uint BindlessResource_LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer;; Offset:  152
;       uint PrePadding_LumenCardScene_156;           ; Offset:  156
;       uint BindlessResource_LumenCardScene_AlbedoAtlas;; Offset:  160
;       uint PrePadding_LumenCardScene_164;           ; Offset:  164
;       uint BindlessResource_LumenCardScene_OpacityAtlas;; Offset:  168
;       uint PrePadding_LumenCardScene_172;           ; Offset:  172
;       uint BindlessResource_LumenCardScene_NormalAtlas;; Offset:  176
;       uint PrePadding_LumenCardScene_180;           ; Offset:  180
;       uint BindlessResource_LumenCardScene_EmissiveAtlas;; Offset:  184
;       uint PrePadding_LumenCardScene_188;           ; Offset:  188
;       uint BindlessResource_LumenCardScene_DepthAtlas;; Offset:  192
;   
;   } UniformBufferConstants_LumenCardScene;          ; Offset:    0 Size:   196
;
; }
;
; cbuffer UniformBufferConstants_FogStruct
; {
;
;   struct UniformBufferConstants_FogStruct
;   {
;
;       float4 FogStruct_ExponentialFogParameters;    ; Offset:    0
;       float4 FogStruct_ExponentialFogParameters2;   ; Offset:   16
;       float4 FogStruct_ExponentialFogColorParameter;; Offset:   32
;       float4 FogStruct_ExponentialFogParameters3;   ; Offset:   48
;       float4 FogStruct_SkyAtmosphereAmbientContributionColorScale;; Offset:   64
;       float4 FogStruct_InscatteringLightDirection;  ; Offset:   80
;       float4 FogStruct_DirectionalInscatteringColor;; Offset:   96
;       float2 FogStruct_SinCosInscatteringColorCubemapRotation;; Offset:  112
;       float PrePadding_FogStruct_120;               ; Offset:  120
;       float PrePadding_FogStruct_124;               ; Offset:  124
;       float3 FogStruct_FogInscatteringTextureParameters;; Offset:  128
;       float FogStruct_ApplyVolumetricFog;           ; Offset:  140
;       float FogStruct_VolumetricFogStartDistance;   ; Offset:  144
;       float FogStruct_VolumetricFogNearFadeInDistanceInv;; Offset:  148
;       uint BindlessResource_FogStruct_FogInscatteringColorCubemap;; Offset:  152
;       uint PrePadding_FogStruct_156;                ; Offset:  156
;       uint BindlessSampler_FogStruct_FogInscatteringColorSampler;; Offset:  160
;       uint PrePadding_FogStruct_164;                ; Offset:  164
;       uint BindlessResource_FogStruct_IntegratedLightScattering;; Offset:  168
;       uint PrePadding_FogStruct_172;                ; Offset:  172
;       uint BindlessSampler_FogStruct_IntegratedLightScatteringSampler;; Offset:  176
;   
;   } UniformBufferConstants_FogStruct;               ; Offset:    0 Size:   180
;
; }
;
; Resource bind info for LumenCardScene_CardData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for LumenCardScene_CardPageData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for LumenCardScene_MeshCardsData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for LumenCardScene_HeightfieldData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for ProbeWorldOffset
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for EyeAdaptationBuffer
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for RWCardPageLastUsedBuffer
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for RWCardPageHighResLastUsedBuffer
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for RWSurfaceCacheFeedbackBufferAllocator
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for RWSurfaceCacheFeedbackBuffer
; {
;
;   uint2 $Element;                                   ; Offset:    0 Size:     8
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_LumenCardScene   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_FogStruct   cbuffer      NA          NA     CB3            cb3     1
; D3DStaticPointClampedSampler      sampler      NA          NA      S0   s1,space1000     1
; D3DStaticBilinearClampedSampler   sampler      NA          NA      S1   s3,space1000     1
; View_DistantSkyLightLutTextureSampler   sampler      NA          NA      S2             s0     1
; FogStruct_FogInscatteringColorSampler   sampler      NA          NA      S3             s1     1
; ColorGradingLUTSampler            sampler      NA          NA      S4             s2     1
; View_DistantSkyLightLutTexture    texture     f32          2d      T0             t0     1
; LumenCardScene_CardData           texture  struct         r/o      T1             t1     1
; LumenCardScene_CardPageData       texture  struct         r/o      T2             t2     1
; LumenCardScene_MeshCardsData      texture  struct         r/o      T3             t3     1
; LumenCardScene_HeightfieldData    texture  struct         r/o      T4             t4     1
; LumenCardScene_PageTableBuffer    texture    byte         r/o      T5             t5     1
; LumenCardScene_OpacityAtlas       texture     f32          2d      T6             t6     1
; LumenCardScene_DepthAtlas         texture     f32          2d      T7             t7     1
; FogStruct_FogInscatteringColorCubemap   texture     f32        cube      T8             t8     1
; DirectLightingAtlas               texture     f32          2d      T9             t9     1
; IndirectLightingAtlas             texture     f32          2d     T10            t10     1
; FinalLightingAtlas                texture     f32          2d     T11            t11     1
; AlbedoAtlas                       texture     f32          2d     T12            t12     1
; OpacityAtlas                      texture     f32          2d     T13            t13     1
; NormalAtlas                       texture     f32          2d     T14            t14     1
; EmissiveAtlas                     texture     f32          2d     T15            t15     1
; DepthAtlas                        texture     f32          2d     T16            t16     1
; NumGridCulledHeightfieldObjects   texture     u32         buf     T17            t17     1
; GridCulledHeightfieldObjectStartOffsetArray   texture     u32         buf     T18            t18     1
; GridCulledHeightfieldObjectIndicesArray   texture     u32         buf     T19            t19     1
; RadianceProbeIndirectionTexture   texture     u32          3d     T20            t20     1
; RadianceCacheFinalRadianceAtlas   texture     f32          2d     T21            t21     1
; ProbeWorldOffset                  texture  struct         r/o     T22            t22     1
; EyeAdaptationBuffer               texture  struct         r/o     T23            t23     1
; ColorGradingLUT                   texture     f32          3d     T24            t24     1
; RWCardPageLastUsedBuffer              UAV  struct         r/w      U0             u0     1
; RWCardPageHighResLastUsedBuffer       UAV  struct         r/w      U1             u1     1
; RWSurfaceCacheFeedbackBufferAllocator       UAV  struct         r/w      U2             u2     1
; RWSurfaceCacheFeedbackBuffer          UAV  struct         r/w      U3             u3     1
; RWSceneColor                          UAV     f32          2d      U4             u4     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%struct.ByteAddressBuffer = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.Texture3D<unsigned int>" = type { i32, %"class.Texture3D<unsigned int>::mips_type" }
%"class.Texture3D<unsigned int>::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 3> >" = type { <3 x float>, %"class.Texture2D<vector<float, 3> >::mips_type" }
%"class.Texture2D<vector<float, 3> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.RWStructuredBuffer<unsigned int>" = type { i32 }
%"class.RWStructuredBuffer<vector<unsigned int, 2> >" = type { <2 x i32> }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }
%_RootShaderParameters = type { float, float, float, float, i32, i32, i32, <2 x i32>, float, i32, i32, i32, <3 x float>, <3 x float>, <3 x i32>, <3 x i32>, <3 x i32>, <3 x float>, <3 x float>, <3 x float>, <3 x float>, float, float, float, i32, <3 x i32>, <2 x i32>, <2 x i32>, <2 x i32>, <2 x i32>, i32, i32, i32, float, float, float, float, float, float, i32, float, float, <2 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_LumenCardScene = type { i32, i32, i32, i32, i32, i32, <2 x float>, <2 x float>, float, i32, float, float, float, float, <3 x float>, float, [2 x <4 x i32>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_FogStruct = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @VisualizeQuadsCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 1 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 1 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 1 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 1 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 24, i32 24, i32 0, i8 0 }, i32 24, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 23, i32 23, i32 0, i8 0 }, i32 23, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 22, i32 22, i32 0, i8 0 }, i32 22, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 0 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 1000, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 1000, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %36 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %37 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %38 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %39 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %40 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 13, i32 180 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %41 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 13, i32 196 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %42 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %38, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %43 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %39, %dx.types.ResourceProperties { i32 13, i32 1176 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %44 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %45 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %46 = alloca [6 x i32], align 4
  %47 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 40)  ; CBufferLoadLegacy(handle,regIndex)
  %48 = extractvalue %dx.types.CBufRet.i32 %47, 2
  %49 = extractvalue %dx.types.CBufRet.i32 %47, 3
  %50 = add i32 %48, %44
  %51 = add i32 %49, %45
  %52 = uitofp i32 %44 to float
  %53 = uitofp i32 %45 to float
  %54 = fadd fast float %52, 5.000000e-01
  %55 = fadd fast float %53, 5.000000e-01
  %56 = extractvalue %dx.types.CBufRet.i32 %47, 0
  %57 = extractvalue %dx.types.CBufRet.i32 %47, 1
  %58 = uitofp i32 %56 to float
  %59 = uitofp i32 %57 to float
  %60 = fdiv fast float %54, %58
  %61 = fdiv fast float %55, %59
  %62 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 39)  ; CBufferLoadLegacy(handle,regIndex)
  %63 = extractvalue %dx.types.CBufRet.i32 %62, 0
  %64 = extractvalue %dx.types.CBufRet.i32 %62, 1
  %65 = uitofp i32 %63 to float
  %66 = uitofp i32 %64 to float
  %67 = fmul fast float %65, %60
  %68 = fmul fast float %66, %61
  %69 = extractvalue %dx.types.CBufRet.i32 %62, 2
  %70 = extractvalue %dx.types.CBufRet.i32 %62, 3
  %71 = uitofp i32 %69 to float
  %72 = uitofp i32 %70 to float
  %73 = fadd fast float %67, %71
  %74 = fadd fast float %68, %72
  %75 = fptoui float %73 to i32
  %76 = fptoui float %74 to i32
  %77 = icmp uge i32 %44, %56
  %78 = icmp uge i32 %45, %57
  %79 = or i1 %77, %78
  br i1 %79, label %3276, label %80

; <label>:80                                      ; preds = %0
  %81 = fmul fast float %60, 2.000000e+00
  %82 = fmul fast float %61, 2.000000e+00
  %83 = fadd fast float %81, -1.000000e+00
  %84 = fsub fast float 1.000000e+00, %82
  %85 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 56)  ; CBufferLoadLegacy(handle,regIndex)
  %86 = extractvalue %dx.types.CBufRet.f32 %85, 0
  %87 = extractvalue %dx.types.CBufRet.f32 %85, 1
  %88 = extractvalue %dx.types.CBufRet.f32 %85, 2
  %89 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 57)  ; CBufferLoadLegacy(handle,regIndex)
  %90 = extractvalue %dx.types.CBufRet.f32 %89, 0
  %91 = extractvalue %dx.types.CBufRet.f32 %89, 1
  %92 = extractvalue %dx.types.CBufRet.f32 %89, 2
  %93 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 58)  ; CBufferLoadLegacy(handle,regIndex)
  %94 = extractvalue %dx.types.CBufRet.f32 %93, 0
  %95 = extractvalue %dx.types.CBufRet.f32 %93, 1
  %96 = extractvalue %dx.types.CBufRet.f32 %93, 2
  %97 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %98 = extractvalue %dx.types.CBufRet.f32 %97, 0
  %99 = extractvalue %dx.types.CBufRet.f32 %97, 1
  %100 = fadd fast float %83, %98
  %101 = fadd fast float %99, %84
  %102 = fmul fast float %100, %86
  %103 = call float @dx.op.tertiary.f32(i32 46, float %101, float %90, float %102)  ; FMad(a,b,c)
  %104 = fadd fast float %103, %94
  %105 = fmul fast float %100, %87
  %106 = call float @dx.op.tertiary.f32(i32 46, float %101, float %91, float %105)  ; FMad(a,b,c)
  %107 = fadd fast float %106, %95
  %108 = fmul fast float %100, %88
  %109 = call float @dx.op.tertiary.f32(i32 46, float %101, float %92, float %108)  ; FMad(a,b,c)
  %110 = fadd fast float %109, %96
  %111 = call float @dx.op.dot3.f32(i32 55, float %104, float %107, float %110, float %104, float %107, float %110)  ; Dot3(ax,ay,az,bx,by,bz)
  %112 = call float @dx.op.unary.f32(i32 25, float %111)  ; Rsqrt(value)
  %113 = fmul fast float %112, %104
  %114 = fmul fast float %112, %107
  %115 = fmul fast float %112, %110
  %116 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 237)  ; CBufferLoadLegacy(handle,regIndex)
  %117 = extractvalue %dx.types.CBufRet.f32 %116, 0
  %118 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 44)  ; CBufferLoadLegacy(handle,regIndex)
  %119 = extractvalue %dx.types.CBufRet.f32 %118, 2
  %120 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %121 = extractvalue %dx.types.CBufRet.f32 %120, 0
  %122 = extractvalue %dx.types.CBufRet.f32 %120, 1
  %123 = extractvalue %dx.types.CBufRet.f32 %120, 2
  %124 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %125 = extractvalue %dx.types.CBufRet.f32 %124, 0
  %126 = extractvalue %dx.types.CBufRet.f32 %124, 1
  %127 = extractvalue %dx.types.CBufRet.f32 %124, 2
  %128 = fmul fast float %121, 2.097152e+06
  %129 = fmul fast float %122, 2.097152e+06
  %130 = fmul fast float %123, 2.097152e+06
  %131 = fadd fast float %128, %125
  %132 = fadd fast float %129, %126
  %133 = fadd fast float %130, %127
  %134 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 47)  ; CBufferLoadLegacy(handle,regIndex)
  %135 = extractvalue %dx.types.CBufRet.i32 %134, 3
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %191, label %137

; <label>:137                                     ; preds = %80
  br label %138

; <label>:138                                     ; preds = %186, %137
  %139 = phi i32 [ %187, %186 ], [ 0, %137 ]
  %140 = add i32 %139, 53
  %141 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 %140)  ; CBufferLoadLegacy(handle,regIndex)
  %142 = extractvalue %dx.types.CBufRet.f32 %141, 1
  %143 = fmul fast float %142, %131
  %144 = fmul fast float %142, %132
  %145 = fmul fast float %142, %133
  %146 = add i32 %139, 59
  %147 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 %146)  ; CBufferLoadLegacy(handle,regIndex)
  %148 = extractvalue %dx.types.CBufRet.f32 %147, 0
  %149 = extractvalue %dx.types.CBufRet.f32 %147, 1
  %150 = extractvalue %dx.types.CBufRet.f32 %147, 2
  %151 = fadd fast float %143, %148
  %152 = fadd fast float %144, %149
  %153 = fadd fast float %145, %150
  %154 = fadd fast float %151, -5.000000e-01
  %155 = fadd fast float %152, -5.000000e-01
  %156 = fadd fast float %153, -5.000000e-01
  %157 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 46)  ; CBufferLoadLegacy(handle,regIndex)
  %158 = extractvalue %dx.types.CBufRet.f32 %157, 3
  %159 = fmul fast float %154, %158
  %160 = fmul fast float %155, %158
  %161 = fmul fast float %156, %158
  %162 = call float @dx.op.unary.f32(i32 7, float %159)  ; Saturate(value)
  %163 = call float @dx.op.unary.f32(i32 7, float %160)  ; Saturate(value)
  %164 = call float @dx.op.unary.f32(i32 7, float %161)  ; Saturate(value)
  %165 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 47)  ; CBufferLoadLegacy(handle,regIndex)
  %166 = extractvalue %dx.types.CBufRet.i32 %165, 2
  %167 = uitofp i32 %166 to float
  %168 = fsub fast float -5.000000e-01, %151
  %169 = fadd fast float %168, %167
  %170 = fsub fast float -5.000000e-01, %152
  %171 = fadd fast float %170, %167
  %172 = fsub fast float -5.000000e-01, %153
  %173 = fadd fast float %172, %167
  %174 = fmul fast float %169, %158
  %175 = fmul fast float %171, %158
  %176 = fmul fast float %173, %158
  %177 = call float @dx.op.unary.f32(i32 7, float %174)  ; Saturate(value)
  %178 = call float @dx.op.unary.f32(i32 7, float %175)  ; Saturate(value)
  %179 = call float @dx.op.unary.f32(i32 7, float %176)  ; Saturate(value)
  %180 = call float @dx.op.binary.f32(i32 36, float %178, float %179)  ; FMin(a,b)
  %181 = call float @dx.op.binary.f32(i32 36, float %177, float %180)  ; FMin(a,b)
  %182 = call float @dx.op.binary.f32(i32 36, float %163, float %164)  ; FMin(a,b)
  %183 = call float @dx.op.binary.f32(i32 36, float %162, float %182)  ; FMin(a,b)
  %184 = call float @dx.op.binary.f32(i32 36, float %183, float %181)  ; FMin(a,b)
  %185 = fcmp fast ogt float %184, 5.000000e-01
  br i1 %185, label %194, label %186

; <label>:186                                     ; preds = %138
  %187 = add i32 %139, 1
  %188 = extractvalue %dx.types.CBufRet.i32 %165, 3
  %189 = icmp ult i32 %187, %188
  br i1 %189, label %138, label %190

; <label>:190                                     ; preds = %186
  br label %191

; <label>:191                                     ; preds = %190, %80
  %192 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 47)  ; CBufferLoadLegacy(handle,regIndex)
  %193 = extractvalue %dx.types.CBufRet.i32 %192, 3
  br label %195

; <label>:194                                     ; preds = %138
  br label %195

; <label>:195                                     ; preds = %194, %191
  %196 = phi i32 [ %193, %191 ], [ %139, %194 ]
  %197 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 47)  ; CBufferLoadLegacy(handle,regIndex)
  %198 = extractvalue %dx.types.CBufRet.i32 %197, 3
  %199 = icmp ult i32 %196, %198
  br i1 %199, label %200, label %207

; <label>:200                                     ; preds = %195
  %201 = add i32 %196, 53
  %202 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 %201)  ; CBufferLoadLegacy(handle,regIndex)
  %203 = extractvalue %dx.types.CBufRet.f32 %202, 2
  %204 = fmul fast float %203, 0x3FFBB67AE0000000
  %205 = extractvalue %dx.types.CBufRet.f32 %202, 0
  %206 = fadd fast float %205, %204
  br label %207

; <label>:207                                     ; preds = %200, %195
  %208 = phi i1 [ true, %200 ], [ false, %195 ]
  %209 = phi float [ %206, %200 ], [ 1.000000e+07, %195 ]
  br i1 %208, label %210, label %212

; <label>:210                                     ; preds = %207
  %211 = call float @dx.op.binary.f32(i32 36, float %119, float %209)  ; FMin(a,b)
  br label %212

; <label>:212                                     ; preds = %210, %207
  %213 = phi float [ %211, %210 ], [ %119, %207 ]
  %214 = extractvalue %dx.types.CBufRet.f32 %118, 0
  %215 = extractvalue %dx.types.CBufRet.f32 %118, 1
  %216 = call float @dx.op.unary.f32(i32 14, float %117)  ; Tan(value)
  %217 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %218 = extractvalue %dx.types.CBufRet.i32 %217, 0
  %219 = icmp ne i32 %218, 0
  %220 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %42, i32 226)  ; CBufferLoadLegacy(handle,regIndex)
  %221 = extractvalue %dx.types.CBufRet.i32 %220, 2
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %227, label %223

; <label>:223                                     ; preds = %212
  %224 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 45)  ; CBufferLoadLegacy(handle,regIndex)
  %225 = extractvalue %dx.types.CBufRet.f32 %224, 0
  %226 = call float @dx.op.binary.f32(i32 35, float %215, float %225)  ; FMax(a,b)
  br label %227

; <label>:227                                     ; preds = %223, %212
  %228 = phi float [ %226, %223 ], [ %213, %212 ]
  %229 = call float @dx.op.binary.f32(i32 36, float %228, float %213)  ; FMin(a,b)
  %230 = sub i32 %75, %69
  %231 = sub i32 %76, %70
  %232 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 129)  ; CBufferLoadLegacy(handle,regIndex)
  %233 = extractvalue %dx.types.CBufRet.f32 %232, 0
  %234 = extractvalue %dx.types.CBufRet.f32 %232, 1
  %235 = fptosi float %233 to i32
  %236 = fptosi float %234 to i32
  %237 = mul i32 %235, %230
  %238 = mul i32 %236, %231
  %239 = udiv i32 %237, %63
  %240 = udiv i32 %238, %64
  %241 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %242 = extractvalue %dx.types.CBufRet.i32 %241, 0
  %243 = extractvalue %dx.types.CBufRet.i32 %241, 1
  %244 = add i32 %242, -1
  %245 = add i32 %243, -1
  %246 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %247 = extractvalue %dx.types.CBufRet.i32 %246, 2
  %248 = and i32 %247, 31
  %249 = ashr i32 %239, %248
  %250 = ashr i32 %240, %248
  %251 = call i32 @dx.op.binary.i32(i32 37, i32 %249, i32 0)  ; IMax(a,b)
  %252 = call i32 @dx.op.binary.i32(i32 37, i32 %250, i32 0)  ; IMax(a,b)
  %253 = call i32 @dx.op.binary.i32(i32 38, i32 %251, i32 %244)  ; IMin(a,b)
  %254 = call i32 @dx.op.binary.i32(i32 38, i32 %252, i32 %245)  ; IMin(a,b)
  %255 = mul i32 %242, %254
  %256 = add i32 %255, %253
  %257 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %258 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %257, i32 %256, i32 undef)  ; BufferLoad(srv,index,wot)
  %259 = extractvalue %dx.types.ResRet.i32 %258, 0
  %260 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %261 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %260, i32 %256, i32 undef)  ; BufferLoad(srv,index,wot)
  %262 = extractvalue %dx.types.ResRet.i32 %261, 0
  %263 = fcmp fast ogt float %229, %215
  br i1 %263, label %264, label %1808

; <label>:264                                     ; preds = %227
  %265 = call float @dx.op.binary.f32(i32 36, float %229, float %213)  ; FMin(a,b)
  %266 = icmp eq i32 %259, 0
  br i1 %266, label %962, label %267

; <label>:267                                     ; preds = %264
  br label %268

; <label>:268                                     ; preds = %947, %267
  %269 = phi float [ %956, %947 ], [ %265, %267 ]
  %270 = phi i32 [ %957, %947 ], [ 0, %267 ]
  %271 = phi i32 [ %958, %947 ], [ 0, %267 ]
  %272 = phi i32 [ %959, %947 ], [ 0, %267 ]
  %273 = add i32 %272, %262
  %274 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %275 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %274, i32 %273, i32 undef)  ; BufferLoad(srv,index,wot)
  %276 = extractvalue %dx.types.ResRet.i32 %275, 0
  %277 = mul i32 %276, 3
  %278 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %279 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %278, i32 %277, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %280 = extractvalue %dx.types.ResRet.f32 %279, 3
  %281 = bitcast float %280 to i32
  %282 = mul i32 %281, 7
  %283 = add i32 %282, 3
  %284 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %285 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %284, i32 %283, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %286 = extractvalue %dx.types.ResRet.f32 %285, 0
  %287 = bitcast float %286 to i32
  %288 = mul i32 %287, 9
  %289 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %290 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %289, i32 %288, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %291 = extractvalue %dx.types.ResRet.f32 %290, 0
  %292 = extractvalue %dx.types.ResRet.f32 %290, 1
  %293 = extractvalue %dx.types.ResRet.f32 %290, 2
  %294 = extractvalue %dx.types.ResRet.f32 %290, 3
  %295 = add i32 %288, 1
  %296 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %289, i32 %295, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %297 = extractvalue %dx.types.ResRet.f32 %296, 0
  %298 = extractvalue %dx.types.ResRet.f32 %296, 1
  %299 = extractvalue %dx.types.ResRet.f32 %296, 2
  %300 = extractvalue %dx.types.ResRet.f32 %296, 3
  %301 = add i32 %288, 2
  %302 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %289, i32 %301, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %303 = extractvalue %dx.types.ResRet.f32 %302, 0
  %304 = extractvalue %dx.types.ResRet.f32 %302, 1
  %305 = extractvalue %dx.types.ResRet.f32 %302, 2
  %306 = extractvalue %dx.types.ResRet.f32 %302, 3
  %307 = add i32 %288, 3
  %308 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %289, i32 %307, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %309 = extractvalue %dx.types.ResRet.f32 %308, 0
  %310 = extractvalue %dx.types.ResRet.f32 %308, 1
  %311 = extractvalue %dx.types.ResRet.f32 %308, 2
  %312 = add i32 %288, 4
  %313 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %289, i32 %312, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %314 = extractvalue %dx.types.ResRet.f32 %313, 0
  %315 = extractvalue %dx.types.ResRet.f32 %313, 1
  %316 = add i32 %288, 8
  %317 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %289, i32 %316, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %318 = extractvalue %dx.types.ResRet.f32 %317, 3
  %319 = call float @dx.op.unary.f32(i32 6, float %309)  ; FAbs(value)
  %320 = call float @dx.op.unary.f32(i32 6, float %310)  ; FAbs(value)
  %321 = call float @dx.op.unary.f32(i32 6, float %311)  ; FAbs(value)
  %322 = bitcast float %314 to i32
  %323 = and i32 %322, 65535
  %324 = lshr i32 %322, 16
  %325 = bitcast float %315 to i32
  %326 = fsub fast float %131, %294
  %327 = fsub fast float %132, %300
  %328 = fsub fast float %133, %306
  %329 = fmul fast float %326, %291
  %330 = call float @dx.op.tertiary.f32(i32 46, float %327, float %297, float %329)  ; FMad(a,b,c)
  %331 = call float @dx.op.tertiary.f32(i32 46, float %328, float %303, float %330)  ; FMad(a,b,c)
  %332 = fmul fast float %326, %292
  %333 = call float @dx.op.tertiary.f32(i32 46, float %327, float %298, float %332)  ; FMad(a,b,c)
  %334 = call float @dx.op.tertiary.f32(i32 46, float %328, float %304, float %333)  ; FMad(a,b,c)
  %335 = fmul fast float %326, %293
  %336 = call float @dx.op.tertiary.f32(i32 46, float %327, float %299, float %335)  ; FMad(a,b,c)
  %337 = call float @dx.op.tertiary.f32(i32 46, float %328, float %305, float %336)  ; FMad(a,b,c)
  %338 = fmul fast float %291, %113
  %339 = call float @dx.op.tertiary.f32(i32 46, float %114, float %297, float %338)  ; FMad(a,b,c)
  %340 = call float @dx.op.tertiary.f32(i32 46, float %115, float %303, float %339)  ; FMad(a,b,c)
  %341 = fmul fast float %292, %113
  %342 = call float @dx.op.tertiary.f32(i32 46, float %114, float %298, float %341)  ; FMad(a,b,c)
  %343 = call float @dx.op.tertiary.f32(i32 46, float %115, float %304, float %342)  ; FMad(a,b,c)
  %344 = fmul fast float %293, %113
  %345 = call float @dx.op.tertiary.f32(i32 46, float %114, float %299, float %344)  ; FMad(a,b,c)
  %346 = call float @dx.op.tertiary.f32(i32 46, float %115, float %305, float %345)  ; FMad(a,b,c)
  %347 = fmul fast float %340, %265
  %348 = fmul fast float %343, %265
  %349 = fmul fast float %346, %265
  %350 = fsub fast float -0.000000e+00, %319
  %351 = fsub fast float -0.000000e+00, %320
  %352 = fsub fast float -0.000000e+00, %321
  %353 = fdiv fast float 1.000000e+00, %347
  %354 = fdiv fast float 1.000000e+00, %348
  %355 = fdiv fast float 1.000000e+00, %349
  %356 = fsub fast float %350, %331
  %357 = fsub fast float %351, %334
  %358 = fsub fast float %352, %337
  %359 = fmul fast float %353, %356
  %360 = fmul fast float %354, %357
  %361 = fmul fast float %355, %358
  %362 = fsub fast float %319, %331
  %363 = fsub fast float %320, %334
  %364 = fsub fast float %321, %337
  %365 = fmul fast float %353, %362
  %366 = fmul fast float %354, %363
  %367 = fmul fast float %355, %364
  %368 = call float @dx.op.binary.f32(i32 36, float %359, float %365)  ; FMin(a,b)
  %369 = call float @dx.op.binary.f32(i32 36, float %360, float %366)  ; FMin(a,b)
  %370 = call float @dx.op.binary.f32(i32 36, float %361, float %367)  ; FMin(a,b)
  %371 = call float @dx.op.binary.f32(i32 35, float %359, float %365)  ; FMax(a,b)
  %372 = call float @dx.op.binary.f32(i32 35, float %360, float %366)  ; FMax(a,b)
  %373 = call float @dx.op.binary.f32(i32 35, float %361, float %367)  ; FMax(a,b)
  %374 = call float @dx.op.binary.f32(i32 35, float %369, float %370)  ; FMax(a,b)
  %375 = call float @dx.op.binary.f32(i32 35, float %368, float %374)  ; FMax(a,b)
  %376 = call float @dx.op.binary.f32(i32 36, float %372, float %373)  ; FMin(a,b)
  %377 = call float @dx.op.binary.f32(i32 36, float %371, float %376)  ; FMin(a,b)
  %378 = call float @dx.op.unary.f32(i32 7, float %375)  ; Saturate(value)
  %379 = call float @dx.op.unary.f32(i32 7, float %377)  ; Saturate(value)
  %380 = fmul fast float %347, %347
  %381 = fmul fast float %348, %348
  %382 = fadd fast float %381, %380
  %383 = fmul fast float %349, %349
  %384 = fadd fast float %382, %383
  %385 = call float @dx.op.unary.f32(i32 24, float %384)  ; Sqrt(value)
  %386 = fmul fast float %385, %378
  %387 = fmul fast float %385, %379
  %388 = call float @dx.op.binary.f32(i32 35, float %386, float %215)  ; FMax(a,b)
  %389 = call float @dx.op.binary.f32(i32 36, float %387, float %265)  ; FMin(a,b)
  %390 = fcmp fast olt float %388, %389
  br i1 %390, label %391, label %947

; <label>:391                                     ; preds = %268
  %392 = extractvalue %dx.types.ResRet.f32 %308, 3
  %393 = bitcast float %392 to i32
  %394 = and i32 %393, 16777216
  %395 = icmp eq i32 %394, 0
  br i1 %395, label %947, label %396

; <label>:396                                     ; preds = %391
  %397 = fmul fast float %388, %340
  %398 = fmul fast float %388, %343
  %399 = fmul fast float %388, %346
  %400 = fadd fast float %397, %331
  %401 = fadd fast float %398, %334
  %402 = fadd fast float %399, %337
  %403 = fdiv fast float %400, %319
  %404 = fdiv fast float %401, %320
  %405 = fmul fast float %403, 5.000000e-01
  %406 = fmul fast float %404, 5.000000e-01
  %407 = fadd fast float %405, 5.000000e-01
  %408 = fsub fast float 5.000000e-01, %406
  %409 = call float @dx.op.unary.f32(i32 7, float %407)  ; Saturate(value)
  %410 = call float @dx.op.unary.f32(i32 7, float %408)  ; Saturate(value)
  %411 = call float @dx.op.binary.f32(i32 36, float %409, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %412 = call float @dx.op.binary.f32(i32 36, float %410, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %413 = uitofp i32 %323 to float
  %414 = uitofp i32 %324 to float
  %415 = fmul fast float %411, %413
  %416 = fmul fast float %412, %414
  %417 = fptoui float %415 to i32
  %418 = fptoui float %416 to i32
  %419 = mul i32 %418, %323
  %420 = add i32 %417, %325
  %421 = add i32 %420, %419
  %422 = shl i32 %421, 3
  %423 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %424 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %423, i32 %422, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %425 = extractvalue %dx.types.ResRet.i32 %424, 0
  %426 = shl i32 %425, 3
  %427 = and i32 %426, 32760
  %428 = lshr i32 %425, 9
  %429 = and i32 %428, 32760
  %430 = lshr i32 %425, 24
  %431 = and i32 %430, 15
  %432 = lshr i32 %425, 28
  %433 = add nuw nsw i32 %431, 25
  %434 = add nuw nsw i32 %432, 25
  %435 = and i32 %433, 31
  %436 = and i32 %434, 31
  %437 = shl i32 1, %435
  %438 = shl i32 1, %436
  %439 = icmp ugt i32 %431, 7
  %440 = icmp slt i32 %425, 0
  %441 = select i1 %439, i32 %437, i32 1
  %442 = select i1 %440, i32 %438, i32 1
  %443 = uitofp i32 %441 to float
  %444 = uitofp i32 %442 to float
  %445 = fmul fast float %443, %411
  %446 = fmul fast float %444, %412
  %447 = fptoui float %445 to i32
  %448 = fptoui float %446 to i32
  %449 = shl i32 1, %431
  %450 = shl i32 1, %432
  %451 = call float @dx.op.unary.f32(i32 22, float %445)  ; Frc(value)
  %452 = call float @dx.op.unary.f32(i32 22, float %446)  ; Frc(value)
  %453 = icmp eq i32 %447, 0
  %454 = icmp eq i32 %448, 0
  %455 = select i1 %453, float 0.000000e+00, float 5.000000e-01
  %456 = select i1 %454, float 0.000000e+00, float 5.000000e-01
  %457 = add i32 %447, 1
  %458 = add i32 %448, 1
  %459 = icmp eq i32 %457, %441
  %460 = icmp eq i32 %458, %442
  %461 = uitofp i32 %449 to float
  %462 = select i1 %439, float 1.280000e+02, float %461
  %463 = uitofp i32 %450 to float
  %464 = select i1 %440, float 1.280000e+02, float %463
  %465 = fsub fast float %462, %455
  %466 = fsub fast float %464, %456
  %467 = select i1 %459, float -0.000000e+00, float -5.000000e-01
  %468 = fadd fast float %465, %467
  %469 = select i1 %460, float -0.000000e+00, float -5.000000e-01
  %470 = fadd fast float %466, %469
  %471 = fmul fast float %468, %451
  %472 = fmul fast float %470, %452
  %473 = fadd fast float %471, %455
  %474 = fadd fast float %472, %456
  %475 = fadd fast float %462, -1.500000e+00
  %476 = fadd fast float %464, -1.500000e+00
  %477 = call float @dx.op.binary.f32(i32 35, float %473, float 5.000000e-01)  ; FMax(a,b)
  %478 = call float @dx.op.binary.f32(i32 35, float %474, float 5.000000e-01)  ; FMax(a,b)
  %479 = call float @dx.op.binary.f32(i32 36, float %477, float %475)  ; FMin(a,b)
  %480 = call float @dx.op.binary.f32(i32 36, float %478, float %476)  ; FMin(a,b)
  %481 = uitofp i32 %427 to float
  %482 = uitofp i32 %429 to float
  %483 = fadd fast float %479, %481
  %484 = fadd fast float %480, %482
  %485 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %486 = extractvalue %dx.types.CBufRet.f32 %485, 0
  %487 = extractvalue %dx.types.CBufRet.f32 %485, 1
  %488 = fmul fast float %486, %483
  %489 = fmul fast float %487, %484
  %490 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %491 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %492 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %490, %dx.types.Handle %491, float %488, float %489, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %493 = extractvalue %dx.types.ResRet.f32 %492, 0
  %494 = fmul fast float %493, 2.000000e+00
  %495 = fadd fast float %494, -1.000000e+00
  %496 = fmul fast float %495, %321
  %497 = fsub fast float -0.000000e+00, %496
  %498 = fcmp fast ogt float %402, %497
  %499 = zext i1 %498 to i32
  %500 = fcmp fast olt float %388, %318
  br i1 %500, label %501, label %701

; <label>:501                                     ; preds = %396
  %502 = fmul fast float %340, %318
  %503 = fmul fast float %343, %318
  %504 = fmul fast float %346, %318
  %505 = fadd fast float %502, %331
  %506 = fadd fast float %503, %334
  %507 = fadd fast float %504, %337
  %508 = fdiv fast float %505, %319
  %509 = fdiv fast float %506, %320
  %510 = fmul fast float %508, 5.000000e-01
  %511 = fmul fast float %509, 5.000000e-01
  %512 = fadd fast float %510, 5.000000e-01
  %513 = fsub fast float 5.000000e-01, %511
  %514 = call float @dx.op.unary.f32(i32 7, float %512)  ; Saturate(value)
  %515 = call float @dx.op.unary.f32(i32 7, float %513)  ; Saturate(value)
  %516 = call float @dx.op.binary.f32(i32 36, float %514, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %517 = call float @dx.op.binary.f32(i32 36, float %515, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %518 = fmul fast float %516, %413
  %519 = fmul fast float %517, %414
  %520 = fptoui float %518 to i32
  %521 = fptoui float %519 to i32
  %522 = mul i32 %521, %323
  %523 = add i32 %520, %325
  %524 = add i32 %523, %522
  %525 = shl i32 %524, 3
  %526 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %423, i32 %525, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %527 = extractvalue %dx.types.ResRet.i32 %526, 0
  %528 = shl i32 %527, 3
  %529 = and i32 %528, 32760
  %530 = lshr i32 %527, 9
  %531 = and i32 %530, 32760
  %532 = lshr i32 %527, 24
  %533 = and i32 %532, 15
  %534 = lshr i32 %527, 28
  %535 = add nuw nsw i32 %533, 25
  %536 = add nuw nsw i32 %534, 25
  %537 = and i32 %535, 31
  %538 = and i32 %536, 31
  %539 = shl i32 1, %537
  %540 = shl i32 1, %538
  %541 = icmp ugt i32 %533, 7
  %542 = icmp slt i32 %527, 0
  %543 = select i1 %541, i32 %539, i32 1
  %544 = select i1 %542, i32 %540, i32 1
  %545 = uitofp i32 %543 to float
  %546 = uitofp i32 %544 to float
  %547 = fmul fast float %545, %516
  %548 = fmul fast float %546, %517
  %549 = fptoui float %547 to i32
  %550 = fptoui float %548 to i32
  %551 = shl i32 1, %533
  %552 = shl i32 1, %534
  %553 = call float @dx.op.unary.f32(i32 22, float %547)  ; Frc(value)
  %554 = call float @dx.op.unary.f32(i32 22, float %548)  ; Frc(value)
  %555 = icmp eq i32 %549, 0
  %556 = icmp eq i32 %550, 0
  %557 = select i1 %555, float 0.000000e+00, float 5.000000e-01
  %558 = select i1 %556, float 0.000000e+00, float 5.000000e-01
  %559 = add i32 %549, 1
  %560 = add i32 %550, 1
  %561 = icmp eq i32 %559, %543
  %562 = icmp eq i32 %560, %544
  %563 = uitofp i32 %551 to float
  %564 = select i1 %541, float 1.280000e+02, float %563
  %565 = uitofp i32 %552 to float
  %566 = select i1 %542, float 1.280000e+02, float %565
  %567 = fsub fast float %564, %557
  %568 = fsub fast float %566, %558
  %569 = select i1 %561, float -0.000000e+00, float -5.000000e-01
  %570 = fadd fast float %567, %569
  %571 = select i1 %562, float -0.000000e+00, float -5.000000e-01
  %572 = fadd fast float %568, %571
  %573 = fmul fast float %570, %553
  %574 = fmul fast float %572, %554
  %575 = fadd fast float %573, %557
  %576 = fadd fast float %574, %558
  %577 = fadd fast float %564, -1.500000e+00
  %578 = fadd fast float %566, -1.500000e+00
  %579 = call float @dx.op.binary.f32(i32 35, float %575, float 5.000000e-01)  ; FMax(a,b)
  %580 = call float @dx.op.binary.f32(i32 35, float %576, float 5.000000e-01)  ; FMax(a,b)
  %581 = call float @dx.op.binary.f32(i32 36, float %579, float %577)  ; FMin(a,b)
  %582 = call float @dx.op.binary.f32(i32 36, float %580, float %578)  ; FMin(a,b)
  %583 = uitofp i32 %529 to float
  %584 = uitofp i32 %531 to float
  %585 = fadd fast float %581, %583
  %586 = fadd fast float %582, %584
  %587 = fmul fast float %486, %585
  %588 = fmul fast float %487, %586
  %589 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %490, %dx.types.Handle %491, float %587, float %588, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %590 = extractvalue %dx.types.ResRet.f32 %589, 0
  %591 = fmul fast float %590, 2.000000e+00
  %592 = fadd fast float %591, -1.000000e+00
  %593 = fmul fast float %592, %321
  %594 = fsub fast float -0.000000e+00, %593
  %595 = fcmp fast ogt float %507, %594
  %596 = zext i1 %595 to i32
  br i1 %498, label %597, label %701

; <label>:597                                     ; preds = %501
  br i1 %595, label %701, label %598

; <label>:598                                     ; preds = %597
  %599 = fadd fast float %496, %402
  %600 = fsub fast float %388, %318
  %601 = fmul fast float %600, %346
  %602 = fadd fast float %496, %601
  %603 = fsub fast float %602, %593
  %604 = fdiv fast float %599, %603
  %605 = fmul fast float %604, %318
  %606 = fadd fast float %605, %388
  %607 = call float @dx.op.binary.f32(i32 35, float %606, float %388)  ; FMax(a,b)
  %608 = call float @dx.op.binary.f32(i32 36, float %607, float %389)  ; FMin(a,b)
  %609 = fmul fast float %608, %340
  %610 = fmul fast float %608, %343
  %611 = fadd fast float %609, %331
  %612 = fadd fast float %610, %334
  %613 = fdiv fast float %611, %319
  %614 = fdiv fast float %612, %320
  %615 = fmul fast float %613, 5.000000e-01
  %616 = fmul fast float %614, 5.000000e-01
  %617 = fadd fast float %615, 5.000000e-01
  %618 = fsub fast float 5.000000e-01, %616
  %619 = call float @dx.op.unary.f32(i32 7, float %617)  ; Saturate(value)
  %620 = call float @dx.op.unary.f32(i32 7, float %618)  ; Saturate(value)
  %621 = call float @dx.op.binary.f32(i32 36, float %619, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %622 = call float @dx.op.binary.f32(i32 36, float %620, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %623 = fmul fast float %621, %413
  %624 = fmul fast float %622, %414
  %625 = fptoui float %623 to i32
  %626 = fptoui float %624 to i32
  %627 = mul i32 %626, %323
  %628 = add i32 %625, %325
  %629 = add i32 %628, %627
  %630 = shl i32 %629, 3
  %631 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %423, i32 %630, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %632 = extractvalue %dx.types.ResRet.i32 %631, 0
  %633 = shl i32 %632, 3
  %634 = and i32 %633, 32760
  %635 = lshr i32 %632, 9
  %636 = and i32 %635, 32760
  %637 = lshr i32 %632, 24
  %638 = and i32 %637, 15
  %639 = lshr i32 %632, 28
  %640 = add nuw nsw i32 %638, 25
  %641 = add nuw nsw i32 %639, 25
  %642 = and i32 %640, 31
  %643 = and i32 %641, 31
  %644 = shl i32 1, %642
  %645 = shl i32 1, %643
  %646 = icmp ugt i32 %638, 7
  %647 = icmp slt i32 %632, 0
  %648 = select i1 %646, i32 %644, i32 1
  %649 = select i1 %647, i32 %645, i32 1
  %650 = uitofp i32 %648 to float
  %651 = uitofp i32 %649 to float
  %652 = fmul fast float %650, %621
  %653 = fmul fast float %651, %622
  %654 = fptoui float %652 to i32
  %655 = fptoui float %653 to i32
  %656 = shl i32 1, %638
  %657 = shl i32 1, %639
  %658 = call float @dx.op.unary.f32(i32 22, float %652)  ; Frc(value)
  %659 = call float @dx.op.unary.f32(i32 22, float %653)  ; Frc(value)
  %660 = icmp eq i32 %654, 0
  %661 = icmp eq i32 %655, 0
  %662 = select i1 %660, float 0.000000e+00, float 5.000000e-01
  %663 = select i1 %661, float 0.000000e+00, float 5.000000e-01
  %664 = add i32 %654, 1
  %665 = add i32 %655, 1
  %666 = icmp eq i32 %664, %648
  %667 = icmp eq i32 %665, %649
  %668 = uitofp i32 %656 to float
  %669 = select i1 %646, float 1.280000e+02, float %668
  %670 = uitofp i32 %657 to float
  %671 = select i1 %647, float 1.280000e+02, float %670
  %672 = fsub fast float %669, %662
  %673 = fsub fast float %671, %663
  %674 = select i1 %666, float -0.000000e+00, float -5.000000e-01
  %675 = fadd fast float %672, %674
  %676 = select i1 %667, float -0.000000e+00, float -5.000000e-01
  %677 = fadd fast float %673, %676
  %678 = fmul fast float %675, %658
  %679 = fmul fast float %677, %659
  %680 = fadd fast float %678, %662
  %681 = fadd fast float %679, %663
  %682 = fadd fast float %669, -1.500000e+00
  %683 = fadd fast float %671, -1.500000e+00
  %684 = call float @dx.op.binary.f32(i32 35, float %680, float 5.000000e-01)  ; FMax(a,b)
  %685 = call float @dx.op.binary.f32(i32 35, float %681, float 5.000000e-01)  ; FMax(a,b)
  %686 = call float @dx.op.binary.f32(i32 36, float %684, float %682)  ; FMin(a,b)
  %687 = call float @dx.op.binary.f32(i32 36, float %685, float %683)  ; FMin(a,b)
  %688 = uitofp i32 %634 to float
  %689 = uitofp i32 %636 to float
  %690 = fadd fast float %686, %688
  %691 = fadd fast float %687, %689
  %692 = fmul fast float %486, %690
  %693 = fmul fast float %487, %691
  %694 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %695 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %694, %dx.types.Handle %491, float %692, float %693, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %696 = extractvalue %dx.types.ResRet.f32 %695, 0
  %697 = fcmp fast ogt float %696, 5.000000e-01
  %698 = select i1 %697, float %608, float %265
  %699 = zext i1 %697 to i32
  %700 = zext i1 %697 to i32
  br label %701

; <label>:701                                     ; preds = %598, %597, %501, %396
  %702 = phi i32 [ %499, %396 ], [ %596, %597 ], [ %596, %501 ], [ %596, %598 ]
  %703 = phi float [ %497, %396 ], [ %594, %597 ], [ %594, %501 ], [ %594, %598 ]
  %704 = phi float [ %402, %396 ], [ %507, %597 ], [ %507, %501 ], [ %507, %598 ]
  %705 = phi float [ %388, %396 ], [ %318, %597 ], [ %318, %501 ], [ %318, %598 ]
  %706 = phi float [ %265, %396 ], [ %265, %597 ], [ %265, %501 ], [ %698, %598 ]
  %707 = phi i32 [ 0, %396 ], [ 0, %597 ], [ 0, %501 ], [ %699, %598 ]
  %708 = phi i32 [ 0, %396 ], [ 0, %597 ], [ 0, %501 ], [ %700, %598 ]
  %709 = icmp eq i32 %708, 0
  br i1 %709, label %710, label %947

; <label>:710                                     ; preds = %701
  %711 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 45)  ; CBufferLoadLegacy(handle,regIndex)
  %712 = extractvalue %dx.types.CBufRet.i32 %711, 2
  %713 = fsub fast float %389, %705
  %714 = sitofp i32 %712 to float
  %715 = fdiv fast float %713, %714
  %716 = fmul fast float %318, %214
  %717 = call float @dx.op.binary.f32(i32 35, float %716, float %715)  ; FMax(a,b)
  %718 = icmp sgt i32 %712, 0
  br i1 %718, label %719, label %947

; <label>:719                                     ; preds = %710
  br label %720

; <label>:720                                     ; preds = %942, %719
  %721 = phi i32 [ %830, %942 ], [ %702, %719 ]
  %722 = phi float [ %828, %942 ], [ %703, %719 ]
  %723 = phi float [ %735, %942 ], [ %704, %719 ]
  %724 = phi float [ %729, %942 ], [ %705, %719 ]
  %725 = phi i32 [ %943, %942 ], [ 0, %719 ]
  %726 = phi float [ %936, %942 ], [ %706, %719 ]
  %727 = phi i32 [ %937, %942 ], [ %707, %719 ]
  %728 = fadd fast float %724, %717
  %729 = call float @dx.op.binary.f32(i32 36, float %728, float %389)  ; FMin(a,b)
  %730 = fmul fast float %729, %340
  %731 = fmul fast float %729, %343
  %732 = fmul fast float %729, %346
  %733 = fadd fast float %730, %331
  %734 = fadd fast float %731, %334
  %735 = fadd fast float %732, %337
  %736 = fdiv fast float %733, %319
  %737 = fdiv fast float %734, %320
  %738 = fmul fast float %736, 5.000000e-01
  %739 = fmul fast float %737, 5.000000e-01
  %740 = fadd fast float %738, 5.000000e-01
  %741 = fsub fast float 5.000000e-01, %739
  %742 = call float @dx.op.unary.f32(i32 7, float %740)  ; Saturate(value)
  %743 = call float @dx.op.unary.f32(i32 7, float %741)  ; Saturate(value)
  %744 = call float @dx.op.binary.f32(i32 36, float %742, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %745 = call float @dx.op.binary.f32(i32 36, float %743, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %746 = fmul fast float %744, %413
  %747 = fmul fast float %745, %414
  %748 = fptoui float %746 to i32
  %749 = fptoui float %747 to i32
  %750 = mul i32 %749, %323
  %751 = add i32 %748, %325
  %752 = add i32 %751, %750
  %753 = shl i32 %752, 3
  %754 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %755 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %754, i32 %753, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %756 = extractvalue %dx.types.ResRet.i32 %755, 0
  %757 = shl i32 %756, 3
  %758 = and i32 %757, 32760
  %759 = lshr i32 %756, 9
  %760 = and i32 %759, 32760
  %761 = lshr i32 %756, 24
  %762 = and i32 %761, 15
  %763 = lshr i32 %756, 28
  %764 = add nuw nsw i32 %762, 25
  %765 = add nuw nsw i32 %763, 25
  %766 = and i32 %764, 31
  %767 = and i32 %765, 31
  %768 = shl i32 1, %766
  %769 = shl i32 1, %767
  %770 = icmp ugt i32 %762, 7
  %771 = icmp slt i32 %756, 0
  %772 = select i1 %770, i32 %768, i32 1
  %773 = select i1 %771, i32 %769, i32 1
  %774 = uitofp i32 %772 to float
  %775 = uitofp i32 %773 to float
  %776 = fmul fast float %774, %744
  %777 = fmul fast float %775, %745
  %778 = fptoui float %776 to i32
  %779 = fptoui float %777 to i32
  %780 = shl i32 1, %762
  %781 = shl i32 1, %763
  %782 = call float @dx.op.unary.f32(i32 22, float %776)  ; Frc(value)
  %783 = call float @dx.op.unary.f32(i32 22, float %777)  ; Frc(value)
  %784 = icmp eq i32 %778, 0
  %785 = icmp eq i32 %779, 0
  %786 = select i1 %784, float 0.000000e+00, float 5.000000e-01
  %787 = select i1 %785, float 0.000000e+00, float 5.000000e-01
  %788 = add i32 %778, 1
  %789 = add i32 %779, 1
  %790 = icmp eq i32 %788, %772
  %791 = icmp eq i32 %789, %773
  %792 = uitofp i32 %780 to float
  %793 = select i1 %770, float 1.280000e+02, float %792
  %794 = uitofp i32 %781 to float
  %795 = select i1 %771, float 1.280000e+02, float %794
  %796 = fsub fast float %793, %786
  %797 = fsub fast float %795, %787
  %798 = select i1 %790, float -0.000000e+00, float -5.000000e-01
  %799 = fadd fast float %796, %798
  %800 = select i1 %791, float -0.000000e+00, float -5.000000e-01
  %801 = fadd fast float %797, %800
  %802 = fmul fast float %799, %782
  %803 = fmul fast float %801, %783
  %804 = fadd fast float %802, %786
  %805 = fadd fast float %803, %787
  %806 = fadd fast float %793, -1.500000e+00
  %807 = fadd fast float %795, -1.500000e+00
  %808 = call float @dx.op.binary.f32(i32 35, float %804, float 5.000000e-01)  ; FMax(a,b)
  %809 = call float @dx.op.binary.f32(i32 35, float %805, float 5.000000e-01)  ; FMax(a,b)
  %810 = call float @dx.op.binary.f32(i32 36, float %808, float %806)  ; FMin(a,b)
  %811 = call float @dx.op.binary.f32(i32 36, float %809, float %807)  ; FMin(a,b)
  %812 = uitofp i32 %758 to float
  %813 = uitofp i32 %760 to float
  %814 = fadd fast float %810, %812
  %815 = fadd fast float %811, %813
  %816 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %817 = extractvalue %dx.types.CBufRet.f32 %816, 0
  %818 = extractvalue %dx.types.CBufRet.f32 %816, 1
  %819 = fmul fast float %817, %814
  %820 = fmul fast float %818, %815
  %821 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %822 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %823 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %821, %dx.types.Handle %822, float %819, float %820, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %824 = extractvalue %dx.types.ResRet.f32 %823, 0
  %825 = fmul fast float %824, 2.000000e+00
  %826 = fadd fast float %825, -1.000000e+00
  %827 = fmul fast float %826, %321
  %828 = fsub fast float -0.000000e+00, %827
  %829 = fcmp fast ogt float %735, %828
  %830 = zext i1 %829 to i32
  %831 = icmp ne i32 %721, 0
  %832 = xor i1 %831, %829
  br i1 %832, label %833, label %935

; <label>:833                                     ; preds = %720
  %834 = fsub fast float %723, %722
  %835 = fsub fast float %834, %735
  %836 = fsub fast float %835, %827
  %837 = fdiv fast float %834, %836
  %838 = fmul fast float %837, %717
  %839 = fadd fast float %838, %724
  %840 = call float @dx.op.binary.f32(i32 35, float %839, float %705)  ; FMax(a,b)
  %841 = call float @dx.op.binary.f32(i32 36, float %840, float %389)  ; FMin(a,b)
  %842 = fmul fast float %841, %340
  %843 = fmul fast float %841, %343
  %844 = fadd fast float %842, %331
  %845 = fadd fast float %843, %334
  %846 = fdiv fast float %844, %319
  %847 = fdiv fast float %845, %320
  %848 = fmul fast float %846, 5.000000e-01
  %849 = fmul fast float %847, 5.000000e-01
  %850 = fadd fast float %848, 5.000000e-01
  %851 = fsub fast float 5.000000e-01, %849
  %852 = call float @dx.op.unary.f32(i32 7, float %850)  ; Saturate(value)
  %853 = call float @dx.op.unary.f32(i32 7, float %851)  ; Saturate(value)
  %854 = call float @dx.op.binary.f32(i32 36, float %852, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %855 = call float @dx.op.binary.f32(i32 36, float %853, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %856 = fmul fast float %854, %413
  %857 = fmul fast float %855, %414
  %858 = fptoui float %856 to i32
  %859 = fptoui float %857 to i32
  %860 = mul i32 %859, %323
  %861 = add i32 %858, %325
  %862 = add i32 %861, %860
  %863 = shl i32 %862, 3
  %864 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %754, i32 %863, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %865 = extractvalue %dx.types.ResRet.i32 %864, 0
  %866 = shl i32 %865, 3
  %867 = and i32 %866, 32760
  %868 = lshr i32 %865, 9
  %869 = and i32 %868, 32760
  %870 = lshr i32 %865, 24
  %871 = and i32 %870, 15
  %872 = lshr i32 %865, 28
  %873 = add nuw nsw i32 %871, 25
  %874 = add nuw nsw i32 %872, 25
  %875 = and i32 %873, 31
  %876 = and i32 %874, 31
  %877 = shl i32 1, %875
  %878 = shl i32 1, %876
  %879 = icmp ugt i32 %871, 7
  %880 = icmp slt i32 %865, 0
  %881 = select i1 %879, i32 %877, i32 1
  %882 = select i1 %880, i32 %878, i32 1
  %883 = uitofp i32 %881 to float
  %884 = uitofp i32 %882 to float
  %885 = fmul fast float %883, %854
  %886 = fmul fast float %884, %855
  %887 = fptoui float %885 to i32
  %888 = fptoui float %886 to i32
  %889 = shl i32 1, %871
  %890 = shl i32 1, %872
  %891 = call float @dx.op.unary.f32(i32 22, float %885)  ; Frc(value)
  %892 = call float @dx.op.unary.f32(i32 22, float %886)  ; Frc(value)
  %893 = icmp eq i32 %887, 0
  %894 = icmp eq i32 %888, 0
  %895 = select i1 %893, float 0.000000e+00, float 5.000000e-01
  %896 = select i1 %894, float 0.000000e+00, float 5.000000e-01
  %897 = add i32 %887, 1
  %898 = add i32 %888, 1
  %899 = icmp eq i32 %897, %881
  %900 = icmp eq i32 %898, %882
  %901 = uitofp i32 %889 to float
  %902 = select i1 %879, float 1.280000e+02, float %901
  %903 = uitofp i32 %890 to float
  %904 = select i1 %880, float 1.280000e+02, float %903
  %905 = fsub fast float %902, %895
  %906 = fsub fast float %904, %896
  %907 = select i1 %899, float -0.000000e+00, float -5.000000e-01
  %908 = fadd fast float %905, %907
  %909 = select i1 %900, float -0.000000e+00, float -5.000000e-01
  %910 = fadd fast float %906, %909
  %911 = fmul fast float %908, %891
  %912 = fmul fast float %910, %892
  %913 = fadd fast float %911, %895
  %914 = fadd fast float %912, %896
  %915 = fadd fast float %902, -1.500000e+00
  %916 = fadd fast float %904, -1.500000e+00
  %917 = call float @dx.op.binary.f32(i32 35, float %913, float 5.000000e-01)  ; FMax(a,b)
  %918 = call float @dx.op.binary.f32(i32 35, float %914, float 5.000000e-01)  ; FMax(a,b)
  %919 = call float @dx.op.binary.f32(i32 36, float %917, float %915)  ; FMin(a,b)
  %920 = call float @dx.op.binary.f32(i32 36, float %918, float %916)  ; FMin(a,b)
  %921 = uitofp i32 %867 to float
  %922 = uitofp i32 %869 to float
  %923 = fadd fast float %919, %921
  %924 = fadd fast float %920, %922
  %925 = fmul fast float %817, %923
  %926 = fmul fast float %818, %924
  %927 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %928 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %927, %dx.types.Handle %822, float %925, float %926, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %929 = extractvalue %dx.types.ResRet.f32 %928, 0
  %930 = fcmp fast ogt float %929, 5.000000e-01
  %931 = xor i32 %830, 1
  %932 = select i1 %930, float %841, float %726
  %933 = select i1 %930, i32 %931, i32 %727
  %934 = zext i1 %930 to i32
  br label %935

; <label>:935                                     ; preds = %833, %720
  %936 = phi float [ %726, %720 ], [ %932, %833 ]
  %937 = phi i32 [ %727, %720 ], [ %933, %833 ]
  %938 = phi i32 [ 0, %720 ], [ %934, %833 ]
  %939 = icmp ne i32 %938, 0
  %940 = fcmp fast oge float %729, %389
  %941 = or i1 %940, %939
  br i1 %941, label %945, label %942

; <label>:942                                     ; preds = %935
  %943 = add nuw nsw i32 %725, 1
  %944 = icmp slt i32 %943, %712
  br i1 %944, label %720, label %945

; <label>:945                                     ; preds = %942, %935
  %946 = phi i32 [ 0, %942 ], [ %938, %935 ]
  br label %947

; <label>:947                                     ; preds = %945, %710, %701, %391, %268
  %948 = phi float [ %706, %701 ], [ %265, %391 ], [ %265, %268 ], [ %706, %710 ], [ %936, %945 ]
  %949 = phi i32 [ %707, %701 ], [ 0, %391 ], [ 0, %268 ], [ %707, %710 ], [ %937, %945 ]
  %950 = phi i32 [ %708, %701 ], [ 0, %391 ], [ 0, %268 ], [ 0, %710 ], [ %946, %945 ]
  %951 = icmp ne i32 %950, 0
  %952 = fcmp fast olt float %948, %269
  %953 = and i1 %952, %951
  %954 = icmp ne i32 %949, 0
  %955 = zext i1 %954 to i32
  %956 = select i1 %953, float %948, float %269
  %957 = select i1 %953, i32 %276, i32 %270
  %958 = select i1 %953, i32 %955, i32 %271
  %959 = add nuw i32 %272, 1
  %960 = icmp eq i32 %959, %259
  br i1 %960, label %961, label %268

; <label>:961                                     ; preds = %947
  br label %962

; <label>:962                                     ; preds = %961, %264
  %963 = phi float [ %265, %264 ], [ %956, %961 ]
  %964 = phi i32 [ 0, %264 ], [ %957, %961 ]
  %965 = phi i32 [ 0, %264 ], [ %958, %961 ]
  %966 = fcmp fast olt float %963, %265
  br i1 %966, label %967, label %1803

; <label>:967                                     ; preds = %962
  %968 = mul i32 %964, 3
  %969 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %970 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %969, i32 %968, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %971 = extractvalue %dx.types.ResRet.f32 %970, 3
  %972 = bitcast float %971 to i32
  %973 = fmul fast float %963, %113
  %974 = fmul fast float %963, %114
  %975 = fmul fast float %963, %115
  %976 = fadd fast float %973, %131
  %977 = fadd fast float %974, %132
  %978 = fadd fast float %975, %133
  %979 = fmul fast float %963, %216
  %980 = call float @dx.op.binary.f32(i32 35, float %979, float 0x3F847AE140000000)  ; FMax(a,b)
  %981 = icmp eq i32 %965, 0
  br i1 %981, label %1803, label %982

; <label>:982                                     ; preds = %967
  %983 = extractvalue %dx.types.CBufRet.i32 %217, 2
  %984 = icmp eq i32 %983, 3
  %985 = icmp eq i32 %983, 9
  %986 = or i1 %984, %985
  br i1 %986, label %987, label %997

; <label>:987                                     ; preds = %982
  %988 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %41, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %989 = extractvalue %dx.types.CBufRet.i32 %988, 1
  %990 = icmp ult i32 %972, %989
  %991 = select i1 %990, float 0.000000e+00, float 1.000000e+00
  %992 = select i1 %990, float 1.000000e+00, float 0.000000e+00
  %993 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %994 = extractvalue %dx.types.CBufRet.f32 %993, 2
  %995 = fmul fast float %991, %994
  %996 = fmul fast float %992, %994
  br label %997

; <label>:997                                     ; preds = %987, %982
  %998 = phi float [ %994, %987 ], [ 0.000000e+00, %982 ]
  %999 = phi float [ %995, %987 ], [ 0.000000e+00, %982 ]
  %1000 = phi float [ %996, %987 ], [ 0.000000e+00, %982 ]
  %1001 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %41, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1002 = extractvalue %dx.types.CBufRet.i32 %1001, 1
  %1003 = icmp ult i32 %972, %1002
  br i1 %1003, label %1004, label %1803

; <label>:1004                                    ; preds = %997
  %1005 = mul i32 %972, 7
  %1006 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1007 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1006, i32 %1005, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1008 = extractvalue %dx.types.ResRet.f32 %1007, 0
  %1009 = extractvalue %dx.types.ResRet.f32 %1007, 1
  %1010 = extractvalue %dx.types.ResRet.f32 %1007, 2
  %1011 = extractvalue %dx.types.ResRet.f32 %1007, 3
  %1012 = add i32 %1005, 1
  %1013 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1006, i32 %1012, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1014 = extractvalue %dx.types.ResRet.f32 %1013, 0
  %1015 = extractvalue %dx.types.ResRet.f32 %1013, 1
  %1016 = extractvalue %dx.types.ResRet.f32 %1013, 2
  %1017 = extractvalue %dx.types.ResRet.f32 %1013, 3
  %1018 = add i32 %1005, 2
  %1019 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1006, i32 %1018, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1020 = extractvalue %dx.types.ResRet.f32 %1019, 0
  %1021 = extractvalue %dx.types.ResRet.f32 %1019, 1
  %1022 = extractvalue %dx.types.ResRet.f32 %1019, 2
  %1023 = extractvalue %dx.types.ResRet.f32 %1019, 3
  %1024 = add i32 %1005, 3
  %1025 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1006, i32 %1024, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1026 = extractvalue %dx.types.ResRet.f32 %1025, 0
  %1027 = extractvalue %dx.types.ResRet.f32 %1025, 1
  %1028 = extractvalue %dx.types.ResRet.f32 %1025, 2
  %1029 = extractvalue %dx.types.ResRet.f32 %1025, 3
  %1030 = bitcast float %1026 to i32
  %1031 = bitcast float %1027 to i32
  %1032 = add i32 %1005, 4
  %1033 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1006, i32 %1032, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1034 = extractvalue %dx.types.ResRet.f32 %1033, 0
  %1035 = extractvalue %dx.types.ResRet.f32 %1033, 1
  %1036 = extractvalue %dx.types.ResRet.f32 %1033, 2
  %1037 = extractvalue %dx.types.ResRet.f32 %1033, 3
  %1038 = and i32 %1031, 65536
  %1039 = icmp ne i32 %1038, 0
  %1040 = and i32 %1031, 131072
  %1041 = icmp ne i32 %1040, 0
  %1042 = getelementptr inbounds [6 x i32], [6 x i32]* %46, i32 0, i32 0
  %1043 = bitcast i32* %1042 to float*
  store float %1028, float* %1043, align 4, !tbaa !57, !alias.scope !61, !noalias !64
  %1044 = getelementptr inbounds [6 x i32], [6 x i32]* %46, i32 0, i32 1
  %1045 = bitcast i32* %1044 to float*
  store float %1029, float* %1045, align 4, !tbaa !57, !alias.scope !61, !noalias !64
  %1046 = getelementptr inbounds [6 x i32], [6 x i32]* %46, i32 0, i32 2
  %1047 = bitcast i32* %1046 to float*
  store float %1034, float* %1047, align 4, !tbaa !57, !alias.scope !61, !noalias !64
  %1048 = getelementptr inbounds [6 x i32], [6 x i32]* %46, i32 0, i32 3
  %1049 = bitcast i32* %1048 to float*
  store float %1035, float* %1049, align 4, !tbaa !57, !alias.scope !61, !noalias !64
  %1050 = getelementptr inbounds [6 x i32], [6 x i32]* %46, i32 0, i32 4
  %1051 = bitcast i32* %1050 to float*
  store float %1036, float* %1051, align 4, !tbaa !57, !alias.scope !61, !noalias !64
  %1052 = getelementptr inbounds [6 x i32], [6 x i32]* %46, i32 0, i32 5
  %1053 = bitcast i32* %1052 to float*
  store float %1037, float* %1053, align 4, !tbaa !57, !alias.scope !61, !noalias !64
  %1054 = select i1 %1041, float 7.000000e+01, float 2.000000e+01
  %1055 = fsub fast float %976, %1011
  %1056 = fsub fast float %977, %1017
  %1057 = fsub fast float %978, %1023
  %1058 = fmul fast float %1055, %1008
  %1059 = call float @dx.op.tertiary.f32(i32 46, float %1056, float %1014, float %1058)  ; FMad(a,b,c)
  %1060 = call float @dx.op.tertiary.f32(i32 46, float %1057, float %1020, float %1059)  ; FMad(a,b,c)
  %1061 = fmul fast float %1055, %1009
  %1062 = call float @dx.op.tertiary.f32(i32 46, float %1056, float %1015, float %1061)  ; FMad(a,b,c)
  %1063 = call float @dx.op.tertiary.f32(i32 46, float %1057, float %1021, float %1062)  ; FMad(a,b,c)
  %1064 = fmul fast float %1055, %1010
  %1065 = call float @dx.op.tertiary.f32(i32 46, float %1056, float %1016, float %1064)  ; FMad(a,b,c)
  %1066 = call float @dx.op.tertiary.f32(i32 46, float %1057, float %1022, float %1065)  ; FMad(a,b,c)
  %1067 = fmul fast float %1020, %1020
  %1068 = fmul fast float %1021, %1021
  %1069 = fmul fast float %1022, %1022
  %1070 = fcmp fast ogt float %1067, 0.000000e+00
  br i1 %1070, label %1071, label %1076

; <label>:1071                                    ; preds = %1004
  %1072 = fcmp uge float %1020, 0.000000e+00
  %1073 = zext i1 %1072 to i32
  %1074 = getelementptr inbounds [6 x i32], [6 x i32]* %46, i32 0, i32 %1073
  %1075 = load i32, i32* %1074, align 4, !tbaa !57, !noalias !64
  br label %1076

; <label>:1076                                    ; preds = %1071, %1004
  %1077 = phi i32 [ %1075, %1071 ], [ 0, %1004 ]
  %1078 = fcmp fast ogt float %1068, 0.000000e+00
  br i1 %1078, label %1079, label %1085

; <label>:1079                                    ; preds = %1076
  %1080 = fcmp fast olt float %1021, 0.000000e+00
  %1081 = select i1 %1080, i32 2, i32 3
  %1082 = getelementptr inbounds [6 x i32], [6 x i32]* %46, i32 0, i32 %1081
  %1083 = load i32, i32* %1082, align 4, !tbaa !57, !noalias !64
  %1084 = or i32 %1083, %1077
  br label %1085

; <label>:1085                                    ; preds = %1079, %1076
  %1086 = phi i32 [ %1084, %1079 ], [ %1077, %1076 ]
  %1087 = fcmp fast ogt float %1069, 0.000000e+00
  br i1 %1087, label %1088, label %1094

; <label>:1088                                    ; preds = %1085
  %1089 = fcmp fast olt float %1022, 0.000000e+00
  %1090 = select i1 %1089, i32 4, i32 5
  %1091 = getelementptr inbounds [6 x i32], [6 x i32]* %46, i32 0, i32 %1090
  %1092 = load i32, i32* %1091, align 4, !tbaa !57, !noalias !64
  %1093 = or i32 %1092, %1086
  br label %1094

; <label>:1094                                    ; preds = %1088, %1085
  %1095 = phi i32 [ %1093, %1088 ], [ %1086, %1085 ]
  %1096 = icmp eq i32 %1095, 0
  br i1 %1096, label %1141, label %1097

; <label>:1097                                    ; preds = %1094
  br label %1098

; <label>:1098                                    ; preds = %1098, %1097
  %1099 = phi i32 [ %1104, %1098 ], [ %1095, %1097 ]
  %1100 = phi i32 [ %1138, %1098 ], [ 0, %1097 ]
  %1101 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %1099)  ; FirstbitLo(value)
  %1102 = and i32 %1101, 31
  %1103 = shl i32 1, %1102
  %1104 = xor i32 %1103, %1099
  %1105 = add i32 %1101, %1030
  %1106 = mul i32 %1105, 9
  %1107 = add i32 %1106, 5
  %1108 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1109 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1108, i32 %1107, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1110 = extractvalue %dx.types.ResRet.f32 %1109, 3
  %1111 = add i32 %1106, 6
  %1112 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1108, i32 %1111, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1113 = extractvalue %dx.types.ResRet.f32 %1112, 3
  %1114 = add i32 %1106, 7
  %1115 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1108, i32 %1114, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1116 = extractvalue %dx.types.ResRet.f32 %1115, 3
  %1117 = add i32 %1106, 8
  %1118 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1108, i32 %1117, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1119 = extractvalue %dx.types.ResRet.f32 %1118, 0
  %1120 = extractvalue %dx.types.ResRet.f32 %1118, 1
  %1121 = extractvalue %dx.types.ResRet.f32 %1118, 2
  %1122 = fsub fast float %1060, %1110
  %1123 = fsub fast float %1063, %1113
  %1124 = fsub fast float %1066, %1116
  %1125 = call float @dx.op.unary.f32(i32 6, float %1122)  ; FAbs(value)
  %1126 = call float @dx.op.unary.f32(i32 6, float %1123)  ; FAbs(value)
  %1127 = call float @dx.op.unary.f32(i32 6, float %1124)  ; FAbs(value)
  %1128 = fmul fast float %1054, 5.000000e-01
  %1129 = fadd fast float %1119, %1128
  %1130 = fadd fast float %1120, %1128
  %1131 = fadd fast float %1121, %1128
  %1132 = fcmp fast ole float %1125, %1129
  %1133 = fcmp fast ole float %1126, %1130
  %1134 = fcmp fast ole float %1127, %1131
  %1135 = and i1 %1132, %1133
  %1136 = and i1 %1135, %1134
  %1137 = select i1 %1136, i32 %1103, i32 0
  %1138 = or i32 %1137, %1100
  %1139 = icmp eq i32 %1099, %1103
  br i1 %1139, label %1140, label %1098

; <label>:1140                                    ; preds = %1098
  br label %1141

; <label>:1141                                    ; preds = %1140, %1094
  %1142 = phi i32 [ 0, %1094 ], [ %1138, %1140 ]
  %1143 = select i1 %1039, i32 1, i32 %1142
  %1144 = icmp eq i32 %1143, 0
  br i1 %1144, label %1751, label %1145

; <label>:1145                                    ; preds = %1141
  br label %1146

; <label>:1146                                    ; preds = %1169, %1145
  %1147 = phi float [ %1170, %1169 ], [ 0.000000e+00, %1145 ]
  %1148 = phi float [ %1171, %1169 ], [ 0.000000e+00, %1145 ]
  %1149 = phi float [ %1172, %1169 ], [ 0.000000e+00, %1145 ]
  %1150 = phi float [ %1173, %1169 ], [ 0.000000e+00, %1145 ]
  %1151 = phi float [ %1174, %1169 ], [ 0.000000e+00, %1145 ]
  %1152 = phi i32 [ %1175, %1169 ], [ 0, %1145 ]
  %1153 = phi i32 [ %1176, %1169 ], [ 0, %1145 ]
  %1154 = phi i32 [ %1177, %1169 ], [ 0, %1145 ]
  %1155 = phi i32 [ %1159, %1169 ], [ %1143, %1145 ]
  %1156 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %1155)  ; FirstbitLo(value)
  %1157 = and i32 %1156, 31
  %1158 = shl i32 1, %1157
  %1159 = xor i32 %1158, %1155
  %1160 = add i32 %1156, %1030
  %1161 = mul i32 %1160, 9
  %1162 = add i32 %1161, 3
  %1163 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1164 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1163, i32 %1162, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1165 = extractvalue %dx.types.ResRet.f32 %1164, 3
  %1166 = bitcast float %1165 to i32
  %1167 = and i32 %1166, 16777216
  %1168 = icmp eq i32 %1167, 0
  br i1 %1168, label %1169, label %1179

; <label>:1169                                    ; preds = %3308, %1749, %1737, %1398, %1236, %1183, %1179, %1146
  %1170 = phi float [ %1147, %1146 ], [ %1747, %1749 ], [ %1747, %1737 ], [ %1147, %3308 ], [ %1147, %1398 ], [ %1147, %1236 ], [ %1147, %1183 ], [ %1147, %1179 ]
  %1171 = phi float [ %1148, %1146 ], [ %1744, %1749 ], [ %1744, %1737 ], [ %1148, %3308 ], [ %1148, %1398 ], [ %1148, %1236 ], [ %1148, %1183 ], [ %1148, %1179 ]
  %1172 = phi float [ %1149, %1146 ], [ %1745, %1749 ], [ %1745, %1737 ], [ %1149, %3308 ], [ %1149, %1398 ], [ %1149, %1236 ], [ %1149, %1183 ], [ %1149, %1179 ]
  %1173 = phi float [ %1150, %1146 ], [ %1746, %1749 ], [ %1746, %1737 ], [ %1150, %3308 ], [ %1150, %1398 ], [ %1150, %1236 ], [ %1150, %1183 ], [ %1150, %1179 ]
  %1174 = phi float [ %1151, %1146 ], [ %3315, %1749 ], [ %1151, %1737 ], [ %1151, %3308 ], [ %1151, %1398 ], [ %1151, %1236 ], [ %1151, %1183 ], [ %1151, %1179 ]
  %1175 = phi i32 [ %1152, %1146 ], [ %1373, %1749 ], [ %1152, %1737 ], [ %1152, %3308 ], [ %1152, %1398 ], [ %1152, %1236 ], [ %1152, %1183 ], [ %1152, %1179 ]
  %1176 = phi i32 [ %1153, %1146 ], [ %1375, %1749 ], [ %1153, %1737 ], [ %1153, %3308 ], [ %1153, %1398 ], [ %1153, %1236 ], [ %1153, %1183 ], [ %1153, %1179 ]
  %1177 = phi i32 [ %1154, %1146 ], [ %1279, %1749 ], [ %1154, %1737 ], [ %1154, %3308 ], [ %1154, %1398 ], [ %1154, %1236 ], [ %1154, %1183 ], [ %1154, %1179 ]
  %1178 = icmp eq i32 %1155, %1158
  br i1 %1178, label %1750, label %1146

; <label>:1179                                    ; preds = %1146
  %1180 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %41, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1181 = extractvalue %dx.types.CBufRet.i32 %1180, 0
  %1182 = icmp ult i32 %1160, %1181
  br i1 %1182, label %1183, label %1169

; <label>:1183                                    ; preds = %1179
  %1184 = extractvalue %dx.types.ResRet.f32 %1164, 0
  %1185 = extractvalue %dx.types.ResRet.f32 %1164, 1
  %1186 = extractvalue %dx.types.ResRet.f32 %1164, 2
  %1187 = add i32 %1161, 4
  %1188 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1163, i32 %1187, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1189 = add i32 %1161, 5
  %1190 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1163, i32 %1189, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1191 = add i32 %1161, 6
  %1192 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1163, i32 %1191, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1193 = add i32 %1161, 7
  %1194 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1163, i32 %1193, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1195 = call float @dx.op.unary.f32(i32 6, float %1184)  ; FAbs(value)
  %1196 = call float @dx.op.unary.f32(i32 6, float %1185)  ; FAbs(value)
  %1197 = call float @dx.op.unary.f32(i32 6, float %1186)  ; FAbs(value)
  %1198 = lshr i32 %1166, 16
  %1199 = and i32 %1198, 15
  %1200 = extractvalue %dx.types.ResRet.f32 %1194, 3
  %1201 = extractvalue %dx.types.ResRet.f32 %1194, 2
  %1202 = extractvalue %dx.types.ResRet.f32 %1194, 1
  %1203 = extractvalue %dx.types.ResRet.f32 %1194, 0
  %1204 = extractvalue %dx.types.ResRet.f32 %1192, 3
  %1205 = extractvalue %dx.types.ResRet.f32 %1192, 2
  %1206 = extractvalue %dx.types.ResRet.f32 %1192, 1
  %1207 = extractvalue %dx.types.ResRet.f32 %1192, 0
  %1208 = extractvalue %dx.types.ResRet.f32 %1190, 3
  %1209 = extractvalue %dx.types.ResRet.f32 %1190, 2
  %1210 = extractvalue %dx.types.ResRet.f32 %1190, 1
  %1211 = extractvalue %dx.types.ResRet.f32 %1190, 0
  %1212 = fsub fast float %1060, %1208
  %1213 = fsub fast float %1063, %1204
  %1214 = fsub fast float %1066, %1200
  %1215 = fmul fast float %1212, %1211
  %1216 = call float @dx.op.tertiary.f32(i32 46, float %1213, float %1207, float %1215)  ; FMad(a,b,c)
  %1217 = call float @dx.op.tertiary.f32(i32 46, float %1214, float %1203, float %1216)  ; FMad(a,b,c)
  %1218 = fmul fast float %1212, %1210
  %1219 = call float @dx.op.tertiary.f32(i32 46, float %1213, float %1206, float %1218)  ; FMad(a,b,c)
  %1220 = call float @dx.op.tertiary.f32(i32 46, float %1214, float %1202, float %1219)  ; FMad(a,b,c)
  %1221 = fmul fast float %1212, %1209
  %1222 = call float @dx.op.tertiary.f32(i32 46, float %1213, float %1205, float %1221)  ; FMad(a,b,c)
  %1223 = call float @dx.op.tertiary.f32(i32 46, float %1214, float %1201, float %1222)  ; FMad(a,b,c)
  %1224 = call float @dx.op.unary.f32(i32 6, float %1217)  ; FAbs(value)
  %1225 = call float @dx.op.unary.f32(i32 6, float %1220)  ; FAbs(value)
  %1226 = call float @dx.op.unary.f32(i32 6, float %1223)  ; FAbs(value)
  %1227 = fmul fast float %1054, 5.000000e-01
  %1228 = fadd fast float %1195, %1227
  %1229 = fadd fast float %1196, %1227
  %1230 = fadd fast float %1197, %1227
  %1231 = fcmp fast ole float %1224, %1228
  %1232 = fcmp fast ole float %1225, %1229
  %1233 = fcmp fast ole float %1226, %1230
  %1234 = and i1 %1231, %1232
  %1235 = and i1 %1234, %1233
  br i1 %1235, label %1236, label %1169

; <label>:1236                                    ; preds = %1183
  %1237 = lshr i32 %1166, 8
  %1238 = and i32 %1237, 255
  %1239 = and i32 %1166, 255
  %1240 = extractvalue %dx.types.ResRet.f32 %1188, 3
  %1241 = extractvalue %dx.types.ResRet.f32 %1188, 2
  %1242 = extractvalue %dx.types.ResRet.f32 %1188, 1
  %1243 = extractvalue %dx.types.ResRet.f32 %1188, 0
  %1244 = fsub fast float -0.000000e+00, %1195
  %1245 = fsub fast float -0.000000e+00, %1196
  %1246 = call float @dx.op.binary.f32(i32 35, float %1217, float %1244)  ; FMax(a,b)
  %1247 = call float @dx.op.binary.f32(i32 35, float %1220, float %1245)  ; FMax(a,b)
  %1248 = call float @dx.op.binary.f32(i32 36, float %1246, float %1195)  ; FMin(a,b)
  %1249 = call float @dx.op.binary.f32(i32 36, float %1247, float %1196)  ; FMin(a,b)
  %1250 = fdiv fast float %1248, %1195
  %1251 = fdiv fast float %1249, %1196
  %1252 = fmul fast float %1250, 5.000000e-01
  %1253 = fmul fast float %1251, 5.000000e-01
  %1254 = fadd fast float %1252, 5.000000e-01
  %1255 = fsub fast float 5.000000e-01, %1253
  %1256 = call float @dx.op.unary.f32(i32 7, float %1254)  ; Saturate(value)
  %1257 = call float @dx.op.unary.f32(i32 7, float %1255)  ; Saturate(value)
  %1258 = call float @dx.op.binary.f32(i32 36, float %1256, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1259 = call float @dx.op.binary.f32(i32 36, float %1257, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1260 = select i1 %219, float %1241, float %1243
  %1261 = bitcast float %1260 to i32
  %1262 = and i32 %1261, 65535
  %1263 = lshr i32 %1261, 16
  %1264 = select i1 %219, float %1240, float %1242
  %1265 = bitcast float %1264 to i32
  %1266 = uitofp i32 %1262 to float
  %1267 = uitofp i32 %1263 to float
  %1268 = fmul fast float %1258, %1266
  %1269 = fmul fast float %1259, %1267
  %1270 = fptoui float %1268 to i32
  %1271 = fptoui float %1269 to i32
  %1272 = mul i32 %1271, %1262
  %1273 = add i32 %1270, %1265
  %1274 = add i32 %1273, %1272
  %1275 = shl i32 %1274, 3
  %1276 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1277 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1276, i32 %1275, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1278 = extractvalue %dx.types.ResRet.i32 %1277, 0
  %1279 = extractvalue %dx.types.ResRet.i32 %1277, 1
  %1280 = shl i32 %1278, 3
  %1281 = and i32 %1280, 32760
  %1282 = lshr i32 %1278, 9
  %1283 = and i32 %1282, 32760
  %1284 = lshr i32 %1278, 24
  %1285 = and i32 %1284, 15
  %1286 = lshr i32 %1278, 28
  %1287 = add nuw nsw i32 %1285, 25
  %1288 = add nuw nsw i32 %1286, 25
  %1289 = and i32 %1287, 31
  %1290 = and i32 %1288, 31
  %1291 = shl i32 1, %1289
  %1292 = shl i32 1, %1290
  %1293 = icmp ugt i32 %1285, 7
  %1294 = icmp slt i32 %1278, 0
  %1295 = select i1 %1293, i32 %1291, i32 1
  %1296 = select i1 %1294, i32 %1292, i32 1
  %1297 = uitofp i32 %1295 to float
  %1298 = uitofp i32 %1296 to float
  %1299 = fmul fast float %1297, %1258
  %1300 = fmul fast float %1298, %1259
  %1301 = fptoui float %1299 to i32
  %1302 = fptoui float %1300 to i32
  %1303 = shl i32 1, %1285
  %1304 = shl i32 1, %1286
  %1305 = call float @dx.op.unary.f32(i32 22, float %1299)  ; Frc(value)
  %1306 = call float @dx.op.unary.f32(i32 22, float %1300)  ; Frc(value)
  %1307 = icmp eq i32 %1301, 0
  %1308 = icmp eq i32 %1302, 0
  %1309 = select i1 %1307, float 0.000000e+00, float 5.000000e-01
  %1310 = select i1 %1308, float 0.000000e+00, float 5.000000e-01
  %1311 = add i32 %1301, 1
  %1312 = add i32 %1302, 1
  %1313 = icmp eq i32 %1311, %1295
  %1314 = icmp eq i32 %1312, %1296
  %1315 = uitofp i32 %1303 to float
  %1316 = select i1 %1293, float 1.280000e+02, float %1315
  %1317 = uitofp i32 %1304 to float
  %1318 = select i1 %1294, float 1.280000e+02, float %1317
  %1319 = fsub fast float %1316, %1309
  %1320 = fsub fast float %1318, %1310
  %1321 = select i1 %1313, float -0.000000e+00, float -5.000000e-01
  %1322 = fadd fast float %1319, %1321
  %1323 = select i1 %1314, float -0.000000e+00, float -5.000000e-01
  %1324 = fadd fast float %1320, %1323
  %1325 = fmul fast float %1322, %1305
  %1326 = fmul fast float %1324, %1306
  %1327 = fadd fast float %1325, %1309
  %1328 = fadd fast float %1326, %1310
  %1329 = fadd fast float %1316, -1.500000e+00
  %1330 = fadd fast float %1318, -1.500000e+00
  %1331 = call float @dx.op.binary.f32(i32 35, float %1327, float 5.000000e-01)  ; FMax(a,b)
  %1332 = call float @dx.op.binary.f32(i32 35, float %1328, float 5.000000e-01)  ; FMax(a,b)
  %1333 = call float @dx.op.binary.f32(i32 36, float %1331, float %1329)  ; FMin(a,b)
  %1334 = call float @dx.op.binary.f32(i32 36, float %1332, float %1330)  ; FMin(a,b)
  %1335 = uitofp i32 %1281 to float
  %1336 = uitofp i32 %1283 to float
  %1337 = fadd fast float %1333, %1335
  %1338 = fadd fast float %1334, %1336
  %1339 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1340 = extractvalue %dx.types.CBufRet.f32 %1339, 0
  %1341 = extractvalue %dx.types.CBufRet.f32 %1339, 1
  %1342 = fmul fast float %1340, %1337
  %1343 = fmul fast float %1341, %1338
  %1344 = call float @dx.op.binary.f32(i32 35, float %1195, float %1196)  ; FMax(a,b)
  %1345 = call float @dx.op.binary.f32(i32 35, float %980, float 1.000000e+00)  ; FMax(a,b)
  %1346 = fdiv fast float %1344, %1345
  %1347 = call float @dx.op.unary.f32(i32 23, float %1346)  ; Log(value)
  %1348 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1349 = extractvalue %dx.types.CBufRet.f32 %1348, 2
  %1350 = fadd fast float %1349, %1347
  %1351 = call float @dx.op.binary.f32(i32 35, float %1350, float 3.000000e+00)  ; FMax(a,b)
  %1352 = call float @dx.op.binary.f32(i32 36, float %1351, float 1.100000e+01)  ; FMin(a,b)
  %1353 = fptoui float %1352 to i32
  %1354 = sub i32 %1353, %1239
  %1355 = sub i32 %1353, %1238
  %1356 = add i32 %1354, 25
  %1357 = add i32 %1355, 25
  %1358 = and i32 %1356, 31
  %1359 = and i32 %1357, 31
  %1360 = shl i32 1, %1358
  %1361 = shl i32 1, %1359
  %1362 = icmp ugt i32 %1354, 7
  %1363 = icmp ugt i32 %1355, 7
  %1364 = uitofp i32 %1360 to float
  %1365 = select i1 %1362, float %1364, float 1.000000e+00
  %1366 = uitofp i32 %1361 to float
  %1367 = select i1 %1363, float %1366, float 1.000000e+00
  %1368 = fmul fast float %1365, %1258
  %1369 = fmul fast float %1367, %1259
  %1370 = fptoui float %1368 to i32
  %1371 = fptoui float %1369 to i32
  %1372 = shl i32 %1353, 24
  %1373 = or i32 %1372, %1160
  %1374 = shl i32 %1371, 8
  %1375 = add i32 %1374, %1370
  %1376 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1377 = extractvalue %dx.types.CBufRet.f32 %1376, 2
  %1378 = extractvalue %dx.types.CBufRet.f32 %1376, 3
  %1379 = fmul fast float %1377, %1342
  %1380 = fmul fast float %1378, %1343
  %1381 = fadd fast float %1379, 0x3FE0100000000000
  %1382 = fadd fast float %1380, 0x3FE0100000000000
  %1383 = call float @dx.op.unary.f32(i32 22, float %1381)  ; Frc(value)
  %1384 = call float @dx.op.unary.f32(i32 22, float %1382)  ; Frc(value)
  %1385 = fsub fast float 1.000000e+00, %1383
  %1386 = fmul fast float %1385, %1384
  %1387 = fmul fast float %1384, %1383
  %1388 = fsub fast float 1.000000e+00, %1384
  %1389 = fmul fast float %1388, %1383
  %1390 = fmul fast float %1388, %1385
  %1391 = icmp eq i32 %1285, 0
  br i1 %1391, label %1169, label %1392

; <label>:1392                                    ; preds = %1236
  br i1 %1039, label %1398, label %1393

; <label>:1393                                    ; preds = %1392
  %1394 = icmp ult i32 %1199, 2
  br i1 %1394, label %1398, label %1395

; <label>:1395                                    ; preds = %1393
  %1396 = icmp ult i32 %1199, 4
  %1397 = select i1 %1396, float %1068, float %1069
  br label %1398

; <label>:1398                                    ; preds = %1395, %1393, %1392
  %1399 = phi float [ 1.000000e+00, %1392 ], [ %1067, %1393 ], [ %1397, %1395 ]
  %1400 = fcmp fast ogt float %1399, 0.000000e+00
  br i1 %1400, label %1401, label %1169

; <label>:1401                                    ; preds = %1398
  %1402 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1403 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1404 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1402, %dx.types.Handle %1403, float %1342, float %1343, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1405 = extractvalue %dx.types.ResRet.f32 %1404, 0
  %1406 = extractvalue %dx.types.ResRet.f32 %1404, 1
  %1407 = extractvalue %dx.types.ResRet.f32 %1404, 2
  %1408 = extractvalue %dx.types.ResRet.f32 %1404, 3
  %1409 = fdiv fast float %1223, %1197
  %1410 = fmul fast float %1409, 5.000000e-01
  %1411 = fsub fast float 5.000000e-01, %1410
  %1412 = fdiv fast float %1054, %1197
  %1413 = fmul fast float %1412, 2.500000e-01
  %1414 = fcmp uge float %1405, 1.000000e+00
  %1415 = or i1 %1039, %1414
  %1416 = select i1 %1414, float 0.000000e+00, float 1.000000e+00
  br i1 %1415, label %1424, label %1417

; <label>:1417                                    ; preds = %1401
  %1418 = fsub fast float %1411, %1405
  %1419 = call float @dx.op.unary.f32(i32 6, float %1418)  ; FAbs(value)
  %1420 = fsub fast float %1419, %1412
  %1421 = fdiv fast float %1420, %1413
  %1422 = call float @dx.op.unary.f32(i32 7, float %1421)  ; Saturate(value)
  %1423 = fsub fast float 1.000000e+00, %1422
  br label %1424

; <label>:1424                                    ; preds = %1417, %1401
  %1425 = phi float [ %1423, %1417 ], [ %1416, %1401 ]
  %1426 = fcmp uge float %1406, 1.000000e+00
  %1427 = or i1 %1039, %1426
  %1428 = select i1 %1426, float 0.000000e+00, float 1.000000e+00
  br i1 %1427, label %3284, label %3277

; <label>:1429                                    ; preds = %3308
  %1430 = fdiv fast float %3310, %3314
  %1431 = fdiv fast float %3311, %3314
  %1432 = fdiv fast float %3312, %3314
  %1433 = fdiv fast float %3313, %3314
  %1434 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1435 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1434, %dx.types.Handle %1403, float %1342, float %1343, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1436 = extractvalue %dx.types.ResRet.f32 %1435, 0
  %1437 = extractvalue %dx.types.ResRet.f32 %1435, 1
  %1438 = extractvalue %dx.types.ResRet.f32 %1435, 2
  %1439 = extractvalue %dx.types.ResRet.f32 %1435, 3
  %1440 = call float @dx.op.dot4.f32(i32 56, float %1436, float %1437, float %1438, float %1439, float %1430, float %1431, float %1432, float %1433)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1441 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1442 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1441, %dx.types.Handle %1403, float %1342, float %1343, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1443 = extractvalue %dx.types.ResRet.f32 %1442, 0
  %1444 = extractvalue %dx.types.ResRet.f32 %1442, 1
  %1445 = extractvalue %dx.types.ResRet.f32 %1442, 2
  %1446 = extractvalue %dx.types.ResRet.f32 %1442, 3
  %1447 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1441, %dx.types.Handle %1403, float %1342, float %1343, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1448 = extractvalue %dx.types.ResRet.f32 %1447, 0
  %1449 = extractvalue %dx.types.ResRet.f32 %1447, 1
  %1450 = extractvalue %dx.types.ResRet.f32 %1447, 2
  %1451 = extractvalue %dx.types.ResRet.f32 %1447, 3
  %1452 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1441, %dx.types.Handle %1403, float %1342, float %1343, float undef, float undef, i32 0, i32 0, i32 2)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1453 = extractvalue %dx.types.ResRet.f32 %1452, 0
  %1454 = extractvalue %dx.types.ResRet.f32 %1452, 1
  %1455 = extractvalue %dx.types.ResRet.f32 %1452, 2
  %1456 = extractvalue %dx.types.ResRet.f32 %1452, 3
  %1457 = call float @dx.op.dot4.f32(i32 56, float %1443, float %1444, float %1445, float %1446, float %1430, float %1431, float %1432, float %1433)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1458 = call float @dx.op.dot4.f32(i32 56, float %1448, float %1449, float %1450, float %1451, float %1430, float %1431, float %1432, float %1433)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1459 = call float @dx.op.dot4.f32(i32 56, float %1453, float %1454, float %1455, float %1456, float %1430, float %1431, float %1432, float %1433)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1460 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %1461 = extractvalue %dx.types.CBufRet.i32 %1460, 2
  %1462 = icmp eq i32 %1461, 11
  br i1 %1462, label %1463, label %1483

; <label>:1463                                    ; preds = %1429
  %1464 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1465 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1464, %dx.types.Handle %1403, float %1342, float %1343, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1466 = extractvalue %dx.types.ResRet.f32 %1465, 0
  %1467 = extractvalue %dx.types.ResRet.f32 %1465, 1
  %1468 = extractvalue %dx.types.ResRet.f32 %1465, 2
  %1469 = extractvalue %dx.types.ResRet.f32 %1465, 3
  %1470 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1464, %dx.types.Handle %1403, float %1342, float %1343, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1471 = extractvalue %dx.types.ResRet.f32 %1470, 0
  %1472 = extractvalue %dx.types.ResRet.f32 %1470, 1
  %1473 = extractvalue %dx.types.ResRet.f32 %1470, 2
  %1474 = extractvalue %dx.types.ResRet.f32 %1470, 3
  %1475 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1464, %dx.types.Handle %1403, float %1342, float %1343, float undef, float undef, i32 0, i32 0, i32 2)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1476 = extractvalue %dx.types.ResRet.f32 %1475, 0
  %1477 = extractvalue %dx.types.ResRet.f32 %1475, 1
  %1478 = extractvalue %dx.types.ResRet.f32 %1475, 2
  %1479 = extractvalue %dx.types.ResRet.f32 %1475, 3
  %1480 = call float @dx.op.dot4.f32(i32 56, float %1466, float %1467, float %1468, float %1469, float %1430, float %1431, float %1432, float %1433)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1481 = call float @dx.op.dot4.f32(i32 56, float %1471, float %1472, float %1473, float %1474, float %1430, float %1431, float %1432, float %1433)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1482 = call float @dx.op.dot4.f32(i32 56, float %1476, float %1477, float %1478, float %1479, float %1430, float %1431, float %1432, float %1433)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  br label %1737

; <label>:1483                                    ; preds = %1429
  %1484 = icmp eq i32 %1461, 12
  br i1 %1484, label %1485, label %1505

; <label>:1485                                    ; preds = %1483
  %1486 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1487 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1486, %dx.types.Handle %1403, float %1342, float %1343, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1488 = extractvalue %dx.types.ResRet.f32 %1487, 0
  %1489 = extractvalue %dx.types.ResRet.f32 %1487, 1
  %1490 = extractvalue %dx.types.ResRet.f32 %1487, 2
  %1491 = extractvalue %dx.types.ResRet.f32 %1487, 3
  %1492 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1486, %dx.types.Handle %1403, float %1342, float %1343, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1493 = extractvalue %dx.types.ResRet.f32 %1492, 0
  %1494 = extractvalue %dx.types.ResRet.f32 %1492, 1
  %1495 = extractvalue %dx.types.ResRet.f32 %1492, 2
  %1496 = extractvalue %dx.types.ResRet.f32 %1492, 3
  %1497 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1486, %dx.types.Handle %1403, float %1342, float %1343, float undef, float undef, i32 0, i32 0, i32 2)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1498 = extractvalue %dx.types.ResRet.f32 %1497, 0
  %1499 = extractvalue %dx.types.ResRet.f32 %1497, 1
  %1500 = extractvalue %dx.types.ResRet.f32 %1497, 2
  %1501 = extractvalue %dx.types.ResRet.f32 %1497, 3
  %1502 = call float @dx.op.dot4.f32(i32 56, float %1488, float %1489, float %1490, float %1491, float %1430, float %1431, float %1432, float %1433)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1503 = call float @dx.op.dot4.f32(i32 56, float %1493, float %1494, float %1495, float %1496, float %1430, float %1431, float %1432, float %1433)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1504 = call float @dx.op.dot4.f32(i32 56, float %1498, float %1499, float %1500, float %1501, float %1430, float %1431, float %1432, float %1433)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  br label %1737

; <label>:1505                                    ; preds = %1483
  %1506 = icmp eq i32 %1461, 5
  br i1 %1506, label %1507, label %1552

; <label>:1507                                    ; preds = %1505
  %1508 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1509 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1508, %dx.types.Handle %1403, float %1342, float %1343, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1510 = extractvalue %dx.types.ResRet.f32 %1509, 0
  %1511 = extractvalue %dx.types.ResRet.f32 %1509, 1
  %1512 = extractvalue %dx.types.ResRet.f32 %1509, 2
  %1513 = extractvalue %dx.types.ResRet.f32 %1509, 3
  %1514 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1508, %dx.types.Handle %1403, float %1342, float %1343, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1515 = extractvalue %dx.types.ResRet.f32 %1514, 0
  %1516 = extractvalue %dx.types.ResRet.f32 %1514, 1
  %1517 = extractvalue %dx.types.ResRet.f32 %1514, 2
  %1518 = extractvalue %dx.types.ResRet.f32 %1514, 3
  %1519 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1508, %dx.types.Handle %1403, float %1342, float %1343, float undef, float undef, i32 0, i32 0, i32 2)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1520 = extractvalue %dx.types.ResRet.f32 %1519, 0
  %1521 = extractvalue %dx.types.ResRet.f32 %1519, 1
  %1522 = extractvalue %dx.types.ResRet.f32 %1519, 2
  %1523 = extractvalue %dx.types.ResRet.f32 %1519, 3
  %1524 = call float @dx.op.dot4.f32(i32 56, float %1510, float %1511, float %1512, float %1513, float %1430, float %1431, float %1432, float %1433)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1525 = call float @dx.op.dot4.f32(i32 56, float %1515, float %1516, float %1517, float %1518, float %1430, float %1431, float %1432, float %1433)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1526 = call float @dx.op.dot4.f32(i32 56, float %1520, float %1521, float %1522, float %1523, float %1430, float %1431, float %1432, float %1433)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1527 = fmul fast float %1524, %1524
  %1528 = fmul fast float %1525, %1525
  %1529 = fmul fast float %1526, %1526
  %1530 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1531 = extractvalue %dx.types.CBufRet.f32 %1530, 0
  %1532 = call float @dx.op.unary.f32(i32 23, float %1527)  ; Log(value)
  %1533 = call float @dx.op.unary.f32(i32 23, float %1528)  ; Log(value)
  %1534 = call float @dx.op.unary.f32(i32 23, float %1529)  ; Log(value)
  %1535 = fmul fast float %1532, %1531
  %1536 = fmul fast float %1533, %1531
  %1537 = fmul fast float %1534, %1531
  %1538 = call float @dx.op.unary.f32(i32 21, float %1535)  ; Exp(value)
  %1539 = call float @dx.op.unary.f32(i32 21, float %1536)  ; Exp(value)
  %1540 = call float @dx.op.unary.f32(i32 21, float %1537)  ; Exp(value)
  %1541 = call float @dx.op.unary.f32(i32 7, float %1538)  ; Saturate(value)
  %1542 = call float @dx.op.unary.f32(i32 7, float %1539)  ; Saturate(value)
  %1543 = call float @dx.op.unary.f32(i32 7, float %1540)  ; Saturate(value)
  %1544 = call float @dx.op.binary.f32(i32 36, float %1541, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1545 = call float @dx.op.binary.f32(i32 36, float %1542, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1546 = call float @dx.op.binary.f32(i32 36, float %1543, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1547 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1548 = extractvalue %dx.types.CBufRet.f32 %1547, 2
  %1549 = fmul fast float %1548, %1544
  %1550 = fmul fast float %1548, %1545
  %1551 = fmul fast float %1548, %1546
  br label %1737

; <label>:1552                                    ; preds = %1505
  %1553 = icmp eq i32 %1461, 7
  br i1 %1553, label %1554, label %1615

; <label>:1554                                    ; preds = %1552
  %1555 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1163, i32 %1161, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1556 = extractvalue %dx.types.ResRet.f32 %1555, 0
  %1557 = extractvalue %dx.types.ResRet.f32 %1555, 1
  %1558 = extractvalue %dx.types.ResRet.f32 %1555, 2
  %1559 = add i32 %1161, 1
  %1560 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1163, i32 %1559, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1561 = extractvalue %dx.types.ResRet.f32 %1560, 0
  %1562 = extractvalue %dx.types.ResRet.f32 %1560, 1
  %1563 = extractvalue %dx.types.ResRet.f32 %1560, 2
  %1564 = add i32 %1161, 2
  %1565 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1163, i32 %1564, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1566 = extractvalue %dx.types.ResRet.f32 %1565, 0
  %1567 = extractvalue %dx.types.ResRet.f32 %1565, 1
  %1568 = extractvalue %dx.types.ResRet.f32 %1565, 2
  %1569 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1570 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1569, %dx.types.Handle %1403, float %1342, float %1343, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1571 = extractvalue %dx.types.ResRet.f32 %1570, 0
  %1572 = extractvalue %dx.types.ResRet.f32 %1570, 1
  %1573 = extractvalue %dx.types.ResRet.f32 %1570, 2
  %1574 = extractvalue %dx.types.ResRet.f32 %1570, 3
  %1575 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1569, %dx.types.Handle %1403, float %1342, float %1343, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1576 = extractvalue %dx.types.ResRet.f32 %1575, 0
  %1577 = extractvalue %dx.types.ResRet.f32 %1575, 1
  %1578 = extractvalue %dx.types.ResRet.f32 %1575, 2
  %1579 = extractvalue %dx.types.ResRet.f32 %1575, 3
  %1580 = call float @dx.op.dot4.f32(i32 56, float %1571, float %1572, float %1573, float %1574, float %1430, float %1431, float %1432, float %1433)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1581 = call float @dx.op.dot4.f32(i32 56, float %1576, float %1577, float %1578, float %1579, float %1430, float %1431, float %1432, float %1433)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1582 = fmul fast float %1580, 2.000000e+00
  %1583 = fmul fast float %1581, 2.000000e+00
  %1584 = fadd fast float %1582, -1.000000e+00
  %1585 = fadd fast float %1583, -1.000000e+00
  %1586 = call float @dx.op.dot2.f32(i32 54, float %1584, float %1585, float %1584, float %1585)  ; Dot2(ax,ay,bx,by)
  %1587 = fsub fast float 1.000000e+00, %1586
  %1588 = call float @dx.op.binary.f32(i32 35, float %1587, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1589 = call float @dx.op.unary.f32(i32 24, float %1588)  ; Sqrt(value)
  %1590 = fmul fast float %1584, %1556
  %1591 = call float @dx.op.tertiary.f32(i32 46, float %1557, float %1585, float %1590)  ; FMad(a,b,c)
  %1592 = call float @dx.op.tertiary.f32(i32 46, float %1558, float %1589, float %1591)  ; FMad(a,b,c)
  %1593 = fmul fast float %1584, %1561
  %1594 = call float @dx.op.tertiary.f32(i32 46, float %1562, float %1585, float %1593)  ; FMad(a,b,c)
  %1595 = call float @dx.op.tertiary.f32(i32 46, float %1563, float %1589, float %1594)  ; FMad(a,b,c)
  %1596 = fmul fast float %1584, %1566
  %1597 = call float @dx.op.tertiary.f32(i32 46, float %1567, float %1585, float %1596)  ; FMad(a,b,c)
  %1598 = call float @dx.op.tertiary.f32(i32 46, float %1568, float %1589, float %1597)  ; FMad(a,b,c)
  %1599 = call float @dx.op.dot3.f32(i32 55, float %1592, float %1595, float %1598, float %1592, float %1595, float %1598)  ; Dot3(ax,ay,az,bx,by,bz)
  %1600 = call float @dx.op.unary.f32(i32 25, float %1599)  ; Rsqrt(value)
  %1601 = fmul fast float %1592, 5.000000e-01
  %1602 = fmul fast float %1601, %1600
  %1603 = fmul fast float %1595, 5.000000e-01
  %1604 = fmul fast float %1603, %1600
  %1605 = fmul fast float %1598, 5.000000e-01
  %1606 = fmul fast float %1605, %1600
  %1607 = fadd fast float %1602, 5.000000e-01
  %1608 = fadd fast float %1604, 5.000000e-01
  %1609 = fadd fast float %1606, 5.000000e-01
  %1610 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1611 = extractvalue %dx.types.CBufRet.f32 %1610, 2
  %1612 = fmul fast float %1607, %1611
  %1613 = fmul fast float %1608, %1611
  %1614 = fmul fast float %1609, %1611
  br label %1737

; <label>:1615                                    ; preds = %1552
  %1616 = icmp eq i32 %1461, 8
  br i1 %1616, label %1617, label %1637

; <label>:1617                                    ; preds = %1615
  %1618 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1619 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1618, %dx.types.Handle %1403, float %1342, float %1343, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1620 = extractvalue %dx.types.ResRet.f32 %1619, 0
  %1621 = extractvalue %dx.types.ResRet.f32 %1619, 1
  %1622 = extractvalue %dx.types.ResRet.f32 %1619, 2
  %1623 = extractvalue %dx.types.ResRet.f32 %1619, 3
  %1624 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1618, %dx.types.Handle %1403, float %1342, float %1343, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1625 = extractvalue %dx.types.ResRet.f32 %1624, 0
  %1626 = extractvalue %dx.types.ResRet.f32 %1624, 1
  %1627 = extractvalue %dx.types.ResRet.f32 %1624, 2
  %1628 = extractvalue %dx.types.ResRet.f32 %1624, 3
  %1629 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1618, %dx.types.Handle %1403, float %1342, float %1343, float undef, float undef, i32 0, i32 0, i32 2)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1630 = extractvalue %dx.types.ResRet.f32 %1629, 0
  %1631 = extractvalue %dx.types.ResRet.f32 %1629, 1
  %1632 = extractvalue %dx.types.ResRet.f32 %1629, 2
  %1633 = extractvalue %dx.types.ResRet.f32 %1629, 3
  %1634 = call float @dx.op.dot4.f32(i32 56, float %1620, float %1621, float %1622, float %1623, float %1430, float %1431, float %1432, float %1433)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1635 = call float @dx.op.dot4.f32(i32 56, float %1625, float %1626, float %1627, float %1628, float %1430, float %1431, float %1432, float %1433)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1636 = call float @dx.op.dot4.f32(i32 56, float %1630, float %1631, float %1632, float %1633, float %1430, float %1431, float %1432, float %1433)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  br label %1737

; <label>:1637                                    ; preds = %1615
  %1638 = icmp eq i32 %1461, 9
  br i1 %1638, label %1639, label %1643

; <label>:1639                                    ; preds = %1637
  %1640 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1641 = extractvalue %dx.types.CBufRet.f32 %1640, 2
  %1642 = fmul fast float %1641, %1440
  br label %1737

; <label>:1643                                    ; preds = %1637
  %1644 = icmp eq i32 %1461, 10
  br i1 %1644, label %1645, label %1693

; <label>:1645                                    ; preds = %1643
  %1646 = and i32 %1160, 3
  %1647 = uitofp i32 %1646 to float
  %1648 = fmul fast float %1647, 0x3FD5555560000000
  %1649 = lshr i32 %1160, 2
  %1650 = and i32 %1649, 3
  %1651 = uitofp i32 %1650 to float
  %1652 = fmul fast float %1651, 0x3FD5555560000000
  %1653 = fsub fast float 1.000000e+00, %1648
  %1654 = fsub fast float %1653, %1652
  %1655 = call float @dx.op.unary.f32(i32 7, float %1654)  ; Saturate(value)
  %1656 = fmul fast float %1342, 1.250000e-01
  %1657 = fmul fast float %1656, %1377
  %1658 = fmul fast float %1343, 1.250000e-01
  %1659 = fmul fast float %1658, %1378
  %1660 = call float @dx.op.unary.f32(i32 22, float %1657)  ; Frc(value)
  %1661 = call float @dx.op.unary.f32(i32 22, float %1659)  ; Frc(value)
  %1662 = fadd fast float %1660, -5.000000e-01
  %1663 = fadd fast float %1661, -5.000000e-01
  %1664 = call float @dx.op.unary.f32(i32 6, float %1662)  ; FAbs(value)
  %1665 = call float @dx.op.unary.f32(i32 6, float %1663)  ; FAbs(value)
  %1666 = fsub fast float -0.000000e+00, %1664
  %1667 = fsub fast float -0.000000e+00, %1665
  %1668 = fsub fast float 0x3F847AE140000000, %1664
  %1669 = fsub fast float 0x3F847AE140000000, %1665
  %1670 = fdiv fast float %1668, %1666
  %1671 = fdiv fast float %1669, %1667
  %1672 = call float @dx.op.unary.f32(i32 7, float %1670)  ; Saturate(value)
  %1673 = call float @dx.op.unary.f32(i32 7, float %1671)  ; Saturate(value)
  %1674 = fmul fast float %1672, 2.000000e+00
  %1675 = fmul fast float %1673, 2.000000e+00
  %1676 = fsub fast float 3.000000e+00, %1674
  %1677 = fsub fast float 3.000000e+00, %1675
  %1678 = fmul float %1672, %1673
  %1679 = fmul float %1678, %1678
  %1680 = fmul fast float %1677, %1676
  %1681 = fmul fast float %1680, %1679
  %1682 = call float @dx.op.unary.f32(i32 7, float %1681)  ; Saturate(value)
  %1683 = fmul fast float %1682, 7.500000e-01
  %1684 = fadd fast float %1683, 2.500000e-01
  %1685 = fmul fast float %1684, %1648
  %1686 = fmul fast float %1684, %1652
  %1687 = fmul fast float %1684, %1655
  %1688 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1689 = extractvalue %dx.types.CBufRet.f32 %1688, 2
  %1690 = fmul fast float %1685, %1689
  %1691 = fmul fast float %1686, %1689
  %1692 = fmul fast float %1687, %1689
  br label %1737

; <label>:1693                                    ; preds = %1643
  %1694 = add i32 %1461, -15
  %1695 = icmp ult i32 %1694, 4
  br i1 %1695, label %1696, label %1737

; <label>:1696                                    ; preds = %1693
  %1697 = icmp eq i32 %1461, 15
  %1698 = mul i32 %1279, 5
  %1699 = add i32 %1698, 4
  %1700 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1701 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1700, i32 %1699, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1702 = extractvalue %dx.types.ResRet.f32 %1701, 0
  %1703 = bitcast float %1702 to i32
  br i1 %1697, label %1718, label %1704

; <label>:1704                                    ; preds = %1696
  %1705 = extractvalue %dx.types.ResRet.f32 %1701, 1
  %1706 = bitcast float %1705 to i32
  %1707 = icmp eq i32 %1461, 16
  br i1 %1707, label %1718, label %1708

; <label>:1708                                    ; preds = %1704
  %1709 = icmp eq i32 %1461, 17
  br i1 %1709, label %1710, label %1714

; <label>:1710                                    ; preds = %1708
  %1711 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  %1712 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1711, i32 %1279, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1713 = extractvalue %dx.types.ResRet.i32 %1712, 0
  br label %1718

; <label>:1714                                    ; preds = %1708
  %1715 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  %1716 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1715, i32 %1279, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1717 = extractvalue %dx.types.ResRet.i32 %1716, 0
  br label %1718

; <label>:1718                                    ; preds = %1714, %1710, %1704, %1696
  %1719 = phi i32 [ %1713, %1710 ], [ %1717, %1714 ], [ %1703, %1696 ], [ %1706, %1704 ]
  %1720 = phi float [ 8.000000e+00, %1710 ], [ 8.000000e+00, %1714 ], [ 8.000000e+00, %1696 ], [ 3.200000e+01, %1704 ]
  %1721 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1722 = extractvalue %dx.types.CBufRet.i32 %1721, 3
  %1723 = sub i32 %1722, %1719
  %1724 = uitofp i32 %1723 to float
  %1725 = fdiv fast float %1724, %1720
  %1726 = call float @dx.op.unary.f32(i32 7, float %1725)  ; Saturate(value)
  %1727 = fsub fast float 1.000000e+00, %1726
  %1728 = icmp eq i32 %1722, %1719
  %1729 = select i1 %1728, float 1.000000e+00, float %1727
  %1730 = select i1 %1728, float 1.000000e+00, float 0.000000e+00
  %1731 = select i1 %1728, float 1.000000e+00, float %1726
  %1732 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1733 = extractvalue %dx.types.CBufRet.f32 %1732, 2
  %1734 = fmul fast float %1729, %1733
  %1735 = fmul fast float %1733, %1730
  %1736 = fmul fast float %1733, %1731
  br label %1737

; <label>:1737                                    ; preds = %1718, %1693, %1645, %1639, %1617, %1554, %1507, %1485, %1463
  %1738 = phi float [ %1480, %1463 ], [ %1502, %1485 ], [ %1549, %1507 ], [ %1612, %1554 ], [ %1634, %1617 ], [ %1642, %1639 ], [ %1690, %1645 ], [ %1734, %1718 ], [ %1457, %1693 ]
  %1739 = phi float [ %1481, %1463 ], [ %1503, %1485 ], [ %1550, %1507 ], [ %1613, %1554 ], [ %1635, %1617 ], [ %1642, %1639 ], [ %1691, %1645 ], [ %1735, %1718 ], [ %1458, %1693 ]
  %1740 = phi float [ %1482, %1463 ], [ %1504, %1485 ], [ %1551, %1507 ], [ %1614, %1554 ], [ %1636, %1617 ], [ %1642, %1639 ], [ %1692, %1645 ], [ %1736, %1718 ], [ %1459, %1693 ]
  %1741 = fmul fast float %1738, %3315
  %1742 = fmul fast float %1739, %3315
  %1743 = fmul fast float %1740, %3315
  %1744 = fadd fast float %1741, %1148
  %1745 = fadd fast float %1742, %1149
  %1746 = fadd fast float %1743, %1150
  %1747 = fadd fast float %3315, %1147
  %1748 = fcmp fast ogt float %3315, %1151
  br i1 %1748, label %1749, label %1169

; <label>:1749                                    ; preds = %1737
  br label %1169

; <label>:1750                                    ; preds = %1169
  br label %1751

; <label>:1751                                    ; preds = %1750, %1141
  %1752 = phi float [ 0.000000e+00, %1141 ], [ %1170, %1750 ]
  %1753 = phi float [ 0.000000e+00, %1141 ], [ %1171, %1750 ]
  %1754 = phi float [ 0.000000e+00, %1141 ], [ %1172, %1750 ]
  %1755 = phi float [ 0.000000e+00, %1141 ], [ %1173, %1750 ]
  %1756 = phi i32 [ 0, %1141 ], [ %1175, %1750 ]
  %1757 = phi i32 [ 0, %1141 ], [ %1176, %1750 ]
  %1758 = phi i32 [ 0, %1141 ], [ %1177, %1750 ]
  %1759 = fcmp fast ogt float %1752, 0.000000e+00
  br i1 %1759, label %1760, label %1764

; <label>:1760                                    ; preds = %1751
  %1761 = fdiv fast float %1753, %1752
  %1762 = fdiv fast float %1754, %1752
  %1763 = fdiv fast float %1755, %1752
  br label %1764

; <label>:1764                                    ; preds = %1760, %1751
  %1765 = phi float [ %1761, %1760 ], [ %998, %1751 ]
  %1766 = phi float [ %1762, %1760 ], [ %999, %1751 ]
  %1767 = phi float [ %1763, %1760 ], [ %1000, %1751 ]
  %1768 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1769 = extractvalue %dx.types.CBufRet.i32 %1768, 3
  %1770 = and i32 %1769, %75
  %1771 = and i32 %1769, %76
  %1772 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1773 = extractvalue %dx.types.CBufRet.i32 %1772, 0
  %1774 = extractvalue %dx.types.CBufRet.i32 %1772, 1
  %1775 = icmp eq i32 %1770, %1773
  %1776 = icmp eq i32 %1771, %1774
  %1777 = and i1 %1775, %1776
  br i1 %1777, label %1778, label %1795

; <label>:1778                                    ; preds = %1764
  %1779 = extractvalue %dx.types.CBufRet.i32 %1768, 2
  %1780 = icmp ne i32 %1779, 0
  %1781 = fcmp fast ogt float %1752, 0x3FB99999A0000000
  %1782 = and i1 %1781, %1780
  br i1 %1782, label %1783, label %1795

; <label>:1783                                    ; preds = %1778
  %1784 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  %1785 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1784, i32 0, i32 0, i32 0, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1786 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1787 = extractvalue %dx.types.CBufRet.i32 %1786, 2
  %1788 = icmp ult i32 %1785, %1787
  br i1 %1788, label %1789, label %1791

; <label>:1789                                    ; preds = %1783
  %1790 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4108, i32 8 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=8>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1790, i32 %1785, i32 0, i32 %1756, i32 %1757, i32 undef, i32 undef, i8 3, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %1791

; <label>:1791                                    ; preds = %1789, %1783
  %1792 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1793 = extractvalue %dx.types.CBufRet.i32 %1792, 3
  %1794 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1794, i32 %1758, i32 0, i32 %1793, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %1795

; <label>:1795                                    ; preds = %1791, %1778, %1764
  %1796 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %1797 = extractvalue %dx.types.CBufRet.i32 %1796, 2
  %1798 = icmp eq i32 %1797, 6
  br i1 %1798, label %1799, label %1803

; <label>:1799                                    ; preds = %1795
  %1800 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1801 = extractvalue %dx.types.CBufRet.f32 %1800, 2
  %1802 = fmul fast float %1801, 5.000000e-01
  br label %1803

; <label>:1803                                    ; preds = %1799, %1795, %997, %967, %962
  %1804 = phi float [ 0.000000e+00, %962 ], [ %1802, %1799 ], [ %1765, %1795 ], [ %998, %997 ], [ 0.000000e+00, %967 ]
  %1805 = phi float [ 0.000000e+00, %962 ], [ %1802, %1799 ], [ %1766, %1795 ], [ %999, %997 ], [ 0.000000e+00, %967 ]
  %1806 = phi float [ 0.000000e+00, %962 ], [ %1801, %1799 ], [ %1767, %1795 ], [ %1000, %997 ], [ 0.000000e+00, %967 ]
  br i1 %966, label %1807, label %1808

; <label>:1807                                    ; preds = %1803
  br label %1808

; <label>:1808                                    ; preds = %1807, %1803, %227
  %1809 = phi float [ %213, %227 ], [ %963, %1807 ], [ %213, %1803 ]
  %1810 = phi float [ 1.000000e+00, %227 ], [ 0.000000e+00, %1807 ], [ 1.000000e+00, %1803 ]
  %1811 = phi float [ 0.000000e+00, %227 ], [ %1804, %1807 ], [ 0.000000e+00, %1803 ]
  %1812 = phi float [ 0.000000e+00, %227 ], [ %1805, %1807 ], [ 0.000000e+00, %1803 ]
  %1813 = phi float [ 0.000000e+00, %227 ], [ %1806, %1807 ], [ 0.000000e+00, %1803 ]
  %1814 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %1815 = extractvalue %dx.types.CBufRet.f32 %1814, 0
  %1816 = extractvalue %dx.types.CBufRet.f32 %1814, 1
  %1817 = extractvalue %dx.types.CBufRet.f32 %1814, 2
  %1818 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %1819 = extractvalue %dx.types.CBufRet.f32 %1818, 0
  %1820 = extractvalue %dx.types.CBufRet.f32 %1818, 1
  %1821 = extractvalue %dx.types.CBufRet.f32 %1818, 2
  %1822 = fmul fast float %1815, 2.097152e+06
  %1823 = fmul fast float %1816, 2.097152e+06
  %1824 = fmul fast float %1817, 2.097152e+06
  %1825 = fadd fast float %1822, %1819
  %1826 = fadd fast float %1823, %1820
  %1827 = fadd fast float %1824, %1821
  %1828 = add i32 %196, 53
  %1829 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 %1828)  ; CBufferLoadLegacy(handle,regIndex)
  %1830 = extractvalue %dx.types.CBufRet.f32 %1829, 1
  %1831 = fmul fast float %1825, %1830
  %1832 = fmul fast float %1826, %1830
  %1833 = fmul fast float %1827, %1830
  %1834 = add i32 %196, 59
  %1835 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 %1834)  ; CBufferLoadLegacy(handle,regIndex)
  %1836 = extractvalue %dx.types.CBufRet.f32 %1835, 0
  %1837 = extractvalue %dx.types.CBufRet.f32 %1835, 1
  %1838 = extractvalue %dx.types.CBufRet.f32 %1835, 2
  %1839 = call float @dx.op.unary.f32(i32 12, float %117)  ; Cos(value)
  %1840 = fsub fast float 1.000000e+00, %1839
  %1841 = call float @dx.op.unary.f32(i32 24, float %1840)  ; Sqrt(value)
  %1842 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %1843 = extractvalue %dx.types.CBufRet.i32 %1842, 0
  %1844 = uitofp i32 %1843 to float
  %1845 = fmul fast float %1844, %1841
  %1846 = extractvalue %dx.types.CBufRet.i32 %1842, 2
  %1847 = uitofp i32 %1846 to float
  %1848 = call float @dx.op.unary.f32(i32 23, float %1845)  ; Log(value)
  %1849 = call float @dx.op.binary.f32(i32 35, float %1848, float 0.000000e+00)  ; FMax(a,b)
  %1850 = call float @dx.op.binary.f32(i32 36, float %1849, float %1847)  ; FMin(a,b)
  %1851 = fadd fast float %1836, -5.000000e-01
  %1852 = fadd fast float %1851, %1831
  %1853 = fadd fast float %1837, -5.000000e-01
  %1854 = fadd fast float %1853, %1832
  %1855 = fadd fast float %1838, -5.000000e-01
  %1856 = fadd fast float %1855, %1833
  %1857 = call float @dx.op.unary.f32(i32 27, float %1852)  ; Round_ni(value)
  %1858 = call float @dx.op.unary.f32(i32 27, float %1854)  ; Round_ni(value)
  %1859 = call float @dx.op.unary.f32(i32 27, float %1856)  ; Round_ni(value)
  %1860 = fptosi float %1857 to i32
  %1861 = fptosi float %1858 to i32
  %1862 = fptosi float %1859 to i32
  %1863 = call float @dx.op.unary.f32(i32 22, float %1852)  ; Frc(value)
  %1864 = call float @dx.op.unary.f32(i32 22, float %1854)  ; Frc(value)
  %1865 = call float @dx.op.unary.f32(i32 22, float %1856)  ; Frc(value)
  %1866 = extractvalue %dx.types.CBufRet.f32 %1829, 0
  %1867 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 47)  ; CBufferLoadLegacy(handle,regIndex)
  %1868 = extractvalue %dx.types.CBufRet.i32 %1867, 2
  %1869 = mul i32 %1868, %196
  %1870 = add i32 %1869, %1860
  %1871 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %1872 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1871, i32 0, i32 %1870, i32 %1861, i32 %1862, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1873 = extractvalue %dx.types.ResRet.i32 %1872, 0
  %1874 = uitofp i32 %1860 to float
  %1875 = uitofp i32 %1861 to float
  %1876 = uitofp i32 %1862 to float
  %1877 = extractvalue %dx.types.CBufRet.f32 %1829, 2
  %1878 = fmul fast float %1877, %1874
  %1879 = fmul fast float %1877, %1875
  %1880 = fmul fast float %1877, %1876
  %1881 = add i32 %196, 65
  %1882 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 %1881)  ; CBufferLoadLegacy(handle,regIndex)
  %1883 = extractvalue %dx.types.CBufRet.f32 %1882, 0
  %1884 = extractvalue %dx.types.CBufRet.f32 %1882, 1
  %1885 = extractvalue %dx.types.CBufRet.f32 %1882, 2
  %1886 = fadd fast float %1878, %1883
  %1887 = fadd fast float %1879, %1884
  %1888 = fadd fast float %1880, %1885
  %1889 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1890 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1889, i32 %1873, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1891 = extractvalue %dx.types.ResRet.f32 %1890, 0
  %1892 = extractvalue %dx.types.ResRet.f32 %1890, 1
  %1893 = extractvalue %dx.types.ResRet.f32 %1890, 2
  %1894 = fadd fast float %1886, %1891
  %1895 = fadd fast float %1887, %1892
  %1896 = fadd fast float %1888, %1893
  %1897 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 46)  ; CBufferLoadLegacy(handle,regIndex)
  %1898 = extractvalue %dx.types.CBufRet.f32 %1897, 0
  %1899 = fmul fast float %1898, %1866
  %1900 = fsub fast float %1825, %1894
  %1901 = fsub fast float %1826, %1895
  %1902 = fsub fast float %1827, %1896
  %1903 = call float @dx.op.dot3.f32(i32 55, float %1900, float %1901, float %1902, float %1900, float %1901, float %1902)  ; Dot3(ax,ay,az,bx,by,bz)
  %1904 = call float @dx.op.dot3.f32(i32 55, float %113, float %114, float %115, float %113, float %114, float %115)  ; Dot3(ax,ay,az,bx,by,bz)
  %1905 = call float @dx.op.dot3.f32(i32 55, float %113, float %114, float %115, float %1900, float %1901, float %1902)  ; Dot3(ax,ay,az,bx,by,bz)
  %1906 = fmul fast float %1905, 2.000000e+00
  %1907 = fmul fast float %1899, %1899
  %1908 = fsub fast float %1903, %1907
  %1909 = fmul fast float %1906, %1906
  %1910 = fmul fast float %1904, 4.000000e+00
  %1911 = fmul fast float %1910, %1908
  %1912 = fsub fast float %1909, %1911
  %1913 = fcmp fast ult float %1912, 0.000000e+00
  br i1 %1913, label %1919, label %1914, !dx.controlflow.hints !72

; <label>:1914                                    ; preds = %1808
  %1915 = call float @dx.op.unary.f32(i32 24, float %1912)  ; Sqrt(value)
  %1916 = fsub fast float %1915, %1906
  %1917 = fmul fast float %1904, 2.000000e+00
  %1918 = fdiv fast float %1916, %1917
  br label %1919

; <label>:1919                                    ; preds = %1914, %1808
  %1920 = phi float [ %1918, %1914 ], [ -1.000000e+00, %1808 ]
  %1921 = fmul fast float %1920, %113
  %1922 = fmul fast float %1920, %114
  %1923 = fmul fast float %1920, %115
  %1924 = fadd fast float %1900, %1921
  %1925 = fadd fast float %1901, %1922
  %1926 = fadd fast float %1902, %1923
  %1927 = fmul fast float %1920, %1920
  %1928 = call float @dx.op.dot3.f32(i32 55, float %1924, float %1925, float %1926, float %113, float %114, float %115)  ; Dot3(ax,ay,az,bx,by,bz)
  %1929 = fmul fast float %1928, %1899
  %1930 = fdiv fast float %1927, %1929
  %1931 = call float @dx.op.dot3.f32(i32 55, float %1924, float %1925, float %1926, float %1924, float %1925, float %1926)  ; Dot3(ax,ay,az,bx,by,bz)
  %1932 = call float @dx.op.unary.f32(i32 25, float %1931)  ; Rsqrt(value)
  %1933 = fmul fast float %1932, %1924
  %1934 = fmul fast float %1932, %1925
  %1935 = fmul fast float %1932, %1926
  %1936 = call float @dx.op.unary.f32(i32 6, float %1933)  ; FAbs(value)
  %1937 = call float @dx.op.unary.f32(i32 6, float %1934)  ; FAbs(value)
  %1938 = call float @dx.op.unary.f32(i32 6, float %1935)  ; FAbs(value)
  %1939 = fsub fast float 1.000000e+00, %1938
  %1940 = call float @dx.op.unary.f32(i32 24, float %1939)  ; Sqrt(value)
  %1941 = call float @dx.op.binary.f32(i32 36, float %1936, float %1937)  ; FMin(a,b)
  %1942 = call float @dx.op.binary.f32(i32 35, float %1936, float %1937)  ; FMax(a,b)
  %1943 = fadd fast float %1942, 0x3BF0000000000000
  %1944 = fdiv fast float %1941, %1943
  %1945 = fmul fast float %1944, 0x3F99BE1040000000
  %1946 = fsub fast float 0x3FA5746D00000000, %1945
  %1947 = fmul fast float %1946, %1944
  %1948 = fadd fast float %1947, 0x3FB692C5C0000000
  %1949 = fmul fast float %1948, %1944
  %1950 = fadd fast float %1949, 0xBFCFA8A1C0000000
  %1951 = fmul fast float %1950, %1944
  %1952 = fadd fast float %1951, 0x3F79384B40000000
  %1953 = fmul fast float %1952, %1944
  %1954 = fadd fast float %1953, 0x3FE45BF7C0000000
  %1955 = fmul fast float %1954, %1944
  %1956 = fadd fast float %1955, 0x3ED10F8960000000
  %1957 = fcmp fast olt float %1936, %1937
  %1958 = fsub fast float 0x3FEFFFF780000000, %1955
  %1959 = select i1 %1957, float %1958, float %1956
  %1960 = fmul fast float %1959, %1940
  %1961 = fsub fast float %1940, %1960
  %1962 = fcmp fast olt float %1935, 0.000000e+00
  %1963 = extractvalue %dx.types.CBufRet.i32 %1842, 1
  %1964 = and i32 %1846, 31
  %1965 = shl i32 1, %1964
  %1966 = uitofp i32 %1965 to float
  %1967 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %1968 = icmp eq i32 %1873, -1
  br i1 %1968, label %2014, label %1969

; <label>:1969                                    ; preds = %1919
  %1970 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %1971 = extractvalue %dx.types.CBufRet.i32 %1970, 1
  %1972 = and i32 %1971, 31
  %1973 = lshr i32 %1873, %1972
  %1974 = mul i32 %1973, %1963
  %1975 = uitofp i32 %1974 to float
  %1976 = fsub fast float 1.000000e+00, %1961
  %1977 = select i1 %1962, float %1976, float %1960
  %1978 = bitcast float %1977 to i32
  %1979 = bitcast float %1934 to i32
  %1980 = and i32 %1979, -2147483648
  %1981 = xor i32 %1978, %1980
  %1982 = bitcast i32 %1981 to float
  %1983 = fmul fast float %1982, 5.000000e-01
  %1984 = fadd fast float %1983, 5.000000e-01
  %1985 = fmul fast float %1984, %1844
  %1986 = fadd fast float %1985, %1966
  %1987 = fadd fast float %1986, %1975
  %1988 = extractvalue %dx.types.CBufRet.f32 %1967, 1
  %1989 = fmul fast float %1987, %1988
  %1990 = extractvalue %dx.types.CBufRet.i32 %1970, 0
  %1991 = and i32 %1990, %1873
  %1992 = mul i32 %1991, %1963
  %1993 = uitofp i32 %1992 to float
  %1994 = fsub fast float 1.000000e+00, %1960
  %1995 = select i1 %1962, float %1994, float %1961
  %1996 = bitcast float %1995 to i32
  %1997 = bitcast float %1933 to i32
  %1998 = and i32 %1997, -2147483648
  %1999 = xor i32 %1996, %1998
  %2000 = bitcast i32 %1999 to float
  %2001 = fmul fast float %2000, 5.000000e-01
  %2002 = fadd fast float %2001, 5.000000e-01
  %2003 = fmul fast float %2002, %1844
  %2004 = fadd fast float %2003, %1966
  %2005 = fadd fast float %2004, %1993
  %2006 = extractvalue %dx.types.CBufRet.f32 %1967, 0
  %2007 = fmul fast float %2005, %2006
  %2008 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2009 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2010 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2008, %dx.types.Handle %2009, float %2007, float %1989, float undef, float undef, i32 0, i32 0, i32 undef, float %1850)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2011 = extractvalue %dx.types.ResRet.f32 %2010, 0
  %2012 = extractvalue %dx.types.ResRet.f32 %2010, 1
  %2013 = extractvalue %dx.types.ResRet.f32 %2010, 2
  br label %2014

; <label>:2014                                    ; preds = %1969, %1919
  %2015 = phi float [ %2011, %1969 ], [ 0.000000e+00, %1919 ]
  %2016 = phi float [ %2012, %1969 ], [ 0.000000e+00, %1919 ]
  %2017 = phi float [ %2013, %1969 ], [ 0.000000e+00, %1919 ]
  %2018 = fmul fast float %2015, %1930
  %2019 = fmul fast float %2016, %1930
  %2020 = fmul fast float %2017, %1930
  %2021 = add i32 %1862, 1
  %2022 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1871, i32 0, i32 %1870, i32 %1861, i32 %2021, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2023 = extractvalue %dx.types.ResRet.i32 %2022, 0
  %2024 = uitofp i32 %2021 to float
  %2025 = fmul fast float %1877, %2024
  %2026 = fadd fast float %2025, %1885
  %2027 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1889, i32 %2023, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2028 = extractvalue %dx.types.ResRet.f32 %2027, 0
  %2029 = extractvalue %dx.types.ResRet.f32 %2027, 1
  %2030 = extractvalue %dx.types.ResRet.f32 %2027, 2
  %2031 = fadd fast float %1886, %2028
  %2032 = fadd fast float %1887, %2029
  %2033 = fadd fast float %2026, %2030
  %2034 = fsub fast float %1825, %2031
  %2035 = fsub fast float %1826, %2032
  %2036 = fsub fast float %1827, %2033
  %2037 = call float @dx.op.dot3.f32(i32 55, float %2034, float %2035, float %2036, float %2034, float %2035, float %2036)  ; Dot3(ax,ay,az,bx,by,bz)
  %2038 = call float @dx.op.dot3.f32(i32 55, float %113, float %114, float %115, float %2034, float %2035, float %2036)  ; Dot3(ax,ay,az,bx,by,bz)
  %2039 = fmul fast float %2038, 2.000000e+00
  %2040 = fsub fast float %2037, %1907
  %2041 = fmul fast float %2039, %2039
  %2042 = fmul fast float %1910, %2040
  %2043 = fsub fast float %2041, %2042
  %2044 = fcmp fast ult float %2043, 0.000000e+00
  br i1 %2044, label %2050, label %2045, !dx.controlflow.hints !72

; <label>:2045                                    ; preds = %2014
  %2046 = call float @dx.op.unary.f32(i32 24, float %2043)  ; Sqrt(value)
  %2047 = fsub fast float %2046, %2039
  %2048 = fmul fast float %1904, 2.000000e+00
  %2049 = fdiv fast float %2047, %2048
  br label %2050

; <label>:2050                                    ; preds = %2045, %2014
  %2051 = phi float [ %2049, %2045 ], [ -1.000000e+00, %2014 ]
  %2052 = fmul fast float %2051, %113
  %2053 = fmul fast float %2051, %114
  %2054 = fmul fast float %2051, %115
  %2055 = fadd fast float %2034, %2052
  %2056 = fadd fast float %2035, %2053
  %2057 = fadd fast float %2036, %2054
  %2058 = fmul fast float %2051, %2051
  %2059 = call float @dx.op.dot3.f32(i32 55, float %2055, float %2056, float %2057, float %113, float %114, float %115)  ; Dot3(ax,ay,az,bx,by,bz)
  %2060 = fmul fast float %2059, %1899
  %2061 = fdiv fast float %2058, %2060
  %2062 = call float @dx.op.dot3.f32(i32 55, float %2055, float %2056, float %2057, float %2055, float %2056, float %2057)  ; Dot3(ax,ay,az,bx,by,bz)
  %2063 = call float @dx.op.unary.f32(i32 25, float %2062)  ; Rsqrt(value)
  %2064 = fmul fast float %2063, %2055
  %2065 = fmul fast float %2063, %2056
  %2066 = fmul fast float %2063, %2057
  %2067 = call float @dx.op.unary.f32(i32 6, float %2064)  ; FAbs(value)
  %2068 = call float @dx.op.unary.f32(i32 6, float %2065)  ; FAbs(value)
  %2069 = call float @dx.op.unary.f32(i32 6, float %2066)  ; FAbs(value)
  %2070 = fsub fast float 1.000000e+00, %2069
  %2071 = call float @dx.op.unary.f32(i32 24, float %2070)  ; Sqrt(value)
  %2072 = call float @dx.op.binary.f32(i32 36, float %2067, float %2068)  ; FMin(a,b)
  %2073 = call float @dx.op.binary.f32(i32 35, float %2067, float %2068)  ; FMax(a,b)
  %2074 = fadd fast float %2073, 0x3BF0000000000000
  %2075 = fdiv fast float %2072, %2074
  %2076 = fmul fast float %2075, 0x3F99BE1040000000
  %2077 = fsub fast float 0x3FA5746D00000000, %2076
  %2078 = fmul fast float %2077, %2075
  %2079 = fadd fast float %2078, 0x3FB692C5C0000000
  %2080 = fmul fast float %2079, %2075
  %2081 = fadd fast float %2080, 0xBFCFA8A1C0000000
  %2082 = fmul fast float %2081, %2075
  %2083 = fadd fast float %2082, 0x3F79384B40000000
  %2084 = fmul fast float %2083, %2075
  %2085 = fadd fast float %2084, 0x3FE45BF7C0000000
  %2086 = fmul fast float %2085, %2075
  %2087 = fadd fast float %2086, 0x3ED10F8960000000
  %2088 = fcmp fast olt float %2067, %2068
  %2089 = fsub fast float 0x3FEFFFF780000000, %2086
  %2090 = select i1 %2088, float %2089, float %2087
  %2091 = fmul fast float %2090, %2071
  %2092 = fsub fast float %2071, %2091
  %2093 = fcmp fast olt float %2066, 0.000000e+00
  %2094 = icmp eq i32 %2023, -1
  br i1 %2094, label %2140, label %2095

; <label>:2095                                    ; preds = %2050
  %2096 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %2097 = extractvalue %dx.types.CBufRet.i32 %2096, 1
  %2098 = and i32 %2097, 31
  %2099 = lshr i32 %2023, %2098
  %2100 = mul i32 %2099, %1963
  %2101 = uitofp i32 %2100 to float
  %2102 = fsub fast float 1.000000e+00, %2092
  %2103 = select i1 %2093, float %2102, float %2091
  %2104 = bitcast float %2103 to i32
  %2105 = bitcast float %2065 to i32
  %2106 = and i32 %2105, -2147483648
  %2107 = xor i32 %2104, %2106
  %2108 = bitcast i32 %2107 to float
  %2109 = fmul fast float %2108, 5.000000e-01
  %2110 = fadd fast float %2109, 5.000000e-01
  %2111 = fmul fast float %2110, %1844
  %2112 = fadd fast float %2111, %1966
  %2113 = fadd fast float %2112, %2101
  %2114 = extractvalue %dx.types.CBufRet.f32 %1967, 1
  %2115 = fmul fast float %2113, %2114
  %2116 = extractvalue %dx.types.CBufRet.i32 %2096, 0
  %2117 = and i32 %2116, %2023
  %2118 = mul i32 %2117, %1963
  %2119 = uitofp i32 %2118 to float
  %2120 = fsub fast float 1.000000e+00, %2091
  %2121 = select i1 %2093, float %2120, float %2092
  %2122 = bitcast float %2121 to i32
  %2123 = bitcast float %2064 to i32
  %2124 = and i32 %2123, -2147483648
  %2125 = xor i32 %2122, %2124
  %2126 = bitcast i32 %2125 to float
  %2127 = fmul fast float %2126, 5.000000e-01
  %2128 = fadd fast float %2127, 5.000000e-01
  %2129 = fmul fast float %2128, %1844
  %2130 = fadd fast float %2129, %1966
  %2131 = fadd fast float %2130, %2119
  %2132 = extractvalue %dx.types.CBufRet.f32 %1967, 0
  %2133 = fmul fast float %2131, %2132
  %2134 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2135 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2136 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2134, %dx.types.Handle %2135, float %2133, float %2115, float undef, float undef, i32 0, i32 0, i32 undef, float %1850)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2137 = extractvalue %dx.types.ResRet.f32 %2136, 0
  %2138 = extractvalue %dx.types.ResRet.f32 %2136, 1
  %2139 = extractvalue %dx.types.ResRet.f32 %2136, 2
  br label %2140

; <label>:2140                                    ; preds = %2095, %2050
  %2141 = phi float [ %2137, %2095 ], [ 0.000000e+00, %2050 ]
  %2142 = phi float [ %2138, %2095 ], [ 0.000000e+00, %2050 ]
  %2143 = phi float [ %2139, %2095 ], [ 0.000000e+00, %2050 ]
  %2144 = fmul fast float %2141, %2061
  %2145 = fmul fast float %2142, %2061
  %2146 = fmul fast float %2143, %2061
  %2147 = add i32 %1861, 1
  %2148 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1871, i32 0, i32 %1870, i32 %2147, i32 %1862, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2149 = extractvalue %dx.types.ResRet.i32 %2148, 0
  %2150 = uitofp i32 %2147 to float
  %2151 = fmul fast float %1877, %2150
  %2152 = fadd fast float %2151, %1884
  %2153 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1889, i32 %2149, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2154 = extractvalue %dx.types.ResRet.f32 %2153, 0
  %2155 = extractvalue %dx.types.ResRet.f32 %2153, 1
  %2156 = extractvalue %dx.types.ResRet.f32 %2153, 2
  %2157 = fadd fast float %1886, %2154
  %2158 = fadd fast float %2152, %2155
  %2159 = fadd fast float %1888, %2156
  %2160 = fsub fast float %1825, %2157
  %2161 = fsub fast float %1826, %2158
  %2162 = fsub fast float %1827, %2159
  %2163 = call float @dx.op.dot3.f32(i32 55, float %2160, float %2161, float %2162, float %2160, float %2161, float %2162)  ; Dot3(ax,ay,az,bx,by,bz)
  %2164 = call float @dx.op.dot3.f32(i32 55, float %113, float %114, float %115, float %2160, float %2161, float %2162)  ; Dot3(ax,ay,az,bx,by,bz)
  %2165 = fmul fast float %2164, 2.000000e+00
  %2166 = fsub fast float %2163, %1907
  %2167 = fmul fast float %2165, %2165
  %2168 = fmul fast float %1910, %2166
  %2169 = fsub fast float %2167, %2168
  %2170 = fcmp fast ult float %2169, 0.000000e+00
  br i1 %2170, label %2176, label %2171, !dx.controlflow.hints !72

; <label>:2171                                    ; preds = %2140
  %2172 = call float @dx.op.unary.f32(i32 24, float %2169)  ; Sqrt(value)
  %2173 = fsub fast float %2172, %2165
  %2174 = fmul fast float %1904, 2.000000e+00
  %2175 = fdiv fast float %2173, %2174
  br label %2176

; <label>:2176                                    ; preds = %2171, %2140
  %2177 = phi float [ %2175, %2171 ], [ -1.000000e+00, %2140 ]
  %2178 = fmul fast float %2177, %113
  %2179 = fmul fast float %2177, %114
  %2180 = fmul fast float %2177, %115
  %2181 = fadd fast float %2160, %2178
  %2182 = fadd fast float %2161, %2179
  %2183 = fadd fast float %2162, %2180
  %2184 = fmul fast float %2177, %2177
  %2185 = call float @dx.op.dot3.f32(i32 55, float %2181, float %2182, float %2183, float %113, float %114, float %115)  ; Dot3(ax,ay,az,bx,by,bz)
  %2186 = fmul fast float %2185, %1899
  %2187 = fdiv fast float %2184, %2186
  %2188 = call float @dx.op.dot3.f32(i32 55, float %2181, float %2182, float %2183, float %2181, float %2182, float %2183)  ; Dot3(ax,ay,az,bx,by,bz)
  %2189 = call float @dx.op.unary.f32(i32 25, float %2188)  ; Rsqrt(value)
  %2190 = fmul fast float %2189, %2181
  %2191 = fmul fast float %2189, %2182
  %2192 = fmul fast float %2189, %2183
  %2193 = call float @dx.op.unary.f32(i32 6, float %2190)  ; FAbs(value)
  %2194 = call float @dx.op.unary.f32(i32 6, float %2191)  ; FAbs(value)
  %2195 = call float @dx.op.unary.f32(i32 6, float %2192)  ; FAbs(value)
  %2196 = fsub fast float 1.000000e+00, %2195
  %2197 = call float @dx.op.unary.f32(i32 24, float %2196)  ; Sqrt(value)
  %2198 = call float @dx.op.binary.f32(i32 36, float %2193, float %2194)  ; FMin(a,b)
  %2199 = call float @dx.op.binary.f32(i32 35, float %2193, float %2194)  ; FMax(a,b)
  %2200 = fadd fast float %2199, 0x3BF0000000000000
  %2201 = fdiv fast float %2198, %2200
  %2202 = fmul fast float %2201, 0x3F99BE1040000000
  %2203 = fsub fast float 0x3FA5746D00000000, %2202
  %2204 = fmul fast float %2203, %2201
  %2205 = fadd fast float %2204, 0x3FB692C5C0000000
  %2206 = fmul fast float %2205, %2201
  %2207 = fadd fast float %2206, 0xBFCFA8A1C0000000
  %2208 = fmul fast float %2207, %2201
  %2209 = fadd fast float %2208, 0x3F79384B40000000
  %2210 = fmul fast float %2209, %2201
  %2211 = fadd fast float %2210, 0x3FE45BF7C0000000
  %2212 = fmul fast float %2211, %2201
  %2213 = fadd fast float %2212, 0x3ED10F8960000000
  %2214 = fcmp fast olt float %2193, %2194
  %2215 = fsub fast float 0x3FEFFFF780000000, %2212
  %2216 = select i1 %2214, float %2215, float %2213
  %2217 = fmul fast float %2216, %2197
  %2218 = fsub fast float %2197, %2217
  %2219 = fcmp fast olt float %2192, 0.000000e+00
  %2220 = icmp eq i32 %2149, -1
  br i1 %2220, label %2266, label %2221

; <label>:2221                                    ; preds = %2176
  %2222 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %2223 = extractvalue %dx.types.CBufRet.i32 %2222, 1
  %2224 = and i32 %2223, 31
  %2225 = lshr i32 %2149, %2224
  %2226 = mul i32 %2225, %1963
  %2227 = uitofp i32 %2226 to float
  %2228 = fsub fast float 1.000000e+00, %2218
  %2229 = select i1 %2219, float %2228, float %2217
  %2230 = bitcast float %2229 to i32
  %2231 = bitcast float %2191 to i32
  %2232 = and i32 %2231, -2147483648
  %2233 = xor i32 %2230, %2232
  %2234 = bitcast i32 %2233 to float
  %2235 = fmul fast float %2234, 5.000000e-01
  %2236 = fadd fast float %2235, 5.000000e-01
  %2237 = fmul fast float %2236, %1844
  %2238 = fadd fast float %2237, %1966
  %2239 = fadd fast float %2238, %2227
  %2240 = extractvalue %dx.types.CBufRet.f32 %1967, 1
  %2241 = fmul fast float %2239, %2240
  %2242 = extractvalue %dx.types.CBufRet.i32 %2222, 0
  %2243 = and i32 %2242, %2149
  %2244 = mul i32 %2243, %1963
  %2245 = uitofp i32 %2244 to float
  %2246 = fsub fast float 1.000000e+00, %2217
  %2247 = select i1 %2219, float %2246, float %2218
  %2248 = bitcast float %2247 to i32
  %2249 = bitcast float %2190 to i32
  %2250 = and i32 %2249, -2147483648
  %2251 = xor i32 %2248, %2250
  %2252 = bitcast i32 %2251 to float
  %2253 = fmul fast float %2252, 5.000000e-01
  %2254 = fadd fast float %2253, 5.000000e-01
  %2255 = fmul fast float %2254, %1844
  %2256 = fadd fast float %2255, %1966
  %2257 = fadd fast float %2256, %2245
  %2258 = extractvalue %dx.types.CBufRet.f32 %1967, 0
  %2259 = fmul fast float %2257, %2258
  %2260 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2261 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2262 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2260, %dx.types.Handle %2261, float %2259, float %2241, float undef, float undef, i32 0, i32 0, i32 undef, float %1850)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2263 = extractvalue %dx.types.ResRet.f32 %2262, 0
  %2264 = extractvalue %dx.types.ResRet.f32 %2262, 1
  %2265 = extractvalue %dx.types.ResRet.f32 %2262, 2
  br label %2266

; <label>:2266                                    ; preds = %2221, %2176
  %2267 = phi float [ %2263, %2221 ], [ 0.000000e+00, %2176 ]
  %2268 = phi float [ %2264, %2221 ], [ 0.000000e+00, %2176 ]
  %2269 = phi float [ %2265, %2221 ], [ 0.000000e+00, %2176 ]
  %2270 = fmul fast float %2267, %2187
  %2271 = fmul fast float %2268, %2187
  %2272 = fmul fast float %2269, %2187
  %2273 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1871, i32 0, i32 %1870, i32 %2147, i32 %2021, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2274 = extractvalue %dx.types.ResRet.i32 %2273, 0
  %2275 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1889, i32 %2274, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2276 = extractvalue %dx.types.ResRet.f32 %2275, 0
  %2277 = extractvalue %dx.types.ResRet.f32 %2275, 1
  %2278 = extractvalue %dx.types.ResRet.f32 %2275, 2
  %2279 = fadd fast float %1886, %2276
  %2280 = fadd fast float %2152, %2277
  %2281 = fadd fast float %2026, %2278
  %2282 = fsub fast float %1825, %2279
  %2283 = fsub fast float %1826, %2280
  %2284 = fsub fast float %1827, %2281
  %2285 = call float @dx.op.dot3.f32(i32 55, float %2282, float %2283, float %2284, float %2282, float %2283, float %2284)  ; Dot3(ax,ay,az,bx,by,bz)
  %2286 = call float @dx.op.dot3.f32(i32 55, float %113, float %114, float %115, float %2282, float %2283, float %2284)  ; Dot3(ax,ay,az,bx,by,bz)
  %2287 = fmul fast float %2286, 2.000000e+00
  %2288 = fsub fast float %2285, %1907
  %2289 = fmul fast float %2287, %2287
  %2290 = fmul fast float %1910, %2288
  %2291 = fsub fast float %2289, %2290
  %2292 = fcmp fast ult float %2291, 0.000000e+00
  br i1 %2292, label %2298, label %2293, !dx.controlflow.hints !72

; <label>:2293                                    ; preds = %2266
  %2294 = call float @dx.op.unary.f32(i32 24, float %2291)  ; Sqrt(value)
  %2295 = fsub fast float %2294, %2287
  %2296 = fmul fast float %1904, 2.000000e+00
  %2297 = fdiv fast float %2295, %2296
  br label %2298

; <label>:2298                                    ; preds = %2293, %2266
  %2299 = phi float [ %2297, %2293 ], [ -1.000000e+00, %2266 ]
  %2300 = fmul fast float %2299, %113
  %2301 = fmul fast float %2299, %114
  %2302 = fmul fast float %2299, %115
  %2303 = fadd fast float %2282, %2300
  %2304 = fadd fast float %2283, %2301
  %2305 = fadd fast float %2284, %2302
  %2306 = fmul fast float %2299, %2299
  %2307 = call float @dx.op.dot3.f32(i32 55, float %2303, float %2304, float %2305, float %113, float %114, float %115)  ; Dot3(ax,ay,az,bx,by,bz)
  %2308 = fmul fast float %2307, %1899
  %2309 = fdiv fast float %2306, %2308
  %2310 = call float @dx.op.dot3.f32(i32 55, float %2303, float %2304, float %2305, float %2303, float %2304, float %2305)  ; Dot3(ax,ay,az,bx,by,bz)
  %2311 = call float @dx.op.unary.f32(i32 25, float %2310)  ; Rsqrt(value)
  %2312 = fmul fast float %2311, %2303
  %2313 = fmul fast float %2311, %2304
  %2314 = fmul fast float %2311, %2305
  %2315 = call float @dx.op.unary.f32(i32 6, float %2312)  ; FAbs(value)
  %2316 = call float @dx.op.unary.f32(i32 6, float %2313)  ; FAbs(value)
  %2317 = call float @dx.op.unary.f32(i32 6, float %2314)  ; FAbs(value)
  %2318 = fsub fast float 1.000000e+00, %2317
  %2319 = call float @dx.op.unary.f32(i32 24, float %2318)  ; Sqrt(value)
  %2320 = call float @dx.op.binary.f32(i32 36, float %2315, float %2316)  ; FMin(a,b)
  %2321 = call float @dx.op.binary.f32(i32 35, float %2315, float %2316)  ; FMax(a,b)
  %2322 = fadd fast float %2321, 0x3BF0000000000000
  %2323 = fdiv fast float %2320, %2322
  %2324 = fmul fast float %2323, 0x3F99BE1040000000
  %2325 = fsub fast float 0x3FA5746D00000000, %2324
  %2326 = fmul fast float %2325, %2323
  %2327 = fadd fast float %2326, 0x3FB692C5C0000000
  %2328 = fmul fast float %2327, %2323
  %2329 = fadd fast float %2328, 0xBFCFA8A1C0000000
  %2330 = fmul fast float %2329, %2323
  %2331 = fadd fast float %2330, 0x3F79384B40000000
  %2332 = fmul fast float %2331, %2323
  %2333 = fadd fast float %2332, 0x3FE45BF7C0000000
  %2334 = fmul fast float %2333, %2323
  %2335 = fadd fast float %2334, 0x3ED10F8960000000
  %2336 = fcmp fast olt float %2315, %2316
  %2337 = fsub fast float 0x3FEFFFF780000000, %2334
  %2338 = select i1 %2336, float %2337, float %2335
  %2339 = fmul fast float %2338, %2319
  %2340 = fsub fast float %2319, %2339
  %2341 = fcmp fast olt float %2314, 0.000000e+00
  %2342 = icmp eq i32 %2274, -1
  br i1 %2342, label %2388, label %2343

; <label>:2343                                    ; preds = %2298
  %2344 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %2345 = extractvalue %dx.types.CBufRet.i32 %2344, 1
  %2346 = and i32 %2345, 31
  %2347 = lshr i32 %2274, %2346
  %2348 = mul i32 %2347, %1963
  %2349 = uitofp i32 %2348 to float
  %2350 = fsub fast float 1.000000e+00, %2340
  %2351 = select i1 %2341, float %2350, float %2339
  %2352 = bitcast float %2351 to i32
  %2353 = bitcast float %2313 to i32
  %2354 = and i32 %2353, -2147483648
  %2355 = xor i32 %2352, %2354
  %2356 = bitcast i32 %2355 to float
  %2357 = fmul fast float %2356, 5.000000e-01
  %2358 = fadd fast float %2357, 5.000000e-01
  %2359 = fmul fast float %2358, %1844
  %2360 = fadd fast float %2359, %1966
  %2361 = fadd fast float %2360, %2349
  %2362 = extractvalue %dx.types.CBufRet.f32 %1967, 1
  %2363 = fmul fast float %2361, %2362
  %2364 = extractvalue %dx.types.CBufRet.i32 %2344, 0
  %2365 = and i32 %2364, %2274
  %2366 = mul i32 %2365, %1963
  %2367 = uitofp i32 %2366 to float
  %2368 = fsub fast float 1.000000e+00, %2339
  %2369 = select i1 %2341, float %2368, float %2340
  %2370 = bitcast float %2369 to i32
  %2371 = bitcast float %2312 to i32
  %2372 = and i32 %2371, -2147483648
  %2373 = xor i32 %2370, %2372
  %2374 = bitcast i32 %2373 to float
  %2375 = fmul fast float %2374, 5.000000e-01
  %2376 = fadd fast float %2375, 5.000000e-01
  %2377 = fmul fast float %2376, %1844
  %2378 = fadd fast float %2377, %1966
  %2379 = fadd fast float %2378, %2367
  %2380 = extractvalue %dx.types.CBufRet.f32 %1967, 0
  %2381 = fmul fast float %2379, %2380
  %2382 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2383 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2384 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2382, %dx.types.Handle %2383, float %2381, float %2363, float undef, float undef, i32 0, i32 0, i32 undef, float %1850)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2385 = extractvalue %dx.types.ResRet.f32 %2384, 0
  %2386 = extractvalue %dx.types.ResRet.f32 %2384, 1
  %2387 = extractvalue %dx.types.ResRet.f32 %2384, 2
  br label %2388

; <label>:2388                                    ; preds = %2343, %2298
  %2389 = phi float [ %2385, %2343 ], [ 0.000000e+00, %2298 ]
  %2390 = phi float [ %2386, %2343 ], [ 0.000000e+00, %2298 ]
  %2391 = phi float [ %2387, %2343 ], [ 0.000000e+00, %2298 ]
  %2392 = fmul fast float %2389, %2309
  %2393 = fmul fast float %2390, %2309
  %2394 = fmul fast float %2391, %2309
  %2395 = add i32 %1860, 1
  %2396 = add i32 %1869, %2395
  %2397 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1871, i32 0, i32 %2396, i32 %1861, i32 %1862, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2398 = extractvalue %dx.types.ResRet.i32 %2397, 0
  %2399 = uitofp i32 %2395 to float
  %2400 = fmul fast float %1877, %2399
  %2401 = fadd fast float %2400, %1883
  %2402 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1889, i32 %2398, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2403 = extractvalue %dx.types.ResRet.f32 %2402, 0
  %2404 = extractvalue %dx.types.ResRet.f32 %2402, 1
  %2405 = extractvalue %dx.types.ResRet.f32 %2402, 2
  %2406 = fadd fast float %2401, %2403
  %2407 = fadd fast float %1887, %2404
  %2408 = fadd fast float %1888, %2405
  %2409 = fsub fast float %1825, %2406
  %2410 = fsub fast float %1826, %2407
  %2411 = fsub fast float %1827, %2408
  %2412 = call float @dx.op.dot3.f32(i32 55, float %2409, float %2410, float %2411, float %2409, float %2410, float %2411)  ; Dot3(ax,ay,az,bx,by,bz)
  %2413 = call float @dx.op.dot3.f32(i32 55, float %113, float %114, float %115, float %2409, float %2410, float %2411)  ; Dot3(ax,ay,az,bx,by,bz)
  %2414 = fmul fast float %2413, 2.000000e+00
  %2415 = fsub fast float %2412, %1907
  %2416 = fmul fast float %2414, %2414
  %2417 = fmul fast float %1910, %2415
  %2418 = fsub fast float %2416, %2417
  %2419 = fcmp fast ult float %2418, 0.000000e+00
  br i1 %2419, label %2425, label %2420, !dx.controlflow.hints !72

; <label>:2420                                    ; preds = %2388
  %2421 = call float @dx.op.unary.f32(i32 24, float %2418)  ; Sqrt(value)
  %2422 = fsub fast float %2421, %2414
  %2423 = fmul fast float %1904, 2.000000e+00
  %2424 = fdiv fast float %2422, %2423
  br label %2425

; <label>:2425                                    ; preds = %2420, %2388
  %2426 = phi float [ %2424, %2420 ], [ -1.000000e+00, %2388 ]
  %2427 = fmul fast float %2426, %113
  %2428 = fmul fast float %2426, %114
  %2429 = fmul fast float %2426, %115
  %2430 = fadd fast float %2409, %2427
  %2431 = fadd fast float %2410, %2428
  %2432 = fadd fast float %2411, %2429
  %2433 = fmul fast float %2426, %2426
  %2434 = call float @dx.op.dot3.f32(i32 55, float %2430, float %2431, float %2432, float %113, float %114, float %115)  ; Dot3(ax,ay,az,bx,by,bz)
  %2435 = fmul fast float %2434, %1899
  %2436 = fdiv fast float %2433, %2435
  %2437 = call float @dx.op.dot3.f32(i32 55, float %2430, float %2431, float %2432, float %2430, float %2431, float %2432)  ; Dot3(ax,ay,az,bx,by,bz)
  %2438 = call float @dx.op.unary.f32(i32 25, float %2437)  ; Rsqrt(value)
  %2439 = fmul fast float %2438, %2430
  %2440 = fmul fast float %2438, %2431
  %2441 = fmul fast float %2438, %2432
  %2442 = call float @dx.op.unary.f32(i32 6, float %2439)  ; FAbs(value)
  %2443 = call float @dx.op.unary.f32(i32 6, float %2440)  ; FAbs(value)
  %2444 = call float @dx.op.unary.f32(i32 6, float %2441)  ; FAbs(value)
  %2445 = fsub fast float 1.000000e+00, %2444
  %2446 = call float @dx.op.unary.f32(i32 24, float %2445)  ; Sqrt(value)
  %2447 = call float @dx.op.binary.f32(i32 36, float %2442, float %2443)  ; FMin(a,b)
  %2448 = call float @dx.op.binary.f32(i32 35, float %2442, float %2443)  ; FMax(a,b)
  %2449 = fadd fast float %2448, 0x3BF0000000000000
  %2450 = fdiv fast float %2447, %2449
  %2451 = fmul fast float %2450, 0x3F99BE1040000000
  %2452 = fsub fast float 0x3FA5746D00000000, %2451
  %2453 = fmul fast float %2452, %2450
  %2454 = fadd fast float %2453, 0x3FB692C5C0000000
  %2455 = fmul fast float %2454, %2450
  %2456 = fadd fast float %2455, 0xBFCFA8A1C0000000
  %2457 = fmul fast float %2456, %2450
  %2458 = fadd fast float %2457, 0x3F79384B40000000
  %2459 = fmul fast float %2458, %2450
  %2460 = fadd fast float %2459, 0x3FE45BF7C0000000
  %2461 = fmul fast float %2460, %2450
  %2462 = fadd fast float %2461, 0x3ED10F8960000000
  %2463 = fcmp fast olt float %2442, %2443
  %2464 = fsub fast float 0x3FEFFFF780000000, %2461
  %2465 = select i1 %2463, float %2464, float %2462
  %2466 = fmul fast float %2465, %2446
  %2467 = fsub fast float %2446, %2466
  %2468 = fcmp fast olt float %2441, 0.000000e+00
  %2469 = icmp eq i32 %2398, -1
  br i1 %2469, label %2515, label %2470

; <label>:2470                                    ; preds = %2425
  %2471 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %2472 = extractvalue %dx.types.CBufRet.i32 %2471, 1
  %2473 = and i32 %2472, 31
  %2474 = lshr i32 %2398, %2473
  %2475 = mul i32 %2474, %1963
  %2476 = uitofp i32 %2475 to float
  %2477 = fsub fast float 1.000000e+00, %2467
  %2478 = select i1 %2468, float %2477, float %2466
  %2479 = bitcast float %2478 to i32
  %2480 = bitcast float %2440 to i32
  %2481 = and i32 %2480, -2147483648
  %2482 = xor i32 %2479, %2481
  %2483 = bitcast i32 %2482 to float
  %2484 = fmul fast float %2483, 5.000000e-01
  %2485 = fadd fast float %2484, 5.000000e-01
  %2486 = fmul fast float %2485, %1844
  %2487 = fadd fast float %2486, %1966
  %2488 = fadd fast float %2487, %2476
  %2489 = extractvalue %dx.types.CBufRet.f32 %1967, 1
  %2490 = fmul fast float %2488, %2489
  %2491 = extractvalue %dx.types.CBufRet.i32 %2471, 0
  %2492 = and i32 %2491, %2398
  %2493 = mul i32 %2492, %1963
  %2494 = uitofp i32 %2493 to float
  %2495 = fsub fast float 1.000000e+00, %2466
  %2496 = select i1 %2468, float %2495, float %2467
  %2497 = bitcast float %2496 to i32
  %2498 = bitcast float %2439 to i32
  %2499 = and i32 %2498, -2147483648
  %2500 = xor i32 %2497, %2499
  %2501 = bitcast i32 %2500 to float
  %2502 = fmul fast float %2501, 5.000000e-01
  %2503 = fadd fast float %2502, 5.000000e-01
  %2504 = fmul fast float %2503, %1844
  %2505 = fadd fast float %2504, %1966
  %2506 = fadd fast float %2505, %2494
  %2507 = extractvalue %dx.types.CBufRet.f32 %1967, 0
  %2508 = fmul fast float %2506, %2507
  %2509 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2510 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2511 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2509, %dx.types.Handle %2510, float %2508, float %2490, float undef, float undef, i32 0, i32 0, i32 undef, float %1850)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2512 = extractvalue %dx.types.ResRet.f32 %2511, 0
  %2513 = extractvalue %dx.types.ResRet.f32 %2511, 1
  %2514 = extractvalue %dx.types.ResRet.f32 %2511, 2
  br label %2515

; <label>:2515                                    ; preds = %2470, %2425
  %2516 = phi float [ %2512, %2470 ], [ 0.000000e+00, %2425 ]
  %2517 = phi float [ %2513, %2470 ], [ 0.000000e+00, %2425 ]
  %2518 = phi float [ %2514, %2470 ], [ 0.000000e+00, %2425 ]
  %2519 = fmul fast float %2516, %2436
  %2520 = fmul fast float %2517, %2436
  %2521 = fmul fast float %2518, %2436
  %2522 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1871, i32 0, i32 %2396, i32 %1861, i32 %2021, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2523 = extractvalue %dx.types.ResRet.i32 %2522, 0
  %2524 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1889, i32 %2523, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2525 = extractvalue %dx.types.ResRet.f32 %2524, 0
  %2526 = extractvalue %dx.types.ResRet.f32 %2524, 1
  %2527 = extractvalue %dx.types.ResRet.f32 %2524, 2
  %2528 = fadd fast float %2401, %2525
  %2529 = fadd fast float %1887, %2526
  %2530 = fadd fast float %2026, %2527
  %2531 = fsub fast float %1825, %2528
  %2532 = fsub fast float %1826, %2529
  %2533 = fsub fast float %1827, %2530
  %2534 = call float @dx.op.dot3.f32(i32 55, float %2531, float %2532, float %2533, float %2531, float %2532, float %2533)  ; Dot3(ax,ay,az,bx,by,bz)
  %2535 = call float @dx.op.dot3.f32(i32 55, float %113, float %114, float %115, float %2531, float %2532, float %2533)  ; Dot3(ax,ay,az,bx,by,bz)
  %2536 = fmul fast float %2535, 2.000000e+00
  %2537 = fsub fast float %2534, %1907
  %2538 = fmul fast float %2536, %2536
  %2539 = fmul fast float %1910, %2537
  %2540 = fsub fast float %2538, %2539
  %2541 = fcmp fast ult float %2540, 0.000000e+00
  br i1 %2541, label %2547, label %2542, !dx.controlflow.hints !72

; <label>:2542                                    ; preds = %2515
  %2543 = call float @dx.op.unary.f32(i32 24, float %2540)  ; Sqrt(value)
  %2544 = fsub fast float %2543, %2536
  %2545 = fmul fast float %1904, 2.000000e+00
  %2546 = fdiv fast float %2544, %2545
  br label %2547

; <label>:2547                                    ; preds = %2542, %2515
  %2548 = phi float [ %2546, %2542 ], [ -1.000000e+00, %2515 ]
  %2549 = fmul fast float %2548, %113
  %2550 = fmul fast float %2548, %114
  %2551 = fmul fast float %2548, %115
  %2552 = fadd fast float %2531, %2549
  %2553 = fadd fast float %2532, %2550
  %2554 = fadd fast float %2533, %2551
  %2555 = fmul fast float %2548, %2548
  %2556 = call float @dx.op.dot3.f32(i32 55, float %2552, float %2553, float %2554, float %113, float %114, float %115)  ; Dot3(ax,ay,az,bx,by,bz)
  %2557 = fmul fast float %2556, %1899
  %2558 = fdiv fast float %2555, %2557
  %2559 = call float @dx.op.dot3.f32(i32 55, float %2552, float %2553, float %2554, float %2552, float %2553, float %2554)  ; Dot3(ax,ay,az,bx,by,bz)
  %2560 = call float @dx.op.unary.f32(i32 25, float %2559)  ; Rsqrt(value)
  %2561 = fmul fast float %2560, %2552
  %2562 = fmul fast float %2560, %2553
  %2563 = fmul fast float %2560, %2554
  %2564 = call float @dx.op.unary.f32(i32 6, float %2561)  ; FAbs(value)
  %2565 = call float @dx.op.unary.f32(i32 6, float %2562)  ; FAbs(value)
  %2566 = call float @dx.op.unary.f32(i32 6, float %2563)  ; FAbs(value)
  %2567 = fsub fast float 1.000000e+00, %2566
  %2568 = call float @dx.op.unary.f32(i32 24, float %2567)  ; Sqrt(value)
  %2569 = call float @dx.op.binary.f32(i32 36, float %2564, float %2565)  ; FMin(a,b)
  %2570 = call float @dx.op.binary.f32(i32 35, float %2564, float %2565)  ; FMax(a,b)
  %2571 = fadd fast float %2570, 0x3BF0000000000000
  %2572 = fdiv fast float %2569, %2571
  %2573 = fmul fast float %2572, 0x3F99BE1040000000
  %2574 = fsub fast float 0x3FA5746D00000000, %2573
  %2575 = fmul fast float %2574, %2572
  %2576 = fadd fast float %2575, 0x3FB692C5C0000000
  %2577 = fmul fast float %2576, %2572
  %2578 = fadd fast float %2577, 0xBFCFA8A1C0000000
  %2579 = fmul fast float %2578, %2572
  %2580 = fadd fast float %2579, 0x3F79384B40000000
  %2581 = fmul fast float %2580, %2572
  %2582 = fadd fast float %2581, 0x3FE45BF7C0000000
  %2583 = fmul fast float %2582, %2572
  %2584 = fadd fast float %2583, 0x3ED10F8960000000
  %2585 = fcmp fast olt float %2564, %2565
  %2586 = fsub fast float 0x3FEFFFF780000000, %2583
  %2587 = select i1 %2585, float %2586, float %2584
  %2588 = fmul fast float %2587, %2568
  %2589 = fsub fast float %2568, %2588
  %2590 = fcmp fast olt float %2563, 0.000000e+00
  %2591 = icmp eq i32 %2523, -1
  br i1 %2591, label %2637, label %2592

; <label>:2592                                    ; preds = %2547
  %2593 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %2594 = extractvalue %dx.types.CBufRet.i32 %2593, 1
  %2595 = and i32 %2594, 31
  %2596 = lshr i32 %2523, %2595
  %2597 = mul i32 %2596, %1963
  %2598 = uitofp i32 %2597 to float
  %2599 = fsub fast float 1.000000e+00, %2589
  %2600 = select i1 %2590, float %2599, float %2588
  %2601 = bitcast float %2600 to i32
  %2602 = bitcast float %2562 to i32
  %2603 = and i32 %2602, -2147483648
  %2604 = xor i32 %2601, %2603
  %2605 = bitcast i32 %2604 to float
  %2606 = fmul fast float %2605, 5.000000e-01
  %2607 = fadd fast float %2606, 5.000000e-01
  %2608 = fmul fast float %2607, %1844
  %2609 = fadd fast float %2608, %1966
  %2610 = fadd fast float %2609, %2598
  %2611 = extractvalue %dx.types.CBufRet.f32 %1967, 1
  %2612 = fmul fast float %2610, %2611
  %2613 = extractvalue %dx.types.CBufRet.i32 %2593, 0
  %2614 = and i32 %2613, %2523
  %2615 = mul i32 %2614, %1963
  %2616 = uitofp i32 %2615 to float
  %2617 = fsub fast float 1.000000e+00, %2588
  %2618 = select i1 %2590, float %2617, float %2589
  %2619 = bitcast float %2618 to i32
  %2620 = bitcast float %2561 to i32
  %2621 = and i32 %2620, -2147483648
  %2622 = xor i32 %2619, %2621
  %2623 = bitcast i32 %2622 to float
  %2624 = fmul fast float %2623, 5.000000e-01
  %2625 = fadd fast float %2624, 5.000000e-01
  %2626 = fmul fast float %2625, %1844
  %2627 = fadd fast float %2626, %1966
  %2628 = fadd fast float %2627, %2616
  %2629 = extractvalue %dx.types.CBufRet.f32 %1967, 0
  %2630 = fmul fast float %2628, %2629
  %2631 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2632 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2633 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2631, %dx.types.Handle %2632, float %2630, float %2612, float undef, float undef, i32 0, i32 0, i32 undef, float %1850)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2634 = extractvalue %dx.types.ResRet.f32 %2633, 0
  %2635 = extractvalue %dx.types.ResRet.f32 %2633, 1
  %2636 = extractvalue %dx.types.ResRet.f32 %2633, 2
  br label %2637

; <label>:2637                                    ; preds = %2592, %2547
  %2638 = phi float [ %2634, %2592 ], [ 0.000000e+00, %2547 ]
  %2639 = phi float [ %2635, %2592 ], [ 0.000000e+00, %2547 ]
  %2640 = phi float [ %2636, %2592 ], [ 0.000000e+00, %2547 ]
  %2641 = fmul fast float %2638, %2558
  %2642 = fmul fast float %2639, %2558
  %2643 = fmul fast float %2640, %2558
  %2644 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1871, i32 0, i32 %2396, i32 %2147, i32 %1862, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2645 = extractvalue %dx.types.ResRet.i32 %2644, 0
  %2646 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1889, i32 %2645, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2647 = extractvalue %dx.types.ResRet.f32 %2646, 0
  %2648 = extractvalue %dx.types.ResRet.f32 %2646, 1
  %2649 = extractvalue %dx.types.ResRet.f32 %2646, 2
  %2650 = fadd fast float %2401, %2647
  %2651 = fadd fast float %2152, %2648
  %2652 = fadd fast float %1888, %2649
  %2653 = fsub fast float %1825, %2650
  %2654 = fsub fast float %1826, %2651
  %2655 = fsub fast float %1827, %2652
  %2656 = call float @dx.op.dot3.f32(i32 55, float %2653, float %2654, float %2655, float %2653, float %2654, float %2655)  ; Dot3(ax,ay,az,bx,by,bz)
  %2657 = call float @dx.op.dot3.f32(i32 55, float %113, float %114, float %115, float %2653, float %2654, float %2655)  ; Dot3(ax,ay,az,bx,by,bz)
  %2658 = fmul fast float %2657, 2.000000e+00
  %2659 = fsub fast float %2656, %1907
  %2660 = fmul fast float %2658, %2658
  %2661 = fmul fast float %1910, %2659
  %2662 = fsub fast float %2660, %2661
  %2663 = fcmp fast ult float %2662, 0.000000e+00
  br i1 %2663, label %2669, label %2664, !dx.controlflow.hints !72

; <label>:2664                                    ; preds = %2637
  %2665 = call float @dx.op.unary.f32(i32 24, float %2662)  ; Sqrt(value)
  %2666 = fsub fast float %2665, %2658
  %2667 = fmul fast float %1904, 2.000000e+00
  %2668 = fdiv fast float %2666, %2667
  br label %2669

; <label>:2669                                    ; preds = %2664, %2637
  %2670 = phi float [ %2668, %2664 ], [ -1.000000e+00, %2637 ]
  %2671 = fmul fast float %2670, %113
  %2672 = fmul fast float %2670, %114
  %2673 = fmul fast float %2670, %115
  %2674 = fadd fast float %2653, %2671
  %2675 = fadd fast float %2654, %2672
  %2676 = fadd fast float %2655, %2673
  %2677 = fmul fast float %2670, %2670
  %2678 = call float @dx.op.dot3.f32(i32 55, float %2674, float %2675, float %2676, float %113, float %114, float %115)  ; Dot3(ax,ay,az,bx,by,bz)
  %2679 = fmul fast float %2678, %1899
  %2680 = fdiv fast float %2677, %2679
  %2681 = call float @dx.op.dot3.f32(i32 55, float %2674, float %2675, float %2676, float %2674, float %2675, float %2676)  ; Dot3(ax,ay,az,bx,by,bz)
  %2682 = call float @dx.op.unary.f32(i32 25, float %2681)  ; Rsqrt(value)
  %2683 = fmul fast float %2682, %2674
  %2684 = fmul fast float %2682, %2675
  %2685 = fmul fast float %2682, %2676
  %2686 = call float @dx.op.unary.f32(i32 6, float %2683)  ; FAbs(value)
  %2687 = call float @dx.op.unary.f32(i32 6, float %2684)  ; FAbs(value)
  %2688 = call float @dx.op.unary.f32(i32 6, float %2685)  ; FAbs(value)
  %2689 = fsub fast float 1.000000e+00, %2688
  %2690 = call float @dx.op.unary.f32(i32 24, float %2689)  ; Sqrt(value)
  %2691 = call float @dx.op.binary.f32(i32 36, float %2686, float %2687)  ; FMin(a,b)
  %2692 = call float @dx.op.binary.f32(i32 35, float %2686, float %2687)  ; FMax(a,b)
  %2693 = fadd fast float %2692, 0x3BF0000000000000
  %2694 = fdiv fast float %2691, %2693
  %2695 = fmul fast float %2694, 0x3F99BE1040000000
  %2696 = fsub fast float 0x3FA5746D00000000, %2695
  %2697 = fmul fast float %2696, %2694
  %2698 = fadd fast float %2697, 0x3FB692C5C0000000
  %2699 = fmul fast float %2698, %2694
  %2700 = fadd fast float %2699, 0xBFCFA8A1C0000000
  %2701 = fmul fast float %2700, %2694
  %2702 = fadd fast float %2701, 0x3F79384B40000000
  %2703 = fmul fast float %2702, %2694
  %2704 = fadd fast float %2703, 0x3FE45BF7C0000000
  %2705 = fmul fast float %2704, %2694
  %2706 = fadd fast float %2705, 0x3ED10F8960000000
  %2707 = fcmp fast olt float %2686, %2687
  %2708 = fsub fast float 0x3FEFFFF780000000, %2705
  %2709 = select i1 %2707, float %2708, float %2706
  %2710 = fmul fast float %2709, %2690
  %2711 = fsub fast float %2690, %2710
  %2712 = fcmp fast olt float %2685, 0.000000e+00
  %2713 = icmp eq i32 %2645, -1
  br i1 %2713, label %2759, label %2714

; <label>:2714                                    ; preds = %2669
  %2715 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %2716 = extractvalue %dx.types.CBufRet.i32 %2715, 1
  %2717 = and i32 %2716, 31
  %2718 = lshr i32 %2645, %2717
  %2719 = mul i32 %2718, %1963
  %2720 = uitofp i32 %2719 to float
  %2721 = fsub fast float 1.000000e+00, %2711
  %2722 = select i1 %2712, float %2721, float %2710
  %2723 = bitcast float %2722 to i32
  %2724 = bitcast float %2684 to i32
  %2725 = and i32 %2724, -2147483648
  %2726 = xor i32 %2723, %2725
  %2727 = bitcast i32 %2726 to float
  %2728 = fmul fast float %2727, 5.000000e-01
  %2729 = fadd fast float %2728, 5.000000e-01
  %2730 = fmul fast float %2729, %1844
  %2731 = fadd fast float %2730, %1966
  %2732 = fadd fast float %2731, %2720
  %2733 = extractvalue %dx.types.CBufRet.f32 %1967, 1
  %2734 = fmul fast float %2732, %2733
  %2735 = extractvalue %dx.types.CBufRet.i32 %2715, 0
  %2736 = and i32 %2735, %2645
  %2737 = mul i32 %2736, %1963
  %2738 = uitofp i32 %2737 to float
  %2739 = fsub fast float 1.000000e+00, %2710
  %2740 = select i1 %2712, float %2739, float %2711
  %2741 = bitcast float %2740 to i32
  %2742 = bitcast float %2683 to i32
  %2743 = and i32 %2742, -2147483648
  %2744 = xor i32 %2741, %2743
  %2745 = bitcast i32 %2744 to float
  %2746 = fmul fast float %2745, 5.000000e-01
  %2747 = fadd fast float %2746, 5.000000e-01
  %2748 = fmul fast float %2747, %1844
  %2749 = fadd fast float %2748, %1966
  %2750 = fadd fast float %2749, %2738
  %2751 = extractvalue %dx.types.CBufRet.f32 %1967, 0
  %2752 = fmul fast float %2750, %2751
  %2753 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2754 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2755 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2753, %dx.types.Handle %2754, float %2752, float %2734, float undef, float undef, i32 0, i32 0, i32 undef, float %1850)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2756 = extractvalue %dx.types.ResRet.f32 %2755, 0
  %2757 = extractvalue %dx.types.ResRet.f32 %2755, 1
  %2758 = extractvalue %dx.types.ResRet.f32 %2755, 2
  br label %2759

; <label>:2759                                    ; preds = %2714, %2669
  %2760 = phi float [ %2756, %2714 ], [ 0.000000e+00, %2669 ]
  %2761 = phi float [ %2757, %2714 ], [ 0.000000e+00, %2669 ]
  %2762 = phi float [ %2758, %2714 ], [ 0.000000e+00, %2669 ]
  %2763 = fmul fast float %2760, %2680
  %2764 = fmul fast float %2761, %2680
  %2765 = fmul fast float %2762, %2680
  %2766 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1871, i32 0, i32 %2396, i32 %2147, i32 %2021, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2767 = extractvalue %dx.types.ResRet.i32 %2766, 0
  %2768 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1889, i32 %2767, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2769 = extractvalue %dx.types.ResRet.f32 %2768, 0
  %2770 = extractvalue %dx.types.ResRet.f32 %2768, 1
  %2771 = extractvalue %dx.types.ResRet.f32 %2768, 2
  %2772 = fadd fast float %2401, %2769
  %2773 = fadd fast float %2152, %2770
  %2774 = fadd fast float %2026, %2771
  %2775 = fsub fast float %1825, %2772
  %2776 = fsub fast float %1826, %2773
  %2777 = fsub fast float %1827, %2774
  %2778 = call float @dx.op.dot3.f32(i32 55, float %2775, float %2776, float %2777, float %2775, float %2776, float %2777)  ; Dot3(ax,ay,az,bx,by,bz)
  %2779 = call float @dx.op.dot3.f32(i32 55, float %113, float %114, float %115, float %2775, float %2776, float %2777)  ; Dot3(ax,ay,az,bx,by,bz)
  %2780 = fmul fast float %2779, 2.000000e+00
  %2781 = fsub fast float %2778, %1907
  %2782 = fmul fast float %2780, %2780
  %2783 = fmul fast float %1910, %2781
  %2784 = fsub fast float %2782, %2783
  %2785 = fcmp fast ult float %2784, 0.000000e+00
  br i1 %2785, label %2791, label %2786, !dx.controlflow.hints !72

; <label>:2786                                    ; preds = %2759
  %2787 = call float @dx.op.unary.f32(i32 24, float %2784)  ; Sqrt(value)
  %2788 = fsub fast float %2787, %2780
  %2789 = fmul fast float %1904, 2.000000e+00
  %2790 = fdiv fast float %2788, %2789
  br label %2791

; <label>:2791                                    ; preds = %2786, %2759
  %2792 = phi float [ %2790, %2786 ], [ -1.000000e+00, %2759 ]
  %2793 = fmul fast float %2792, %113
  %2794 = fmul fast float %2792, %114
  %2795 = fmul fast float %2792, %115
  %2796 = fadd fast float %2775, %2793
  %2797 = fadd fast float %2776, %2794
  %2798 = fadd fast float %2777, %2795
  %2799 = fmul fast float %2792, %2792
  %2800 = call float @dx.op.dot3.f32(i32 55, float %2796, float %2797, float %2798, float %113, float %114, float %115)  ; Dot3(ax,ay,az,bx,by,bz)
  %2801 = fmul fast float %2800, %1899
  %2802 = fdiv fast float %2799, %2801
  %2803 = call float @dx.op.dot3.f32(i32 55, float %2796, float %2797, float %2798, float %2796, float %2797, float %2798)  ; Dot3(ax,ay,az,bx,by,bz)
  %2804 = call float @dx.op.unary.f32(i32 25, float %2803)  ; Rsqrt(value)
  %2805 = fmul fast float %2804, %2796
  %2806 = fmul fast float %2804, %2797
  %2807 = fmul fast float %2804, %2798
  %2808 = call float @dx.op.unary.f32(i32 6, float %2805)  ; FAbs(value)
  %2809 = call float @dx.op.unary.f32(i32 6, float %2806)  ; FAbs(value)
  %2810 = call float @dx.op.unary.f32(i32 6, float %2807)  ; FAbs(value)
  %2811 = fsub fast float 1.000000e+00, %2810
  %2812 = call float @dx.op.unary.f32(i32 24, float %2811)  ; Sqrt(value)
  %2813 = call float @dx.op.binary.f32(i32 36, float %2808, float %2809)  ; FMin(a,b)
  %2814 = call float @dx.op.binary.f32(i32 35, float %2808, float %2809)  ; FMax(a,b)
  %2815 = fadd fast float %2814, 0x3BF0000000000000
  %2816 = fdiv fast float %2813, %2815
  %2817 = fmul fast float %2816, 0x3F99BE1040000000
  %2818 = fsub fast float 0x3FA5746D00000000, %2817
  %2819 = fmul fast float %2818, %2816
  %2820 = fadd fast float %2819, 0x3FB692C5C0000000
  %2821 = fmul fast float %2820, %2816
  %2822 = fadd fast float %2821, 0xBFCFA8A1C0000000
  %2823 = fmul fast float %2822, %2816
  %2824 = fadd fast float %2823, 0x3F79384B40000000
  %2825 = fmul fast float %2824, %2816
  %2826 = fadd fast float %2825, 0x3FE45BF7C0000000
  %2827 = fmul fast float %2826, %2816
  %2828 = fadd fast float %2827, 0x3ED10F8960000000
  %2829 = fcmp fast olt float %2808, %2809
  %2830 = fsub fast float 0x3FEFFFF780000000, %2827
  %2831 = select i1 %2829, float %2830, float %2828
  %2832 = fmul fast float %2831, %2812
  %2833 = fsub fast float %2812, %2832
  %2834 = fcmp fast olt float %2807, 0.000000e+00
  %2835 = icmp eq i32 %2767, -1
  br i1 %2835, label %2881, label %2836

; <label>:2836                                    ; preds = %2791
  %2837 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %2838 = extractvalue %dx.types.CBufRet.i32 %2837, 1
  %2839 = and i32 %2838, 31
  %2840 = lshr i32 %2767, %2839
  %2841 = mul i32 %2840, %1963
  %2842 = uitofp i32 %2841 to float
  %2843 = fsub fast float 1.000000e+00, %2833
  %2844 = select i1 %2834, float %2843, float %2832
  %2845 = bitcast float %2844 to i32
  %2846 = bitcast float %2806 to i32
  %2847 = and i32 %2846, -2147483648
  %2848 = xor i32 %2845, %2847
  %2849 = bitcast i32 %2848 to float
  %2850 = fmul fast float %2849, 5.000000e-01
  %2851 = fadd fast float %2850, 5.000000e-01
  %2852 = fmul fast float %2851, %1844
  %2853 = fadd fast float %2852, %1966
  %2854 = fadd fast float %2853, %2842
  %2855 = extractvalue %dx.types.CBufRet.f32 %1967, 1
  %2856 = fmul fast float %2854, %2855
  %2857 = extractvalue %dx.types.CBufRet.i32 %2837, 0
  %2858 = and i32 %2857, %2767
  %2859 = mul i32 %2858, %1963
  %2860 = uitofp i32 %2859 to float
  %2861 = fsub fast float 1.000000e+00, %2832
  %2862 = select i1 %2834, float %2861, float %2833
  %2863 = bitcast float %2862 to i32
  %2864 = bitcast float %2805 to i32
  %2865 = and i32 %2864, -2147483648
  %2866 = xor i32 %2863, %2865
  %2867 = bitcast i32 %2866 to float
  %2868 = fmul fast float %2867, 5.000000e-01
  %2869 = fadd fast float %2868, 5.000000e-01
  %2870 = fmul fast float %2869, %1844
  %2871 = fadd fast float %2870, %1966
  %2872 = fadd fast float %2871, %2860
  %2873 = extractvalue %dx.types.CBufRet.f32 %1967, 0
  %2874 = fmul fast float %2872, %2873
  %2875 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %2876 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2877 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2875, %dx.types.Handle %2876, float %2874, float %2856, float undef, float undef, i32 0, i32 0, i32 undef, float %1850)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2878 = extractvalue %dx.types.ResRet.f32 %2877, 0
  %2879 = extractvalue %dx.types.ResRet.f32 %2877, 1
  %2880 = extractvalue %dx.types.ResRet.f32 %2877, 2
  br label %2881

; <label>:2881                                    ; preds = %2836, %2791
  %2882 = phi float [ %2878, %2836 ], [ 0.000000e+00, %2791 ]
  %2883 = phi float [ %2879, %2836 ], [ 0.000000e+00, %2791 ]
  %2884 = phi float [ %2880, %2836 ], [ 0.000000e+00, %2791 ]
  %2885 = fmul fast float %2882, %2802
  %2886 = fmul fast float %2883, %2802
  %2887 = fmul fast float %2884, %2802
  %2888 = fsub fast float %2144, %2018
  %2889 = fsub fast float %2145, %2019
  %2890 = fsub fast float %2146, %2020
  %2891 = fmul fast float %2888, %1865
  %2892 = fmul fast float %2889, %1865
  %2893 = fmul fast float %2890, %1865
  %2894 = fadd fast float %2891, %2018
  %2895 = fadd fast float %2892, %2019
  %2896 = fadd fast float %2893, %2020
  %2897 = fsub fast float %2392, %2270
  %2898 = fsub fast float %2393, %2271
  %2899 = fsub fast float %2394, %2272
  %2900 = fmul fast float %2897, %1865
  %2901 = fmul fast float %2898, %1865
  %2902 = fmul fast float %2899, %1865
  %2903 = fsub fast float %2641, %2519
  %2904 = fsub fast float %2642, %2520
  %2905 = fsub fast float %2643, %2521
  %2906 = fmul fast float %2903, %1865
  %2907 = fmul fast float %2904, %1865
  %2908 = fmul fast float %2905, %1865
  %2909 = fadd fast float %2906, %2519
  %2910 = fadd fast float %2907, %2520
  %2911 = fadd fast float %2908, %2521
  %2912 = fsub fast float %2885, %2763
  %2913 = fsub fast float %2886, %2764
  %2914 = fsub fast float %2887, %2765
  %2915 = fmul fast float %2912, %1865
  %2916 = fmul fast float %2913, %1865
  %2917 = fmul fast float %2914, %1865
  %2918 = fsub fast float %2270, %2894
  %2919 = fadd fast float %2918, %2900
  %2920 = fsub fast float %2271, %2895
  %2921 = fadd fast float %2920, %2901
  %2922 = fsub fast float %2272, %2896
  %2923 = fadd fast float %2922, %2902
  %2924 = fmul fast float %2919, %1864
  %2925 = fmul fast float %2921, %1864
  %2926 = fmul fast float %2923, %1864
  %2927 = fadd fast float %2924, %2894
  %2928 = fadd fast float %2925, %2895
  %2929 = fadd fast float %2926, %2896
  %2930 = fsub fast float %2763, %2909
  %2931 = fadd fast float %2930, %2915
  %2932 = fsub fast float %2764, %2910
  %2933 = fadd fast float %2932, %2916
  %2934 = fsub fast float %2765, %2911
  %2935 = fadd fast float %2934, %2917
  %2936 = fmul fast float %2931, %1864
  %2937 = fmul fast float %2933, %1864
  %2938 = fmul fast float %2935, %1864
  %2939 = fsub fast float %2909, %2927
  %2940 = fadd fast float %2939, %2936
  %2941 = fsub fast float %2910, %2928
  %2942 = fadd fast float %2941, %2937
  %2943 = fsub fast float %2911, %2929
  %2944 = fadd fast float %2943, %2938
  %2945 = fmul fast float %2940, %1863
  %2946 = fmul fast float %2942, %1863
  %2947 = fmul fast float %2944, %1863
  %2948 = fadd fast float %2945, %2927
  %2949 = fadd fast float %2946, %2928
  %2950 = fadd fast float %2947, %2929
  %2951 = fmul fast float %2948, %1810
  %2952 = fmul fast float %2949, %1810
  %2953 = fmul fast float %2950, %1810
  %2954 = fadd fast float %2951, %1811
  %2955 = fadd fast float %2952, %1812
  %2956 = fadd fast float %2953, %1813
  %2957 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %2958 = extractvalue %dx.types.CBufRet.f32 %2957, 1
  %2959 = fmul fast float %2954, %2958
  %2960 = fmul fast float %2955, %2958
  %2961 = fmul fast float %2956, %2958
  %2962 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %2963 = extractvalue %dx.types.CBufRet.i32 %2962, 0
  %2964 = icmp eq i32 %2963, 0
  br i1 %2964, label %3223, label %2965

; <label>:2965                                    ; preds = %2881
  %2966 = fmul fast float %1809, %113
  %2967 = fmul fast float %1809, %114
  %2968 = fmul fast float %1809, %115
  %2969 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2970 = extractvalue %dx.types.CBufRet.f32 %2969, 3
  %2971 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2972 = extractvalue %dx.types.CBufRet.f32 %2971, 2
  %2973 = call float @dx.op.binary.f32(i32 36, float %1827, float %2972)  ; FMin(a,b)
  %2974 = fsub fast float %2968, %2973
  %2975 = fadd fast float %2974, %1821
  %2976 = fadd fast float %2975, %1824
  %2977 = call float @dx.op.dot3.f32(i32 55, float %2966, float %2967, float %2976, float %2966, float %2967, float %2976)  ; Dot3(ax,ay,az,bx,by,bz)
  %2978 = call float @dx.op.binary.f32(i32 35, float %2977, float 0x3E45798EE0000000)  ; FMax(a,b)
  %2979 = call float @dx.op.unary.f32(i32 25, float %2978)  ; Rsqrt(value)
  %2980 = fmul fast float %2979, %2977
  %2981 = fmul fast float %2979, %2966
  %2982 = fmul fast float %2979, %2967
  %2983 = fmul fast float %2976, %2979
  %2984 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %2985 = extractvalue %dx.types.CBufRet.f32 %2971, 3
  %2986 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2985)  ; FMax(a,b)
  %2987 = fcmp fast ogt float %2986, 0.000000e+00
  %2988 = extractvalue %dx.types.CBufRet.f32 %2971, 1
  %2989 = extractvalue %dx.types.CBufRet.f32 %2984, 1
  br i1 %2987, label %2993, label %2990

; <label>:2990                                    ; preds = %2965
  %2991 = extractvalue %dx.types.CBufRet.f32 %2984, 0
  %2992 = extractvalue %dx.types.CBufRet.f32 %2971, 0
  br label %3017

; <label>:2993                                    ; preds = %2965
  %2994 = fmul fast float %2986, %2979
  %2995 = fmul fast float %2994, %2976
  %2996 = fadd fast float %2995, %2973
  %2997 = fsub fast float %2976, %2995
  %2998 = fsub fast float 1.000000e+00, %2994
  %2999 = fmul fast float %2998, %2980
  %3000 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %3001 = extractvalue %dx.types.CBufRet.f32 %3000, 1
  %3002 = fsub fast float %2996, %3001
  %3003 = fmul fast float %3002, %2988
  %3004 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %3003)  ; FMax(a,b)
  %3005 = extractvalue %dx.types.CBufRet.f32 %3000, 0
  %3006 = fsub fast float -0.000000e+00, %3004
  %3007 = call float @dx.op.unary.f32(i32 21, float %3006)  ; Exp(value)
  %3008 = fmul fast float %3005, %3007
  %3009 = extractvalue %dx.types.CBufRet.f32 %2984, 3
  %3010 = fsub fast float %2996, %3009
  %3011 = fmul fast float %3010, %2989
  %3012 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %3011)  ; FMax(a,b)
  %3013 = extractvalue %dx.types.CBufRet.f32 %2984, 2
  %3014 = fsub fast float -0.000000e+00, %3012
  %3015 = call float @dx.op.unary.f32(i32 21, float %3014)  ; Exp(value)
  %3016 = fmul fast float %3013, %3015
  br label %3017

; <label>:3017                                    ; preds = %2993, %2990
  %3018 = phi float [ %3008, %2993 ], [ %2992, %2990 ]
  %3019 = phi float [ %3016, %2993 ], [ %2991, %2990 ]
  %3020 = phi float [ %2999, %2993 ], [ %2980, %2990 ]
  %3021 = phi float [ %2997, %2993 ], [ %2976, %2990 ]
  %3022 = fmul fast float %2988, %3021
  %3023 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %3022)  ; FMax(a,b)
  %3024 = fsub fast float -0.000000e+00, %3023
  %3025 = call float @dx.op.unary.f32(i32 21, float %3024)  ; Exp(value)
  %3026 = fsub fast float 1.000000e+00, %3025
  %3027 = fdiv fast float %3026, %3023
  %3028 = fmul fast float %3023, 0x3FCEBFBE00000000
  %3029 = fsub fast float 0x3FE62E4300000000, %3028
  %3030 = call float @dx.op.unary.f32(i32 6, float %3023)  ; FAbs(value)
  %3031 = fcmp fast ogt float %3030, 0x3F847AE140000000
  %3032 = select i1 %3031, float %3027, float %3029
  %3033 = fmul fast float %3032, %3018
  %3034 = fmul fast float %2989, %3021
  %3035 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %3034)  ; FMax(a,b)
  %3036 = fsub fast float -0.000000e+00, %3035
  %3037 = call float @dx.op.unary.f32(i32 21, float %3036)  ; Exp(value)
  %3038 = fsub fast float 1.000000e+00, %3037
  %3039 = fdiv fast float %3038, %3035
  %3040 = fmul fast float %3035, 0x3FCEBFBE00000000
  %3041 = fsub fast float 0x3FE62E4300000000, %3040
  %3042 = call float @dx.op.unary.f32(i32 6, float %3035)  ; FAbs(value)
  %3043 = fcmp fast ogt float %3042, 0x3F847AE140000000
  %3044 = select i1 %3043, float %3039, float %3041
  %3045 = fmul fast float %3044, %3019
  %3046 = fadd fast float %3045, %3033
  %3047 = extractvalue %dx.types.CBufRet.f32 %2969, 0
  %3048 = extractvalue %dx.types.CBufRet.f32 %2969, 1
  %3049 = extractvalue %dx.types.CBufRet.f32 %2969, 2
  %3050 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %3051 = extractvalue %dx.types.CBufRet.f32 %3050, 2
  %3052 = fcmp fast ogt float %3051, 0.000000e+00
  br i1 %3052, label %3053, label %3089, !dx.controlflow.hints !73

; <label>:3053                                    ; preds = %3017
  %3054 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %3055 = extractvalue %dx.types.CBufRet.f32 %3054, 0
  %3056 = fmul fast float %3055, %2980
  %3057 = extractvalue %dx.types.CBufRet.f32 %3054, 1
  %3058 = fadd fast float %3056, %3057
  %3059 = call float @dx.op.unary.f32(i32 7, float %3058)  ; Saturate(value)
  %3060 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %3061 = extractvalue %dx.types.CBufRet.f32 %3060, 1
  %3062 = extractvalue %dx.types.CBufRet.f32 %3060, 0
  %3063 = fsub fast float -0.000000e+00, %3062
  %3064 = call float @dx.op.dot2.f32(i32 54, float %2966, float %2967, float %3061, float %3063)  ; Dot2(ax,ay,bx,by)
  %3065 = call float @dx.op.dot2.f32(i32 54, float %2966, float %2967, float %3062, float %3061)  ; Dot2(ax,ay,bx,by)
  %3066 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %3067 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3068 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3066, %dx.types.Handle %3067, float %3064, float %3065, float %2976, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3069 = extractvalue %dx.types.ResRet.f32 %3068, 0
  %3070 = extractvalue %dx.types.ResRet.f32 %3068, 1
  %3071 = extractvalue %dx.types.ResRet.f32 %3068, 2
  %3072 = extractvalue %dx.types.CBufRet.f32 %3054, 2
  %3073 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3066, %dx.types.Handle %3067, float %3064, float %3065, float %2976, float undef, i32 undef, i32 undef, i32 undef, float %3072)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3074 = extractvalue %dx.types.ResRet.f32 %3073, 0
  %3075 = extractvalue %dx.types.ResRet.f32 %3073, 1
  %3076 = extractvalue %dx.types.ResRet.f32 %3073, 2
  %3077 = fsub fast float %3069, %3074
  %3078 = fsub fast float %3070, %3075
  %3079 = fsub fast float %3071, %3076
  %3080 = fmul fast float %3077, %3059
  %3081 = fmul fast float %3078, %3059
  %3082 = fmul fast float %3079, %3059
  %3083 = fadd fast float %3080, %3074
  %3084 = fadd fast float %3081, %3075
  %3085 = fadd fast float %3082, %3076
  %3086 = fmul fast float %3083, %3047
  %3087 = fmul fast float %3084, %3048
  %3088 = fmul fast float %3085, %3049
  br label %3089

; <label>:3089                                    ; preds = %3053, %3017
  %3090 = phi float [ %3086, %3053 ], [ %3047, %3017 ]
  %3091 = phi float [ %3087, %3053 ], [ %3048, %3017 ]
  %3092 = phi float [ %3088, %3053 ], [ %3049, %3017 ]
  %3093 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %3094 = extractvalue %dx.types.CBufRet.f32 %3093, 0
  %3095 = extractvalue %dx.types.CBufRet.f32 %3093, 1
  %3096 = extractvalue %dx.types.CBufRet.f32 %3093, 2
  %3097 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 179)  ; CBufferLoadLegacy(handle,regIndex)
  %3098 = extractvalue %dx.types.CBufRet.f32 %3097, 1
  %3099 = fmul fast float %3098, %3094
  %3100 = fmul fast float %3098, %3095
  %3101 = fmul fast float %3098, %3096
  %3102 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3103 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3104 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3102, %dx.types.Handle %3103, float 5.000000e-01, float 5.000000e-01, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3105 = extractvalue %dx.types.ResRet.f32 %3104, 0
  %3106 = extractvalue %dx.types.ResRet.f32 %3104, 1
  %3107 = extractvalue %dx.types.ResRet.f32 %3104, 2
  %3108 = fmul fast float %3099, %3105
  %3109 = fmul fast float %3100, %3106
  %3110 = fmul fast float %3101, %3107
  %3111 = fadd fast float %3108, %3090
  %3112 = fadd fast float %3109, %3091
  %3113 = fadd fast float %3110, %3092
  %3114 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %3115 = extractvalue %dx.types.CBufRet.f32 %3114, 3
  %3116 = fcmp fast oge float %3115, 0.000000e+00
  %3117 = fcmp fast oeq float %3051, 0.000000e+00
  %3118 = and i1 %3116, %3117
  br i1 %3118, label %3119, label %3190

; <label>:3119                                    ; preds = %3089
  %3120 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %3121 = extractvalue %dx.types.CBufRet.f32 %3120, 0
  %3122 = extractvalue %dx.types.CBufRet.f32 %3120, 1
  %3123 = extractvalue %dx.types.CBufRet.f32 %3120, 2
  %3124 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 163)  ; CBufferLoadLegacy(handle,regIndex)
  %3125 = extractvalue %dx.types.CBufRet.f32 %3124, 0
  %3126 = extractvalue %dx.types.CBufRet.f32 %3124, 1
  %3127 = extractvalue %dx.types.CBufRet.f32 %3124, 2
  %3128 = fmul fast float %3098, 0x3FB45F3060000000
  %3129 = fmul fast float %3128, %3125
  %3130 = fmul fast float %3128, %3126
  %3131 = fmul fast float %3128, %3127
  %3132 = fadd fast float %3129, %3121
  %3133 = fadd fast float %3130, %3122
  %3134 = fadd fast float %3131, %3123
  %3135 = extractvalue %dx.types.CBufRet.f32 %3120, 3
  %3136 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 161)  ; CBufferLoadLegacy(handle,regIndex)
  %3137 = extractvalue %dx.types.CBufRet.f32 %3136, 0
  %3138 = extractvalue %dx.types.CBufRet.f32 %3136, 1
  %3139 = extractvalue %dx.types.CBufRet.f32 %3136, 2
  %3140 = call float @dx.op.dot3.f32(i32 55, float %2981, float %2982, float %2983, float %3137, float %3138, float %3139)  ; Dot3(ax,ay,az,bx,by,bz)
  %3141 = call float @dx.op.unary.f32(i32 7, float %3140)  ; Saturate(value)
  %3142 = call float @dx.op.unary.f32(i32 23, float %3141)  ; Log(value)
  %3143 = fmul fast float %3142, %3135
  %3144 = call float @dx.op.unary.f32(i32 21, float %3143)  ; Exp(value)
  %3145 = fmul fast float %3144, %3132
  %3146 = fmul fast float %3144, %3133
  %3147 = fmul fast float %3144, %3134
  %3148 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 164)  ; CBufferLoadLegacy(handle,regIndex)
  %3149 = extractvalue %dx.types.CBufRet.f32 %3148, 3
  %3150 = fcmp fast ogt float %3149, 0.000000e+00
  br i1 %3150, label %3151, label %3176

; <label>:3151                                    ; preds = %3119
  %3152 = extractvalue %dx.types.CBufRet.f32 %3148, 0
  %3153 = extractvalue %dx.types.CBufRet.f32 %3148, 1
  %3154 = extractvalue %dx.types.CBufRet.f32 %3148, 2
  %3155 = fmul fast float %3128, %3152
  %3156 = fmul fast float %3128, %3153
  %3157 = fmul fast float %3128, %3154
  %3158 = fadd fast float %3155, %3121
  %3159 = fadd fast float %3156, %3122
  %3160 = fadd fast float %3157, %3123
  %3161 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 162)  ; CBufferLoadLegacy(handle,regIndex)
  %3162 = extractvalue %dx.types.CBufRet.f32 %3161, 0
  %3163 = extractvalue %dx.types.CBufRet.f32 %3161, 1
  %3164 = extractvalue %dx.types.CBufRet.f32 %3161, 2
  %3165 = call float @dx.op.dot3.f32(i32 55, float %2981, float %2982, float %2983, float %3162, float %3163, float %3164)  ; Dot3(ax,ay,az,bx,by,bz)
  %3166 = call float @dx.op.unary.f32(i32 7, float %3165)  ; Saturate(value)
  %3167 = call float @dx.op.unary.f32(i32 23, float %3166)  ; Log(value)
  %3168 = fmul fast float %3167, %3135
  %3169 = call float @dx.op.unary.f32(i32 21, float %3168)  ; Exp(value)
  %3170 = fmul fast float %3169, %3158
  %3171 = fmul fast float %3169, %3159
  %3172 = fmul fast float %3169, %3160
  %3173 = fadd fast float %3170, %3145
  %3174 = fadd fast float %3171, %3146
  %3175 = fadd fast float %3172, %3147
  br label %3176

; <label>:3176                                    ; preds = %3151, %3119
  %3177 = phi float [ %3173, %3151 ], [ %3145, %3119 ]
  %3178 = phi float [ %3174, %3151 ], [ %3146, %3119 ]
  %3179 = phi float [ %3175, %3151 ], [ %3147, %3119 ]
  %3180 = fsub fast float %3020, %3115
  %3181 = call float @dx.op.binary.f32(i32 35, float %3180, float 0.000000e+00)  ; FMax(a,b)
  %3182 = fmul fast float %3046, %3181
  %3183 = fsub fast float -0.000000e+00, %3182
  %3184 = call float @dx.op.unary.f32(i32 21, float %3183)  ; Exp(value)
  %3185 = call float @dx.op.unary.f32(i32 7, float %3184)  ; Saturate(value)
  %3186 = fsub fast float 1.000000e+00, %3185
  %3187 = fmul fast float %3186, %3177
  %3188 = fmul fast float %3186, %3178
  %3189 = fmul fast float %3186, %3179
  br label %3190

; <label>:3190                                    ; preds = %3176, %3089
  %3191 = phi float [ %3187, %3176 ], [ 0.000000e+00, %3089 ]
  %3192 = phi float [ %3188, %3176 ], [ 0.000000e+00, %3089 ]
  %3193 = phi float [ %3189, %3176 ], [ 0.000000e+00, %3089 ]
  %3194 = fmul fast float %3020, %3046
  %3195 = fsub fast float -0.000000e+00, %3194
  %3196 = call float @dx.op.unary.f32(i32 21, float %3195)  ; Exp(value)
  %3197 = call float @dx.op.unary.f32(i32 7, float %3196)  ; Saturate(value)
  %3198 = call float @dx.op.binary.f32(i32 35, float %3197, float %2970)  ; FMax(a,b)
  %3199 = extractvalue %dx.types.CBufRet.f32 %3050, 3
  %3200 = fcmp fast ogt float %3199, 0.000000e+00
  %3201 = fcmp fast ogt float %2980, %3199
  %3202 = and i1 %3200, %3201
  %3203 = select i1 %3202, float 0.000000e+00, float %3191
  %3204 = select i1 %3202, float 0.000000e+00, float %3192
  %3205 = select i1 %3202, float 0.000000e+00, float %3193
  %3206 = select i1 %3202, float 1.000000e+00, float %3198
  %3207 = fsub fast float 1.000000e+00, %3206
  %3208 = fmul fast float %3207, %3111
  %3209 = fmul fast float %3207, %3112
  %3210 = fmul fast float %3207, %3113
  %3211 = fadd fast float %3208, %3203
  %3212 = fadd fast float %3209, %3204
  %3213 = fadd fast float %3210, %3205
  %3214 = fmul fast float %3211, %2958
  %3215 = fmul fast float %3212, %2958
  %3216 = fmul fast float %3213, %2958
  %3217 = fmul fast float %3206, %2959
  %3218 = fmul fast float %3206, %2960
  %3219 = fmul fast float %3206, %2961
  %3220 = fadd fast float %3214, %3217
  %3221 = fadd fast float %3215, %3218
  %3222 = fadd fast float %3216, %3219
  br label %3223

; <label>:3223                                    ; preds = %3190, %2881
  %3224 = phi float [ %3220, %3190 ], [ %2959, %2881 ]
  %3225 = phi float [ %3221, %3190 ], [ %2960, %2881 ]
  %3226 = phi float [ %3222, %3190 ], [ %2961, %2881 ]
  %3227 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %3228 = extractvalue %dx.types.CBufRet.i32 %3227, 1
  %3229 = icmp sgt i32 %3228, 0
  br i1 %3229, label %3230, label %3271

; <label>:3230                                    ; preds = %3223
  %3231 = extractvalue %dx.types.CBufRet.f32 %2957, 2
  %3232 = fmul fast float %3231, %3224
  %3233 = fmul fast float %3231, %3225
  %3234 = fmul fast float %3231, %3226
  %3235 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %3236 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %3235, i32 0, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %3237 = extractvalue %dx.types.ResRet.f32 %3236, 0
  %3238 = fmul fast float %3232, %3237
  %3239 = fmul fast float %3233, %3237
  %3240 = fmul fast float %3234, %3237
  %3241 = fadd fast float %3238, 0x3F65DA9CE0000000
  %3242 = fadd fast float %3239, 0x3F65DA9CE0000000
  %3243 = fadd fast float %3240, 0x3F65DA9CE0000000
  %3244 = call float @dx.op.unary.f32(i32 23, float %3241)  ; Log(value)
  %3245 = call float @dx.op.unary.f32(i32 23, float %3242)  ; Log(value)
  %3246 = call float @dx.op.unary.f32(i32 23, float %3243)  ; Log(value)
  %3247 = fmul fast float %3244, 0x3FB24924A0000000
  %3248 = fmul fast float %3245, 0x3FB24924A0000000
  %3249 = fmul fast float %3246, 0x3FB24924A0000000
  %3250 = fadd fast float %3247, 0x3FE38B1340000000
  %3251 = fadd fast float %3248, 0x3FE38B1340000000
  %3252 = fadd fast float %3249, 0x3FE38B1340000000
  %3253 = call float @dx.op.unary.f32(i32 7, float %3250)  ; Saturate(value)
  %3254 = call float @dx.op.unary.f32(i32 7, float %3251)  ; Saturate(value)
  %3255 = call float @dx.op.unary.f32(i32 7, float %3252)  ; Saturate(value)
  %3256 = fmul fast float %3253, 9.687500e-01
  %3257 = fmul fast float %3254, 9.687500e-01
  %3258 = fmul fast float %3255, 9.687500e-01
  %3259 = fadd fast float %3256, 1.562500e-02
  %3260 = fadd fast float %3257, 1.562500e-02
  %3261 = fadd fast float %3258, 1.562500e-02
  %3262 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %3263 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %3264 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %3262, %dx.types.Handle %3263, float %3259, float %3260, float %3261, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %3265 = extractvalue %dx.types.ResRet.f32 %3264, 0
  %3266 = extractvalue %dx.types.ResRet.f32 %3264, 1
  %3267 = extractvalue %dx.types.ResRet.f32 %3264, 2
  %3268 = fmul fast float %3265, 0x3FF0CCCCC0000000
  %3269 = fmul fast float %3266, 0x3FF0CCCCC0000000
  %3270 = fmul fast float %3267, 0x3FF0CCCCC0000000
  br label %3271

; <label>:3271                                    ; preds = %3230, %3223
  %3272 = phi float [ %3268, %3230 ], [ %3224, %3223 ]
  %3273 = phi float [ %3269, %3230 ], [ %3225, %3223 ]
  %3274 = phi float [ %3270, %3230 ], [ %3226, %3223 ]
  %3275 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %3275, i32 %50, i32 %51, i32 undef, float %3272, float %3273, float %3274, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %3276

; <label>:3276                                    ; preds = %3271, %0
  ret void

; <label>:3277                                    ; preds = %1424
  %3278 = fsub fast float %1411, %1406
  %3279 = call float @dx.op.unary.f32(i32 6, float %3278)  ; FAbs(value)
  %3280 = fsub fast float %3279, %1412
  %3281 = fdiv fast float %3280, %1413
  %3282 = call float @dx.op.unary.f32(i32 7, float %3281)  ; Saturate(value)
  %3283 = fsub fast float 1.000000e+00, %3282
  br label %3284

; <label>:3284                                    ; preds = %3277, %1424
  %3285 = phi float [ %3283, %3277 ], [ %1428, %1424 ]
  %3286 = fcmp uge float %1407, 1.000000e+00
  %3287 = or i1 %1039, %3286
  %3288 = select i1 %3286, float 0.000000e+00, float 1.000000e+00
  br i1 %3287, label %3296, label %3289

; <label>:3289                                    ; preds = %3284
  %3290 = fsub fast float %1411, %1407
  %3291 = call float @dx.op.unary.f32(i32 6, float %3290)  ; FAbs(value)
  %3292 = fsub fast float %3291, %1412
  %3293 = fdiv fast float %3292, %1413
  %3294 = call float @dx.op.unary.f32(i32 7, float %3293)  ; Saturate(value)
  %3295 = fsub fast float 1.000000e+00, %3294
  br label %3296

; <label>:3296                                    ; preds = %3289, %3284
  %3297 = phi float [ %3295, %3289 ], [ %3288, %3284 ]
  %3298 = fcmp uge float %1408, 1.000000e+00
  %3299 = or i1 %1039, %3298
  %3300 = select i1 %3298, float 0.000000e+00, float 1.000000e+00
  br i1 %3299, label %3308, label %3301

; <label>:3301                                    ; preds = %3296
  %3302 = fsub fast float %1411, %1408
  %3303 = call float @dx.op.unary.f32(i32 6, float %3302)  ; FAbs(value)
  %3304 = fsub fast float %3303, %1412
  %3305 = fdiv fast float %3304, %1413
  %3306 = call float @dx.op.unary.f32(i32 7, float %3305)  ; Saturate(value)
  %3307 = fsub fast float 1.000000e+00, %3306
  br label %3308

; <label>:3308                                    ; preds = %3301, %3296
  %3309 = phi float [ %3307, %3301 ], [ %3300, %3296 ]
  %3310 = fmul fast float %1425, %1386
  %3311 = fmul fast float %3285, %1387
  %3312 = fmul fast float %3297, %1389
  %3313 = fmul fast float %3309, %1390
  %3314 = call float @dx.op.dot4.f32(i32 56, float %3310, float %3311, float %3312, float %3313, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %3315 = fmul fast float %3314, %1399
  %3316 = fcmp fast ogt float %3315, 0.000000e+00
  br i1 %3316, label %1429, label %1169
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare void @dx.op.rawBufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8, i32) #2

; Function Attrs: nounwind
declare i32 @dx.op.atomicBinOp.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.unaryBits.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!53}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !34, !42, !47}
!5 = !{!6, !8, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !27, !28, !29, !30, !31, !32, !33}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 12, i32 0, !9}
!9 = !{i32 1, i32 16}
!10 = !{i32 2, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 12, i32 0, !9}
!11 = !{i32 3, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 12, i32 0, !9}
!12 = !{i32 4, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 12, i32 0, !9}
!13 = !{i32 5, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 5, i32 1, i32 11, i32 0, null}
!14 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !7}
!15 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !7}
!16 = !{i32 8, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 5, i32 0, !7}
!17 = !{i32 9, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 2, i32 0, !7}
!18 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !7}
!19 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !7}
!20 = !{i32 12, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 2, i32 0, !7}
!21 = !{i32 13, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !7}
!22 = !{i32 14, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 2, i32 0, !7}
!23 = !{i32 15, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 2, i32 0, !7}
!24 = !{i32 16, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 16, i32 1, i32 2, i32 0, !7}
!25 = !{i32 17, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 17, i32 1, i32 10, i32 0, !26}
!26 = !{i32 0, i32 5}
!27 = !{i32 18, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 18, i32 1, i32 10, i32 0, !26}
!28 = !{i32 19, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 19, i32 1, i32 10, i32 0, !26}
!29 = !{i32 20, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 20, i32 1, i32 4, i32 0, !26}
!30 = !{i32 21, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 21, i32 1, i32 2, i32 0, !7}
!31 = !{i32 22, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 22, i32 1, i32 12, i32 0, !9}
!32 = !{i32 23, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 23, i32 1, i32 12, i32 0, !9}
!33 = !{i32 24, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 24, i32 1, i32 4, i32 0, !7}
!34 = !{!35, !37, !38, !39, !41}
!35 = !{i32 0, %"class.RWStructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 0, i32 1, i32 12, i1 false, i1 false, i1 false, !36}
!36 = !{i32 1, i32 4}
!37 = !{i32 1, %"class.RWStructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 1, i32 1, i32 12, i1 false, i1 false, i1 false, !36}
!38 = !{i32 2, %"class.RWStructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 2, i32 1, i32 12, i1 false, i1 false, i1 false, !36}
!39 = !{i32 3, %"class.RWStructuredBuffer<vector<unsigned int, 2> >"* undef, !"", i32 0, i32 3, i32 1, i32 12, i1 false, i1 false, i1 false, !40}
!40 = !{i32 1, i32 8}
!41 = !{i32 4, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!42 = !{!43, !44, !45, !46}
!43 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 1176, null}
!44 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!45 = !{i32 2, %UniformBufferConstants_LumenCardScene* undef, !"", i32 0, i32 2, i32 1, i32 196, null}
!46 = !{i32 3, %UniformBufferConstants_FogStruct* undef, !"", i32 0, i32 3, i32 1, i32 180, null}
!47 = !{!48, !49, !50, !51, !52}
!48 = !{i32 0, %struct.SamplerState* undef, !"", i32 1000, i32 1, i32 1, i32 0, null}
!49 = !{i32 1, %struct.SamplerState* undef, !"", i32 1000, i32 3, i32 1, i32 0, null}
!50 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!51 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!52 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!53 = !{void ()* @VisualizeQuadsCS, !"VisualizeQuadsCS", null, !4, !54}
!54 = !{i32 0, i64 16, i32 4, !55, i32 5, !56}
!55 = !{i32 8, i32 8, i32 1}
!56 = !{i32 0}
!57 = !{!58, !58, i64 0}
!58 = !{!"int", !59, i64 0}
!59 = !{!"omnipotent char", !60, i64 0}
!60 = !{!"Simple C/C++ TBAA"}
!61 = !{!62}
!62 = distinct !{!62, !63, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z: %agg.result"}
!63 = distinct !{!63, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z"}
!64 = !{!65, !67, !69, !70}
!65 = distinct !{!65, !66, !"\01?SampleLumenMeshCards@@YA?AUFSurfaceCacheSample@@V?$vector@I$01@@IV?$vector@M$02@@1MM_NI@Z: %agg.result"}
!66 = distinct !{!66, !"\01?SampleLumenMeshCards@@YA?AUFSurfaceCacheSample@@V?$vector@I$01@@IV?$vector@M$02@@1MM_NI@Z"}
!67 = distinct !{!67, !68, !"\01?ConeTraceHeightfield@@YA?AUFTraceMeshHeightfieldResult@@UFConeTraceInput@@UFConeTraceResult@@@Z: %agg.result"}
!68 = distinct !{!68, !"\01?ConeTraceHeightfield@@YA?AUFTraceMeshHeightfieldResult@@UFConeTraceInput@@UFConeTraceResult@@@Z"}
!69 = distinct !{!69, !68, !"\01?ConeTraceHeightfield@@YA?AUFTraceMeshHeightfieldResult@@UFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!70 = distinct !{!70, !71, !"\01?ConeTraceLumenSceneHeightfields@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!71 = distinct !{!71, !"\01?ConeTraceLumenSceneHeightfields@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z"}
!72 = distinct !{!72, !"dx.controlflow.hints", i32 2}
!73 = distinct !{!73, !"dx.controlflow.hints", i32 1}
