;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 7569c79b4d2e90adf775500c97e81ef2
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(8,8,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       float DiffuseColorBoost;                      ; Offset:   48
;       float SkylightLeaking;                        ; Offset:   52
;       float SkylightLeakingRoughness;               ; Offset:   56
;       float InvFullSkylightLeakingDistance;         ; Offset:   60
;       uint SampleHeightFog;                         ; Offset:   64
;       uint SurfaceCacheFeedbackBufferSize;          ; Offset:  152
;       uint SurfaceCacheFeedbackBufferTileWrapMask;  ; Offset:  156
;       uint2 SurfaceCacheFeedbackBufferTileJitter;   ; Offset:  160
;       float SurfaceCacheFeedbackResLevelBias;       ; Offset:  168
;       uint SurfaceCacheUpdateFrameIndex;            ; Offset:  172
;       uint NumSceneObjects;                         ; Offset:  272
;       uint NumSceneHeightfieldObjects;              ; Offset:  296
;       float3 DistanceFieldBrickSize;                ; Offset:  352
;       float3 DistanceFieldUniqueDataBrickSize;      ; Offset:  368
;       uint3 DistanceFieldBrickAtlasSizeInBricks;    ; Offset:  384
;       uint3 DistanceFieldBrickAtlasMask;            ; Offset:  400
;       uint3 DistanceFieldBrickAtlasSizeLog2;        ; Offset:  416
;       float3 DistanceFieldBrickAtlasTexelSize;      ; Offset:  432
;       float3 DistanceFieldBrickAtlasHalfTexelSize;  ; Offset:  448
;       float3 DistanceFieldBrickOffsetToAtlasUVScale;; Offset:  464
;       float3 DistanceFieldUniqueDataBrickSizeInAtlasTexels;; Offset:  480
;       float MeshSDFNotCoveredExpandSurfaceScale;    ; Offset:  496
;       float MeshSDFNotCoveredMinStepScale;          ; Offset:  500
;       float MeshSDFDitheredTransparencyStepThreshold;; Offset:  504
;       uint CardGridPixelSizeShift;                  ; Offset:  536
;       uint3 CullGridSize;                           ; Offset:  560
;       uint2 InputViewSize;                          ; Offset:  624
;       uint2 InputViewOffset;                        ; Offset:  632
;       uint2 OutputViewSize;                         ; Offset:  640
;       uint2 OutputViewOffset;                       ; Offset:  648
;       uint VisualizeHiResSurface;                   ; Offset:  656
;       int Tonemap;                                  ; Offset:  660
;       uint VisualizeMode;                           ; Offset:  664
;       float VisualizeStepFactor;                    ; Offset:  704
;       float MinTraceDistance;                       ; Offset:  708
;       float MaxTraceDistance;                       ; Offset:  712
;       float MaxMeshSDFTraceDistanceForVoxelTracing; ; Offset:  716
;       float MaxMeshSDFTraceDistance;                ; Offset:  720
;       float CardInterpolateInfluenceRadius;         ; Offset:  724
;       int HeightfieldMaxTracingSteps;               ; Offset:  728
;       float ReprojectionRadiusScale;                ; Offset:  736
;       float InvClipmapFadeSize;                     ; Offset:  748
;       uint2 ProbeAtlasResolutionInProbes;           ; Offset:  752
;       uint RadianceProbeClipmapResolution;          ; Offset:  760
;       uint NumRadianceProbeClipmaps;                ; Offset:  764
;       uint RadianceProbeResolution;                 ; Offset:  768
;       uint FinalProbeResolution;                    ; Offset:  772
;       uint FinalRadianceAtlasMaxMip;                ; Offset:  776
;       uint CalculateIrradiance;                     ; Offset:  780
;       uint IrradianceProbeResolution;               ; Offset:  784
;       uint OcclusionProbeResolution;                ; Offset:  788
;       float4 RadianceProbeSettings[6];              ; Offset:  848
;       float4 PaddedWorldPositionToRadianceProbeCoordBias[6];; Offset:  944
;       float4 PaddedRadianceProbeCoordToWorldPositionBias[6];; Offset: 1040
;       float2 InvProbeFinalRadianceAtlasResolution;  ; Offset: 1136
;       float2 InvProbeFinalIrradianceAtlasResolution;; Offset: 1144
;       float2 InvProbeDepthAtlasResolution;          ; Offset: 1152
;       uint OverrideCacheOcclusionLighting;          ; Offset: 1160
;       uint ShowBlackRadianceCacheLighting;          ; Offset: 1164
;       uint ProbeAtlasResolutionModuloMask;          ; Offset: 1168
;       uint ProbeAtlasResolutionDivideShift;         ; Offset: 1172
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:  1176
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_LumenCardScene
; {
;
;   struct UniformBufferConstants_LumenCardScene
;   {
;
;       uint LumenCardScene_NumCards;                 ; Offset:    0
;       uint LumenCardScene_NumMeshCards;             ; Offset:    4
;       uint LumenCardScene_NumCardPages;             ; Offset:    8
;       uint LumenCardScene_NumHeightfields;          ; Offset:   12
;       uint LumenCardScene_MaxConeSteps;             ; Offset:   16
;       uint PrePadding_LumenCardScene_20;            ; Offset:   20
;       float2 LumenCardScene_PhysicalAtlasSize;      ; Offset:   24
;       float2 LumenCardScene_InvPhysicalAtlasSize;   ; Offset:   32
;       float LumenCardScene_IndirectLightingAtlasDownsampleFactor;; Offset:   40
;       uint LumenCardScene_NumDistantCards;          ; Offset:   44
;       float LumenCardScene_DistantSceneMaxTraceDistance;; Offset:   48
;       float PrePadding_LumenCardScene_52;           ; Offset:   52
;       float PrePadding_LumenCardScene_56;           ; Offset:   56
;       float PrePadding_LumenCardScene_60;           ; Offset:   60
;       float3 LumenCardScene_DistantSceneDirection;  ; Offset:   64
;       float PrePadding_LumenCardScene_76;           ; Offset:   76
;       uint4 LumenCardScene_DistantCardIndices[2];   ; Offset:   80
;       uint BindlessResource_LumenCardScene_CardData;; Offset:  112
;       uint PrePadding_LumenCardScene_116;           ; Offset:  116
;       uint BindlessResource_LumenCardScene_CardPageData;; Offset:  120
;       uint PrePadding_LumenCardScene_124;           ; Offset:  124
;       uint BindlessResource_LumenCardScene_MeshCardsData;; Offset:  128
;       uint PrePadding_LumenCardScene_132;           ; Offset:  132
;       uint BindlessResource_LumenCardScene_HeightfieldData;; Offset:  136
;       uint PrePadding_LumenCardScene_140;           ; Offset:  140
;       uint BindlessResource_LumenCardScene_PageTableBuffer;; Offset:  144
;       uint PrePadding_LumenCardScene_148;           ; Offset:  148
;       uint BindlessResource_LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer;; Offset:  152
;       uint PrePadding_LumenCardScene_156;           ; Offset:  156
;       uint BindlessResource_LumenCardScene_AlbedoAtlas;; Offset:  160
;       uint PrePadding_LumenCardScene_164;           ; Offset:  164
;       uint BindlessResource_LumenCardScene_OpacityAtlas;; Offset:  168
;       uint PrePadding_LumenCardScene_172;           ; Offset:  172
;       uint BindlessResource_LumenCardScene_NormalAtlas;; Offset:  176
;       uint PrePadding_LumenCardScene_180;           ; Offset:  180
;       uint BindlessResource_LumenCardScene_EmissiveAtlas;; Offset:  184
;       uint PrePadding_LumenCardScene_188;           ; Offset:  188
;       uint BindlessResource_LumenCardScene_DepthAtlas;; Offset:  192
;   
;   } UniformBufferConstants_LumenCardScene;          ; Offset:    0 Size:   196
;
; }
;
; cbuffer UniformBufferConstants_ReflectionStruct
; {
;
;   struct UniformBufferConstants_ReflectionStruct
;   {
;
;       float4 ReflectionStruct_SkyLightParameters;   ; Offset:    0
;       uint BindlessResource_ReflectionStruct_SkyLightCubemap;; Offset:   16
;       uint PrePadding_ReflectionStruct_20;          ; Offset:   20
;       uint BindlessSampler_ReflectionStruct_SkyLightCubemapSampler;; Offset:   24
;       uint PrePadding_ReflectionStruct_28;          ; Offset:   28
;       uint BindlessResource_ReflectionStruct_SkyLightBlendDestinationCubemap;; Offset:   32
;       uint PrePadding_ReflectionStruct_36;          ; Offset:   36
;       uint BindlessSampler_ReflectionStruct_SkyLightBlendDestinationCubemapSampler;; Offset:   40
;       uint PrePadding_ReflectionStruct_44;          ; Offset:   44
;       uint BindlessResource_ReflectionStruct_ReflectionCubemap;; Offset:   48
;       uint PrePadding_ReflectionStruct_52;          ; Offset:   52
;       uint BindlessSampler_ReflectionStruct_ReflectionCubemapSampler;; Offset:   56
;       uint PrePadding_ReflectionStruct_60;          ; Offset:   60
;       uint BindlessResource_ReflectionStruct_PreIntegratedGF;; Offset:   64
;       uint PrePadding_ReflectionStruct_68;          ; Offset:   68
;       uint BindlessSampler_ReflectionStruct_PreIntegratedGFSampler;; Offset:   72
;   
;   } UniformBufferConstants_ReflectionStruct;        ; Offset:    0 Size:    76
;
; }
;
; cbuffer UniformBufferConstants_FogStruct
; {
;
;   struct UniformBufferConstants_FogStruct
;   {
;
;       float4 FogStruct_ExponentialFogParameters;    ; Offset:    0
;       float4 FogStruct_ExponentialFogParameters2;   ; Offset:   16
;       float4 FogStruct_ExponentialFogColorParameter;; Offset:   32
;       float4 FogStruct_ExponentialFogParameters3;   ; Offset:   48
;       float4 FogStruct_SkyAtmosphereAmbientContributionColorScale;; Offset:   64
;       float4 FogStruct_InscatteringLightDirection;  ; Offset:   80
;       float4 FogStruct_DirectionalInscatteringColor;; Offset:   96
;       float2 FogStruct_SinCosInscatteringColorCubemapRotation;; Offset:  112
;       float PrePadding_FogStruct_120;               ; Offset:  120
;       float PrePadding_FogStruct_124;               ; Offset:  124
;       float3 FogStruct_FogInscatteringTextureParameters;; Offset:  128
;       float FogStruct_ApplyVolumetricFog;           ; Offset:  140
;       float FogStruct_VolumetricFogStartDistance;   ; Offset:  144
;       float FogStruct_VolumetricFogNearFadeInDistanceInv;; Offset:  148
;       uint BindlessResource_FogStruct_FogInscatteringColorCubemap;; Offset:  152
;       uint PrePadding_FogStruct_156;                ; Offset:  156
;       uint BindlessSampler_FogStruct_FogInscatteringColorSampler;; Offset:  160
;       uint PrePadding_FogStruct_164;                ; Offset:  164
;       uint BindlessResource_FogStruct_IntegratedLightScattering;; Offset:  168
;       uint PrePadding_FogStruct_172;                ; Offset:  172
;       uint BindlessSampler_FogStruct_IntegratedLightScatteringSampler;; Offset:  176
;   
;   } UniformBufferConstants_FogStruct;               ; Offset:    0 Size:   180
;
; }
;
; Resource bind info for LumenCardScene_CardData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for LumenCardScene_CardPageData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for LumenCardScene_MeshCardsData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for SceneDistanceFieldAssetData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for SceneObjectData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for EyeAdaptationBuffer
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for RWCardPageLastUsedBuffer
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for RWCardPageHighResLastUsedBuffer
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for RWSurfaceCacheFeedbackBufferAllocator
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for RWSurfaceCacheFeedbackBuffer
; {
;
;   uint2 $Element;                                   ; Offset:    0 Size:     8
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_LumenCardScene   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_ReflectionStruct   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_FogStruct   cbuffer      NA          NA     CB4            cb4     1
; D3DStaticPointClampedSampler      sampler      NA          NA      S0   s1,space1000     1
; D3DStaticBilinearWrappedSampler   sampler      NA          NA      S1   s2,space1000     1
; View_DistantSkyLightLutTextureSampler   sampler      NA          NA      S2             s0     1
; ReflectionStruct_SkyLightCubemapSampler   sampler      NA          NA      S3             s1     1
; FogStruct_FogInscatteringColorSampler   sampler      NA          NA      S4             s2     1
; ColorGradingLUTSampler            sampler      NA          NA      S5             s3     1
; View_DistantSkyLightLutTexture    texture     f32          2d      T0             t0     1
; LumenCardScene_CardData           texture  struct         r/o      T1             t1     1
; LumenCardScene_CardPageData       texture  struct         r/o      T2             t2     1
; LumenCardScene_MeshCardsData      texture  struct         r/o      T3             t3     1
; LumenCardScene_PageTableBuffer    texture    byte         r/o      T4             t4     1
; LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer   texture    byte         r/o      T5             t5     1
; ReflectionStruct_SkyLightCubemap   texture     f32        cube      T6             t6     1
; FogStruct_FogInscatteringColorCubemap   texture     f32        cube      T7             t7     1
; DistanceFieldIndirectionTable     texture    byte         r/o      T8             t8     1
; DistanceFieldBrickTexture         texture     f32          3d      T9             t9     1
; SceneDistanceFieldAssetData       texture  struct         r/o     T10            t10     1
; SceneObjectData                   texture  struct         r/o     T11            t11     1
; DirectLightingAtlas               texture     f32          2d     T12            t12     1
; IndirectLightingAtlas             texture     f32          2d     T13            t13     1
; FinalLightingAtlas                texture     f32          2d     T14            t14     1
; AlbedoAtlas                       texture     f32          2d     T15            t15     1
; OpacityAtlas                      texture     f32          2d     T16            t16     1
; NormalAtlas                       texture     f32          2d     T17            t17     1
; EmissiveAtlas                     texture     f32          2d     T18            t18     1
; DepthAtlas                        texture     f32          2d     T19            t19     1
; NumGridCulledMeshSDFObjects       texture     u32         buf     T20            t20     1
; GridCulledMeshSDFObjectStartOffsetArray   texture     u32         buf     T21            t21     1
; GridCulledMeshSDFObjectIndicesArray   texture     u32         buf     T22            t22     1
; EyeAdaptationBuffer               texture  struct         r/o     T23            t23     1
; ColorGradingLUT                   texture     f32          3d     T24            t24     1
; RWCardPageLastUsedBuffer              UAV  struct         r/w      U0             u0     1
; RWCardPageHighResLastUsedBuffer       UAV  struct         r/w      U1             u1     1
; RWSurfaceCacheFeedbackBufferAllocator       UAV  struct         r/w      U2             u2     1
; RWSurfaceCacheFeedbackBuffer          UAV  struct         r/w      U3             u3     1
; RWSceneColor                          UAV     f32          2d      U4             u4     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%struct.ByteAddressBuffer = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.RWStructuredBuffer<unsigned int>" = type { i32 }
%"class.RWStructuredBuffer<vector<unsigned int, 2> >" = type { <2 x i32> }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }
%_RootShaderParameters = type { float, float, float, float, i32, i32, i32, <2 x i32>, float, i32, i32, i32, <3 x float>, <3 x float>, <3 x i32>, <3 x i32>, <3 x i32>, <3 x float>, <3 x float>, <3 x float>, <3 x float>, float, float, float, i32, <3 x i32>, <2 x i32>, <2 x i32>, <2 x i32>, <2 x i32>, i32, i32, i32, float, float, float, float, float, float, i32, float, float, <2 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_LumenCardScene = type { i32, i32, i32, i32, i32, i32, <2 x float>, <2 x float>, float, i32, float, float, float, float, <3 x float>, float, [2 x <4 x i32>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_ReflectionStruct = type { <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_FogStruct = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @VisualizeQuadsCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 1 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 1 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 1 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 1 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 24, i32 24, i32 0, i8 0 }, i32 24, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 23, i32 23, i32 0, i8 0 }, i32 23, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 22, i32 22, i32 0, i8 0 }, i32 22, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 0 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 1000, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %36 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 1000, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %37 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %38 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %39 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %40 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %41 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %42 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 13, i32 180 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %43 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %38, %dx.types.ResourceProperties { i32 13, i32 76 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %44 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %39, %dx.types.ResourceProperties { i32 13, i32 196 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %45 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %40, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %46 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %41, %dx.types.ResourceProperties { i32 13, i32 1176 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %47 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %48 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %49 = alloca [6 x i32], align 4
  %50 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 40)  ; CBufferLoadLegacy(handle,regIndex)
  %51 = extractvalue %dx.types.CBufRet.i32 %50, 2
  %52 = extractvalue %dx.types.CBufRet.i32 %50, 3
  %53 = add i32 %51, %47
  %54 = add i32 %52, %48
  %55 = uitofp i32 %47 to float
  %56 = uitofp i32 %48 to float
  %57 = fadd fast float %55, 5.000000e-01
  %58 = fadd fast float %56, 5.000000e-01
  %59 = extractvalue %dx.types.CBufRet.i32 %50, 0
  %60 = extractvalue %dx.types.CBufRet.i32 %50, 1
  %61 = uitofp i32 %59 to float
  %62 = uitofp i32 %60 to float
  %63 = fdiv fast float %57, %61
  %64 = fdiv fast float %58, %62
  %65 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 39)  ; CBufferLoadLegacy(handle,regIndex)
  %66 = extractvalue %dx.types.CBufRet.i32 %65, 0
  %67 = extractvalue %dx.types.CBufRet.i32 %65, 1
  %68 = uitofp i32 %66 to float
  %69 = uitofp i32 %67 to float
  %70 = fmul fast float %68, %63
  %71 = fmul fast float %69, %64
  %72 = extractvalue %dx.types.CBufRet.i32 %65, 2
  %73 = extractvalue %dx.types.CBufRet.i32 %65, 3
  %74 = uitofp i32 %72 to float
  %75 = uitofp i32 %73 to float
  %76 = fadd fast float %70, %74
  %77 = fadd fast float %71, %75
  %78 = fptoui float %76 to i32
  %79 = fptoui float %77 to i32
  %80 = icmp uge i32 %47, %59
  %81 = icmp uge i32 %48, %60
  %82 = or i1 %80, %81
  br i1 %82, label %2262, label %83

; <label>:83                                      ; preds = %0
  %84 = fmul fast float %63, 2.000000e+00
  %85 = fmul fast float %64, 2.000000e+00
  %86 = fadd fast float %84, -1.000000e+00
  %87 = fsub fast float 1.000000e+00, %85
  %88 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 56)  ; CBufferLoadLegacy(handle,regIndex)
  %89 = extractvalue %dx.types.CBufRet.f32 %88, 0
  %90 = extractvalue %dx.types.CBufRet.f32 %88, 1
  %91 = extractvalue %dx.types.CBufRet.f32 %88, 2
  %92 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 57)  ; CBufferLoadLegacy(handle,regIndex)
  %93 = extractvalue %dx.types.CBufRet.f32 %92, 0
  %94 = extractvalue %dx.types.CBufRet.f32 %92, 1
  %95 = extractvalue %dx.types.CBufRet.f32 %92, 2
  %96 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 58)  ; CBufferLoadLegacy(handle,regIndex)
  %97 = extractvalue %dx.types.CBufRet.f32 %96, 0
  %98 = extractvalue %dx.types.CBufRet.f32 %96, 1
  %99 = extractvalue %dx.types.CBufRet.f32 %96, 2
  %100 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %101 = extractvalue %dx.types.CBufRet.f32 %100, 0
  %102 = extractvalue %dx.types.CBufRet.f32 %100, 1
  %103 = fadd fast float %86, %101
  %104 = fadd fast float %102, %87
  %105 = fmul fast float %103, %89
  %106 = call float @dx.op.tertiary.f32(i32 46, float %104, float %93, float %105)  ; FMad(a,b,c)
  %107 = fadd fast float %106, %97
  %108 = fmul fast float %103, %90
  %109 = call float @dx.op.tertiary.f32(i32 46, float %104, float %94, float %108)  ; FMad(a,b,c)
  %110 = fadd fast float %109, %98
  %111 = fmul fast float %103, %91
  %112 = call float @dx.op.tertiary.f32(i32 46, float %104, float %95, float %111)  ; FMad(a,b,c)
  %113 = fadd fast float %112, %99
  %114 = call float @dx.op.dot3.f32(i32 55, float %107, float %110, float %113, float %107, float %110, float %113)  ; Dot3(ax,ay,az,bx,by,bz)
  %115 = call float @dx.op.unary.f32(i32 25, float %114)  ; Rsqrt(value)
  %116 = fmul fast float %115, %107
  %117 = fmul fast float %115, %110
  %118 = fmul fast float %115, %113
  %119 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 237)  ; CBufferLoadLegacy(handle,regIndex)
  %120 = extractvalue %dx.types.CBufRet.f32 %119, 0
  %121 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 44)  ; CBufferLoadLegacy(handle,regIndex)
  %122 = extractvalue %dx.types.CBufRet.f32 %121, 2
  %123 = extractvalue %dx.types.CBufRet.f32 %121, 1
  %124 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %125 = extractvalue %dx.types.CBufRet.f32 %124, 0
  %126 = extractvalue %dx.types.CBufRet.f32 %124, 1
  %127 = extractvalue %dx.types.CBufRet.f32 %124, 2
  %128 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %129 = extractvalue %dx.types.CBufRet.f32 %128, 0
  %130 = extractvalue %dx.types.CBufRet.f32 %128, 1
  %131 = extractvalue %dx.types.CBufRet.f32 %128, 2
  %132 = fmul fast float %125, 2.097152e+06
  %133 = fmul fast float %126, 2.097152e+06
  %134 = fmul fast float %127, 2.097152e+06
  %135 = fadd fast float %132, %129
  %136 = fadd fast float %133, %130
  %137 = fadd fast float %134, %131
  %138 = call float @dx.op.unary.f32(i32 14, float %120)  ; Tan(value)
  %139 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %140 = extractvalue %dx.types.CBufRet.i32 %139, 0
  %141 = icmp ne i32 %140, 0
  %142 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %45, i32 226)  ; CBufferLoadLegacy(handle,regIndex)
  %143 = extractvalue %dx.types.CBufRet.i32 %142, 2
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %149, label %145

; <label>:145                                     ; preds = %83
  %146 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 45)  ; CBufferLoadLegacy(handle,regIndex)
  %147 = extractvalue %dx.types.CBufRet.f32 %146, 0
  %148 = call float @dx.op.binary.f32(i32 35, float %123, float %147)  ; FMax(a,b)
  br label %149

; <label>:149                                     ; preds = %145, %83
  %150 = phi float [ %148, %145 ], [ %122, %83 ]
  %151 = sub i32 %78, %72
  %152 = sub i32 %79, %73
  %153 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 129)  ; CBufferLoadLegacy(handle,regIndex)
  %154 = extractvalue %dx.types.CBufRet.f32 %153, 0
  %155 = extractvalue %dx.types.CBufRet.f32 %153, 1
  %156 = fptosi float %154 to i32
  %157 = fptosi float %155 to i32
  %158 = mul i32 %156, %151
  %159 = mul i32 %157, %152
  %160 = udiv i32 %158, %66
  %161 = udiv i32 %159, %67
  %162 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %163 = extractvalue %dx.types.CBufRet.i32 %162, 0
  %164 = extractvalue %dx.types.CBufRet.i32 %162, 1
  %165 = add i32 %163, -1
  %166 = add i32 %164, -1
  %167 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %168 = extractvalue %dx.types.CBufRet.i32 %167, 2
  %169 = and i32 %168, 31
  %170 = ashr i32 %160, %169
  %171 = ashr i32 %161, %169
  %172 = call i32 @dx.op.binary.i32(i32 37, i32 %170, i32 0)  ; IMax(a,b)
  %173 = call i32 @dx.op.binary.i32(i32 37, i32 %171, i32 0)  ; IMax(a,b)
  %174 = call i32 @dx.op.binary.i32(i32 38, i32 %172, i32 %165)  ; IMin(a,b)
  %175 = call i32 @dx.op.binary.i32(i32 38, i32 %173, i32 %166)  ; IMin(a,b)
  %176 = mul i32 %163, %175
  %177 = add i32 %176, %174
  %178 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %179 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %178, i32 %177, i32 undef)  ; BufferLoad(srv,index,wot)
  %180 = extractvalue %dx.types.ResRet.i32 %179, 0
  %181 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %182 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %181, i32 %177, i32 undef)  ; BufferLoad(srv,index,wot)
  %183 = extractvalue %dx.types.ResRet.i32 %182, 0
  %184 = fcmp fast ogt float %150, %123
  br i1 %184, label %185, label %1898

; <label>:185                                     ; preds = %149
  %186 = icmp eq i32 %180, 0
  br i1 %186, label %488, label %187

; <label>:187                                     ; preds = %185
  br label %188

; <label>:188                                     ; preds = %482, %187
  %189 = phi i32 [ %485, %482 ], [ 0, %187 ]
  %190 = phi i32 [ %483, %482 ], [ 0, %187 ]
  %191 = phi float [ %484, %482 ], [ %150, %187 ]
  %192 = add i32 %189, %183
  %193 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %194 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %193, i32 %192, i32 undef)  ; BufferLoad(srv,index,wot)
  %195 = extractvalue %dx.types.ResRet.i32 %194, 0
  %196 = mul i32 %195, 10
  %197 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %198 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %197, i32 %196, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %199 = extractvalue %dx.types.ResRet.f32 %198, 0
  %200 = extractvalue %dx.types.ResRet.f32 %198, 1
  %201 = extractvalue %dx.types.ResRet.f32 %198, 2
  %202 = or i32 %196, 1
  %203 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %197, i32 %202, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %204 = extractvalue %dx.types.ResRet.f32 %203, 0
  %205 = extractvalue %dx.types.ResRet.f32 %203, 1
  %206 = extractvalue %dx.types.ResRet.f32 %203, 2
  %207 = extractvalue %dx.types.ResRet.f32 %203, 3
  %208 = add i32 %196, 2
  %209 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %197, i32 %208, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %210 = extractvalue %dx.types.ResRet.f32 %209, 0
  %211 = extractvalue %dx.types.ResRet.f32 %209, 1
  %212 = extractvalue %dx.types.ResRet.f32 %209, 2
  %213 = extractvalue %dx.types.ResRet.f32 %209, 3
  %214 = add i32 %196, 3
  %215 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %197, i32 %214, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %216 = extractvalue %dx.types.ResRet.f32 %215, 0
  %217 = extractvalue %dx.types.ResRet.f32 %215, 1
  %218 = extractvalue %dx.types.ResRet.f32 %215, 2
  %219 = extractvalue %dx.types.ResRet.f32 %215, 3
  %220 = add i32 %196, 4
  %221 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %197, i32 %220, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %222 = extractvalue %dx.types.ResRet.f32 %221, 0
  %223 = extractvalue %dx.types.ResRet.f32 %221, 1
  %224 = extractvalue %dx.types.ResRet.f32 %221, 2
  %225 = extractvalue %dx.types.ResRet.f32 %221, 3
  %226 = call float @dx.op.unary.f32(i32 6, float %225)  ; FAbs(value)
  %227 = add i32 %196, 9
  %228 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %197, i32 %227, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %229 = extractvalue %dx.types.ResRet.f32 %228, 0
  %230 = extractvalue %dx.types.ResRet.f32 %228, 1
  %231 = extractvalue %dx.types.ResRet.f32 %228, 2
  %232 = fmul fast float %199, -2.097152e+06
  %233 = fmul fast float %200, -2.097152e+06
  %234 = fmul fast float %201, -2.097152e+06
  %235 = fmul fast float %204, %232
  %236 = call float @dx.op.tertiary.f32(i32 46, float %233, float %205, float %235)  ; FMad(a,b,c)
  %237 = call float @dx.op.tertiary.f32(i32 46, float %234, float %206, float %236)  ; FMad(a,b,c)
  %238 = fadd fast float %237, %207
  %239 = fmul fast float %210, %232
  %240 = call float @dx.op.tertiary.f32(i32 46, float %233, float %211, float %239)  ; FMad(a,b,c)
  %241 = call float @dx.op.tertiary.f32(i32 46, float %234, float %212, float %240)  ; FMad(a,b,c)
  %242 = fadd fast float %241, %213
  %243 = fmul fast float %216, %232
  %244 = call float @dx.op.tertiary.f32(i32 46, float %233, float %217, float %243)  ; FMad(a,b,c)
  %245 = call float @dx.op.tertiary.f32(i32 46, float %234, float %218, float %244)  ; FMad(a,b,c)
  %246 = fadd fast float %245, %219
  %247 = fadd fast float %226, %191
  %248 = call float @dx.op.binary.f32(i32 36, float %150, float %247)  ; FMin(a,b)
  %249 = fmul fast float %248, %116
  %250 = fmul fast float %248, %117
  %251 = fmul fast float %248, %118
  %252 = fadd fast float %249, %135
  %253 = fadd fast float %250, %136
  %254 = fadd fast float %251, %137
  %255 = fmul fast float %204, %135
  %256 = call float @dx.op.tertiary.f32(i32 46, float %136, float %205, float %255)  ; FMad(a,b,c)
  %257 = call float @dx.op.tertiary.f32(i32 46, float %137, float %206, float %256)  ; FMad(a,b,c)
  %258 = fadd fast float %238, %257
  %259 = fmul fast float %210, %135
  %260 = call float @dx.op.tertiary.f32(i32 46, float %136, float %211, float %259)  ; FMad(a,b,c)
  %261 = call float @dx.op.tertiary.f32(i32 46, float %137, float %212, float %260)  ; FMad(a,b,c)
  %262 = fadd fast float %242, %261
  %263 = fmul fast float %216, %135
  %264 = call float @dx.op.tertiary.f32(i32 46, float %136, float %217, float %263)  ; FMad(a,b,c)
  %265 = call float @dx.op.tertiary.f32(i32 46, float %137, float %218, float %264)  ; FMad(a,b,c)
  %266 = fadd fast float %246, %265
  %267 = fmul fast float %252, %204
  %268 = call float @dx.op.tertiary.f32(i32 46, float %253, float %205, float %267)  ; FMad(a,b,c)
  %269 = call float @dx.op.tertiary.f32(i32 46, float %254, float %206, float %268)  ; FMad(a,b,c)
  %270 = fmul fast float %252, %210
  %271 = call float @dx.op.tertiary.f32(i32 46, float %253, float %211, float %270)  ; FMad(a,b,c)
  %272 = call float @dx.op.tertiary.f32(i32 46, float %254, float %212, float %271)  ; FMad(a,b,c)
  %273 = fmul fast float %252, %216
  %274 = call float @dx.op.tertiary.f32(i32 46, float %253, float %217, float %273)  ; FMad(a,b,c)
  %275 = call float @dx.op.tertiary.f32(i32 46, float %254, float %218, float %274)  ; FMad(a,b,c)
  %276 = fsub fast float %269, %257
  %277 = fsub fast float %272, %261
  %278 = fsub fast float %275, %265
  %279 = fmul fast float %276, %276
  %280 = fmul fast float %277, %277
  %281 = fadd fast float %280, %279
  %282 = fmul fast float %278, %278
  %283 = fadd fast float %281, %282
  %284 = call float @dx.op.unary.f32(i32 24, float %283)  ; Sqrt(value)
  %285 = fdiv fast float %123, %248
  %286 = fmul fast float %285, %284
  %287 = fdiv fast float %276, %284
  %288 = fdiv fast float %277, %284
  %289 = fdiv fast float %278, %284
  %290 = fsub fast float -0.000000e+00, %222
  %291 = fsub fast float -0.000000e+00, %223
  %292 = fsub fast float -0.000000e+00, %224
  %293 = fdiv fast float 1.000000e+00, %276
  %294 = fdiv fast float 1.000000e+00, %277
  %295 = fdiv fast float 1.000000e+00, %278
  %296 = fsub fast float %290, %258
  %297 = fsub fast float %291, %262
  %298 = fsub fast float %292, %266
  %299 = fmul fast float %293, %296
  %300 = fmul fast float %294, %297
  %301 = fmul fast float %295, %298
  %302 = fsub fast float %222, %258
  %303 = fsub fast float %223, %262
  %304 = fsub fast float %224, %266
  %305 = fmul fast float %293, %302
  %306 = fmul fast float %294, %303
  %307 = fmul fast float %295, %304
  %308 = call float @dx.op.binary.f32(i32 36, float %299, float %305)  ; FMin(a,b)
  %309 = call float @dx.op.binary.f32(i32 36, float %300, float %306)  ; FMin(a,b)
  %310 = call float @dx.op.binary.f32(i32 36, float %301, float %307)  ; FMin(a,b)
  %311 = call float @dx.op.binary.f32(i32 35, float %299, float %305)  ; FMax(a,b)
  %312 = call float @dx.op.binary.f32(i32 35, float %300, float %306)  ; FMax(a,b)
  %313 = call float @dx.op.binary.f32(i32 35, float %301, float %307)  ; FMax(a,b)
  %314 = call float @dx.op.binary.f32(i32 35, float %309, float %310)  ; FMax(a,b)
  %315 = call float @dx.op.binary.f32(i32 35, float %308, float %314)  ; FMax(a,b)
  %316 = call float @dx.op.binary.f32(i32 36, float %312, float %313)  ; FMin(a,b)
  %317 = call float @dx.op.binary.f32(i32 36, float %311, float %316)  ; FMin(a,b)
  %318 = call float @dx.op.unary.f32(i32 7, float %315)  ; Saturate(value)
  %319 = call float @dx.op.unary.f32(i32 7, float %317)  ; Saturate(value)
  %320 = fmul fast float %318, %284
  %321 = fmul fast float %319, %284
  %322 = call float @dx.op.binary.f32(i32 35, float %320, float %286)  ; FMax(a,b)
  %323 = fcmp fast olt float %322, %321
  br i1 %323, label %324, label %482, !dx.controlflow.hints !59

; <label>:324                                     ; preds = %188
  %325 = extractvalue %dx.types.ResRet.f32 %228, 3
  %326 = bitcast float %325 to i32
  %327 = mul i32 %326, 9
  %328 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %329 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %328, i32 %327, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %330 = extractvalue %dx.types.ResRet.f32 %329, 0
  %331 = bitcast float %330 to i32
  %332 = lshr i32 %331, 30
  %333 = mul nuw nsw i32 %332, 3
  %334 = add i32 %327, -3
  %335 = add i32 %334, %333
  %336 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %328, i32 %335, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %337 = extractvalue %dx.types.ResRet.f32 %336, 0
  %338 = extractvalue %dx.types.ResRet.f32 %336, 1
  %339 = bitcast float %337 to i32
  %340 = bitcast float %338 to i32
  %341 = add i32 %335, 1
  %342 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %328, i32 %341, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %343 = extractvalue %dx.types.ResRet.f32 %342, 0
  %344 = extractvalue %dx.types.ResRet.f32 %342, 1
  %345 = extractvalue %dx.types.ResRet.f32 %342, 2
  %346 = extractvalue %dx.types.ResRet.f32 %342, 3
  %347 = add i32 %335, 2
  %348 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %328, i32 %347, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %349 = extractvalue %dx.types.ResRet.f32 %348, 0
  %350 = extractvalue %dx.types.ResRet.f32 %348, 1
  %351 = extractvalue %dx.types.ResRet.f32 %348, 2
  %352 = extractvalue %dx.types.ResRet.f32 %348, 3
  %353 = and i32 %339, 1023
  %354 = lshr i32 %339, 10
  %355 = and i32 %354, 1023
  br label %356

; <label>:356                                     ; preds = %456, %324
  %357 = phi float [ %322, %324 ], [ %453, %456 ]
  %358 = phi i32 [ 0, %324 ], [ %457, %456 ]
  %359 = phi float [ 0.000000e+00, %324 ], [ %440, %456 ]
  %360 = fmul fast float %357, %287
  %361 = fmul fast float %357, %288
  %362 = fmul fast float %357, %289
  %363 = fadd fast float %360, %258
  %364 = fadd fast float %361, %262
  %365 = fadd fast float %362, %266
  %366 = fmul fast float %363, %343
  %367 = fmul fast float %364, %344
  %368 = fmul fast float %365, %345
  %369 = fadd fast float %366, %349
  %370 = fadd fast float %367, %350
  %371 = fadd fast float %368, %351
  %372 = fptosi float %369 to i32
  %373 = fptosi float %370 to i32
  %374 = fptosi float %371 to i32
  %375 = mul i32 %374, %355
  %376 = add i32 %375, %373
  %377 = mul i32 %376, %353
  %378 = add i32 %372, %340
  %379 = add i32 %378, %377
  %380 = shl i32 %379, 2
  %381 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %382 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %381, i32 %380, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %383 = extractvalue %dx.types.ResRet.i32 %382, 0
  %384 = icmp eq i32 %383, -1
  br i1 %384, label %437, label %385

; <label>:385                                     ; preds = %356
  %386 = sitofp i32 %372 to float
  %387 = sitofp i32 %373 to float
  %388 = sitofp i32 %374 to float
  %389 = fsub fast float %369, %386
  %390 = fsub fast float %370, %387
  %391 = fsub fast float %371, %388
  %392 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %393 = extractvalue %dx.types.CBufRet.i32 %392, 0
  %394 = and i32 %393, %383
  %395 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %396 = extractvalue %dx.types.CBufRet.i32 %395, 0
  %397 = and i32 %396, 31
  %398 = lshr i32 %383, %397
  %399 = extractvalue %dx.types.CBufRet.i32 %392, 1
  %400 = and i32 %398, %399
  %401 = extractvalue %dx.types.CBufRet.i32 %395, 1
  %402 = add i32 %401, %396
  %403 = and i32 %402, 31
  %404 = lshr i32 %383, %403
  %405 = uitofp i32 %394 to float
  %406 = uitofp i32 %400 to float
  %407 = uitofp i32 %404 to float
  %408 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %409 = extractvalue %dx.types.CBufRet.f32 %408, 0
  %410 = extractvalue %dx.types.CBufRet.f32 %408, 1
  %411 = extractvalue %dx.types.CBufRet.f32 %408, 2
  %412 = fmul fast float %409, %405
  %413 = fmul fast float %406, %410
  %414 = fmul fast float %407, %411
  %415 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %416 = extractvalue %dx.types.CBufRet.f32 %415, 0
  %417 = extractvalue %dx.types.CBufRet.f32 %415, 1
  %418 = extractvalue %dx.types.CBufRet.f32 %415, 2
  %419 = fmul fast float %416, %389
  %420 = fmul fast float %417, %390
  %421 = fmul fast float %418, %391
  %422 = fadd fast float %419, %412
  %423 = fadd fast float %420, %413
  %424 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %425 = extractvalue %dx.types.CBufRet.f32 %424, 0
  %426 = extractvalue %dx.types.CBufRet.f32 %424, 1
  %427 = extractvalue %dx.types.CBufRet.f32 %424, 2
  %428 = fadd fast float %422, %425
  %429 = fadd fast float %423, %426
  %430 = fadd fast float %427, %421
  %431 = fadd fast float %430, %414
  %432 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %433 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %434 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %432, %dx.types.Handle %433, float %428, float %429, float %431, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %435 = extractvalue %dx.types.ResRet.f32 %434, 0
  %436 = fmul fast float %435, %346
  br label %437

; <label>:437                                     ; preds = %385, %356
  %438 = phi float [ %436, %385 ], [ %346, %356 ]
  %439 = fadd float %352, %438
  %440 = call float @dx.op.binary.f32(i32 35, float %439, float %359)  ; FMax(a,b)
  %441 = fmul fast float %226, 2.000000e+00
  %442 = fdiv fast float %440, %441
  %443 = call float @dx.op.unary.f32(i32 7, float %442)  ; Saturate(value)
  %444 = fmul fast float %443, %226
  %445 = fcmp fast olt float %439, %444
  br i1 %445, label %446, label %451

; <label>:446                                     ; preds = %437
  %447 = fadd fast float %439, %357
  %448 = fsub fast float %447, %444
  %449 = call float @dx.op.binary.f32(i32 35, float %448, float %322)  ; FMax(a,b)
  %450 = call float @dx.op.binary.f32(i32 36, float %449, float %321)  ; FMin(a,b)
  br label %461

; <label>:451                                     ; preds = %437
  %452 = call float @dx.op.binary.f32(i32 35, float %439, float 9.765625e-04)  ; FMax(a,b)
  %453 = fadd fast float %452, %357
  %454 = fadd fast float %444, %321
  %455 = fcmp fast ogt float %453, %454
  br i1 %455, label %459, label %456

; <label>:456                                     ; preds = %451
  %457 = add nuw nsw i32 %358, 1
  %458 = icmp ult i32 %457, 64
  br i1 %458, label %356, label %459, !llvm.loop !60

; <label>:459                                     ; preds = %456, %451
  %460 = phi i32 [ %457, %456 ], [ %358, %451 ]
  br label %461

; <label>:461                                     ; preds = %459, %446
  %462 = phi float [ %450, %446 ], [ %453, %459 ]
  %463 = phi i32 [ %358, %446 ], [ %460, %459 ]
  %464 = phi i1 [ true, %446 ], [ false, %459 ]
  %465 = icmp eq i32 %463, 64
  %466 = or i1 %465, %464
  br i1 %466, label %467, label %482

; <label>:467                                     ; preds = %461
  %468 = fmul fast float %287, %229
  %469 = fmul fast float %468, %462
  %470 = fmul fast float %288, %230
  %471 = fmul fast float %470, %462
  %472 = fmul fast float %289, %231
  %473 = fmul fast float %472, %462
  %474 = fmul fast float %469, %469
  %475 = fmul fast float %471, %471
  %476 = fadd fast float %474, %475
  %477 = fmul fast float %473, %473
  %478 = fadd fast float %476, %477
  %479 = call float @dx.op.unary.f32(i32 24, float %478)  ; Sqrt(value)
  %480 = fcmp fast olt float %479, %191
  br i1 %480, label %481, label %482

; <label>:481                                     ; preds = %467
  br label %482

; <label>:482                                     ; preds = %481, %467, %461, %188
  %483 = phi i32 [ %195, %481 ], [ %190, %467 ], [ %190, %461 ], [ %190, %188 ]
  %484 = phi float [ %479, %481 ], [ %191, %467 ], [ %191, %461 ], [ %191, %188 ]
  %485 = add nuw i32 %189, 1
  %486 = icmp eq i32 %485, %180
  br i1 %486, label %487, label %188

; <label>:487                                     ; preds = %482
  br label %488

; <label>:488                                     ; preds = %487, %185
  %489 = phi i32 [ 0, %185 ], [ %483, %487 ]
  %490 = phi float [ %150, %185 ], [ %484, %487 ]
  %491 = fcmp fast olt float %490, %150
  br i1 %491, label %492, label %1898

; <label>:492                                     ; preds = %488
  %493 = mul i32 %489, 10
  %494 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %495 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %494, i32 %493, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %496 = extractvalue %dx.types.ResRet.f32 %495, 0
  %497 = extractvalue %dx.types.ResRet.f32 %495, 1
  %498 = extractvalue %dx.types.ResRet.f32 %495, 2
  %499 = or i32 %493, 1
  %500 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %494, i32 %499, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %501 = extractvalue %dx.types.ResRet.f32 %500, 0
  %502 = extractvalue %dx.types.ResRet.f32 %500, 1
  %503 = extractvalue %dx.types.ResRet.f32 %500, 2
  %504 = extractvalue %dx.types.ResRet.f32 %500, 3
  %505 = add i32 %493, 2
  %506 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %494, i32 %505, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %507 = extractvalue %dx.types.ResRet.f32 %506, 0
  %508 = extractvalue %dx.types.ResRet.f32 %506, 1
  %509 = extractvalue %dx.types.ResRet.f32 %506, 2
  %510 = extractvalue %dx.types.ResRet.f32 %506, 3
  %511 = add i32 %493, 3
  %512 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %494, i32 %511, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %513 = extractvalue %dx.types.ResRet.f32 %512, 0
  %514 = extractvalue %dx.types.ResRet.f32 %512, 1
  %515 = extractvalue %dx.types.ResRet.f32 %512, 2
  %516 = extractvalue %dx.types.ResRet.f32 %512, 3
  %517 = add i32 %493, 4
  %518 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %494, i32 %517, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %519 = extractvalue %dx.types.ResRet.f32 %518, 0
  %520 = extractvalue %dx.types.ResRet.f32 %518, 1
  %521 = extractvalue %dx.types.ResRet.f32 %518, 2
  %522 = add i32 %493, 5
  %523 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %494, i32 %522, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %524 = extractvalue %dx.types.ResRet.f32 %523, 3
  %525 = bitcast float %524 to i32
  %526 = add i32 %493, 9
  %527 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %494, i32 %526, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %528 = extractvalue %dx.types.ResRet.f32 %527, 3
  %529 = bitcast float %528 to i32
  %530 = fmul fast float %496, -2.097152e+06
  %531 = fmul fast float %497, -2.097152e+06
  %532 = fmul fast float %498, -2.097152e+06
  %533 = fmul fast float %501, %530
  %534 = call float @dx.op.tertiary.f32(i32 46, float %531, float %502, float %533)  ; FMad(a,b,c)
  %535 = call float @dx.op.tertiary.f32(i32 46, float %532, float %503, float %534)  ; FMad(a,b,c)
  %536 = fadd fast float %535, %504
  %537 = fmul fast float %507, %530
  %538 = call float @dx.op.tertiary.f32(i32 46, float %531, float %508, float %537)  ; FMad(a,b,c)
  %539 = call float @dx.op.tertiary.f32(i32 46, float %532, float %509, float %538)  ; FMad(a,b,c)
  %540 = fadd fast float %539, %510
  %541 = fmul fast float %513, %530
  %542 = call float @dx.op.tertiary.f32(i32 46, float %531, float %514, float %541)  ; FMad(a,b,c)
  %543 = call float @dx.op.tertiary.f32(i32 46, float %532, float %515, float %542)  ; FMad(a,b,c)
  %544 = fadd fast float %543, %516
  %545 = fmul fast float %490, %116
  %546 = fmul fast float %490, %117
  %547 = fmul fast float %490, %118
  %548 = fadd fast float %545, %135
  %549 = fadd fast float %546, %136
  %550 = fadd fast float %547, %137
  %551 = fmul fast float %501, %548
  %552 = call float @dx.op.tertiary.f32(i32 46, float %549, float %502, float %551)  ; FMad(a,b,c)
  %553 = call float @dx.op.tertiary.f32(i32 46, float %550, float %503, float %552)  ; FMad(a,b,c)
  %554 = fadd fast float %536, %553
  %555 = fmul fast float %507, %548
  %556 = call float @dx.op.tertiary.f32(i32 46, float %549, float %508, float %555)  ; FMad(a,b,c)
  %557 = call float @dx.op.tertiary.f32(i32 46, float %550, float %509, float %556)  ; FMad(a,b,c)
  %558 = fadd fast float %540, %557
  %559 = fmul fast float %513, %548
  %560 = call float @dx.op.tertiary.f32(i32 46, float %549, float %514, float %559)  ; FMad(a,b,c)
  %561 = call float @dx.op.tertiary.f32(i32 46, float %550, float %515, float %560)  ; FMad(a,b,c)
  %562 = fadd fast float %544, %561
  %563 = fsub fast float -0.000000e+00, %519
  %564 = fsub fast float -0.000000e+00, %520
  %565 = fsub fast float -0.000000e+00, %521
  %566 = call float @dx.op.binary.f32(i32 35, float %554, float %563)  ; FMax(a,b)
  %567 = call float @dx.op.binary.f32(i32 35, float %558, float %564)  ; FMax(a,b)
  %568 = call float @dx.op.binary.f32(i32 35, float %562, float %565)  ; FMax(a,b)
  %569 = call float @dx.op.binary.f32(i32 36, float %566, float %519)  ; FMin(a,b)
  %570 = call float @dx.op.binary.f32(i32 36, float %567, float %520)  ; FMin(a,b)
  %571 = call float @dx.op.binary.f32(i32 36, float %568, float %521)  ; FMin(a,b)
  %572 = mul i32 %529, 9
  %573 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %574 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %573, i32 %572, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %575 = extractvalue %dx.types.ResRet.f32 %574, 0
  %576 = bitcast float %575 to i32
  %577 = lshr i32 %576, 30
  %578 = mul nuw nsw i32 %577, 3
  %579 = add i32 %572, -3
  %580 = add i32 %579, %578
  %581 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %573, i32 %580, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %582 = extractvalue %dx.types.ResRet.f32 %581, 0
  %583 = extractvalue %dx.types.ResRet.f32 %581, 1
  %584 = bitcast float %582 to i32
  %585 = bitcast float %583 to i32
  %586 = add i32 %580, 1
  %587 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %573, i32 %586, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %588 = extractvalue %dx.types.ResRet.f32 %587, 0
  %589 = extractvalue %dx.types.ResRet.f32 %587, 1
  %590 = extractvalue %dx.types.ResRet.f32 %587, 2
  %591 = extractvalue %dx.types.ResRet.f32 %587, 3
  %592 = add i32 %580, 2
  %593 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %573, i32 %592, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %594 = extractvalue %dx.types.ResRet.f32 %593, 0
  %595 = extractvalue %dx.types.ResRet.f32 %593, 1
  %596 = extractvalue %dx.types.ResRet.f32 %593, 2
  %597 = and i32 %584, 1023
  %598 = lshr i32 %584, 10
  %599 = and i32 %598, 1023
  %600 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %601 = extractvalue %dx.types.CBufRet.f32 %600, 0
  %602 = extractvalue %dx.types.CBufRet.f32 %600, 1
  %603 = extractvalue %dx.types.CBufRet.f32 %600, 2
  %604 = fmul fast float %601, %588
  %605 = fmul fast float %602, %589
  %606 = fmul fast float %603, %590
  %607 = fdiv fast float 5.000000e-01, %604
  %608 = fdiv fast float 5.000000e-01, %605
  %609 = fdiv fast float 5.000000e-01, %606
  %610 = fadd fast float %607, %569
  %611 = fmul fast float %610, %588
  %612 = fmul fast float %589, %570
  %613 = fmul fast float %590, %571
  %614 = fadd fast float %611, %594
  %615 = fadd fast float %595, %612
  %616 = fadd fast float %596, %613
  %617 = fptosi float %614 to i32
  %618 = fptosi float %615 to i32
  %619 = fptosi float %616 to i32
  %620 = mul i32 %619, %599
  %621 = add i32 %620, %618
  %622 = mul i32 %621, %597
  %623 = add i32 %617, %585
  %624 = add i32 %623, %622
  %625 = shl i32 %624, 2
  %626 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %627 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %626, i32 %625, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %628 = extractvalue %dx.types.ResRet.i32 %627, 0
  %629 = icmp eq i32 %628, -1
  br i1 %629, label %682, label %630

; <label>:630                                     ; preds = %492
  %631 = sitofp i32 %617 to float
  %632 = sitofp i32 %618 to float
  %633 = sitofp i32 %619 to float
  %634 = fsub fast float %614, %631
  %635 = fsub fast float %615, %632
  %636 = fsub fast float %616, %633
  %637 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %638 = extractvalue %dx.types.CBufRet.i32 %637, 0
  %639 = and i32 %638, %628
  %640 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %641 = extractvalue %dx.types.CBufRet.i32 %640, 0
  %642 = and i32 %641, 31
  %643 = lshr i32 %628, %642
  %644 = extractvalue %dx.types.CBufRet.i32 %637, 1
  %645 = and i32 %643, %644
  %646 = extractvalue %dx.types.CBufRet.i32 %640, 1
  %647 = add i32 %646, %641
  %648 = and i32 %647, 31
  %649 = lshr i32 %628, %648
  %650 = uitofp i32 %639 to float
  %651 = uitofp i32 %645 to float
  %652 = uitofp i32 %649 to float
  %653 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %654 = extractvalue %dx.types.CBufRet.f32 %653, 0
  %655 = extractvalue %dx.types.CBufRet.f32 %653, 1
  %656 = extractvalue %dx.types.CBufRet.f32 %653, 2
  %657 = fmul fast float %654, %650
  %658 = fmul fast float %651, %655
  %659 = fmul fast float %652, %656
  %660 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %661 = extractvalue %dx.types.CBufRet.f32 %660, 0
  %662 = extractvalue %dx.types.CBufRet.f32 %660, 1
  %663 = extractvalue %dx.types.CBufRet.f32 %660, 2
  %664 = fmul fast float %661, %634
  %665 = fmul fast float %662, %635
  %666 = fmul fast float %663, %636
  %667 = fadd fast float %664, %657
  %668 = fadd fast float %665, %658
  %669 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %670 = extractvalue %dx.types.CBufRet.f32 %669, 0
  %671 = extractvalue %dx.types.CBufRet.f32 %669, 1
  %672 = extractvalue %dx.types.CBufRet.f32 %669, 2
  %673 = fadd fast float %667, %670
  %674 = fadd fast float %668, %671
  %675 = fadd fast float %672, %666
  %676 = fadd fast float %675, %659
  %677 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %678 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %679 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %677, %dx.types.Handle %678, float %673, float %674, float %676, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %680 = extractvalue %dx.types.ResRet.f32 %679, 0
  %681 = fmul fast float %680, %591
  br label %682

; <label>:682                                     ; preds = %630, %492
  %683 = phi float [ %681, %630 ], [ %591, %492 ]
  %684 = fsub fast float %569, %607
  %685 = fmul fast float %684, %588
  %686 = fadd fast float %685, %594
  %687 = fptosi float %686 to i32
  %688 = add i32 %687, %585
  %689 = add i32 %688, %622
  %690 = shl i32 %689, 2
  %691 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %626, i32 %690, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %692 = extractvalue %dx.types.ResRet.i32 %691, 0
  %693 = icmp eq i32 %692, -1
  br i1 %693, label %746, label %694

; <label>:694                                     ; preds = %682
  %695 = sitofp i32 %687 to float
  %696 = sitofp i32 %618 to float
  %697 = sitofp i32 %619 to float
  %698 = fsub fast float %686, %695
  %699 = fsub fast float %615, %696
  %700 = fsub fast float %616, %697
  %701 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %702 = extractvalue %dx.types.CBufRet.i32 %701, 0
  %703 = and i32 %702, %692
  %704 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %705 = extractvalue %dx.types.CBufRet.i32 %704, 0
  %706 = and i32 %705, 31
  %707 = lshr i32 %692, %706
  %708 = extractvalue %dx.types.CBufRet.i32 %701, 1
  %709 = and i32 %707, %708
  %710 = extractvalue %dx.types.CBufRet.i32 %704, 1
  %711 = add i32 %710, %705
  %712 = and i32 %711, 31
  %713 = lshr i32 %692, %712
  %714 = uitofp i32 %703 to float
  %715 = uitofp i32 %709 to float
  %716 = uitofp i32 %713 to float
  %717 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %718 = extractvalue %dx.types.CBufRet.f32 %717, 0
  %719 = extractvalue %dx.types.CBufRet.f32 %717, 1
  %720 = extractvalue %dx.types.CBufRet.f32 %717, 2
  %721 = fmul fast float %718, %714
  %722 = fmul fast float %715, %719
  %723 = fmul fast float %716, %720
  %724 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %725 = extractvalue %dx.types.CBufRet.f32 %724, 0
  %726 = extractvalue %dx.types.CBufRet.f32 %724, 1
  %727 = extractvalue %dx.types.CBufRet.f32 %724, 2
  %728 = fmul fast float %725, %698
  %729 = fmul fast float %726, %699
  %730 = fmul fast float %727, %700
  %731 = fadd fast float %728, %721
  %732 = fadd fast float %729, %722
  %733 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %734 = extractvalue %dx.types.CBufRet.f32 %733, 0
  %735 = extractvalue %dx.types.CBufRet.f32 %733, 1
  %736 = extractvalue %dx.types.CBufRet.f32 %733, 2
  %737 = fadd fast float %731, %734
  %738 = fadd fast float %732, %735
  %739 = fadd fast float %736, %730
  %740 = fadd fast float %739, %723
  %741 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %742 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %743 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %741, %dx.types.Handle %742, float %737, float %738, float %740, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %744 = extractvalue %dx.types.ResRet.f32 %743, 0
  %745 = fmul fast float %744, %591
  br label %746

; <label>:746                                     ; preds = %694, %682
  %747 = phi float [ %745, %694 ], [ %591, %682 ]
  %748 = fadd fast float %608, %570
  %749 = fmul fast float %588, %569
  %750 = fmul fast float %748, %589
  %751 = fadd fast float %594, %749
  %752 = fadd fast float %750, %595
  %753 = fptosi float %751 to i32
  %754 = fptosi float %752 to i32
  %755 = add i32 %754, %620
  %756 = mul i32 %755, %597
  %757 = add i32 %753, %585
  %758 = add i32 %757, %756
  %759 = shl i32 %758, 2
  %760 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %626, i32 %759, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %761 = extractvalue %dx.types.ResRet.i32 %760, 0
  %762 = icmp eq i32 %761, -1
  br i1 %762, label %815, label %763

; <label>:763                                     ; preds = %746
  %764 = sitofp i32 %753 to float
  %765 = sitofp i32 %754 to float
  %766 = sitofp i32 %619 to float
  %767 = fsub fast float %751, %764
  %768 = fsub fast float %752, %765
  %769 = fsub fast float %616, %766
  %770 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %771 = extractvalue %dx.types.CBufRet.i32 %770, 0
  %772 = and i32 %771, %761
  %773 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %774 = extractvalue %dx.types.CBufRet.i32 %773, 0
  %775 = and i32 %774, 31
  %776 = lshr i32 %761, %775
  %777 = extractvalue %dx.types.CBufRet.i32 %770, 1
  %778 = and i32 %776, %777
  %779 = extractvalue %dx.types.CBufRet.i32 %773, 1
  %780 = add i32 %779, %774
  %781 = and i32 %780, 31
  %782 = lshr i32 %761, %781
  %783 = uitofp i32 %772 to float
  %784 = uitofp i32 %778 to float
  %785 = uitofp i32 %782 to float
  %786 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %787 = extractvalue %dx.types.CBufRet.f32 %786, 0
  %788 = extractvalue %dx.types.CBufRet.f32 %786, 1
  %789 = extractvalue %dx.types.CBufRet.f32 %786, 2
  %790 = fmul fast float %787, %783
  %791 = fmul fast float %784, %788
  %792 = fmul fast float %785, %789
  %793 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %794 = extractvalue %dx.types.CBufRet.f32 %793, 0
  %795 = extractvalue %dx.types.CBufRet.f32 %793, 1
  %796 = extractvalue %dx.types.CBufRet.f32 %793, 2
  %797 = fmul fast float %794, %767
  %798 = fmul fast float %795, %768
  %799 = fmul fast float %796, %769
  %800 = fadd fast float %797, %790
  %801 = fadd fast float %798, %791
  %802 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %803 = extractvalue %dx.types.CBufRet.f32 %802, 0
  %804 = extractvalue %dx.types.CBufRet.f32 %802, 1
  %805 = extractvalue %dx.types.CBufRet.f32 %802, 2
  %806 = fadd fast float %800, %803
  %807 = fadd fast float %801, %804
  %808 = fadd fast float %805, %799
  %809 = fadd fast float %808, %792
  %810 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %811 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %812 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %810, %dx.types.Handle %811, float %806, float %807, float %809, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %813 = extractvalue %dx.types.ResRet.f32 %812, 0
  %814 = fmul fast float %813, %591
  br label %815

; <label>:815                                     ; preds = %763, %746
  %816 = phi float [ %814, %763 ], [ %591, %746 ]
  %817 = fsub fast float %570, %608
  %818 = fmul fast float %817, %589
  %819 = fadd fast float %818, %595
  %820 = fptosi float %819 to i32
  %821 = add i32 %820, %620
  %822 = mul i32 %821, %597
  %823 = add i32 %757, %822
  %824 = shl i32 %823, 2
  %825 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %626, i32 %824, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %826 = extractvalue %dx.types.ResRet.i32 %825, 0
  %827 = icmp eq i32 %826, -1
  br i1 %827, label %880, label %828

; <label>:828                                     ; preds = %815
  %829 = sitofp i32 %753 to float
  %830 = sitofp i32 %820 to float
  %831 = sitofp i32 %619 to float
  %832 = fsub fast float %751, %829
  %833 = fsub fast float %819, %830
  %834 = fsub fast float %616, %831
  %835 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %836 = extractvalue %dx.types.CBufRet.i32 %835, 0
  %837 = and i32 %836, %826
  %838 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %839 = extractvalue %dx.types.CBufRet.i32 %838, 0
  %840 = and i32 %839, 31
  %841 = lshr i32 %826, %840
  %842 = extractvalue %dx.types.CBufRet.i32 %835, 1
  %843 = and i32 %841, %842
  %844 = extractvalue %dx.types.CBufRet.i32 %838, 1
  %845 = add i32 %844, %839
  %846 = and i32 %845, 31
  %847 = lshr i32 %826, %846
  %848 = uitofp i32 %837 to float
  %849 = uitofp i32 %843 to float
  %850 = uitofp i32 %847 to float
  %851 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %852 = extractvalue %dx.types.CBufRet.f32 %851, 0
  %853 = extractvalue %dx.types.CBufRet.f32 %851, 1
  %854 = extractvalue %dx.types.CBufRet.f32 %851, 2
  %855 = fmul fast float %852, %848
  %856 = fmul fast float %849, %853
  %857 = fmul fast float %850, %854
  %858 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %859 = extractvalue %dx.types.CBufRet.f32 %858, 0
  %860 = extractvalue %dx.types.CBufRet.f32 %858, 1
  %861 = extractvalue %dx.types.CBufRet.f32 %858, 2
  %862 = fmul fast float %859, %832
  %863 = fmul fast float %860, %833
  %864 = fmul fast float %861, %834
  %865 = fadd fast float %862, %855
  %866 = fadd fast float %863, %856
  %867 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %868 = extractvalue %dx.types.CBufRet.f32 %867, 0
  %869 = extractvalue %dx.types.CBufRet.f32 %867, 1
  %870 = extractvalue %dx.types.CBufRet.f32 %867, 2
  %871 = fadd fast float %865, %868
  %872 = fadd fast float %866, %869
  %873 = fadd fast float %870, %864
  %874 = fadd fast float %873, %857
  %875 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %876 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %877 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %875, %dx.types.Handle %876, float %871, float %872, float %874, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %878 = extractvalue %dx.types.ResRet.f32 %877, 0
  %879 = fmul fast float %878, %591
  br label %880

; <label>:880                                     ; preds = %828, %815
  %881 = phi float [ %879, %828 ], [ %591, %815 ]
  %882 = fadd fast float %609, %571
  %883 = fmul fast float %882, %590
  %884 = fadd fast float %883, %596
  %885 = fptosi float %884 to i32
  %886 = mul i32 %885, %599
  %887 = add i32 %886, %618
  %888 = mul i32 %887, %597
  %889 = add i32 %757, %888
  %890 = shl i32 %889, 2
  %891 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %626, i32 %890, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %892 = extractvalue %dx.types.ResRet.i32 %891, 0
  %893 = icmp eq i32 %892, -1
  br i1 %893, label %946, label %894

; <label>:894                                     ; preds = %880
  %895 = sitofp i32 %753 to float
  %896 = sitofp i32 %618 to float
  %897 = sitofp i32 %885 to float
  %898 = fsub fast float %751, %895
  %899 = fsub fast float %615, %896
  %900 = fsub fast float %884, %897
  %901 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %902 = extractvalue %dx.types.CBufRet.i32 %901, 0
  %903 = and i32 %902, %892
  %904 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %905 = extractvalue %dx.types.CBufRet.i32 %904, 0
  %906 = and i32 %905, 31
  %907 = lshr i32 %892, %906
  %908 = extractvalue %dx.types.CBufRet.i32 %901, 1
  %909 = and i32 %907, %908
  %910 = extractvalue %dx.types.CBufRet.i32 %904, 1
  %911 = add i32 %910, %905
  %912 = and i32 %911, 31
  %913 = lshr i32 %892, %912
  %914 = uitofp i32 %903 to float
  %915 = uitofp i32 %909 to float
  %916 = uitofp i32 %913 to float
  %917 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %918 = extractvalue %dx.types.CBufRet.f32 %917, 0
  %919 = extractvalue %dx.types.CBufRet.f32 %917, 1
  %920 = extractvalue %dx.types.CBufRet.f32 %917, 2
  %921 = fmul fast float %918, %914
  %922 = fmul fast float %915, %919
  %923 = fmul fast float %916, %920
  %924 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %925 = extractvalue %dx.types.CBufRet.f32 %924, 0
  %926 = extractvalue %dx.types.CBufRet.f32 %924, 1
  %927 = extractvalue %dx.types.CBufRet.f32 %924, 2
  %928 = fmul fast float %925, %898
  %929 = fmul fast float %926, %899
  %930 = fmul fast float %927, %900
  %931 = fadd fast float %928, %921
  %932 = fadd fast float %929, %922
  %933 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %934 = extractvalue %dx.types.CBufRet.f32 %933, 0
  %935 = extractvalue %dx.types.CBufRet.f32 %933, 1
  %936 = extractvalue %dx.types.CBufRet.f32 %933, 2
  %937 = fadd fast float %931, %934
  %938 = fadd fast float %932, %935
  %939 = fadd fast float %936, %930
  %940 = fadd fast float %939, %923
  %941 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %942 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %943 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %941, %dx.types.Handle %942, float %937, float %938, float %940, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %944 = extractvalue %dx.types.ResRet.f32 %943, 0
  %945 = fmul fast float %944, %591
  br label %946

; <label>:946                                     ; preds = %894, %880
  %947 = phi float [ %945, %894 ], [ %591, %880 ]
  %948 = fsub fast float %571, %609
  %949 = fmul fast float %948, %590
  %950 = fadd fast float %949, %596
  %951 = fptosi float %950 to i32
  %952 = mul i32 %951, %599
  %953 = add i32 %952, %618
  %954 = mul i32 %953, %597
  %955 = add i32 %757, %954
  %956 = shl i32 %955, 2
  %957 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %626, i32 %956, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %958 = extractvalue %dx.types.ResRet.i32 %957, 0
  %959 = icmp eq i32 %958, -1
  br i1 %959, label %1012, label %960

; <label>:960                                     ; preds = %946
  %961 = sitofp i32 %753 to float
  %962 = sitofp i32 %618 to float
  %963 = sitofp i32 %951 to float
  %964 = fsub fast float %751, %961
  %965 = fsub fast float %615, %962
  %966 = fsub fast float %950, %963
  %967 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %968 = extractvalue %dx.types.CBufRet.i32 %967, 0
  %969 = and i32 %968, %958
  %970 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %971 = extractvalue %dx.types.CBufRet.i32 %970, 0
  %972 = and i32 %971, 31
  %973 = lshr i32 %958, %972
  %974 = extractvalue %dx.types.CBufRet.i32 %967, 1
  %975 = and i32 %973, %974
  %976 = extractvalue %dx.types.CBufRet.i32 %970, 1
  %977 = add i32 %976, %971
  %978 = and i32 %977, 31
  %979 = lshr i32 %958, %978
  %980 = uitofp i32 %969 to float
  %981 = uitofp i32 %975 to float
  %982 = uitofp i32 %979 to float
  %983 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %984 = extractvalue %dx.types.CBufRet.f32 %983, 0
  %985 = extractvalue %dx.types.CBufRet.f32 %983, 1
  %986 = extractvalue %dx.types.CBufRet.f32 %983, 2
  %987 = fmul fast float %984, %980
  %988 = fmul fast float %981, %985
  %989 = fmul fast float %982, %986
  %990 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %991 = extractvalue %dx.types.CBufRet.f32 %990, 0
  %992 = extractvalue %dx.types.CBufRet.f32 %990, 1
  %993 = extractvalue %dx.types.CBufRet.f32 %990, 2
  %994 = fmul fast float %991, %964
  %995 = fmul fast float %992, %965
  %996 = fmul fast float %993, %966
  %997 = fadd fast float %994, %987
  %998 = fadd fast float %995, %988
  %999 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %1000 = extractvalue %dx.types.CBufRet.f32 %999, 0
  %1001 = extractvalue %dx.types.CBufRet.f32 %999, 1
  %1002 = extractvalue %dx.types.CBufRet.f32 %999, 2
  %1003 = fadd fast float %997, %1000
  %1004 = fadd fast float %998, %1001
  %1005 = fadd fast float %1002, %996
  %1006 = fadd fast float %1005, %989
  %1007 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1008 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1009 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1007, %dx.types.Handle %1008, float %1003, float %1004, float %1006, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1010 = extractvalue %dx.types.ResRet.f32 %1009, 0
  %1011 = fmul fast float %1010, %591
  br label %1012

; <label>:1012                                    ; preds = %960, %946
  %1013 = phi float [ %1011, %960 ], [ %591, %946 ]
  %1014 = fsub fast float %683, %747
  %1015 = fsub fast float %816, %881
  %1016 = fsub fast float %947, %1013
  %1017 = fmul fast float %1014, %1014
  %1018 = fmul fast float %1015, %1015
  %1019 = fadd fast float %1018, %1017
  %1020 = fmul fast float %1016, %1016
  %1021 = fadd fast float %1019, %1020
  %1022 = call float @dx.op.unary.f32(i32 24, float %1021)  ; Sqrt(value)
  %1023 = fcmp fast ogt float %1022, 0.000000e+00
  br i1 %1023, label %1024, label %1028

; <label>:1024                                    ; preds = %1012
  %1025 = fdiv fast float %1014, %1022
  %1026 = fdiv fast float %1015, %1022
  %1027 = fdiv fast float %1016, %1022
  br label %1028

; <label>:1028                                    ; preds = %1024, %1012
  %1029 = phi float [ %1025, %1024 ], [ 0.000000e+00, %1012 ]
  %1030 = phi float [ %1026, %1024 ], [ 0.000000e+00, %1012 ]
  %1031 = phi float [ %1027, %1024 ], [ 0.000000e+00, %1012 ]
  %1032 = fmul fast float %1029, %501
  %1033 = call float @dx.op.tertiary.f32(i32 46, float %1030, float %507, float %1032)  ; FMad(a,b,c)
  %1034 = call float @dx.op.tertiary.f32(i32 46, float %1031, float %513, float %1033)  ; FMad(a,b,c)
  %1035 = fmul fast float %1029, %502
  %1036 = call float @dx.op.tertiary.f32(i32 46, float %1030, float %508, float %1035)  ; FMad(a,b,c)
  %1037 = call float @dx.op.tertiary.f32(i32 46, float %1031, float %514, float %1036)  ; FMad(a,b,c)
  %1038 = fmul fast float %1029, %503
  %1039 = call float @dx.op.tertiary.f32(i32 46, float %1030, float %509, float %1038)  ; FMad(a,b,c)
  %1040 = call float @dx.op.tertiary.f32(i32 46, float %1031, float %515, float %1039)  ; FMad(a,b,c)
  %1041 = fmul fast float %1034, %1034
  %1042 = fmul fast float %1037, %1037
  %1043 = fadd fast float %1042, %1041
  %1044 = fmul fast float %1040, %1040
  %1045 = fadd fast float %1043, %1044
  %1046 = call float @dx.op.unary.f32(i32 24, float %1045)  ; Sqrt(value)
  %1047 = fcmp fast ogt float %1046, 0.000000e+00
  br i1 %1047, label %1048, label %1052

; <label>:1048                                    ; preds = %1028
  %1049 = fdiv fast float %1034, %1046
  %1050 = fdiv fast float %1037, %1046
  %1051 = fdiv fast float %1040, %1046
  br label %1052

; <label>:1052                                    ; preds = %1048, %1028
  %1053 = phi float [ %1049, %1048 ], [ 0.000000e+00, %1028 ]
  %1054 = phi float [ %1050, %1048 ], [ 0.000000e+00, %1028 ]
  %1055 = phi float [ %1051, %1048 ], [ 0.000000e+00, %1028 ]
  %1056 = shl i32 %525, 2
  %1057 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1058 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1057, i32 %1056, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1059 = extractvalue %dx.types.ResRet.i32 %1058, 0
  %1060 = fmul fast float %490, %138
  %1061 = extractvalue %dx.types.CBufRet.i32 %139, 2
  %1062 = icmp eq i32 %1061, 3
  %1063 = icmp eq i32 %1061, 9
  %1064 = or i1 %1062, %1063
  br i1 %1064, label %1065, label %1075

; <label>:1065                                    ; preds = %1052
  %1066 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1067 = extractvalue %dx.types.CBufRet.i32 %1066, 1
  %1068 = icmp ult i32 %1059, %1067
  %1069 = select i1 %1068, float 0.000000e+00, float 1.000000e+00
  %1070 = select i1 %1068, float 1.000000e+00, float 0.000000e+00
  %1071 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1072 = extractvalue %dx.types.CBufRet.f32 %1071, 2
  %1073 = fmul fast float %1069, %1072
  %1074 = fmul fast float %1070, %1072
  br label %1075

; <label>:1075                                    ; preds = %1065, %1052
  %1076 = phi float [ %1072, %1065 ], [ 0.000000e+00, %1052 ]
  %1077 = phi float [ %1073, %1065 ], [ 0.000000e+00, %1052 ]
  %1078 = phi float [ %1074, %1065 ], [ 0.000000e+00, %1052 ]
  %1079 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1080 = extractvalue %dx.types.CBufRet.i32 %1079, 1
  %1081 = icmp ult i32 %1059, %1080
  br i1 %1081, label %1082, label %1898

; <label>:1082                                    ; preds = %1075
  %1083 = mul i32 %1059, 7
  %1084 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1085 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1084, i32 %1083, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1086 = extractvalue %dx.types.ResRet.f32 %1085, 0
  %1087 = extractvalue %dx.types.ResRet.f32 %1085, 1
  %1088 = extractvalue %dx.types.ResRet.f32 %1085, 2
  %1089 = extractvalue %dx.types.ResRet.f32 %1085, 3
  %1090 = add i32 %1083, 1
  %1091 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1084, i32 %1090, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1092 = extractvalue %dx.types.ResRet.f32 %1091, 0
  %1093 = extractvalue %dx.types.ResRet.f32 %1091, 1
  %1094 = extractvalue %dx.types.ResRet.f32 %1091, 2
  %1095 = extractvalue %dx.types.ResRet.f32 %1091, 3
  %1096 = add i32 %1083, 2
  %1097 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1084, i32 %1096, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1098 = extractvalue %dx.types.ResRet.f32 %1097, 0
  %1099 = extractvalue %dx.types.ResRet.f32 %1097, 1
  %1100 = extractvalue %dx.types.ResRet.f32 %1097, 2
  %1101 = extractvalue %dx.types.ResRet.f32 %1097, 3
  %1102 = add i32 %1083, 3
  %1103 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1084, i32 %1102, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1104 = extractvalue %dx.types.ResRet.f32 %1103, 0
  %1105 = extractvalue %dx.types.ResRet.f32 %1103, 1
  %1106 = extractvalue %dx.types.ResRet.f32 %1103, 2
  %1107 = extractvalue %dx.types.ResRet.f32 %1103, 3
  %1108 = bitcast float %1104 to i32
  %1109 = bitcast float %1105 to i32
  %1110 = add i32 %1083, 4
  %1111 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1084, i32 %1110, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1112 = extractvalue %dx.types.ResRet.f32 %1111, 0
  %1113 = extractvalue %dx.types.ResRet.f32 %1111, 1
  %1114 = extractvalue %dx.types.ResRet.f32 %1111, 2
  %1115 = extractvalue %dx.types.ResRet.f32 %1111, 3
  %1116 = and i32 %1109, 65536
  %1117 = icmp ne i32 %1116, 0
  %1118 = and i32 %1109, 131072
  %1119 = icmp ne i32 %1118, 0
  %1120 = getelementptr inbounds [6 x i32], [6 x i32]* %49, i32 0, i32 0
  %1121 = bitcast i32* %1120 to float*
  store float %1106, float* %1121, align 4, !tbaa !62, !alias.scope !66, !noalias !69
  %1122 = getelementptr inbounds [6 x i32], [6 x i32]* %49, i32 0, i32 1
  %1123 = bitcast i32* %1122 to float*
  store float %1107, float* %1123, align 4, !tbaa !62, !alias.scope !66, !noalias !69
  %1124 = getelementptr inbounds [6 x i32], [6 x i32]* %49, i32 0, i32 2
  %1125 = bitcast i32* %1124 to float*
  store float %1112, float* %1125, align 4, !tbaa !62, !alias.scope !66, !noalias !69
  %1126 = getelementptr inbounds [6 x i32], [6 x i32]* %49, i32 0, i32 3
  %1127 = bitcast i32* %1126 to float*
  store float %1113, float* %1127, align 4, !tbaa !62, !alias.scope !66, !noalias !69
  %1128 = getelementptr inbounds [6 x i32], [6 x i32]* %49, i32 0, i32 4
  %1129 = bitcast i32* %1128 to float*
  store float %1114, float* %1129, align 4, !tbaa !62, !alias.scope !66, !noalias !69
  %1130 = getelementptr inbounds [6 x i32], [6 x i32]* %49, i32 0, i32 5
  %1131 = bitcast i32* %1130 to float*
  store float %1115, float* %1131, align 4, !tbaa !62, !alias.scope !66, !noalias !69
  %1132 = select i1 %1119, float 7.000000e+01, float 2.000000e+01
  %1133 = fsub fast float %548, %1089
  %1134 = fsub fast float %549, %1095
  %1135 = fsub fast float %550, %1101
  %1136 = fmul fast float %1133, %1086
  %1137 = call float @dx.op.tertiary.f32(i32 46, float %1134, float %1092, float %1136)  ; FMad(a,b,c)
  %1138 = call float @dx.op.tertiary.f32(i32 46, float %1135, float %1098, float %1137)  ; FMad(a,b,c)
  %1139 = fmul fast float %1133, %1087
  %1140 = call float @dx.op.tertiary.f32(i32 46, float %1134, float %1093, float %1139)  ; FMad(a,b,c)
  %1141 = call float @dx.op.tertiary.f32(i32 46, float %1135, float %1099, float %1140)  ; FMad(a,b,c)
  %1142 = fmul fast float %1133, %1088
  %1143 = call float @dx.op.tertiary.f32(i32 46, float %1134, float %1094, float %1142)  ; FMad(a,b,c)
  %1144 = call float @dx.op.tertiary.f32(i32 46, float %1135, float %1100, float %1143)  ; FMad(a,b,c)
  %1145 = fmul fast float %1086, %1053
  %1146 = call float @dx.op.tertiary.f32(i32 46, float %1054, float %1092, float %1145)  ; FMad(a,b,c)
  %1147 = call float @dx.op.tertiary.f32(i32 46, float %1055, float %1098, float %1146)  ; FMad(a,b,c)
  %1148 = fmul fast float %1087, %1053
  %1149 = call float @dx.op.tertiary.f32(i32 46, float %1054, float %1093, float %1148)  ; FMad(a,b,c)
  %1150 = call float @dx.op.tertiary.f32(i32 46, float %1055, float %1099, float %1149)  ; FMad(a,b,c)
  %1151 = fmul fast float %1088, %1053
  %1152 = call float @dx.op.tertiary.f32(i32 46, float %1054, float %1094, float %1151)  ; FMad(a,b,c)
  %1153 = call float @dx.op.tertiary.f32(i32 46, float %1055, float %1100, float %1152)  ; FMad(a,b,c)
  %1154 = fmul fast float %1147, %1147
  %1155 = fmul fast float %1150, %1150
  %1156 = fmul fast float %1153, %1153
  %1157 = fcmp fast ogt float %1154, 0.000000e+00
  br i1 %1157, label %1158, label %1163

; <label>:1158                                    ; preds = %1082
  %1159 = fcmp uge float %1147, 0.000000e+00
  %1160 = zext i1 %1159 to i32
  %1161 = getelementptr inbounds [6 x i32], [6 x i32]* %49, i32 0, i32 %1160
  %1162 = load i32, i32* %1161, align 4, !tbaa !62, !noalias !69
  br label %1163

; <label>:1163                                    ; preds = %1158, %1082
  %1164 = phi i32 [ %1162, %1158 ], [ 0, %1082 ]
  %1165 = fcmp fast ogt float %1155, 0.000000e+00
  br i1 %1165, label %1166, label %1172

; <label>:1166                                    ; preds = %1163
  %1167 = fcmp fast olt float %1150, 0.000000e+00
  %1168 = select i1 %1167, i32 2, i32 3
  %1169 = getelementptr inbounds [6 x i32], [6 x i32]* %49, i32 0, i32 %1168
  %1170 = load i32, i32* %1169, align 4, !tbaa !62, !noalias !69
  %1171 = or i32 %1170, %1164
  br label %1172

; <label>:1172                                    ; preds = %1166, %1163
  %1173 = phi i32 [ %1171, %1166 ], [ %1164, %1163 ]
  %1174 = fcmp fast ogt float %1156, 0.000000e+00
  br i1 %1174, label %1175, label %1181

; <label>:1175                                    ; preds = %1172
  %1176 = fcmp fast olt float %1153, 0.000000e+00
  %1177 = select i1 %1176, i32 4, i32 5
  %1178 = getelementptr inbounds [6 x i32], [6 x i32]* %49, i32 0, i32 %1177
  %1179 = load i32, i32* %1178, align 4, !tbaa !62, !noalias !69
  %1180 = or i32 %1179, %1173
  br label %1181

; <label>:1181                                    ; preds = %1175, %1172
  %1182 = phi i32 [ %1180, %1175 ], [ %1173, %1172 ]
  %1183 = icmp eq i32 %1182, 0
  br i1 %1183, label %1228, label %1184

; <label>:1184                                    ; preds = %1181
  br label %1185

; <label>:1185                                    ; preds = %1185, %1184
  %1186 = phi i32 [ %1191, %1185 ], [ %1182, %1184 ]
  %1187 = phi i32 [ %1225, %1185 ], [ 0, %1184 ]
  %1188 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %1186)  ; FirstbitLo(value)
  %1189 = and i32 %1188, 31
  %1190 = shl i32 1, %1189
  %1191 = xor i32 %1190, %1186
  %1192 = add i32 %1188, %1108
  %1193 = mul i32 %1192, 9
  %1194 = add i32 %1193, 5
  %1195 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1196 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1195, i32 %1194, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1197 = extractvalue %dx.types.ResRet.f32 %1196, 3
  %1198 = add i32 %1193, 6
  %1199 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1195, i32 %1198, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1200 = extractvalue %dx.types.ResRet.f32 %1199, 3
  %1201 = add i32 %1193, 7
  %1202 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1195, i32 %1201, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1203 = extractvalue %dx.types.ResRet.f32 %1202, 3
  %1204 = add i32 %1193, 8
  %1205 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1195, i32 %1204, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1206 = extractvalue %dx.types.ResRet.f32 %1205, 0
  %1207 = extractvalue %dx.types.ResRet.f32 %1205, 1
  %1208 = extractvalue %dx.types.ResRet.f32 %1205, 2
  %1209 = fsub fast float %1138, %1197
  %1210 = fsub fast float %1141, %1200
  %1211 = fsub fast float %1144, %1203
  %1212 = call float @dx.op.unary.f32(i32 6, float %1209)  ; FAbs(value)
  %1213 = call float @dx.op.unary.f32(i32 6, float %1210)  ; FAbs(value)
  %1214 = call float @dx.op.unary.f32(i32 6, float %1211)  ; FAbs(value)
  %1215 = fmul fast float %1132, 5.000000e-01
  %1216 = fadd fast float %1206, %1215
  %1217 = fadd fast float %1207, %1215
  %1218 = fadd fast float %1208, %1215
  %1219 = fcmp fast ole float %1212, %1216
  %1220 = fcmp fast ole float %1213, %1217
  %1221 = fcmp fast ole float %1214, %1218
  %1222 = and i1 %1219, %1220
  %1223 = and i1 %1222, %1221
  %1224 = select i1 %1223, i32 %1190, i32 0
  %1225 = or i32 %1224, %1187
  %1226 = icmp eq i32 %1186, %1190
  br i1 %1226, label %1227, label %1185

; <label>:1227                                    ; preds = %1185
  br label %1228

; <label>:1228                                    ; preds = %1227, %1181
  %1229 = phi i32 [ 0, %1181 ], [ %1225, %1227 ]
  %1230 = select i1 %1117, i32 1, i32 %1229
  %1231 = icmp eq i32 %1230, 0
  br i1 %1231, label %1838, label %1232

; <label>:1232                                    ; preds = %1228
  br label %1233

; <label>:1233                                    ; preds = %1256, %1232
  %1234 = phi i32 [ %1257, %1256 ], [ 0, %1232 ]
  %1235 = phi i32 [ %1258, %1256 ], [ 0, %1232 ]
  %1236 = phi i32 [ %1259, %1256 ], [ 0, %1232 ]
  %1237 = phi float [ %1260, %1256 ], [ 0.000000e+00, %1232 ]
  %1238 = phi float [ %1261, %1256 ], [ 0.000000e+00, %1232 ]
  %1239 = phi float [ %1262, %1256 ], [ 0.000000e+00, %1232 ]
  %1240 = phi float [ %1263, %1256 ], [ 0.000000e+00, %1232 ]
  %1241 = phi float [ %1264, %1256 ], [ 0.000000e+00, %1232 ]
  %1242 = phi i32 [ %1246, %1256 ], [ %1230, %1232 ]
  %1243 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %1242)  ; FirstbitLo(value)
  %1244 = and i32 %1243, 31
  %1245 = shl i32 1, %1244
  %1246 = xor i32 %1245, %1242
  %1247 = add i32 %1243, %1108
  %1248 = mul i32 %1247, 9
  %1249 = add i32 %1248, 3
  %1250 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1251 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1250, i32 %1249, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1252 = extractvalue %dx.types.ResRet.f32 %1251, 3
  %1253 = bitcast float %1252 to i32
  %1254 = and i32 %1253, 16777216
  %1255 = icmp eq i32 %1254, 0
  br i1 %1255, label %1256, label %1266

; <label>:1256                                    ; preds = %2294, %1836, %1824, %1485, %1323, %1270, %1266, %1233
  %1257 = phi i32 [ %1234, %1233 ], [ %1460, %1836 ], [ %1234, %1824 ], [ %1234, %2294 ], [ %1234, %1485 ], [ %1234, %1323 ], [ %1234, %1270 ], [ %1234, %1266 ]
  %1258 = phi i32 [ %1235, %1233 ], [ %1462, %1836 ], [ %1235, %1824 ], [ %1235, %2294 ], [ %1235, %1485 ], [ %1235, %1323 ], [ %1235, %1270 ], [ %1235, %1266 ]
  %1259 = phi i32 [ %1236, %1233 ], [ %1366, %1836 ], [ %1236, %1824 ], [ %1236, %2294 ], [ %1236, %1485 ], [ %1236, %1323 ], [ %1236, %1270 ], [ %1236, %1266 ]
  %1260 = phi float [ %1237, %1233 ], [ %2301, %1836 ], [ %1237, %1824 ], [ %1237, %2294 ], [ %1237, %1485 ], [ %1237, %1323 ], [ %1237, %1270 ], [ %1237, %1266 ]
  %1261 = phi float [ %1238, %1233 ], [ %1831, %1836 ], [ %1831, %1824 ], [ %1238, %2294 ], [ %1238, %1485 ], [ %1238, %1323 ], [ %1238, %1270 ], [ %1238, %1266 ]
  %1262 = phi float [ %1239, %1233 ], [ %1832, %1836 ], [ %1832, %1824 ], [ %1239, %2294 ], [ %1239, %1485 ], [ %1239, %1323 ], [ %1239, %1270 ], [ %1239, %1266 ]
  %1263 = phi float [ %1240, %1233 ], [ %1833, %1836 ], [ %1833, %1824 ], [ %1240, %2294 ], [ %1240, %1485 ], [ %1240, %1323 ], [ %1240, %1270 ], [ %1240, %1266 ]
  %1264 = phi float [ %1241, %1233 ], [ %1834, %1836 ], [ %1834, %1824 ], [ %1241, %2294 ], [ %1241, %1485 ], [ %1241, %1323 ], [ %1241, %1270 ], [ %1241, %1266 ]
  %1265 = icmp eq i32 %1242, %1245
  br i1 %1265, label %1837, label %1233

; <label>:1266                                    ; preds = %1233
  %1267 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1268 = extractvalue %dx.types.CBufRet.i32 %1267, 0
  %1269 = icmp ult i32 %1247, %1268
  br i1 %1269, label %1270, label %1256

; <label>:1270                                    ; preds = %1266
  %1271 = extractvalue %dx.types.ResRet.f32 %1251, 0
  %1272 = extractvalue %dx.types.ResRet.f32 %1251, 1
  %1273 = extractvalue %dx.types.ResRet.f32 %1251, 2
  %1274 = add i32 %1248, 4
  %1275 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1250, i32 %1274, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1276 = add i32 %1248, 5
  %1277 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1250, i32 %1276, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1278 = add i32 %1248, 6
  %1279 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1250, i32 %1278, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1280 = add i32 %1248, 7
  %1281 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1250, i32 %1280, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1282 = call float @dx.op.unary.f32(i32 6, float %1271)  ; FAbs(value)
  %1283 = call float @dx.op.unary.f32(i32 6, float %1272)  ; FAbs(value)
  %1284 = call float @dx.op.unary.f32(i32 6, float %1273)  ; FAbs(value)
  %1285 = lshr i32 %1253, 16
  %1286 = and i32 %1285, 15
  %1287 = extractvalue %dx.types.ResRet.f32 %1281, 3
  %1288 = extractvalue %dx.types.ResRet.f32 %1281, 2
  %1289 = extractvalue %dx.types.ResRet.f32 %1281, 1
  %1290 = extractvalue %dx.types.ResRet.f32 %1281, 0
  %1291 = extractvalue %dx.types.ResRet.f32 %1279, 3
  %1292 = extractvalue %dx.types.ResRet.f32 %1279, 2
  %1293 = extractvalue %dx.types.ResRet.f32 %1279, 1
  %1294 = extractvalue %dx.types.ResRet.f32 %1279, 0
  %1295 = extractvalue %dx.types.ResRet.f32 %1277, 3
  %1296 = extractvalue %dx.types.ResRet.f32 %1277, 2
  %1297 = extractvalue %dx.types.ResRet.f32 %1277, 1
  %1298 = extractvalue %dx.types.ResRet.f32 %1277, 0
  %1299 = fsub fast float %1138, %1295
  %1300 = fsub fast float %1141, %1291
  %1301 = fsub fast float %1144, %1287
  %1302 = fmul fast float %1299, %1298
  %1303 = call float @dx.op.tertiary.f32(i32 46, float %1300, float %1294, float %1302)  ; FMad(a,b,c)
  %1304 = call float @dx.op.tertiary.f32(i32 46, float %1301, float %1290, float %1303)  ; FMad(a,b,c)
  %1305 = fmul fast float %1299, %1297
  %1306 = call float @dx.op.tertiary.f32(i32 46, float %1300, float %1293, float %1305)  ; FMad(a,b,c)
  %1307 = call float @dx.op.tertiary.f32(i32 46, float %1301, float %1289, float %1306)  ; FMad(a,b,c)
  %1308 = fmul fast float %1299, %1296
  %1309 = call float @dx.op.tertiary.f32(i32 46, float %1300, float %1292, float %1308)  ; FMad(a,b,c)
  %1310 = call float @dx.op.tertiary.f32(i32 46, float %1301, float %1288, float %1309)  ; FMad(a,b,c)
  %1311 = call float @dx.op.unary.f32(i32 6, float %1304)  ; FAbs(value)
  %1312 = call float @dx.op.unary.f32(i32 6, float %1307)  ; FAbs(value)
  %1313 = call float @dx.op.unary.f32(i32 6, float %1310)  ; FAbs(value)
  %1314 = fmul fast float %1132, 5.000000e-01
  %1315 = fadd fast float %1282, %1314
  %1316 = fadd fast float %1283, %1314
  %1317 = fadd fast float %1284, %1314
  %1318 = fcmp fast ole float %1311, %1315
  %1319 = fcmp fast ole float %1312, %1316
  %1320 = fcmp fast ole float %1313, %1317
  %1321 = and i1 %1318, %1319
  %1322 = and i1 %1321, %1320
  br i1 %1322, label %1323, label %1256

; <label>:1323                                    ; preds = %1270
  %1324 = lshr i32 %1253, 8
  %1325 = and i32 %1324, 255
  %1326 = and i32 %1253, 255
  %1327 = extractvalue %dx.types.ResRet.f32 %1275, 3
  %1328 = extractvalue %dx.types.ResRet.f32 %1275, 2
  %1329 = extractvalue %dx.types.ResRet.f32 %1275, 1
  %1330 = extractvalue %dx.types.ResRet.f32 %1275, 0
  %1331 = fsub fast float -0.000000e+00, %1282
  %1332 = fsub fast float -0.000000e+00, %1283
  %1333 = call float @dx.op.binary.f32(i32 35, float %1304, float %1331)  ; FMax(a,b)
  %1334 = call float @dx.op.binary.f32(i32 35, float %1307, float %1332)  ; FMax(a,b)
  %1335 = call float @dx.op.binary.f32(i32 36, float %1333, float %1282)  ; FMin(a,b)
  %1336 = call float @dx.op.binary.f32(i32 36, float %1334, float %1283)  ; FMin(a,b)
  %1337 = fdiv fast float %1335, %1282
  %1338 = fdiv fast float %1336, %1283
  %1339 = fmul fast float %1337, 5.000000e-01
  %1340 = fmul fast float %1338, 5.000000e-01
  %1341 = fadd fast float %1339, 5.000000e-01
  %1342 = fsub fast float 5.000000e-01, %1340
  %1343 = call float @dx.op.unary.f32(i32 7, float %1341)  ; Saturate(value)
  %1344 = call float @dx.op.unary.f32(i32 7, float %1342)  ; Saturate(value)
  %1345 = call float @dx.op.binary.f32(i32 36, float %1343, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1346 = call float @dx.op.binary.f32(i32 36, float %1344, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1347 = select i1 %141, float %1328, float %1330
  %1348 = bitcast float %1347 to i32
  %1349 = and i32 %1348, 65535
  %1350 = lshr i32 %1348, 16
  %1351 = select i1 %141, float %1327, float %1329
  %1352 = bitcast float %1351 to i32
  %1353 = uitofp i32 %1349 to float
  %1354 = uitofp i32 %1350 to float
  %1355 = fmul fast float %1345, %1353
  %1356 = fmul fast float %1346, %1354
  %1357 = fptoui float %1355 to i32
  %1358 = fptoui float %1356 to i32
  %1359 = mul i32 %1358, %1349
  %1360 = add i32 %1357, %1352
  %1361 = add i32 %1360, %1359
  %1362 = shl i32 %1361, 3
  %1363 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1364 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1363, i32 %1362, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1365 = extractvalue %dx.types.ResRet.i32 %1364, 0
  %1366 = extractvalue %dx.types.ResRet.i32 %1364, 1
  %1367 = shl i32 %1365, 3
  %1368 = and i32 %1367, 32760
  %1369 = lshr i32 %1365, 9
  %1370 = and i32 %1369, 32760
  %1371 = lshr i32 %1365, 24
  %1372 = and i32 %1371, 15
  %1373 = lshr i32 %1365, 28
  %1374 = add nuw nsw i32 %1372, 25
  %1375 = add nuw nsw i32 %1373, 25
  %1376 = and i32 %1374, 31
  %1377 = and i32 %1375, 31
  %1378 = shl i32 1, %1376
  %1379 = shl i32 1, %1377
  %1380 = icmp ugt i32 %1372, 7
  %1381 = icmp slt i32 %1365, 0
  %1382 = select i1 %1380, i32 %1378, i32 1
  %1383 = select i1 %1381, i32 %1379, i32 1
  %1384 = uitofp i32 %1382 to float
  %1385 = uitofp i32 %1383 to float
  %1386 = fmul fast float %1384, %1345
  %1387 = fmul fast float %1385, %1346
  %1388 = fptoui float %1386 to i32
  %1389 = fptoui float %1387 to i32
  %1390 = shl i32 1, %1372
  %1391 = shl i32 1, %1373
  %1392 = call float @dx.op.unary.f32(i32 22, float %1386)  ; Frc(value)
  %1393 = call float @dx.op.unary.f32(i32 22, float %1387)  ; Frc(value)
  %1394 = icmp eq i32 %1388, 0
  %1395 = icmp eq i32 %1389, 0
  %1396 = select i1 %1394, float 0.000000e+00, float 5.000000e-01
  %1397 = select i1 %1395, float 0.000000e+00, float 5.000000e-01
  %1398 = add i32 %1388, 1
  %1399 = add i32 %1389, 1
  %1400 = icmp eq i32 %1398, %1382
  %1401 = icmp eq i32 %1399, %1383
  %1402 = uitofp i32 %1390 to float
  %1403 = select i1 %1380, float 1.280000e+02, float %1402
  %1404 = uitofp i32 %1391 to float
  %1405 = select i1 %1381, float 1.280000e+02, float %1404
  %1406 = fsub fast float %1403, %1396
  %1407 = fsub fast float %1405, %1397
  %1408 = select i1 %1400, float -0.000000e+00, float -5.000000e-01
  %1409 = fadd fast float %1406, %1408
  %1410 = select i1 %1401, float -0.000000e+00, float -5.000000e-01
  %1411 = fadd fast float %1407, %1410
  %1412 = fmul fast float %1409, %1392
  %1413 = fmul fast float %1411, %1393
  %1414 = fadd fast float %1412, %1396
  %1415 = fadd fast float %1413, %1397
  %1416 = fadd fast float %1403, -1.500000e+00
  %1417 = fadd fast float %1405, -1.500000e+00
  %1418 = call float @dx.op.binary.f32(i32 35, float %1414, float 5.000000e-01)  ; FMax(a,b)
  %1419 = call float @dx.op.binary.f32(i32 35, float %1415, float 5.000000e-01)  ; FMax(a,b)
  %1420 = call float @dx.op.binary.f32(i32 36, float %1418, float %1416)  ; FMin(a,b)
  %1421 = call float @dx.op.binary.f32(i32 36, float %1419, float %1417)  ; FMin(a,b)
  %1422 = uitofp i32 %1368 to float
  %1423 = uitofp i32 %1370 to float
  %1424 = fadd fast float %1420, %1422
  %1425 = fadd fast float %1421, %1423
  %1426 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1427 = extractvalue %dx.types.CBufRet.f32 %1426, 0
  %1428 = extractvalue %dx.types.CBufRet.f32 %1426, 1
  %1429 = fmul fast float %1427, %1424
  %1430 = fmul fast float %1428, %1425
  %1431 = call float @dx.op.binary.f32(i32 35, float %1282, float %1283)  ; FMax(a,b)
  %1432 = call float @dx.op.binary.f32(i32 35, float %1060, float 1.000000e+00)  ; FMax(a,b)
  %1433 = fdiv fast float %1431, %1432
  %1434 = call float @dx.op.unary.f32(i32 23, float %1433)  ; Log(value)
  %1435 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1436 = extractvalue %dx.types.CBufRet.f32 %1435, 2
  %1437 = fadd fast float %1436, %1434
  %1438 = call float @dx.op.binary.f32(i32 35, float %1437, float 3.000000e+00)  ; FMax(a,b)
  %1439 = call float @dx.op.binary.f32(i32 36, float %1438, float 1.100000e+01)  ; FMin(a,b)
  %1440 = fptoui float %1439 to i32
  %1441 = sub i32 %1440, %1326
  %1442 = sub i32 %1440, %1325
  %1443 = add i32 %1441, 25
  %1444 = add i32 %1442, 25
  %1445 = and i32 %1443, 31
  %1446 = and i32 %1444, 31
  %1447 = shl i32 1, %1445
  %1448 = shl i32 1, %1446
  %1449 = icmp ugt i32 %1441, 7
  %1450 = icmp ugt i32 %1442, 7
  %1451 = uitofp i32 %1447 to float
  %1452 = select i1 %1449, float %1451, float 1.000000e+00
  %1453 = uitofp i32 %1448 to float
  %1454 = select i1 %1450, float %1453, float 1.000000e+00
  %1455 = fmul fast float %1452, %1345
  %1456 = fmul fast float %1454, %1346
  %1457 = fptoui float %1455 to i32
  %1458 = fptoui float %1456 to i32
  %1459 = shl i32 %1440, 24
  %1460 = or i32 %1459, %1247
  %1461 = shl i32 %1458, 8
  %1462 = add i32 %1461, %1457
  %1463 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1464 = extractvalue %dx.types.CBufRet.f32 %1463, 2
  %1465 = extractvalue %dx.types.CBufRet.f32 %1463, 3
  %1466 = fmul fast float %1464, %1429
  %1467 = fmul fast float %1465, %1430
  %1468 = fadd fast float %1466, 0x3FE0100000000000
  %1469 = fadd fast float %1467, 0x3FE0100000000000
  %1470 = call float @dx.op.unary.f32(i32 22, float %1468)  ; Frc(value)
  %1471 = call float @dx.op.unary.f32(i32 22, float %1469)  ; Frc(value)
  %1472 = fsub fast float 1.000000e+00, %1470
  %1473 = fmul fast float %1472, %1471
  %1474 = fmul fast float %1471, %1470
  %1475 = fsub fast float 1.000000e+00, %1471
  %1476 = fmul fast float %1475, %1470
  %1477 = fmul fast float %1475, %1472
  %1478 = icmp eq i32 %1372, 0
  br i1 %1478, label %1256, label %1479

; <label>:1479                                    ; preds = %1323
  br i1 %1117, label %1485, label %1480

; <label>:1480                                    ; preds = %1479
  %1481 = icmp ult i32 %1286, 2
  br i1 %1481, label %1485, label %1482

; <label>:1482                                    ; preds = %1480
  %1483 = icmp ult i32 %1286, 4
  %1484 = select i1 %1483, float %1155, float %1156
  br label %1485

; <label>:1485                                    ; preds = %1482, %1480, %1479
  %1486 = phi float [ 1.000000e+00, %1479 ], [ %1154, %1480 ], [ %1484, %1482 ]
  %1487 = fcmp fast ogt float %1486, 0.000000e+00
  br i1 %1487, label %1488, label %1256

; <label>:1488                                    ; preds = %1485
  %1489 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1490 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1491 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1489, %dx.types.Handle %1490, float %1429, float %1430, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1492 = extractvalue %dx.types.ResRet.f32 %1491, 0
  %1493 = extractvalue %dx.types.ResRet.f32 %1491, 1
  %1494 = extractvalue %dx.types.ResRet.f32 %1491, 2
  %1495 = extractvalue %dx.types.ResRet.f32 %1491, 3
  %1496 = fdiv fast float %1310, %1284
  %1497 = fmul fast float %1496, 5.000000e-01
  %1498 = fsub fast float 5.000000e-01, %1497
  %1499 = fdiv fast float %1132, %1284
  %1500 = fmul fast float %1499, 2.500000e-01
  %1501 = fcmp uge float %1492, 1.000000e+00
  %1502 = or i1 %1117, %1501
  %1503 = select i1 %1501, float 0.000000e+00, float 1.000000e+00
  br i1 %1502, label %1511, label %1504

; <label>:1504                                    ; preds = %1488
  %1505 = fsub fast float %1498, %1492
  %1506 = call float @dx.op.unary.f32(i32 6, float %1505)  ; FAbs(value)
  %1507 = fsub fast float %1506, %1499
  %1508 = fdiv fast float %1507, %1500
  %1509 = call float @dx.op.unary.f32(i32 7, float %1508)  ; Saturate(value)
  %1510 = fsub fast float 1.000000e+00, %1509
  br label %1511

; <label>:1511                                    ; preds = %1504, %1488
  %1512 = phi float [ %1510, %1504 ], [ %1503, %1488 ]
  %1513 = fcmp uge float %1493, 1.000000e+00
  %1514 = or i1 %1117, %1513
  %1515 = select i1 %1513, float 0.000000e+00, float 1.000000e+00
  br i1 %1514, label %2270, label %2263

; <label>:1516                                    ; preds = %2294
  %1517 = fdiv fast float %2296, %2300
  %1518 = fdiv fast float %2297, %2300
  %1519 = fdiv fast float %2298, %2300
  %1520 = fdiv fast float %2299, %2300
  %1521 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1522 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1521, %dx.types.Handle %1490, float %1429, float %1430, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1523 = extractvalue %dx.types.ResRet.f32 %1522, 0
  %1524 = extractvalue %dx.types.ResRet.f32 %1522, 1
  %1525 = extractvalue %dx.types.ResRet.f32 %1522, 2
  %1526 = extractvalue %dx.types.ResRet.f32 %1522, 3
  %1527 = call float @dx.op.dot4.f32(i32 56, float %1523, float %1524, float %1525, float %1526, float %1517, float %1518, float %1519, float %1520)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1528 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1529 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1528, %dx.types.Handle %1490, float %1429, float %1430, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1530 = extractvalue %dx.types.ResRet.f32 %1529, 0
  %1531 = extractvalue %dx.types.ResRet.f32 %1529, 1
  %1532 = extractvalue %dx.types.ResRet.f32 %1529, 2
  %1533 = extractvalue %dx.types.ResRet.f32 %1529, 3
  %1534 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1528, %dx.types.Handle %1490, float %1429, float %1430, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1535 = extractvalue %dx.types.ResRet.f32 %1534, 0
  %1536 = extractvalue %dx.types.ResRet.f32 %1534, 1
  %1537 = extractvalue %dx.types.ResRet.f32 %1534, 2
  %1538 = extractvalue %dx.types.ResRet.f32 %1534, 3
  %1539 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1528, %dx.types.Handle %1490, float %1429, float %1430, float undef, float undef, i32 0, i32 0, i32 2)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1540 = extractvalue %dx.types.ResRet.f32 %1539, 0
  %1541 = extractvalue %dx.types.ResRet.f32 %1539, 1
  %1542 = extractvalue %dx.types.ResRet.f32 %1539, 2
  %1543 = extractvalue %dx.types.ResRet.f32 %1539, 3
  %1544 = call float @dx.op.dot4.f32(i32 56, float %1530, float %1531, float %1532, float %1533, float %1517, float %1518, float %1519, float %1520)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1545 = call float @dx.op.dot4.f32(i32 56, float %1535, float %1536, float %1537, float %1538, float %1517, float %1518, float %1519, float %1520)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1546 = call float @dx.op.dot4.f32(i32 56, float %1540, float %1541, float %1542, float %1543, float %1517, float %1518, float %1519, float %1520)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1547 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %1548 = extractvalue %dx.types.CBufRet.i32 %1547, 2
  %1549 = icmp eq i32 %1548, 11
  br i1 %1549, label %1550, label %1570

; <label>:1550                                    ; preds = %1516
  %1551 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1552 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1551, %dx.types.Handle %1490, float %1429, float %1430, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1553 = extractvalue %dx.types.ResRet.f32 %1552, 0
  %1554 = extractvalue %dx.types.ResRet.f32 %1552, 1
  %1555 = extractvalue %dx.types.ResRet.f32 %1552, 2
  %1556 = extractvalue %dx.types.ResRet.f32 %1552, 3
  %1557 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1551, %dx.types.Handle %1490, float %1429, float %1430, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1558 = extractvalue %dx.types.ResRet.f32 %1557, 0
  %1559 = extractvalue %dx.types.ResRet.f32 %1557, 1
  %1560 = extractvalue %dx.types.ResRet.f32 %1557, 2
  %1561 = extractvalue %dx.types.ResRet.f32 %1557, 3
  %1562 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1551, %dx.types.Handle %1490, float %1429, float %1430, float undef, float undef, i32 0, i32 0, i32 2)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1563 = extractvalue %dx.types.ResRet.f32 %1562, 0
  %1564 = extractvalue %dx.types.ResRet.f32 %1562, 1
  %1565 = extractvalue %dx.types.ResRet.f32 %1562, 2
  %1566 = extractvalue %dx.types.ResRet.f32 %1562, 3
  %1567 = call float @dx.op.dot4.f32(i32 56, float %1553, float %1554, float %1555, float %1556, float %1517, float %1518, float %1519, float %1520)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1568 = call float @dx.op.dot4.f32(i32 56, float %1558, float %1559, float %1560, float %1561, float %1517, float %1518, float %1519, float %1520)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1569 = call float @dx.op.dot4.f32(i32 56, float %1563, float %1564, float %1565, float %1566, float %1517, float %1518, float %1519, float %1520)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  br label %1824

; <label>:1570                                    ; preds = %1516
  %1571 = icmp eq i32 %1548, 12
  br i1 %1571, label %1572, label %1592

; <label>:1572                                    ; preds = %1570
  %1573 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1574 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1573, %dx.types.Handle %1490, float %1429, float %1430, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1575 = extractvalue %dx.types.ResRet.f32 %1574, 0
  %1576 = extractvalue %dx.types.ResRet.f32 %1574, 1
  %1577 = extractvalue %dx.types.ResRet.f32 %1574, 2
  %1578 = extractvalue %dx.types.ResRet.f32 %1574, 3
  %1579 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1573, %dx.types.Handle %1490, float %1429, float %1430, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1580 = extractvalue %dx.types.ResRet.f32 %1579, 0
  %1581 = extractvalue %dx.types.ResRet.f32 %1579, 1
  %1582 = extractvalue %dx.types.ResRet.f32 %1579, 2
  %1583 = extractvalue %dx.types.ResRet.f32 %1579, 3
  %1584 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1573, %dx.types.Handle %1490, float %1429, float %1430, float undef, float undef, i32 0, i32 0, i32 2)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1585 = extractvalue %dx.types.ResRet.f32 %1584, 0
  %1586 = extractvalue %dx.types.ResRet.f32 %1584, 1
  %1587 = extractvalue %dx.types.ResRet.f32 %1584, 2
  %1588 = extractvalue %dx.types.ResRet.f32 %1584, 3
  %1589 = call float @dx.op.dot4.f32(i32 56, float %1575, float %1576, float %1577, float %1578, float %1517, float %1518, float %1519, float %1520)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1590 = call float @dx.op.dot4.f32(i32 56, float %1580, float %1581, float %1582, float %1583, float %1517, float %1518, float %1519, float %1520)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1591 = call float @dx.op.dot4.f32(i32 56, float %1585, float %1586, float %1587, float %1588, float %1517, float %1518, float %1519, float %1520)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  br label %1824

; <label>:1592                                    ; preds = %1570
  %1593 = icmp eq i32 %1548, 5
  br i1 %1593, label %1594, label %1639

; <label>:1594                                    ; preds = %1592
  %1595 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1596 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1595, %dx.types.Handle %1490, float %1429, float %1430, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1597 = extractvalue %dx.types.ResRet.f32 %1596, 0
  %1598 = extractvalue %dx.types.ResRet.f32 %1596, 1
  %1599 = extractvalue %dx.types.ResRet.f32 %1596, 2
  %1600 = extractvalue %dx.types.ResRet.f32 %1596, 3
  %1601 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1595, %dx.types.Handle %1490, float %1429, float %1430, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1602 = extractvalue %dx.types.ResRet.f32 %1601, 0
  %1603 = extractvalue %dx.types.ResRet.f32 %1601, 1
  %1604 = extractvalue %dx.types.ResRet.f32 %1601, 2
  %1605 = extractvalue %dx.types.ResRet.f32 %1601, 3
  %1606 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1595, %dx.types.Handle %1490, float %1429, float %1430, float undef, float undef, i32 0, i32 0, i32 2)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1607 = extractvalue %dx.types.ResRet.f32 %1606, 0
  %1608 = extractvalue %dx.types.ResRet.f32 %1606, 1
  %1609 = extractvalue %dx.types.ResRet.f32 %1606, 2
  %1610 = extractvalue %dx.types.ResRet.f32 %1606, 3
  %1611 = call float @dx.op.dot4.f32(i32 56, float %1597, float %1598, float %1599, float %1600, float %1517, float %1518, float %1519, float %1520)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1612 = call float @dx.op.dot4.f32(i32 56, float %1602, float %1603, float %1604, float %1605, float %1517, float %1518, float %1519, float %1520)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1613 = call float @dx.op.dot4.f32(i32 56, float %1607, float %1608, float %1609, float %1610, float %1517, float %1518, float %1519, float %1520)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1614 = fmul fast float %1611, %1611
  %1615 = fmul fast float %1612, %1612
  %1616 = fmul fast float %1613, %1613
  %1617 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %46, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1618 = extractvalue %dx.types.CBufRet.f32 %1617, 0
  %1619 = call float @dx.op.unary.f32(i32 23, float %1614)  ; Log(value)
  %1620 = call float @dx.op.unary.f32(i32 23, float %1615)  ; Log(value)
  %1621 = call float @dx.op.unary.f32(i32 23, float %1616)  ; Log(value)
  %1622 = fmul fast float %1619, %1618
  %1623 = fmul fast float %1620, %1618
  %1624 = fmul fast float %1621, %1618
  %1625 = call float @dx.op.unary.f32(i32 21, float %1622)  ; Exp(value)
  %1626 = call float @dx.op.unary.f32(i32 21, float %1623)  ; Exp(value)
  %1627 = call float @dx.op.unary.f32(i32 21, float %1624)  ; Exp(value)
  %1628 = call float @dx.op.unary.f32(i32 7, float %1625)  ; Saturate(value)
  %1629 = call float @dx.op.unary.f32(i32 7, float %1626)  ; Saturate(value)
  %1630 = call float @dx.op.unary.f32(i32 7, float %1627)  ; Saturate(value)
  %1631 = call float @dx.op.binary.f32(i32 36, float %1628, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1632 = call float @dx.op.binary.f32(i32 36, float %1629, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1633 = call float @dx.op.binary.f32(i32 36, float %1630, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1634 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1635 = extractvalue %dx.types.CBufRet.f32 %1634, 2
  %1636 = fmul fast float %1635, %1631
  %1637 = fmul fast float %1635, %1632
  %1638 = fmul fast float %1635, %1633
  br label %1824

; <label>:1639                                    ; preds = %1592
  %1640 = icmp eq i32 %1548, 7
  br i1 %1640, label %1641, label %1702

; <label>:1641                                    ; preds = %1639
  %1642 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1250, i32 %1248, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1643 = extractvalue %dx.types.ResRet.f32 %1642, 0
  %1644 = extractvalue %dx.types.ResRet.f32 %1642, 1
  %1645 = extractvalue %dx.types.ResRet.f32 %1642, 2
  %1646 = add i32 %1248, 1
  %1647 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1250, i32 %1646, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1648 = extractvalue %dx.types.ResRet.f32 %1647, 0
  %1649 = extractvalue %dx.types.ResRet.f32 %1647, 1
  %1650 = extractvalue %dx.types.ResRet.f32 %1647, 2
  %1651 = add i32 %1248, 2
  %1652 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1250, i32 %1651, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1653 = extractvalue %dx.types.ResRet.f32 %1652, 0
  %1654 = extractvalue %dx.types.ResRet.f32 %1652, 1
  %1655 = extractvalue %dx.types.ResRet.f32 %1652, 2
  %1656 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1657 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1656, %dx.types.Handle %1490, float %1429, float %1430, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1658 = extractvalue %dx.types.ResRet.f32 %1657, 0
  %1659 = extractvalue %dx.types.ResRet.f32 %1657, 1
  %1660 = extractvalue %dx.types.ResRet.f32 %1657, 2
  %1661 = extractvalue %dx.types.ResRet.f32 %1657, 3
  %1662 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1656, %dx.types.Handle %1490, float %1429, float %1430, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1663 = extractvalue %dx.types.ResRet.f32 %1662, 0
  %1664 = extractvalue %dx.types.ResRet.f32 %1662, 1
  %1665 = extractvalue %dx.types.ResRet.f32 %1662, 2
  %1666 = extractvalue %dx.types.ResRet.f32 %1662, 3
  %1667 = call float @dx.op.dot4.f32(i32 56, float %1658, float %1659, float %1660, float %1661, float %1517, float %1518, float %1519, float %1520)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1668 = call float @dx.op.dot4.f32(i32 56, float %1663, float %1664, float %1665, float %1666, float %1517, float %1518, float %1519, float %1520)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1669 = fmul fast float %1667, 2.000000e+00
  %1670 = fmul fast float %1668, 2.000000e+00
  %1671 = fadd fast float %1669, -1.000000e+00
  %1672 = fadd fast float %1670, -1.000000e+00
  %1673 = call float @dx.op.dot2.f32(i32 54, float %1671, float %1672, float %1671, float %1672)  ; Dot2(ax,ay,bx,by)
  %1674 = fsub fast float 1.000000e+00, %1673
  %1675 = call float @dx.op.binary.f32(i32 35, float %1674, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1676 = call float @dx.op.unary.f32(i32 24, float %1675)  ; Sqrt(value)
  %1677 = fmul fast float %1671, %1643
  %1678 = call float @dx.op.tertiary.f32(i32 46, float %1644, float %1672, float %1677)  ; FMad(a,b,c)
  %1679 = call float @dx.op.tertiary.f32(i32 46, float %1645, float %1676, float %1678)  ; FMad(a,b,c)
  %1680 = fmul fast float %1671, %1648
  %1681 = call float @dx.op.tertiary.f32(i32 46, float %1649, float %1672, float %1680)  ; FMad(a,b,c)
  %1682 = call float @dx.op.tertiary.f32(i32 46, float %1650, float %1676, float %1681)  ; FMad(a,b,c)
  %1683 = fmul fast float %1671, %1653
  %1684 = call float @dx.op.tertiary.f32(i32 46, float %1654, float %1672, float %1683)  ; FMad(a,b,c)
  %1685 = call float @dx.op.tertiary.f32(i32 46, float %1655, float %1676, float %1684)  ; FMad(a,b,c)
  %1686 = call float @dx.op.dot3.f32(i32 55, float %1679, float %1682, float %1685, float %1679, float %1682, float %1685)  ; Dot3(ax,ay,az,bx,by,bz)
  %1687 = call float @dx.op.unary.f32(i32 25, float %1686)  ; Rsqrt(value)
  %1688 = fmul fast float %1679, 5.000000e-01
  %1689 = fmul fast float %1688, %1687
  %1690 = fmul fast float %1682, 5.000000e-01
  %1691 = fmul fast float %1690, %1687
  %1692 = fmul fast float %1685, 5.000000e-01
  %1693 = fmul fast float %1692, %1687
  %1694 = fadd fast float %1689, 5.000000e-01
  %1695 = fadd fast float %1691, 5.000000e-01
  %1696 = fadd fast float %1693, 5.000000e-01
  %1697 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1698 = extractvalue %dx.types.CBufRet.f32 %1697, 2
  %1699 = fmul fast float %1694, %1698
  %1700 = fmul fast float %1695, %1698
  %1701 = fmul fast float %1696, %1698
  br label %1824

; <label>:1702                                    ; preds = %1639
  %1703 = icmp eq i32 %1548, 8
  br i1 %1703, label %1704, label %1724

; <label>:1704                                    ; preds = %1702
  %1705 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1706 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1705, %dx.types.Handle %1490, float %1429, float %1430, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1707 = extractvalue %dx.types.ResRet.f32 %1706, 0
  %1708 = extractvalue %dx.types.ResRet.f32 %1706, 1
  %1709 = extractvalue %dx.types.ResRet.f32 %1706, 2
  %1710 = extractvalue %dx.types.ResRet.f32 %1706, 3
  %1711 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1705, %dx.types.Handle %1490, float %1429, float %1430, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1712 = extractvalue %dx.types.ResRet.f32 %1711, 0
  %1713 = extractvalue %dx.types.ResRet.f32 %1711, 1
  %1714 = extractvalue %dx.types.ResRet.f32 %1711, 2
  %1715 = extractvalue %dx.types.ResRet.f32 %1711, 3
  %1716 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1705, %dx.types.Handle %1490, float %1429, float %1430, float undef, float undef, i32 0, i32 0, i32 2)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1717 = extractvalue %dx.types.ResRet.f32 %1716, 0
  %1718 = extractvalue %dx.types.ResRet.f32 %1716, 1
  %1719 = extractvalue %dx.types.ResRet.f32 %1716, 2
  %1720 = extractvalue %dx.types.ResRet.f32 %1716, 3
  %1721 = call float @dx.op.dot4.f32(i32 56, float %1707, float %1708, float %1709, float %1710, float %1517, float %1518, float %1519, float %1520)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1722 = call float @dx.op.dot4.f32(i32 56, float %1712, float %1713, float %1714, float %1715, float %1517, float %1518, float %1519, float %1520)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1723 = call float @dx.op.dot4.f32(i32 56, float %1717, float %1718, float %1719, float %1720, float %1517, float %1518, float %1519, float %1520)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  br label %1824

; <label>:1724                                    ; preds = %1702
  %1725 = icmp eq i32 %1548, 9
  br i1 %1725, label %1726, label %1730

; <label>:1726                                    ; preds = %1724
  %1727 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1728 = extractvalue %dx.types.CBufRet.f32 %1727, 2
  %1729 = fmul fast float %1728, %1527
  br label %1824

; <label>:1730                                    ; preds = %1724
  %1731 = icmp eq i32 %1548, 10
  br i1 %1731, label %1732, label %1780

; <label>:1732                                    ; preds = %1730
  %1733 = and i32 %1247, 3
  %1734 = uitofp i32 %1733 to float
  %1735 = fmul fast float %1734, 0x3FD5555560000000
  %1736 = lshr i32 %1247, 2
  %1737 = and i32 %1736, 3
  %1738 = uitofp i32 %1737 to float
  %1739 = fmul fast float %1738, 0x3FD5555560000000
  %1740 = fsub fast float 1.000000e+00, %1735
  %1741 = fsub fast float %1740, %1739
  %1742 = call float @dx.op.unary.f32(i32 7, float %1741)  ; Saturate(value)
  %1743 = fmul fast float %1429, 1.250000e-01
  %1744 = fmul fast float %1743, %1464
  %1745 = fmul fast float %1430, 1.250000e-01
  %1746 = fmul fast float %1745, %1465
  %1747 = call float @dx.op.unary.f32(i32 22, float %1744)  ; Frc(value)
  %1748 = call float @dx.op.unary.f32(i32 22, float %1746)  ; Frc(value)
  %1749 = fadd fast float %1747, -5.000000e-01
  %1750 = fadd fast float %1748, -5.000000e-01
  %1751 = call float @dx.op.unary.f32(i32 6, float %1749)  ; FAbs(value)
  %1752 = call float @dx.op.unary.f32(i32 6, float %1750)  ; FAbs(value)
  %1753 = fsub fast float -0.000000e+00, %1751
  %1754 = fsub fast float -0.000000e+00, %1752
  %1755 = fsub fast float 0x3F847AE140000000, %1751
  %1756 = fsub fast float 0x3F847AE140000000, %1752
  %1757 = fdiv fast float %1755, %1753
  %1758 = fdiv fast float %1756, %1754
  %1759 = call float @dx.op.unary.f32(i32 7, float %1757)  ; Saturate(value)
  %1760 = call float @dx.op.unary.f32(i32 7, float %1758)  ; Saturate(value)
  %1761 = fmul fast float %1759, 2.000000e+00
  %1762 = fmul fast float %1760, 2.000000e+00
  %1763 = fsub fast float 3.000000e+00, %1761
  %1764 = fsub fast float 3.000000e+00, %1762
  %1765 = fmul float %1759, %1760
  %1766 = fmul float %1765, %1765
  %1767 = fmul fast float %1764, %1763
  %1768 = fmul fast float %1767, %1766
  %1769 = call float @dx.op.unary.f32(i32 7, float %1768)  ; Saturate(value)
  %1770 = fmul fast float %1769, 7.500000e-01
  %1771 = fadd fast float %1770, 2.500000e-01
  %1772 = fmul fast float %1771, %1735
  %1773 = fmul fast float %1771, %1739
  %1774 = fmul fast float %1771, %1742
  %1775 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1776 = extractvalue %dx.types.CBufRet.f32 %1775, 2
  %1777 = fmul fast float %1772, %1776
  %1778 = fmul fast float %1773, %1776
  %1779 = fmul fast float %1774, %1776
  br label %1824

; <label>:1780                                    ; preds = %1730
  %1781 = add i32 %1548, -15
  %1782 = icmp ult i32 %1781, 4
  br i1 %1782, label %1783, label %1824

; <label>:1783                                    ; preds = %1780
  %1784 = icmp eq i32 %1548, 15
  %1785 = mul i32 %1366, 5
  %1786 = add i32 %1785, 4
  %1787 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1788 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1787, i32 %1786, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1789 = extractvalue %dx.types.ResRet.f32 %1788, 0
  %1790 = bitcast float %1789 to i32
  br i1 %1784, label %1805, label %1791

; <label>:1791                                    ; preds = %1783
  %1792 = extractvalue %dx.types.ResRet.f32 %1788, 1
  %1793 = bitcast float %1792 to i32
  %1794 = icmp eq i32 %1548, 16
  br i1 %1794, label %1805, label %1795

; <label>:1795                                    ; preds = %1791
  %1796 = icmp eq i32 %1548, 17
  br i1 %1796, label %1797, label %1801

; <label>:1797                                    ; preds = %1795
  %1798 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  %1799 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1798, i32 %1366, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1800 = extractvalue %dx.types.ResRet.i32 %1799, 0
  br label %1805

; <label>:1801                                    ; preds = %1795
  %1802 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  %1803 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1802, i32 %1366, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1804 = extractvalue %dx.types.ResRet.i32 %1803, 0
  br label %1805

; <label>:1805                                    ; preds = %1801, %1797, %1791, %1783
  %1806 = phi i32 [ %1800, %1797 ], [ %1804, %1801 ], [ %1790, %1783 ], [ %1793, %1791 ]
  %1807 = phi float [ 8.000000e+00, %1797 ], [ 8.000000e+00, %1801 ], [ 8.000000e+00, %1783 ], [ 3.200000e+01, %1791 ]
  %1808 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1809 = extractvalue %dx.types.CBufRet.i32 %1808, 3
  %1810 = sub i32 %1809, %1806
  %1811 = uitofp i32 %1810 to float
  %1812 = fdiv fast float %1811, %1807
  %1813 = call float @dx.op.unary.f32(i32 7, float %1812)  ; Saturate(value)
  %1814 = fsub fast float 1.000000e+00, %1813
  %1815 = icmp eq i32 %1809, %1806
  %1816 = select i1 %1815, float 1.000000e+00, float %1814
  %1817 = select i1 %1815, float 1.000000e+00, float 0.000000e+00
  %1818 = select i1 %1815, float 1.000000e+00, float %1813
  %1819 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1820 = extractvalue %dx.types.CBufRet.f32 %1819, 2
  %1821 = fmul fast float %1816, %1820
  %1822 = fmul fast float %1820, %1817
  %1823 = fmul fast float %1820, %1818
  br label %1824

; <label>:1824                                    ; preds = %1805, %1780, %1732, %1726, %1704, %1641, %1594, %1572, %1550
  %1825 = phi float [ %1567, %1550 ], [ %1589, %1572 ], [ %1636, %1594 ], [ %1699, %1641 ], [ %1721, %1704 ], [ %1729, %1726 ], [ %1777, %1732 ], [ %1821, %1805 ], [ %1544, %1780 ]
  %1826 = phi float [ %1568, %1550 ], [ %1590, %1572 ], [ %1637, %1594 ], [ %1700, %1641 ], [ %1722, %1704 ], [ %1729, %1726 ], [ %1778, %1732 ], [ %1822, %1805 ], [ %1545, %1780 ]
  %1827 = phi float [ %1569, %1550 ], [ %1591, %1572 ], [ %1638, %1594 ], [ %1701, %1641 ], [ %1723, %1704 ], [ %1729, %1726 ], [ %1779, %1732 ], [ %1823, %1805 ], [ %1546, %1780 ]
  %1828 = fmul fast float %1825, %2301
  %1829 = fmul fast float %1826, %2301
  %1830 = fmul fast float %1827, %2301
  %1831 = fadd fast float %1828, %1238
  %1832 = fadd fast float %1829, %1239
  %1833 = fadd fast float %1830, %1240
  %1834 = fadd fast float %2301, %1241
  %1835 = fcmp fast ogt float %2301, %1237
  br i1 %1835, label %1836, label %1256

; <label>:1836                                    ; preds = %1824
  br label %1256

; <label>:1837                                    ; preds = %1256
  br label %1838

; <label>:1838                                    ; preds = %1837, %1228
  %1839 = phi i32 [ 0, %1228 ], [ %1257, %1837 ]
  %1840 = phi i32 [ 0, %1228 ], [ %1258, %1837 ]
  %1841 = phi i32 [ 0, %1228 ], [ %1259, %1837 ]
  %1842 = phi float [ 0.000000e+00, %1228 ], [ %1261, %1837 ]
  %1843 = phi float [ 0.000000e+00, %1228 ], [ %1262, %1837 ]
  %1844 = phi float [ 0.000000e+00, %1228 ], [ %1263, %1837 ]
  %1845 = phi float [ 0.000000e+00, %1228 ], [ %1264, %1837 ]
  %1846 = fcmp fast ogt float %1845, 0.000000e+00
  br i1 %1846, label %1847, label %1851

; <label>:1847                                    ; preds = %1838
  %1848 = fdiv fast float %1842, %1845
  %1849 = fdiv fast float %1843, %1845
  %1850 = fdiv fast float %1844, %1845
  br label %1851

; <label>:1851                                    ; preds = %1847, %1838
  %1852 = phi float [ %1848, %1847 ], [ %1076, %1838 ]
  %1853 = phi float [ %1849, %1847 ], [ %1077, %1838 ]
  %1854 = phi float [ %1850, %1847 ], [ %1078, %1838 ]
  %1855 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1856 = extractvalue %dx.types.CBufRet.i32 %1855, 3
  %1857 = and i32 %1856, %78
  %1858 = and i32 %1856, %79
  %1859 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1860 = extractvalue %dx.types.CBufRet.i32 %1859, 0
  %1861 = extractvalue %dx.types.CBufRet.i32 %1859, 1
  %1862 = icmp eq i32 %1857, %1860
  %1863 = icmp eq i32 %1858, %1861
  %1864 = and i1 %1862, %1863
  br i1 %1864, label %1865, label %1882

; <label>:1865                                    ; preds = %1851
  %1866 = extractvalue %dx.types.CBufRet.i32 %1855, 2
  %1867 = icmp ne i32 %1866, 0
  %1868 = fcmp fast ogt float %1845, 0x3FB99999A0000000
  %1869 = and i1 %1868, %1867
  br i1 %1869, label %1870, label %1882

; <label>:1870                                    ; preds = %1865
  %1871 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  %1872 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1871, i32 0, i32 0, i32 0, i32 undef, i32 1)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1873 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1874 = extractvalue %dx.types.CBufRet.i32 %1873, 2
  %1875 = icmp ult i32 %1872, %1874
  br i1 %1875, label %1876, label %1878

; <label>:1876                                    ; preds = %1870
  %1877 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4108, i32 8 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=8>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1877, i32 %1872, i32 0, i32 %1839, i32 %1840, i32 undef, i32 undef, i8 3, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %1878

; <label>:1878                                    ; preds = %1876, %1870
  %1879 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1880 = extractvalue %dx.types.CBufRet.i32 %1879, 3
  %1881 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4108, i32 4 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=4>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1881, i32 %1841, i32 0, i32 %1880, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %1882

; <label>:1882                                    ; preds = %1878, %1865, %1851
  %1883 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %1884 = extractvalue %dx.types.CBufRet.i32 %1883, 2
  %1885 = icmp eq i32 %1884, 6
  br i1 %1885, label %1886, label %1898

; <label>:1886                                    ; preds = %1882
  %1887 = fmul fast float %1053, 5.000000e-01
  %1888 = fmul fast float %1054, 5.000000e-01
  %1889 = fmul fast float %1055, 5.000000e-01
  %1890 = fadd fast float %1887, 5.000000e-01
  %1891 = fadd fast float %1888, 5.000000e-01
  %1892 = fadd fast float %1889, 5.000000e-01
  %1893 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1894 = extractvalue %dx.types.CBufRet.f32 %1893, 2
  %1895 = fmul fast float %1894, %1890
  %1896 = fmul fast float %1894, %1891
  %1897 = fmul fast float %1894, %1892
  br label %1898

; <label>:1898                                    ; preds = %1886, %1882, %1075, %488, %149
  %1899 = phi float [ 0.000000e+00, %149 ], [ 0.000000e+00, %488 ], [ %1895, %1886 ], [ %1852, %1882 ], [ %1076, %1075 ]
  %1900 = phi float [ 0.000000e+00, %149 ], [ 0.000000e+00, %488 ], [ %1896, %1886 ], [ %1853, %1882 ], [ %1077, %1075 ]
  %1901 = phi float [ 0.000000e+00, %149 ], [ 0.000000e+00, %488 ], [ %1897, %1886 ], [ %1854, %1882 ], [ %1078, %1075 ]
  %1902 = phi float [ 1.000000e+00, %149 ], [ 1.000000e+00, %488 ], [ 0.000000e+00, %1886 ], [ 0.000000e+00, %1882 ], [ 0.000000e+00, %1075 ]
  %1903 = phi float [ %122, %149 ], [ %490, %488 ], [ %490, %1886 ], [ %490, %1882 ], [ %490, %1075 ]
  %1904 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1905 = extractvalue %dx.types.CBufRet.f32 %1904, 1
  %1906 = fcmp fast ogt float %1905, 0.000000e+00
  br i1 %1906, label %1907, label %1929

; <label>:1907                                    ; preds = %1898
  %1908 = extractvalue %dx.types.CBufRet.f32 %1904, 0
  %1909 = fadd fast float %1908, 0xC02BEAFA60000000
  %1910 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %1911 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1912 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1910, %dx.types.Handle %1911, float %116, float %117, float %118, float undef, i32 undef, i32 undef, i32 undef, float %1909)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1913 = extractvalue %dx.types.ResRet.f32 %1912, 0
  %1914 = extractvalue %dx.types.ResRet.f32 %1912, 1
  %1915 = extractvalue %dx.types.ResRet.f32 %1912, 2
  %1916 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 187)  ; CBufferLoadLegacy(handle,regIndex)
  %1917 = extractvalue %dx.types.CBufRet.f32 %1916, 0
  %1918 = extractvalue %dx.types.CBufRet.f32 %1916, 1
  %1919 = extractvalue %dx.types.CBufRet.f32 %1916, 2
  %1920 = fmul fast float %1913, %1902
  %1921 = fmul fast float %1920, %1917
  %1922 = fmul fast float %1914, %1902
  %1923 = fmul fast float %1922, %1918
  %1924 = fmul fast float %1915, %1902
  %1925 = fmul fast float %1924, %1919
  %1926 = fadd fast float %1921, %1899
  %1927 = fadd fast float %1923, %1900
  %1928 = fadd fast float %1925, %1901
  br label %1929

; <label>:1929                                    ; preds = %1907, %1898
  %1930 = phi float [ %1926, %1907 ], [ %1899, %1898 ]
  %1931 = phi float [ %1927, %1907 ], [ %1900, %1898 ]
  %1932 = phi float [ %1928, %1907 ], [ %1901, %1898 ]
  %1933 = phi float [ 0.000000e+00, %1907 ], [ %1902, %1898 ]
  %1934 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1935 = extractvalue %dx.types.CBufRet.f32 %1934, 1
  %1936 = fmul fast float %1935, %1930
  %1937 = fmul fast float %1935, %1931
  %1938 = fmul fast float %1935, %1932
  %1939 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1940 = extractvalue %dx.types.CBufRet.i32 %1939, 0
  %1941 = icmp eq i32 %1940, 0
  br i1 %1941, label %2209, label %1942

; <label>:1942                                    ; preds = %1929
  %1943 = fsub fast float 1.000000e+00, %1933
  %1944 = call float @dx.op.unary.f32(i32 7, float %1943)  ; Saturate(value)
  %1945 = fmul fast float %1903, %116
  %1946 = fmul fast float %1903, %117
  %1947 = fmul fast float %1903, %118
  %1948 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1949 = extractvalue %dx.types.CBufRet.f32 %1948, 3
  %1950 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1951 = extractvalue %dx.types.CBufRet.f32 %1950, 2
  %1952 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %1953 = extractvalue %dx.types.CBufRet.f32 %1952, 2
  %1954 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %1955 = extractvalue %dx.types.CBufRet.f32 %1954, 2
  %1956 = fmul fast float %1953, 2.097152e+06
  %1957 = fadd fast float %1956, %1955
  %1958 = call float @dx.op.binary.f32(i32 36, float %1957, float %1951)  ; FMin(a,b)
  %1959 = fsub fast float %1947, %1958
  %1960 = fadd fast float %1959, %1955
  %1961 = fadd fast float %1960, %1956
  %1962 = call float @dx.op.dot3.f32(i32 55, float %1945, float %1946, float %1961, float %1945, float %1946, float %1961)  ; Dot3(ax,ay,az,bx,by,bz)
  %1963 = call float @dx.op.binary.f32(i32 35, float %1962, float 0x3E45798EE0000000)  ; FMax(a,b)
  %1964 = call float @dx.op.unary.f32(i32 25, float %1963)  ; Rsqrt(value)
  %1965 = fmul fast float %1964, %1962
  %1966 = fmul fast float %1964, %1945
  %1967 = fmul fast float %1964, %1946
  %1968 = fmul fast float %1961, %1964
  %1969 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1970 = extractvalue %dx.types.CBufRet.f32 %1950, 3
  %1971 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1970)  ; FMax(a,b)
  %1972 = fcmp fast ogt float %1971, 0.000000e+00
  %1973 = extractvalue %dx.types.CBufRet.f32 %1950, 1
  %1974 = extractvalue %dx.types.CBufRet.f32 %1969, 1
  br i1 %1972, label %1978, label %1975

; <label>:1975                                    ; preds = %1942
  %1976 = extractvalue %dx.types.CBufRet.f32 %1969, 0
  %1977 = extractvalue %dx.types.CBufRet.f32 %1950, 0
  br label %2002

; <label>:1978                                    ; preds = %1942
  %1979 = fmul fast float %1971, %1964
  %1980 = fmul fast float %1979, %1961
  %1981 = fadd fast float %1980, %1958
  %1982 = fsub fast float %1961, %1980
  %1983 = fsub fast float 1.000000e+00, %1979
  %1984 = fmul fast float %1983, %1965
  %1985 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1986 = extractvalue %dx.types.CBufRet.f32 %1985, 1
  %1987 = fsub fast float %1981, %1986
  %1988 = fmul fast float %1987, %1973
  %1989 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %1988)  ; FMax(a,b)
  %1990 = extractvalue %dx.types.CBufRet.f32 %1985, 0
  %1991 = fsub fast float -0.000000e+00, %1989
  %1992 = call float @dx.op.unary.f32(i32 21, float %1991)  ; Exp(value)
  %1993 = fmul fast float %1990, %1992
  %1994 = extractvalue %dx.types.CBufRet.f32 %1969, 3
  %1995 = fsub fast float %1981, %1994
  %1996 = fmul fast float %1995, %1974
  %1997 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %1996)  ; FMax(a,b)
  %1998 = extractvalue %dx.types.CBufRet.f32 %1969, 2
  %1999 = fsub fast float -0.000000e+00, %1997
  %2000 = call float @dx.op.unary.f32(i32 21, float %1999)  ; Exp(value)
  %2001 = fmul fast float %1998, %2000
  br label %2002

; <label>:2002                                    ; preds = %1978, %1975
  %2003 = phi float [ %1993, %1978 ], [ %1977, %1975 ]
  %2004 = phi float [ %2001, %1978 ], [ %1976, %1975 ]
  %2005 = phi float [ %1984, %1978 ], [ %1965, %1975 ]
  %2006 = phi float [ %1982, %1978 ], [ %1961, %1975 ]
  %2007 = fmul fast float %1973, %2006
  %2008 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2007)  ; FMax(a,b)
  %2009 = fsub fast float -0.000000e+00, %2008
  %2010 = call float @dx.op.unary.f32(i32 21, float %2009)  ; Exp(value)
  %2011 = fsub fast float 1.000000e+00, %2010
  %2012 = fdiv fast float %2011, %2008
  %2013 = fmul fast float %2008, 0x3FCEBFBE00000000
  %2014 = fsub fast float 0x3FE62E4300000000, %2013
  %2015 = call float @dx.op.unary.f32(i32 6, float %2008)  ; FAbs(value)
  %2016 = fcmp fast ogt float %2015, 0x3F847AE140000000
  %2017 = select i1 %2016, float %2012, float %2014
  %2018 = fmul fast float %2017, %2003
  %2019 = fmul fast float %1974, %2006
  %2020 = call float @dx.op.binary.f32(i32 35, float -1.270000e+02, float %2019)  ; FMax(a,b)
  %2021 = fsub fast float -0.000000e+00, %2020
  %2022 = call float @dx.op.unary.f32(i32 21, float %2021)  ; Exp(value)
  %2023 = fsub fast float 1.000000e+00, %2022
  %2024 = fdiv fast float %2023, %2020
  %2025 = fmul fast float %2020, 0x3FCEBFBE00000000
  %2026 = fsub fast float 0x3FE62E4300000000, %2025
  %2027 = call float @dx.op.unary.f32(i32 6, float %2020)  ; FAbs(value)
  %2028 = fcmp fast ogt float %2027, 0x3F847AE140000000
  %2029 = select i1 %2028, float %2024, float %2026
  %2030 = fmul fast float %2029, %2004
  %2031 = fadd fast float %2030, %2018
  %2032 = extractvalue %dx.types.CBufRet.f32 %1948, 0
  %2033 = extractvalue %dx.types.CBufRet.f32 %1948, 1
  %2034 = extractvalue %dx.types.CBufRet.f32 %1948, 2
  %2035 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %2036 = extractvalue %dx.types.CBufRet.f32 %2035, 2
  %2037 = fcmp fast ogt float %2036, 0.000000e+00
  br i1 %2037, label %2038, label %2074, !dx.controlflow.hints !76

; <label>:2038                                    ; preds = %2002
  %2039 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %2040 = extractvalue %dx.types.CBufRet.f32 %2039, 0
  %2041 = fmul fast float %2040, %1965
  %2042 = extractvalue %dx.types.CBufRet.f32 %2039, 1
  %2043 = fadd fast float %2041, %2042
  %2044 = call float @dx.op.unary.f32(i32 7, float %2043)  ; Saturate(value)
  %2045 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %2046 = extractvalue %dx.types.CBufRet.f32 %2045, 1
  %2047 = extractvalue %dx.types.CBufRet.f32 %2045, 0
  %2048 = fsub fast float -0.000000e+00, %2047
  %2049 = call float @dx.op.dot2.f32(i32 54, float %1945, float %1946, float %2046, float %2048)  ; Dot2(ax,ay,bx,by)
  %2050 = call float @dx.op.dot2.f32(i32 54, float %1945, float %1946, float %2047, float %2046)  ; Dot2(ax,ay,bx,by)
  %2051 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %2052 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2053 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2051, %dx.types.Handle %2052, float %2049, float %2050, float %1961, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2054 = extractvalue %dx.types.ResRet.f32 %2053, 0
  %2055 = extractvalue %dx.types.ResRet.f32 %2053, 1
  %2056 = extractvalue %dx.types.ResRet.f32 %2053, 2
  %2057 = extractvalue %dx.types.CBufRet.f32 %2039, 2
  %2058 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2051, %dx.types.Handle %2052, float %2049, float %2050, float %1961, float undef, i32 undef, i32 undef, i32 undef, float %2057)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2059 = extractvalue %dx.types.ResRet.f32 %2058, 0
  %2060 = extractvalue %dx.types.ResRet.f32 %2058, 1
  %2061 = extractvalue %dx.types.ResRet.f32 %2058, 2
  %2062 = fsub fast float %2054, %2059
  %2063 = fsub fast float %2055, %2060
  %2064 = fsub fast float %2056, %2061
  %2065 = fmul fast float %2062, %2044
  %2066 = fmul fast float %2063, %2044
  %2067 = fmul fast float %2064, %2044
  %2068 = fadd fast float %2065, %2059
  %2069 = fadd fast float %2066, %2060
  %2070 = fadd fast float %2067, %2061
  %2071 = fmul fast float %2068, %2032
  %2072 = fmul fast float %2069, %2033
  %2073 = fmul fast float %2070, %2034
  br label %2074

; <label>:2074                                    ; preds = %2038, %2002
  %2075 = phi float [ %2071, %2038 ], [ %2032, %2002 ]
  %2076 = phi float [ %2072, %2038 ], [ %2033, %2002 ]
  %2077 = phi float [ %2073, %2038 ], [ %2034, %2002 ]
  %2078 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %2079 = extractvalue %dx.types.CBufRet.f32 %2078, 0
  %2080 = extractvalue %dx.types.CBufRet.f32 %2078, 1
  %2081 = extractvalue %dx.types.CBufRet.f32 %2078, 2
  %2082 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 179)  ; CBufferLoadLegacy(handle,regIndex)
  %2083 = extractvalue %dx.types.CBufRet.f32 %2082, 1
  %2084 = fmul fast float %2083, %2079
  %2085 = fmul fast float %2083, %2080
  %2086 = fmul fast float %2083, %2081
  %2087 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2088 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2089 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2087, %dx.types.Handle %2088, float 5.000000e-01, float 5.000000e-01, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2090 = extractvalue %dx.types.ResRet.f32 %2089, 0
  %2091 = extractvalue %dx.types.ResRet.f32 %2089, 1
  %2092 = extractvalue %dx.types.ResRet.f32 %2089, 2
  %2093 = fmul fast float %2084, %2090
  %2094 = fmul fast float %2085, %2091
  %2095 = fmul fast float %2086, %2092
  %2096 = fadd fast float %2093, %2075
  %2097 = fadd fast float %2094, %2076
  %2098 = fadd fast float %2095, %2077
  %2099 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %2100 = extractvalue %dx.types.CBufRet.f32 %2099, 3
  %2101 = fcmp fast oge float %2100, 0.000000e+00
  %2102 = fcmp fast oeq float %2036, 0.000000e+00
  %2103 = and i1 %2101, %2102
  br i1 %2103, label %2104, label %2175

; <label>:2104                                    ; preds = %2074
  %2105 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %2106 = extractvalue %dx.types.CBufRet.f32 %2105, 0
  %2107 = extractvalue %dx.types.CBufRet.f32 %2105, 1
  %2108 = extractvalue %dx.types.CBufRet.f32 %2105, 2
  %2109 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 163)  ; CBufferLoadLegacy(handle,regIndex)
  %2110 = extractvalue %dx.types.CBufRet.f32 %2109, 0
  %2111 = extractvalue %dx.types.CBufRet.f32 %2109, 1
  %2112 = extractvalue %dx.types.CBufRet.f32 %2109, 2
  %2113 = fmul fast float %2083, 0x3FB45F3060000000
  %2114 = fmul fast float %2113, %2110
  %2115 = fmul fast float %2113, %2111
  %2116 = fmul fast float %2113, %2112
  %2117 = fadd fast float %2114, %2106
  %2118 = fadd fast float %2115, %2107
  %2119 = fadd fast float %2116, %2108
  %2120 = extractvalue %dx.types.CBufRet.f32 %2105, 3
  %2121 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 161)  ; CBufferLoadLegacy(handle,regIndex)
  %2122 = extractvalue %dx.types.CBufRet.f32 %2121, 0
  %2123 = extractvalue %dx.types.CBufRet.f32 %2121, 1
  %2124 = extractvalue %dx.types.CBufRet.f32 %2121, 2
  %2125 = call float @dx.op.dot3.f32(i32 55, float %1966, float %1967, float %1968, float %2122, float %2123, float %2124)  ; Dot3(ax,ay,az,bx,by,bz)
  %2126 = call float @dx.op.unary.f32(i32 7, float %2125)  ; Saturate(value)
  %2127 = call float @dx.op.unary.f32(i32 23, float %2126)  ; Log(value)
  %2128 = fmul fast float %2127, %2120
  %2129 = call float @dx.op.unary.f32(i32 21, float %2128)  ; Exp(value)
  %2130 = fmul fast float %2129, %2117
  %2131 = fmul fast float %2129, %2118
  %2132 = fmul fast float %2129, %2119
  %2133 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 164)  ; CBufferLoadLegacy(handle,regIndex)
  %2134 = extractvalue %dx.types.CBufRet.f32 %2133, 3
  %2135 = fcmp fast ogt float %2134, 0.000000e+00
  br i1 %2135, label %2136, label %2161

; <label>:2136                                    ; preds = %2104
  %2137 = extractvalue %dx.types.CBufRet.f32 %2133, 0
  %2138 = extractvalue %dx.types.CBufRet.f32 %2133, 1
  %2139 = extractvalue %dx.types.CBufRet.f32 %2133, 2
  %2140 = fmul fast float %2113, %2137
  %2141 = fmul fast float %2113, %2138
  %2142 = fmul fast float %2113, %2139
  %2143 = fadd fast float %2140, %2106
  %2144 = fadd fast float %2141, %2107
  %2145 = fadd fast float %2142, %2108
  %2146 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %45, i32 162)  ; CBufferLoadLegacy(handle,regIndex)
  %2147 = extractvalue %dx.types.CBufRet.f32 %2146, 0
  %2148 = extractvalue %dx.types.CBufRet.f32 %2146, 1
  %2149 = extractvalue %dx.types.CBufRet.f32 %2146, 2
  %2150 = call float @dx.op.dot3.f32(i32 55, float %1966, float %1967, float %1968, float %2147, float %2148, float %2149)  ; Dot3(ax,ay,az,bx,by,bz)
  %2151 = call float @dx.op.unary.f32(i32 7, float %2150)  ; Saturate(value)
  %2152 = call float @dx.op.unary.f32(i32 23, float %2151)  ; Log(value)
  %2153 = fmul fast float %2152, %2120
  %2154 = call float @dx.op.unary.f32(i32 21, float %2153)  ; Exp(value)
  %2155 = fmul fast float %2154, %2143
  %2156 = fmul fast float %2154, %2144
  %2157 = fmul fast float %2154, %2145
  %2158 = fadd fast float %2155, %2130
  %2159 = fadd fast float %2156, %2131
  %2160 = fadd fast float %2157, %2132
  br label %2161

; <label>:2161                                    ; preds = %2136, %2104
  %2162 = phi float [ %2158, %2136 ], [ %2130, %2104 ]
  %2163 = phi float [ %2159, %2136 ], [ %2131, %2104 ]
  %2164 = phi float [ %2160, %2136 ], [ %2132, %2104 ]
  %2165 = fsub fast float %2005, %2100
  %2166 = call float @dx.op.binary.f32(i32 35, float %2165, float 0.000000e+00)  ; FMax(a,b)
  %2167 = fmul fast float %2031, %2166
  %2168 = fsub fast float -0.000000e+00, %2167
  %2169 = call float @dx.op.unary.f32(i32 21, float %2168)  ; Exp(value)
  %2170 = call float @dx.op.unary.f32(i32 7, float %2169)  ; Saturate(value)
  %2171 = fsub fast float 1.000000e+00, %2170
  %2172 = fmul fast float %2171, %2162
  %2173 = fmul fast float %2171, %2163
  %2174 = fmul fast float %2171, %2164
  br label %2175

; <label>:2175                                    ; preds = %2161, %2074
  %2176 = phi float [ %2172, %2161 ], [ 0.000000e+00, %2074 ]
  %2177 = phi float [ %2173, %2161 ], [ 0.000000e+00, %2074 ]
  %2178 = phi float [ %2174, %2161 ], [ 0.000000e+00, %2074 ]
  %2179 = fmul fast float %2005, %2031
  %2180 = fsub fast float -0.000000e+00, %2179
  %2181 = call float @dx.op.unary.f32(i32 21, float %2180)  ; Exp(value)
  %2182 = call float @dx.op.unary.f32(i32 7, float %2181)  ; Saturate(value)
  %2183 = call float @dx.op.binary.f32(i32 35, float %2182, float %1949)  ; FMax(a,b)
  %2184 = extractvalue %dx.types.CBufRet.f32 %2035, 3
  %2185 = fcmp fast ogt float %2184, 0.000000e+00
  %2186 = fcmp fast ogt float %1965, %2184
  %2187 = and i1 %2185, %2186
  %2188 = select i1 %2187, float 0.000000e+00, float %2176
  %2189 = select i1 %2187, float 0.000000e+00, float %2177
  %2190 = select i1 %2187, float 0.000000e+00, float %2178
  %2191 = select i1 %2187, float 1.000000e+00, float %2183
  %2192 = fsub fast float 1.000000e+00, %2191
  %2193 = fmul fast float %2192, %2096
  %2194 = fmul fast float %2192, %2097
  %2195 = fmul fast float %2192, %2098
  %2196 = fadd fast float %2193, %2188
  %2197 = fadd fast float %2194, %2189
  %2198 = fadd fast float %2195, %2190
  %2199 = fmul fast float %2191, %1936
  %2200 = fmul fast float %2191, %1937
  %2201 = fmul fast float %2191, %1938
  %2202 = fmul fast float %1935, %1944
  %2203 = fmul fast float %2202, %2196
  %2204 = fmul fast float %2202, %2197
  %2205 = fmul fast float %2202, %2198
  %2206 = fadd fast float %2203, %2199
  %2207 = fadd fast float %2204, %2200
  %2208 = fadd fast float %2205, %2201
  br label %2209

; <label>:2209                                    ; preds = %2175, %1929
  %2210 = phi float [ %2206, %2175 ], [ %1936, %1929 ]
  %2211 = phi float [ %2207, %2175 ], [ %1937, %1929 ]
  %2212 = phi float [ %2208, %2175 ], [ %1938, %1929 ]
  %2213 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %46, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %2214 = extractvalue %dx.types.CBufRet.i32 %2213, 1
  %2215 = icmp sgt i32 %2214, 0
  br i1 %2215, label %2216, label %2257

; <label>:2216                                    ; preds = %2209
  %2217 = extractvalue %dx.types.CBufRet.f32 %1934, 2
  %2218 = fmul fast float %2217, %2210
  %2219 = fmul fast float %2217, %2211
  %2220 = fmul fast float %2217, %2212
  %2221 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %2222 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2221, i32 0, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2223 = extractvalue %dx.types.ResRet.f32 %2222, 0
  %2224 = fmul fast float %2218, %2223
  %2225 = fmul fast float %2219, %2223
  %2226 = fmul fast float %2220, %2223
  %2227 = fadd fast float %2224, 0x3F65DA9CE0000000
  %2228 = fadd fast float %2225, 0x3F65DA9CE0000000
  %2229 = fadd fast float %2226, 0x3F65DA9CE0000000
  %2230 = call float @dx.op.unary.f32(i32 23, float %2227)  ; Log(value)
  %2231 = call float @dx.op.unary.f32(i32 23, float %2228)  ; Log(value)
  %2232 = call float @dx.op.unary.f32(i32 23, float %2229)  ; Log(value)
  %2233 = fmul fast float %2230, 0x3FB24924A0000000
  %2234 = fmul fast float %2231, 0x3FB24924A0000000
  %2235 = fmul fast float %2232, 0x3FB24924A0000000
  %2236 = fadd fast float %2233, 0x3FE38B1340000000
  %2237 = fadd fast float %2234, 0x3FE38B1340000000
  %2238 = fadd fast float %2235, 0x3FE38B1340000000
  %2239 = call float @dx.op.unary.f32(i32 7, float %2236)  ; Saturate(value)
  %2240 = call float @dx.op.unary.f32(i32 7, float %2237)  ; Saturate(value)
  %2241 = call float @dx.op.unary.f32(i32 7, float %2238)  ; Saturate(value)
  %2242 = fmul fast float %2239, 9.687500e-01
  %2243 = fmul fast float %2240, 9.687500e-01
  %2244 = fmul fast float %2241, 9.687500e-01
  %2245 = fadd fast float %2242, 1.562500e-02
  %2246 = fadd fast float %2243, 1.562500e-02
  %2247 = fadd fast float %2244, 1.562500e-02
  %2248 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2249 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2250 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2248, %dx.types.Handle %2249, float %2245, float %2246, float %2247, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2251 = extractvalue %dx.types.ResRet.f32 %2250, 0
  %2252 = extractvalue %dx.types.ResRet.f32 %2250, 1
  %2253 = extractvalue %dx.types.ResRet.f32 %2250, 2
  %2254 = fmul fast float %2251, 0x3FF0CCCCC0000000
  %2255 = fmul fast float %2252, 0x3FF0CCCCC0000000
  %2256 = fmul fast float %2253, 0x3FF0CCCCC0000000
  br label %2257

; <label>:2257                                    ; preds = %2216, %2209
  %2258 = phi float [ %2254, %2216 ], [ %2210, %2209 ]
  %2259 = phi float [ %2255, %2216 ], [ %2211, %2209 ]
  %2260 = phi float [ %2256, %2216 ], [ %2212, %2209 ]
  %2261 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2261, i32 %53, i32 %54, i32 undef, float %2258, float %2259, float %2260, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %2262

; <label>:2262                                    ; preds = %2257, %0
  ret void

; <label>:2263                                    ; preds = %1511
  %2264 = fsub fast float %1498, %1493
  %2265 = call float @dx.op.unary.f32(i32 6, float %2264)  ; FAbs(value)
  %2266 = fsub fast float %2265, %1499
  %2267 = fdiv fast float %2266, %1500
  %2268 = call float @dx.op.unary.f32(i32 7, float %2267)  ; Saturate(value)
  %2269 = fsub fast float 1.000000e+00, %2268
  br label %2270

; <label>:2270                                    ; preds = %2263, %1511
  %2271 = phi float [ %2269, %2263 ], [ %1515, %1511 ]
  %2272 = fcmp uge float %1494, 1.000000e+00
  %2273 = or i1 %1117, %2272
  %2274 = select i1 %2272, float 0.000000e+00, float 1.000000e+00
  br i1 %2273, label %2282, label %2275

; <label>:2275                                    ; preds = %2270
  %2276 = fsub fast float %1498, %1494
  %2277 = call float @dx.op.unary.f32(i32 6, float %2276)  ; FAbs(value)
  %2278 = fsub fast float %2277, %1499
  %2279 = fdiv fast float %2278, %1500
  %2280 = call float @dx.op.unary.f32(i32 7, float %2279)  ; Saturate(value)
  %2281 = fsub fast float 1.000000e+00, %2280
  br label %2282

; <label>:2282                                    ; preds = %2275, %2270
  %2283 = phi float [ %2281, %2275 ], [ %2274, %2270 ]
  %2284 = fcmp uge float %1495, 1.000000e+00
  %2285 = or i1 %1117, %2284
  %2286 = select i1 %2284, float 0.000000e+00, float 1.000000e+00
  br i1 %2285, label %2294, label %2287

; <label>:2287                                    ; preds = %2282
  %2288 = fsub fast float %1498, %1495
  %2289 = call float @dx.op.unary.f32(i32 6, float %2288)  ; FAbs(value)
  %2290 = fsub fast float %2289, %1499
  %2291 = fdiv fast float %2290, %1500
  %2292 = call float @dx.op.unary.f32(i32 7, float %2291)  ; Saturate(value)
  %2293 = fsub fast float 1.000000e+00, %2292
  br label %2294

; <label>:2294                                    ; preds = %2287, %2282
  %2295 = phi float [ %2293, %2287 ], [ %2286, %2282 ]
  %2296 = fmul fast float %1512, %1473
  %2297 = fmul fast float %2271, %1474
  %2298 = fmul fast float %2283, %1476
  %2299 = fmul fast float %2295, %1477
  %2300 = call float @dx.op.dot4.f32(i32 56, float %2296, float %2297, float %2298, float %2299, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2301 = fmul fast float %2300, %1486
  %2302 = fcmp fast ogt float %2301, 0.000000e+00
  br i1 %2302, label %1516, label %1256
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare void @dx.op.rawBufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8, i32) #2

; Function Attrs: nounwind
declare i32 @dx.op.atomicBinOp.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.unaryBits.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!55}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !34, !42, !48}
!5 = !{!6, !8, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !30, !31, !32, !33}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 12, i32 0, !9}
!9 = !{i32 1, i32 16}
!10 = !{i32 2, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 12, i32 0, !9}
!11 = !{i32 3, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 12, i32 0, !9}
!12 = !{i32 4, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 4, i32 1, i32 11, i32 0, null}
!13 = !{i32 5, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 5, i32 1, i32 11, i32 0, null}
!14 = !{i32 6, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 5, i32 0, !7}
!15 = !{i32 7, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 5, i32 0, !7}
!16 = !{i32 8, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 8, i32 1, i32 11, i32 0, null}
!17 = !{i32 9, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 4, i32 0, !7}
!18 = !{i32 10, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 12, i32 0, !9}
!19 = !{i32 11, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 12, i32 0, !9}
!20 = !{i32 12, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 2, i32 0, !7}
!21 = !{i32 13, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !7}
!22 = !{i32 14, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 2, i32 0, !7}
!23 = !{i32 15, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 2, i32 0, !7}
!24 = !{i32 16, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 16, i32 1, i32 2, i32 0, !7}
!25 = !{i32 17, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 17, i32 1, i32 2, i32 0, !7}
!26 = !{i32 18, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 18, i32 1, i32 2, i32 0, !7}
!27 = !{i32 19, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 19, i32 1, i32 2, i32 0, !7}
!28 = !{i32 20, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 20, i32 1, i32 10, i32 0, !29}
!29 = !{i32 0, i32 5}
!30 = !{i32 21, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 21, i32 1, i32 10, i32 0, !29}
!31 = !{i32 22, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 22, i32 1, i32 10, i32 0, !29}
!32 = !{i32 23, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 23, i32 1, i32 12, i32 0, !9}
!33 = !{i32 24, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 24, i32 1, i32 4, i32 0, !7}
!34 = !{!35, !37, !38, !39, !41}
!35 = !{i32 0, %"class.RWStructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 0, i32 1, i32 12, i1 false, i1 false, i1 false, !36}
!36 = !{i32 1, i32 4}
!37 = !{i32 1, %"class.RWStructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 1, i32 1, i32 12, i1 false, i1 false, i1 false, !36}
!38 = !{i32 2, %"class.RWStructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 2, i32 1, i32 12, i1 false, i1 false, i1 false, !36}
!39 = !{i32 3, %"class.RWStructuredBuffer<vector<unsigned int, 2> >"* undef, !"", i32 0, i32 3, i32 1, i32 12, i1 false, i1 false, i1 false, !40}
!40 = !{i32 1, i32 8}
!41 = !{i32 4, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!42 = !{!43, !44, !45, !46, !47}
!43 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 1176, null}
!44 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!45 = !{i32 2, %UniformBufferConstants_LumenCardScene* undef, !"", i32 0, i32 2, i32 1, i32 196, null}
!46 = !{i32 3, %UniformBufferConstants_ReflectionStruct* undef, !"", i32 0, i32 3, i32 1, i32 76, null}
!47 = !{i32 4, %UniformBufferConstants_FogStruct* undef, !"", i32 0, i32 4, i32 1, i32 180, null}
!48 = !{!49, !50, !51, !52, !53, !54}
!49 = !{i32 0, %struct.SamplerState* undef, !"", i32 1000, i32 1, i32 1, i32 0, null}
!50 = !{i32 1, %struct.SamplerState* undef, !"", i32 1000, i32 2, i32 1, i32 0, null}
!51 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!52 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!53 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!54 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!55 = !{void ()* @VisualizeQuadsCS, !"VisualizeQuadsCS", null, !4, !56}
!56 = !{i32 0, i64 16, i32 4, !57, i32 5, !58}
!57 = !{i32 8, i32 8, i32 1}
!58 = !{i32 0}
!59 = distinct !{!59, !"dx.controlflow.hints", i32 1}
!60 = distinct !{!60, !61}
!61 = !{!"llvm.loop.unroll.disable"}
!62 = !{!63, !63, i64 0}
!63 = !{!"int", !64, i64 0}
!64 = !{!"omnipotent char", !65, i64 0}
!65 = !{!"Simple C/C++ TBAA"}
!66 = !{!67}
!67 = distinct !{!67, !68, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z: %agg.result"}
!68 = distinct !{!68, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z"}
!69 = !{!70, !72, !74}
!70 = distinct !{!70, !71, !"\01?SampleLumenMeshCards@@YA?AUFSurfaceCacheSample@@V?$vector@I$01@@IV?$vector@M$02@@1MM_NI@Z: %agg.result"}
!71 = distinct !{!71, !"\01?SampleLumenMeshCards@@YA?AUFSurfaceCacheSample@@V?$vector@I$01@@IV?$vector@M$02@@1MM_NI@Z"}
!72 = distinct !{!72, !73, !"\01?ConeTraceMeshSDFsAndInterpolateFromCards@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!73 = distinct !{!73, !"\01?ConeTraceMeshSDFsAndInterpolateFromCards@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z"}
!74 = distinct !{!74, !75, !"\01?ConeTraceLumenSceneCards@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!75 = distinct !{!75, !"\01?ConeTraceLumenSceneCards@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z"}
!76 = distinct !{!76, !"dx.controlflow.hints", i32 1}
