;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 92103bb293eac338f98b7a48a972c0a7
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(16,16,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       float DebugForceTracesMoving;                 ; Offset:   16
;       uint ScreenProbeTracingOctahedronResolution;  ; Offset:   48
;       uint ScreenProbeLightSampleResolutionXY;      ; Offset:   52
;       uint ScreenProbeGatherOctahedronResolution;   ; Offset:   56
;       uint ScreenProbeGatherOctahedronResolutionWithBorder;; Offset:   60
;       uint ScreenProbeDownsampleFactor;             ; Offset:   64
;       uint2 ScreenProbeViewSize;                    ; Offset:   72
;       uint2 ScreenProbeAtlasViewSize;               ; Offset:   80
;       uint2 ScreenProbeAtlasBufferSize;             ; Offset:   88
;       float ScreenProbeGatherMaxMip;                ; Offset:   96
;       float RelativeSpeedDifferenceToConsiderLightingMoving;; Offset:  100
;       float ScreenTraceNoFallbackThicknessScale;    ; Offset:  104
;       float2 SampleRadianceProbeUVMul;              ; Offset:  112
;       float2 SampleRadianceProbeUVAdd;              ; Offset:  120
;       float2 SampleRadianceAtlasUVMul;              ; Offset:  128
;       uint NumUniformScreenProbes;                  ; Offset:  140
;       uint MaxNumAdaptiveProbes;                    ; Offset:  144
;       int FixedJitterIndex;                         ; Offset:  148
;       uint MaxImportanceSamplingOctahedronResolution;; Offset:  304
;       uint ScreenProbeBRDFOctahedronResolution;     ; Offset:  308
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   312
;
; }
;
; Resource bind info for NumAdaptiveScreenProbes
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; ScreenProbeSceneDepth             texture     u32          2d      T0             t0     1
; NumAdaptiveScreenProbes           texture  struct         r/o      T1             t1     1
; ScreenProbeTraceMoving            texture     f32          2d      T2             t2     1
; RWScreenProbeMoving                   UAVunorm_f32          2d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.Texture2D<unsigned int>" = type { i32, %"class.Texture2D<unsigned int>::mips_type" }
%"class.Texture2D<unsigned int>::mips_type" = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%"class.RWTexture2D<float>" = type { float }
%_RootShaderParameters = type { float, i32, i32, i32, i32, i32, <2 x i32>, <2 x i32>, <2 x i32>, float, float, float, <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, i32, i32 }

@"\01?SharedTexelMoving@@3PAMA" = external addrspace(3) global [1024 x float], align 4

define void @ScreenProbeCalculateMovingCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 13, i32 312 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %7 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %8 = call i32 @dx.op.groupId.i32(i32 94, i32 1)  ; GroupId(component)
  %9 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 0)  ; ThreadIdInGroup(component)
  %10 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 1)  ; ThreadIdInGroup(component)
  %11 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %6, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %12 = extractvalue %dx.types.CBufRet.i32 %11, 0
  %13 = mul i32 %12, %8
  %14 = add i32 %13, %7
  %15 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %6, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %16 = extractvalue %dx.types.CBufRet.i32 %15, 3
  %17 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %6, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %18 = extractvalue %dx.types.CBufRet.i32 %17, 0
  %19 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %20 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %19, i32 0, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %21 = extractvalue %dx.types.ResRet.i32 %20, 0
  %22 = call i32 @dx.op.binary.i32(i32 40, i32 %21, i32 %18)  ; UMin(a,b)
  %23 = add i32 %22, %16
  %24 = icmp ult i32 %14, %23
  %25 = icmp ult i32 %7, %12
  %26 = and i1 %24, %25
  br i1 %26, label %27, label %116

; <label>:27                                      ; preds = %0
  %28 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %29 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %28, i32 0, i32 %7, i32 %8, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %30 = extractvalue %dx.types.ResRet.i32 %29, 0
  %31 = bitcast i32 %30 to float
  %32 = fcmp fast ogt float %31, 0.000000e+00
  br i1 %32, label %33, label %116

; <label>:33                                      ; preds = %27
  %34 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %6, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %35 = extractvalue %dx.types.CBufRet.i32 %34, 2
  %36 = mul i32 %35, %10
  %37 = add i32 %36, %9
  %38 = mul i32 %35, %35
  %39 = icmp ult i32 %37, %38
  br i1 %39, label %40, label %49

; <label>:40                                      ; preds = %33
  %41 = mul i32 %35, %7
  %42 = mul i32 %35, %8
  %43 = add i32 %41, %9
  %44 = add i32 %42, %10
  %45 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %46 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %45, i32 0, i32 %43, i32 %44, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %47 = extractvalue %dx.types.ResRet.f32 %46, 0
  %48 = getelementptr [1024 x float], [1024 x float] addrspace(3)* @"\01?SharedTexelMoving@@3PAMA", i32 0, i32 %37
  store float %47, float addrspace(3)* %48, align 4, !tbaa !21
  br label %49

; <label>:49                                      ; preds = %40, %33
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  %50 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %6, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %51 = extractvalue %dx.types.CBufRet.i32 %50, 2
  %52 = mul i32 %51, %51
  %53 = icmp ugt i32 %52, 1
  br i1 %53, label %54, label %100

; <label>:54                                      ; preds = %49
  br label %55

; <label>:55                                      ; preds = %94, %54
  %56 = phi i32 [ %97, %94 ], [ %52, %54 ]
  %57 = phi i32 [ %95, %94 ], [ 0, %54 ]
  %58 = shl i32 %37, 2
  %59 = icmp ult i32 %58, %56
  br i1 %59, label %60, label %94

; <label>:60                                      ; preds = %55
  %61 = add i32 %57, %58
  %62 = getelementptr [1024 x float], [1024 x float] addrspace(3)* @"\01?SharedTexelMoving@@3PAMA", i32 0, i32 %61
  %63 = load float, float addrspace(3)* %62, align 4, !tbaa !21
  %64 = or i32 %58, 1
  %65 = icmp ult i32 %64, %56
  br i1 %65, label %66, label %71

; <label>:66                                      ; preds = %60
  %67 = add i32 %57, %64
  %68 = getelementptr [1024 x float], [1024 x float] addrspace(3)* @"\01?SharedTexelMoving@@3PAMA", i32 0, i32 %67
  %69 = load float, float addrspace(3)* %68, align 4, !tbaa !21
  %70 = fadd fast float %69, %63
  br label %71

; <label>:71                                      ; preds = %66, %60
  %72 = phi float [ %70, %66 ], [ %63, %60 ]
  %73 = or i32 %58, 2
  %74 = icmp ult i32 %73, %56
  br i1 %74, label %75, label %80

; <label>:75                                      ; preds = %71
  %76 = add i32 %57, %73
  %77 = getelementptr [1024 x float], [1024 x float] addrspace(3)* @"\01?SharedTexelMoving@@3PAMA", i32 0, i32 %76
  %78 = load float, float addrspace(3)* %77, align 4, !tbaa !21
  %79 = fadd fast float %78, %72
  br label %80

; <label>:80                                      ; preds = %75, %71
  %81 = phi float [ %79, %75 ], [ %72, %71 ]
  %82 = or i32 %58, 3
  %83 = icmp ult i32 %82, %56
  br i1 %83, label %84, label %89

; <label>:84                                      ; preds = %80
  %85 = add i32 %57, %82
  %86 = getelementptr [1024 x float], [1024 x float] addrspace(3)* @"\01?SharedTexelMoving@@3PAMA", i32 0, i32 %85
  %87 = load float, float addrspace(3)* %86, align 4, !tbaa !21
  %88 = fadd fast float %87, %81
  br label %89

; <label>:89                                      ; preds = %84, %80
  %90 = phi float [ %88, %84 ], [ %81, %80 ]
  %91 = add i32 %56, %37
  %92 = add i32 %91, %57
  %93 = getelementptr [1024 x float], [1024 x float] addrspace(3)* @"\01?SharedTexelMoving@@3PAMA", i32 0, i32 %92
  store float %90, float addrspace(3)* %93, align 4, !tbaa !21
  br label %94

; <label>:94                                      ; preds = %89, %55
  %95 = add i32 %57, %56
  %96 = add i32 %56, 3
  %97 = lshr i32 %96, 2
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  %98 = icmp ugt i32 %96, 7
  br i1 %98, label %55, label %99

; <label>:99                                      ; preds = %94
  br label %100

; <label>:100                                     ; preds = %99, %49
  %101 = phi i32 [ 0, %49 ], [ %95, %99 ]
  %102 = icmp eq i32 %37, 0
  br i1 %102, label %103, label %116

; <label>:103                                     ; preds = %100
  %104 = getelementptr [1024 x float], [1024 x float] addrspace(3)* @"\01?SharedTexelMoving@@3PAMA", i32 0, i32 %101
  %105 = load float, float addrspace(3)* %104, align 4, !tbaa !21
  %106 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %6, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %107 = extractvalue %dx.types.CBufRet.i32 %106, 2
  %108 = mul i32 %107, %107
  %109 = uitofp i32 %108 to float
  %110 = fdiv fast float %105, %109
  %111 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %6, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %112 = extractvalue %dx.types.CBufRet.f32 %111, 0
  %113 = fcmp fast ogt float %112, 0.000000e+00
  %114 = select i1 %113, float 1.000000e+00, float %110
  %115 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 270 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<UNormF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %115, i32 %7, i32 %8, i32 undef, float %114, float %114, float %114, float %114, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %116

; <label>:116                                     ; preds = %103, %100, %27, %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadIdInGroup.i32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: noduplicate nounwind
declare void @dx.op.barrier(i32, i32) #3

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }
attributes #3 = { noduplicate nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!17}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !12, !15, null}
!5 = !{!6, !8, !10}
!6 = !{i32 0, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 5}
!8 = !{i32 1, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 1, i32 1, i32 12, i32 0, !9}
!9 = !{i32 1, i32 4}
!10 = !{i32 2, %"class.Texture2D<float>"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !11}
!11 = !{i32 0, i32 9}
!12 = !{!13}
!13 = !{i32 0, %"class.RWTexture2D<float>"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !14}
!14 = !{i32 0, i32 14}
!15 = !{!16}
!16 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 312, null}
!17 = !{void ()* @ScreenProbeCalculateMovingCS, !"ScreenProbeCalculateMovingCS", null, !4, !18}
!18 = !{i32 0, i64 16, i32 4, !19, i32 5, !20}
!19 = !{i32 16, i32 16, i32 1}
!20 = !{i32 0}
!21 = !{!22, !22, i64 0}
!22 = !{!"float", !23, i64 0}
!23 = !{!"omnipotent char", !24, i64 0}
!24 = !{!"Simple C/C++ TBAA"}
