;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 6d5e36f6fdae1aa6927033b8694317d8
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(64,1,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       float4 SubsurfaceParams;                      ; Offset:   16
;       float2 Output_Extent;                         ; Offset:   64
;       float2 Output_ExtentInverse;                  ; Offset:   72
;       float2 Output_ScreenPosToViewportScale;       ; Offset:   80
;       float2 Output_ScreenPosToViewportBias;        ; Offset:   88
;       uint2 Output_ViewportMin;                     ; Offset:   96
;       uint2 Output_ViewportMax;                     ; Offset:  104
;       float2 Output_ViewportSize;                   ; Offset:  112
;       float2 Output_ViewportSizeInverse;            ; Offset:  120
;       float2 Output_UVViewportMin;                  ; Offset:  128
;       float2 Output_UVViewportMax;                  ; Offset:  136
;       float2 Output_UVViewportSize;                 ; Offset:  144
;       float2 Output_UVViewportSizeInverse;          ; Offset:  152
;       float2 Output_UVViewportBilinearMin;          ; Offset:  160
;       float2 Output_UVViewportBilinearMax;          ; Offset:  168
;       float2 SubsurfaceInput0_Extent;               ; Offset:  224
;       float2 SubsurfaceInput0_ExtentInverse;        ; Offset:  232
;       float2 SubsurfaceInput0_ScreenPosToViewportScale;; Offset:  240
;       float2 SubsurfaceInput0_ScreenPosToViewportBias;; Offset:  248
;       uint2 SubsurfaceInput0_ViewportMin;           ; Offset:  256
;       uint2 SubsurfaceInput0_ViewportMax;           ; Offset:  264
;       float2 SubsurfaceInput0_ViewportSize;         ; Offset:  272
;       float2 SubsurfaceInput0_ViewportSizeInverse;  ; Offset:  280
;       float2 SubsurfaceInput0_UVViewportMin;        ; Offset:  288
;       float2 SubsurfaceInput0_UVViewportMax;        ; Offset:  296
;       float2 SubsurfaceInput0_UVViewportSize;       ; Offset:  304
;       float2 SubsurfaceInput0_UVViewportSizeInverse;; Offset:  312
;       float2 SubsurfaceInput0_UVViewportBilinearMin;; Offset:  320
;       float2 SubsurfaceInput0_UVViewportBilinearMax;; Offset:  328
;       float2 SubsurfaceInput1_Extent;               ; Offset:  368
;       float2 SubsurfaceInput1_ExtentInverse;        ; Offset:  376
;       float2 SubsurfaceInput1_ScreenPosToViewportScale;; Offset:  384
;       float2 SubsurfaceInput1_ScreenPosToViewportBias;; Offset:  392
;       uint2 SubsurfaceInput1_ViewportMin;           ; Offset:  400
;       uint2 SubsurfaceInput1_ViewportMax;           ; Offset:  408
;       float2 SubsurfaceInput1_ViewportSize;         ; Offset:  416
;       float2 SubsurfaceInput1_ViewportSizeInverse;  ; Offset:  424
;       float2 SubsurfaceInput1_UVViewportMin;        ; Offset:  432
;       float2 SubsurfaceInput1_UVViewportMax;        ; Offset:  440
;       float2 SubsurfaceInput1_UVViewportSize;       ; Offset:  448
;       float2 SubsurfaceInput1_UVViewportSizeInverse;; Offset:  456
;       float2 SubsurfaceInput1_UVViewportBilinearMin;; Offset:  464
;       float2 SubsurfaceInput1_UVViewportBilinearMax;; Offset:  472
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   480
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; SceneTexturesStruct_PointClampSampler   sampler      NA          NA      S0             s0     1
; SubsurfaceSampler0                sampler      NA          NA      S1             s1     1
; View_SSProfilesTexture            texture     f32          2d      T0             t0     1
; SceneTexturesStruct_GBufferBTexture   texture     f32          2d      T1             t1     1
; SceneTexturesStruct_GBufferDTexture   texture     f32          2d      T2             t2     1
; SubsurfaceInput0_Texture          texture     f32          2d      T3             t3     1
; GroupBuffer                       texture     u32         buf      T4             t4     1
; SSSColorUAV                           UAV     f32          2d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }
%_RootShaderParameters = type { <4 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x i32>, <2 x i32>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x i32>, <2 x i32>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x i32>, <2 x i32>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float> }
%struct.SamplerState = type { i32 }

define void @MainIndirectDispatchCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 13, i32 480 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %11 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %12 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)  ; FlattenedThreadIdInGroup()
  %13 = shl i32 %11, 1
  %14 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %15 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %14, i32 %13, i32 undef)  ; BufferLoad(srv,index,wot)
  %16 = extractvalue %dx.types.ResRet.i32 %15, 0
  %17 = or i32 %13, 1
  %18 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %14, i32 %17, i32 undef)  ; BufferLoad(srv,index,wot)
  %19 = extractvalue %dx.types.ResRet.i32 %18, 0
  %20 = uitofp i32 %16 to float
  %21 = uitofp i32 %19 to float
  %22 = fmul fast float %20, 8.000000e+00
  %23 = fmul fast float %21, 8.000000e+00
  %24 = and i32 %12, 7
  %25 = uitofp i32 %24 to float
  %26 = lshr i32 %12, 3
  %27 = uitofp i32 %26 to float
  %28 = fadd fast float %22, %25
  %29 = fadd fast float %23, %27
  %30 = fptoui float %28 to i32
  %31 = fptoui float %29 to i32
  %32 = and i32 %30, 536870911
  %33 = and i32 %31, 536870911
  %34 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %10, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %35 = extractvalue %dx.types.CBufRet.i32 %34, 0
  %36 = extractvalue %dx.types.CBufRet.i32 %34, 1
  %37 = add i32 %32, %35
  %38 = add i32 %33, %36
  %39 = uitofp i32 %37 to float
  %40 = uitofp i32 %38 to float
  %41 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %42 = extractvalue %dx.types.CBufRet.f32 %41, 2
  %43 = extractvalue %dx.types.CBufRet.f32 %41, 3
  %44 = fadd fast float %39, 5.000000e-01
  %45 = fadd fast float %40, 5.000000e-01
  %46 = fmul fast float %44, %42
  %47 = fmul fast float %45, %43
  %48 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %49 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %50 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %48, %dx.types.Handle %49, float %46, float %47, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %51 = extractvalue %dx.types.ResRet.f32 %50, 3
  %52 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %53 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %52, %dx.types.Handle %49, float %46, float %47, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %54 = extractvalue %dx.types.ResRet.f32 %53, 0
  %55 = fmul fast float %51, 2.550000e+02
  %56 = fadd fast float %55, 5.000000e-01
  %57 = fptoui float %56 to i32
  %58 = and i32 %57, 14
  %59 = icmp eq i32 %58, 2
  %60 = and i32 %57, 12
  %61 = icmp eq i32 %60, 4
  %62 = or i1 %61, %59
  %63 = icmp eq i32 %58, 8
  %64 = or i1 %63, %62
  %65 = fmul fast float %54, 2.550000e+02
  %66 = fadd fast float %65, 5.000000e-01
  %67 = fptoui float %66 to i32
  %68 = select i1 %64, i32 %67, i32 0
  %69 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %70 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %69, i32 0, i32 4, i32 %68, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %71 = extractvalue %dx.types.ResRet.f32 %70, 3
  %72 = call float @dx.op.unary.f32(i32 6, float %71)  ; FAbs(value)
  %73 = fcmp fast olt float %72, 0x3F847AE140000000
  br i1 %73, label %1046, label %74, !dx.controlflow.hints !24

; <label>:74                                      ; preds = %0
  %75 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %76 = extractvalue %dx.types.CBufRet.f32 %75, 2
  %77 = extractvalue %dx.types.CBufRet.f32 %75, 3
  %78 = extractvalue %dx.types.CBufRet.f32 %75, 0
  %79 = extractvalue %dx.types.CBufRet.f32 %75, 1
  %80 = call float @dx.op.binary.f32(i32 35, float %46, float %78)  ; FMax(a,b)
  %81 = call float @dx.op.binary.f32(i32 35, float %47, float %79)  ; FMax(a,b)
  %82 = call float @dx.op.binary.f32(i32 36, float %80, float %76)  ; FMin(a,b)
  %83 = call float @dx.op.binary.f32(i32 36, float %81, float %77)  ; FMin(a,b)
  %84 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %85 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %86 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %84, %dx.types.Handle %85, float %82, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %87 = extractvalue %dx.types.ResRet.f32 %86, 3
  %88 = fcmp fast ogt float %87, 0.000000e+00
  br i1 %88, label %89, label %1033, !dx.controlflow.hints !25

; <label>:89                                      ; preds = %74
  %90 = extractvalue %dx.types.ResRet.f32 %86, 2
  %91 = extractvalue %dx.types.ResRet.f32 %86, 1
  %92 = extractvalue %dx.types.ResRet.f32 %86, 0
  %93 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %94 = extractvalue %dx.types.CBufRet.f32 %93, 0
  %95 = extractvalue %dx.types.CBufRet.f32 %93, 3
  %96 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %97 = extractvalue %dx.types.CBufRet.f32 %96, 0
  %98 = extractvalue %dx.types.CBufRet.f32 %93, 2
  %99 = extractvalue %dx.types.ResRet.f32 %53, 3
  %100 = and i32 %57, 15
  %101 = select i1 %64, float %99, float 0.000000e+00
  %102 = icmp eq i32 %100, 5
  %103 = icmp eq i32 %100, 9
  %104 = or i1 %102, %103
  %105 = select i1 %104, float 1.000000e+00, float 0.000000e+00
  %106 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %107 = extractvalue %dx.types.CBufRet.f32 %106, 0
  %108 = fdiv fast float %107, %87
  %109 = fmul fast float %94, 1.024000e+03
  %110 = fmul fast float %109, %95
  %111 = fmul fast float %110, %97
  %112 = fmul fast float %111, %98
  %113 = fmul fast float %112, %108
  %114 = fmul fast float %113, %105
  %115 = fmul fast float %114, %101
  %116 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %69, i32 0, i32 19, i32 %68, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %117 = extractvalue %dx.types.ResRet.f32 %116, 0
  %118 = extractvalue %dx.types.ResRet.f32 %116, 1
  %119 = extractvalue %dx.types.ResRet.f32 %116, 2
  %120 = fadd fast float %117, 0x3EE4F8B580000000
  %121 = fadd fast float %118, 0x3EE4F8B580000000
  %122 = fadd fast float %119, 0x3EE4F8B580000000
  %123 = fmul fast float %117, %92
  %124 = fmul fast float %118, %91
  %125 = fmul fast float %119, %90
  %126 = extractvalue %dx.types.ResRet.f32 %70, 0
  %127 = extractvalue %dx.types.ResRet.f32 %70, 1
  %128 = extractvalue %dx.types.ResRet.f32 %70, 2
  %129 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %69, i32 0, i32 20, i32 %68, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %130 = extractvalue %dx.types.ResRet.f32 %129, 0
  %131 = extractvalue %dx.types.ResRet.f32 %129, 1
  %132 = extractvalue %dx.types.ResRet.f32 %129, 2
  %133 = extractvalue %dx.types.ResRet.f32 %129, 3
  %134 = fmul fast float %115, 3.000000e+00
  %135 = fmul fast float %134, %133
  %136 = fsub fast float %47, %135
  %137 = call float @dx.op.binary.f32(i32 35, float %136, float %79)  ; FMax(a,b)
  %138 = call float @dx.op.binary.f32(i32 36, float %137, float %77)  ; FMin(a,b)
  %139 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %84, %dx.types.Handle %85, float %82, float %138, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %140 = extractvalue %dx.types.ResRet.f32 %139, 0
  %141 = extractvalue %dx.types.ResRet.f32 %139, 1
  %142 = extractvalue %dx.types.ResRet.f32 %139, 2
  %143 = extractvalue %dx.types.ResRet.f32 %139, 3
  %144 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %48, %dx.types.Handle %49, float %82, float %138, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %145 = extractvalue %dx.types.ResRet.f32 %144, 3
  %146 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %52, %dx.types.Handle %49, float %82, float %138, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %147 = extractvalue %dx.types.ResRet.f32 %146, 0
  %148 = fmul fast float %145, 2.550000e+02
  %149 = fadd fast float %148, 5.000000e-01
  %150 = fptoui float %149 to i32
  %151 = and i32 %150, 14
  %152 = icmp eq i32 %151, 2
  %153 = and i32 %150, 12
  %154 = icmp eq i32 %153, 4
  %155 = or i1 %154, %152
  %156 = icmp eq i32 %151, 8
  %157 = or i1 %156, %155
  %158 = fmul fast float %147, 2.550000e+02
  %159 = fadd fast float %158, 5.000000e-01
  %160 = fptoui float %159 to i32
  %161 = select i1 %157, i32 %160, i32 0
  %162 = icmp eq i32 %161, %68
  %163 = select i1 %162, float 1.000000e+00, float %126
  %164 = select i1 %162, float 1.000000e+00, float %127
  %165 = select i1 %162, float 1.000000e+00, float %128
  %166 = fcmp fast ogt float %143, 0.000000e+00
  %167 = uitofp i1 %166 to float
  %168 = extractvalue %dx.types.CBufRet.f32 %106, 1
  %169 = fmul fast float %168, 0x3F9EB851E0000000
  %170 = fsub fast float %87, %143
  %171 = call float @dx.op.unary.f32(i32 6, float %170)  ; FAbs(value)
  %172 = fmul fast float %169, %171
  %173 = call float @dx.op.unary.f32(i32 7, float %172)  ; Saturate(value)
  %174 = fsub fast float 1.000000e+00, %173
  %175 = fmul fast float %174, %167
  %176 = fmul fast float %175, %140
  %177 = fmul fast float %176, %163
  %178 = fmul fast float %175, %141
  %179 = fmul fast float %178, %164
  %180 = fmul fast float %175, %142
  %181 = fmul fast float %180, %165
  %182 = fadd fast float %135, %47
  %183 = call float @dx.op.binary.f32(i32 35, float %182, float %79)  ; FMax(a,b)
  %184 = call float @dx.op.binary.f32(i32 36, float %183, float %77)  ; FMin(a,b)
  %185 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %84, %dx.types.Handle %85, float %82, float %184, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %186 = extractvalue %dx.types.ResRet.f32 %185, 0
  %187 = extractvalue %dx.types.ResRet.f32 %185, 1
  %188 = extractvalue %dx.types.ResRet.f32 %185, 2
  %189 = extractvalue %dx.types.ResRet.f32 %185, 3
  %190 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %48, %dx.types.Handle %49, float %82, float %184, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %191 = extractvalue %dx.types.ResRet.f32 %190, 3
  %192 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %52, %dx.types.Handle %49, float %82, float %184, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %193 = extractvalue %dx.types.ResRet.f32 %192, 0
  %194 = fmul fast float %191, 2.550000e+02
  %195 = fadd fast float %194, 5.000000e-01
  %196 = fptoui float %195 to i32
  %197 = and i32 %196, 14
  %198 = icmp eq i32 %197, 2
  %199 = and i32 %196, 12
  %200 = icmp eq i32 %199, 4
  %201 = or i1 %200, %198
  %202 = icmp eq i32 %197, 8
  %203 = or i1 %202, %201
  %204 = fmul fast float %193, 2.550000e+02
  %205 = fadd fast float %204, 5.000000e-01
  %206 = fptoui float %205 to i32
  %207 = select i1 %203, i32 %206, i32 0
  %208 = icmp eq i32 %207, %68
  %209 = select i1 %208, float 1.000000e+00, float %126
  %210 = select i1 %208, float 1.000000e+00, float %127
  %211 = select i1 %208, float 1.000000e+00, float %128
  %212 = fcmp fast ogt float %189, 0.000000e+00
  %213 = uitofp i1 %212 to float
  %214 = fsub fast float %87, %189
  %215 = call float @dx.op.unary.f32(i32 6, float %214)  ; FAbs(value)
  %216 = fmul fast float %169, %215
  %217 = call float @dx.op.unary.f32(i32 7, float %216)  ; Saturate(value)
  %218 = fsub fast float 1.000000e+00, %217
  %219 = fmul fast float %218, %213
  %220 = fmul fast float %219, %186
  %221 = fmul fast float %220, %209
  %222 = fmul fast float %219, %187
  %223 = fmul fast float %222, %210
  %224 = fmul fast float %219, %188
  %225 = fmul fast float %224, %211
  %226 = fadd fast float %221, %177
  %227 = fadd fast float %223, %179
  %228 = fadd fast float %225, %181
  %229 = fadd fast float %219, %175
  %230 = fmul fast float %226, %130
  %231 = fmul fast float %227, %131
  %232 = fmul fast float %228, %132
  %233 = fadd fast float %230, %123
  %234 = fadd fast float %231, %124
  %235 = fadd fast float %232, %125
  %236 = fmul fast float %229, %130
  %237 = fmul fast float %229, %131
  %238 = fmul fast float %229, %132
  %239 = fadd fast float %120, %236
  %240 = fadd fast float %121, %237
  %241 = fadd fast float %122, %238
  %242 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %69, i32 0, i32 21, i32 %68, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %243 = extractvalue %dx.types.ResRet.f32 %242, 0
  %244 = extractvalue %dx.types.ResRet.f32 %242, 1
  %245 = extractvalue %dx.types.ResRet.f32 %242, 2
  %246 = extractvalue %dx.types.ResRet.f32 %242, 3
  %247 = fmul fast float %134, %246
  %248 = fsub fast float %47, %247
  %249 = call float @dx.op.binary.f32(i32 35, float %248, float %79)  ; FMax(a,b)
  %250 = call float @dx.op.binary.f32(i32 36, float %249, float %77)  ; FMin(a,b)
  %251 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %84, %dx.types.Handle %85, float %82, float %250, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %252 = extractvalue %dx.types.ResRet.f32 %251, 0
  %253 = extractvalue %dx.types.ResRet.f32 %251, 1
  %254 = extractvalue %dx.types.ResRet.f32 %251, 2
  %255 = extractvalue %dx.types.ResRet.f32 %251, 3
  %256 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %48, %dx.types.Handle %49, float %82, float %250, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %257 = extractvalue %dx.types.ResRet.f32 %256, 3
  %258 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %52, %dx.types.Handle %49, float %82, float %250, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %259 = extractvalue %dx.types.ResRet.f32 %258, 0
  %260 = fmul fast float %257, 2.550000e+02
  %261 = fadd fast float %260, 5.000000e-01
  %262 = fptoui float %261 to i32
  %263 = and i32 %262, 14
  %264 = icmp eq i32 %263, 2
  %265 = and i32 %262, 12
  %266 = icmp eq i32 %265, 4
  %267 = or i1 %266, %264
  %268 = icmp eq i32 %263, 8
  %269 = or i1 %268, %267
  %270 = fmul fast float %259, 2.550000e+02
  %271 = fadd fast float %270, 5.000000e-01
  %272 = fptoui float %271 to i32
  %273 = select i1 %269, i32 %272, i32 0
  %274 = icmp eq i32 %273, %68
  %275 = select i1 %274, float 1.000000e+00, float %126
  %276 = select i1 %274, float 1.000000e+00, float %127
  %277 = select i1 %274, float 1.000000e+00, float %128
  %278 = fcmp fast ogt float %255, 0.000000e+00
  %279 = uitofp i1 %278 to float
  %280 = fsub fast float %87, %255
  %281 = call float @dx.op.unary.f32(i32 6, float %280)  ; FAbs(value)
  %282 = fmul fast float %169, %281
  %283 = call float @dx.op.unary.f32(i32 7, float %282)  ; Saturate(value)
  %284 = fsub fast float 1.000000e+00, %283
  %285 = fmul fast float %284, %279
  %286 = fmul fast float %285, %252
  %287 = fmul fast float %286, %275
  %288 = fmul fast float %285, %253
  %289 = fmul fast float %288, %276
  %290 = fmul fast float %285, %254
  %291 = fmul fast float %290, %277
  %292 = fadd fast float %247, %47
  %293 = call float @dx.op.binary.f32(i32 35, float %292, float %79)  ; FMax(a,b)
  %294 = call float @dx.op.binary.f32(i32 36, float %293, float %77)  ; FMin(a,b)
  %295 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %84, %dx.types.Handle %85, float %82, float %294, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %296 = extractvalue %dx.types.ResRet.f32 %295, 0
  %297 = extractvalue %dx.types.ResRet.f32 %295, 1
  %298 = extractvalue %dx.types.ResRet.f32 %295, 2
  %299 = extractvalue %dx.types.ResRet.f32 %295, 3
  %300 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %48, %dx.types.Handle %49, float %82, float %294, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %301 = extractvalue %dx.types.ResRet.f32 %300, 3
  %302 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %52, %dx.types.Handle %49, float %82, float %294, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %303 = extractvalue %dx.types.ResRet.f32 %302, 0
  %304 = fmul fast float %301, 2.550000e+02
  %305 = fadd fast float %304, 5.000000e-01
  %306 = fptoui float %305 to i32
  %307 = and i32 %306, 14
  %308 = icmp eq i32 %307, 2
  %309 = and i32 %306, 12
  %310 = icmp eq i32 %309, 4
  %311 = or i1 %310, %308
  %312 = icmp eq i32 %307, 8
  %313 = or i1 %312, %311
  %314 = fmul fast float %303, 2.550000e+02
  %315 = fadd fast float %314, 5.000000e-01
  %316 = fptoui float %315 to i32
  %317 = select i1 %313, i32 %316, i32 0
  %318 = icmp eq i32 %317, %68
  %319 = select i1 %318, float 1.000000e+00, float %126
  %320 = select i1 %318, float 1.000000e+00, float %127
  %321 = select i1 %318, float 1.000000e+00, float %128
  %322 = fcmp fast ogt float %299, 0.000000e+00
  %323 = uitofp i1 %322 to float
  %324 = fsub fast float %87, %299
  %325 = call float @dx.op.unary.f32(i32 6, float %324)  ; FAbs(value)
  %326 = fmul fast float %169, %325
  %327 = call float @dx.op.unary.f32(i32 7, float %326)  ; Saturate(value)
  %328 = fsub fast float 1.000000e+00, %327
  %329 = fmul fast float %328, %323
  %330 = fmul fast float %329, %296
  %331 = fmul fast float %330, %319
  %332 = fmul fast float %329, %297
  %333 = fmul fast float %332, %320
  %334 = fmul fast float %329, %298
  %335 = fmul fast float %334, %321
  %336 = fadd fast float %331, %287
  %337 = fadd fast float %333, %289
  %338 = fadd fast float %335, %291
  %339 = fadd fast float %329, %285
  %340 = fmul fast float %336, %243
  %341 = fmul fast float %337, %244
  %342 = fmul fast float %338, %245
  %343 = fadd fast float %233, %340
  %344 = fadd fast float %234, %341
  %345 = fadd fast float %235, %342
  %346 = fmul fast float %339, %243
  %347 = fmul fast float %339, %244
  %348 = fmul fast float %339, %245
  %349 = fadd fast float %239, %346
  %350 = fadd fast float %240, %347
  %351 = fadd fast float %241, %348
  %352 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %69, i32 0, i32 22, i32 %68, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %353 = extractvalue %dx.types.ResRet.f32 %352, 0
  %354 = extractvalue %dx.types.ResRet.f32 %352, 1
  %355 = extractvalue %dx.types.ResRet.f32 %352, 2
  %356 = extractvalue %dx.types.ResRet.f32 %352, 3
  %357 = fmul fast float %134, %356
  %358 = fsub fast float %47, %357
  %359 = call float @dx.op.binary.f32(i32 35, float %358, float %79)  ; FMax(a,b)
  %360 = call float @dx.op.binary.f32(i32 36, float %359, float %77)  ; FMin(a,b)
  %361 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %84, %dx.types.Handle %85, float %82, float %360, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %362 = extractvalue %dx.types.ResRet.f32 %361, 0
  %363 = extractvalue %dx.types.ResRet.f32 %361, 1
  %364 = extractvalue %dx.types.ResRet.f32 %361, 2
  %365 = extractvalue %dx.types.ResRet.f32 %361, 3
  %366 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %48, %dx.types.Handle %49, float %82, float %360, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %367 = extractvalue %dx.types.ResRet.f32 %366, 3
  %368 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %52, %dx.types.Handle %49, float %82, float %360, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %369 = extractvalue %dx.types.ResRet.f32 %368, 0
  %370 = fmul fast float %367, 2.550000e+02
  %371 = fadd fast float %370, 5.000000e-01
  %372 = fptoui float %371 to i32
  %373 = and i32 %372, 14
  %374 = icmp eq i32 %373, 2
  %375 = and i32 %372, 12
  %376 = icmp eq i32 %375, 4
  %377 = or i1 %376, %374
  %378 = icmp eq i32 %373, 8
  %379 = or i1 %378, %377
  %380 = fmul fast float %369, 2.550000e+02
  %381 = fadd fast float %380, 5.000000e-01
  %382 = fptoui float %381 to i32
  %383 = select i1 %379, i32 %382, i32 0
  %384 = icmp eq i32 %383, %68
  %385 = select i1 %384, float 1.000000e+00, float %126
  %386 = select i1 %384, float 1.000000e+00, float %127
  %387 = select i1 %384, float 1.000000e+00, float %128
  %388 = fcmp fast ogt float %365, 0.000000e+00
  %389 = uitofp i1 %388 to float
  %390 = fsub fast float %87, %365
  %391 = call float @dx.op.unary.f32(i32 6, float %390)  ; FAbs(value)
  %392 = fmul fast float %169, %391
  %393 = call float @dx.op.unary.f32(i32 7, float %392)  ; Saturate(value)
  %394 = fsub fast float 1.000000e+00, %393
  %395 = fmul fast float %394, %389
  %396 = fmul fast float %395, %362
  %397 = fmul fast float %396, %385
  %398 = fmul fast float %395, %363
  %399 = fmul fast float %398, %386
  %400 = fmul fast float %395, %364
  %401 = fmul fast float %400, %387
  %402 = fadd fast float %357, %47
  %403 = call float @dx.op.binary.f32(i32 35, float %402, float %79)  ; FMax(a,b)
  %404 = call float @dx.op.binary.f32(i32 36, float %403, float %77)  ; FMin(a,b)
  %405 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %84, %dx.types.Handle %85, float %82, float %404, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %406 = extractvalue %dx.types.ResRet.f32 %405, 0
  %407 = extractvalue %dx.types.ResRet.f32 %405, 1
  %408 = extractvalue %dx.types.ResRet.f32 %405, 2
  %409 = extractvalue %dx.types.ResRet.f32 %405, 3
  %410 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %48, %dx.types.Handle %49, float %82, float %404, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %411 = extractvalue %dx.types.ResRet.f32 %410, 3
  %412 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %52, %dx.types.Handle %49, float %82, float %404, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %413 = extractvalue %dx.types.ResRet.f32 %412, 0
  %414 = fmul fast float %411, 2.550000e+02
  %415 = fadd fast float %414, 5.000000e-01
  %416 = fptoui float %415 to i32
  %417 = and i32 %416, 14
  %418 = icmp eq i32 %417, 2
  %419 = and i32 %416, 12
  %420 = icmp eq i32 %419, 4
  %421 = or i1 %420, %418
  %422 = icmp eq i32 %417, 8
  %423 = or i1 %422, %421
  %424 = fmul fast float %413, 2.550000e+02
  %425 = fadd fast float %424, 5.000000e-01
  %426 = fptoui float %425 to i32
  %427 = select i1 %423, i32 %426, i32 0
  %428 = icmp eq i32 %427, %68
  %429 = select i1 %428, float 1.000000e+00, float %126
  %430 = select i1 %428, float 1.000000e+00, float %127
  %431 = select i1 %428, float 1.000000e+00, float %128
  %432 = fcmp fast ogt float %409, 0.000000e+00
  %433 = uitofp i1 %432 to float
  %434 = fsub fast float %87, %409
  %435 = call float @dx.op.unary.f32(i32 6, float %434)  ; FAbs(value)
  %436 = fmul fast float %169, %435
  %437 = call float @dx.op.unary.f32(i32 7, float %436)  ; Saturate(value)
  %438 = fsub fast float 1.000000e+00, %437
  %439 = fmul fast float %438, %433
  %440 = fmul fast float %439, %406
  %441 = fmul fast float %440, %429
  %442 = fmul fast float %439, %407
  %443 = fmul fast float %442, %430
  %444 = fmul fast float %439, %408
  %445 = fmul fast float %444, %431
  %446 = fadd fast float %441, %397
  %447 = fadd fast float %443, %399
  %448 = fadd fast float %445, %401
  %449 = fadd fast float %439, %395
  %450 = fmul fast float %446, %353
  %451 = fmul fast float %447, %354
  %452 = fmul fast float %448, %355
  %453 = fadd fast float %343, %450
  %454 = fadd fast float %344, %451
  %455 = fadd fast float %345, %452
  %456 = fmul fast float %449, %353
  %457 = fmul fast float %449, %354
  %458 = fmul fast float %449, %355
  %459 = fadd fast float %349, %456
  %460 = fadd fast float %350, %457
  %461 = fadd fast float %351, %458
  %462 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %69, i32 0, i32 23, i32 %68, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %463 = extractvalue %dx.types.ResRet.f32 %462, 0
  %464 = extractvalue %dx.types.ResRet.f32 %462, 1
  %465 = extractvalue %dx.types.ResRet.f32 %462, 2
  %466 = extractvalue %dx.types.ResRet.f32 %462, 3
  %467 = fmul fast float %134, %466
  %468 = fsub fast float %47, %467
  %469 = call float @dx.op.binary.f32(i32 35, float %468, float %79)  ; FMax(a,b)
  %470 = call float @dx.op.binary.f32(i32 36, float %469, float %77)  ; FMin(a,b)
  %471 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %84, %dx.types.Handle %85, float %82, float %470, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %472 = extractvalue %dx.types.ResRet.f32 %471, 0
  %473 = extractvalue %dx.types.ResRet.f32 %471, 1
  %474 = extractvalue %dx.types.ResRet.f32 %471, 2
  %475 = extractvalue %dx.types.ResRet.f32 %471, 3
  %476 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %48, %dx.types.Handle %49, float %82, float %470, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %477 = extractvalue %dx.types.ResRet.f32 %476, 3
  %478 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %52, %dx.types.Handle %49, float %82, float %470, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %479 = extractvalue %dx.types.ResRet.f32 %478, 0
  %480 = fmul fast float %477, 2.550000e+02
  %481 = fadd fast float %480, 5.000000e-01
  %482 = fptoui float %481 to i32
  %483 = and i32 %482, 14
  %484 = icmp eq i32 %483, 2
  %485 = and i32 %482, 12
  %486 = icmp eq i32 %485, 4
  %487 = or i1 %486, %484
  %488 = icmp eq i32 %483, 8
  %489 = or i1 %488, %487
  %490 = fmul fast float %479, 2.550000e+02
  %491 = fadd fast float %490, 5.000000e-01
  %492 = fptoui float %491 to i32
  %493 = select i1 %489, i32 %492, i32 0
  %494 = icmp eq i32 %493, %68
  %495 = select i1 %494, float 1.000000e+00, float %126
  %496 = select i1 %494, float 1.000000e+00, float %127
  %497 = select i1 %494, float 1.000000e+00, float %128
  %498 = fcmp fast ogt float %475, 0.000000e+00
  %499 = uitofp i1 %498 to float
  %500 = fsub fast float %87, %475
  %501 = call float @dx.op.unary.f32(i32 6, float %500)  ; FAbs(value)
  %502 = fmul fast float %169, %501
  %503 = call float @dx.op.unary.f32(i32 7, float %502)  ; Saturate(value)
  %504 = fsub fast float 1.000000e+00, %503
  %505 = fmul fast float %504, %499
  %506 = fmul fast float %505, %472
  %507 = fmul fast float %506, %495
  %508 = fmul fast float %505, %473
  %509 = fmul fast float %508, %496
  %510 = fmul fast float %505, %474
  %511 = fmul fast float %510, %497
  %512 = fadd fast float %467, %47
  %513 = call float @dx.op.binary.f32(i32 35, float %512, float %79)  ; FMax(a,b)
  %514 = call float @dx.op.binary.f32(i32 36, float %513, float %77)  ; FMin(a,b)
  %515 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %84, %dx.types.Handle %85, float %82, float %514, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %516 = extractvalue %dx.types.ResRet.f32 %515, 0
  %517 = extractvalue %dx.types.ResRet.f32 %515, 1
  %518 = extractvalue %dx.types.ResRet.f32 %515, 2
  %519 = extractvalue %dx.types.ResRet.f32 %515, 3
  %520 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %48, %dx.types.Handle %49, float %82, float %514, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %521 = extractvalue %dx.types.ResRet.f32 %520, 3
  %522 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %52, %dx.types.Handle %49, float %82, float %514, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %523 = extractvalue %dx.types.ResRet.f32 %522, 0
  %524 = fmul fast float %521, 2.550000e+02
  %525 = fadd fast float %524, 5.000000e-01
  %526 = fptoui float %525 to i32
  %527 = and i32 %526, 14
  %528 = icmp eq i32 %527, 2
  %529 = and i32 %526, 12
  %530 = icmp eq i32 %529, 4
  %531 = or i1 %530, %528
  %532 = icmp eq i32 %527, 8
  %533 = or i1 %532, %531
  %534 = fmul fast float %523, 2.550000e+02
  %535 = fadd fast float %534, 5.000000e-01
  %536 = fptoui float %535 to i32
  %537 = select i1 %533, i32 %536, i32 0
  %538 = icmp eq i32 %537, %68
  %539 = select i1 %538, float 1.000000e+00, float %126
  %540 = select i1 %538, float 1.000000e+00, float %127
  %541 = select i1 %538, float 1.000000e+00, float %128
  %542 = fcmp fast ogt float %519, 0.000000e+00
  %543 = uitofp i1 %542 to float
  %544 = fsub fast float %87, %519
  %545 = call float @dx.op.unary.f32(i32 6, float %544)  ; FAbs(value)
  %546 = fmul fast float %169, %545
  %547 = call float @dx.op.unary.f32(i32 7, float %546)  ; Saturate(value)
  %548 = fsub fast float 1.000000e+00, %547
  %549 = fmul fast float %548, %543
  %550 = fmul fast float %549, %516
  %551 = fmul fast float %550, %539
  %552 = fmul fast float %549, %517
  %553 = fmul fast float %552, %540
  %554 = fmul fast float %549, %518
  %555 = fmul fast float %554, %541
  %556 = fadd fast float %551, %507
  %557 = fadd fast float %553, %509
  %558 = fadd fast float %555, %511
  %559 = fadd fast float %549, %505
  %560 = fmul fast float %556, %463
  %561 = fmul fast float %557, %464
  %562 = fmul fast float %558, %465
  %563 = fadd fast float %453, %560
  %564 = fadd fast float %454, %561
  %565 = fadd fast float %455, %562
  %566 = fmul fast float %559, %463
  %567 = fmul fast float %559, %464
  %568 = fmul fast float %559, %465
  %569 = fadd fast float %459, %566
  %570 = fadd fast float %460, %567
  %571 = fadd fast float %461, %568
  %572 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %69, i32 0, i32 24, i32 %68, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %573 = extractvalue %dx.types.ResRet.f32 %572, 0
  %574 = extractvalue %dx.types.ResRet.f32 %572, 1
  %575 = extractvalue %dx.types.ResRet.f32 %572, 2
  %576 = extractvalue %dx.types.ResRet.f32 %572, 3
  %577 = fmul fast float %134, %576
  %578 = fsub fast float %47, %577
  %579 = call float @dx.op.binary.f32(i32 35, float %578, float %79)  ; FMax(a,b)
  %580 = call float @dx.op.binary.f32(i32 36, float %579, float %77)  ; FMin(a,b)
  %581 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %84, %dx.types.Handle %85, float %82, float %580, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %582 = extractvalue %dx.types.ResRet.f32 %581, 0
  %583 = extractvalue %dx.types.ResRet.f32 %581, 1
  %584 = extractvalue %dx.types.ResRet.f32 %581, 2
  %585 = extractvalue %dx.types.ResRet.f32 %581, 3
  %586 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %587 = extractvalue %dx.types.CBufRet.f32 %586, 2
  %588 = extractvalue %dx.types.CBufRet.f32 %586, 3
  %589 = extractvalue %dx.types.CBufRet.f32 %586, 0
  %590 = extractvalue %dx.types.CBufRet.f32 %586, 1
  %591 = call float @dx.op.binary.f32(i32 35, float %46, float %589)  ; FMax(a,b)
  %592 = call float @dx.op.binary.f32(i32 35, float %578, float %590)  ; FMax(a,b)
  %593 = call float @dx.op.binary.f32(i32 36, float %591, float %587)  ; FMin(a,b)
  %594 = call float @dx.op.binary.f32(i32 36, float %592, float %588)  ; FMin(a,b)
  %595 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %596 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %597 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %595, %dx.types.Handle %596, float %593, float %594, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %598 = extractvalue %dx.types.ResRet.f32 %597, 3
  %599 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %600 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %599, %dx.types.Handle %596, float %593, float %594, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %601 = extractvalue %dx.types.ResRet.f32 %600, 0
  %602 = fmul fast float %598, 2.550000e+02
  %603 = fadd fast float %602, 5.000000e-01
  %604 = fptoui float %603 to i32
  %605 = and i32 %604, 14
  %606 = icmp eq i32 %605, 2
  %607 = and i32 %604, 12
  %608 = icmp eq i32 %607, 4
  %609 = or i1 %608, %606
  %610 = icmp eq i32 %605, 8
  %611 = or i1 %610, %609
  %612 = fmul fast float %601, 2.550000e+02
  %613 = fadd fast float %612, 5.000000e-01
  %614 = fptoui float %613 to i32
  %615 = select i1 %611, i32 %614, i32 0
  %616 = icmp eq i32 %615, %68
  %617 = select i1 %616, float 1.000000e+00, float %126
  %618 = select i1 %616, float 1.000000e+00, float %127
  %619 = select i1 %616, float 1.000000e+00, float %128
  %620 = fcmp fast ogt float %585, 0.000000e+00
  %621 = uitofp i1 %620 to float
  %622 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %623 = extractvalue %dx.types.CBufRet.f32 %622, 1
  %624 = fmul fast float %623, 0x3F9EB851E0000000
  %625 = fsub fast float %87, %585
  %626 = call float @dx.op.unary.f32(i32 6, float %625)  ; FAbs(value)
  %627 = fmul fast float %624, %626
  %628 = call float @dx.op.unary.f32(i32 7, float %627)  ; Saturate(value)
  %629 = fsub fast float 1.000000e+00, %628
  %630 = fmul fast float %629, %621
  %631 = fmul fast float %630, %582
  %632 = fmul fast float %631, %617
  %633 = fmul fast float %630, %583
  %634 = fmul fast float %633, %618
  %635 = fmul fast float %630, %584
  %636 = fmul fast float %635, %619
  %637 = fadd fast float %577, %47
  %638 = call float @dx.op.binary.f32(i32 35, float %637, float %590)  ; FMax(a,b)
  %639 = call float @dx.op.binary.f32(i32 36, float %638, float %588)  ; FMin(a,b)
  %640 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %641 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %642 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %640, %dx.types.Handle %641, float %593, float %639, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %643 = extractvalue %dx.types.ResRet.f32 %642, 0
  %644 = extractvalue %dx.types.ResRet.f32 %642, 1
  %645 = extractvalue %dx.types.ResRet.f32 %642, 2
  %646 = extractvalue %dx.types.ResRet.f32 %642, 3
  %647 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %595, %dx.types.Handle %596, float %593, float %639, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %648 = extractvalue %dx.types.ResRet.f32 %647, 3
  %649 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %599, %dx.types.Handle %596, float %593, float %639, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %650 = extractvalue %dx.types.ResRet.f32 %649, 0
  %651 = fmul fast float %648, 2.550000e+02
  %652 = fadd fast float %651, 5.000000e-01
  %653 = fptoui float %652 to i32
  %654 = and i32 %653, 14
  %655 = icmp eq i32 %654, 2
  %656 = and i32 %653, 12
  %657 = icmp eq i32 %656, 4
  %658 = or i1 %657, %655
  %659 = icmp eq i32 %654, 8
  %660 = or i1 %659, %658
  %661 = fmul fast float %650, 2.550000e+02
  %662 = fadd fast float %661, 5.000000e-01
  %663 = fptoui float %662 to i32
  %664 = select i1 %660, i32 %663, i32 0
  %665 = icmp eq i32 %664, %68
  %666 = select i1 %665, float 1.000000e+00, float %126
  %667 = select i1 %665, float 1.000000e+00, float %127
  %668 = select i1 %665, float 1.000000e+00, float %128
  %669 = fcmp fast ogt float %646, 0.000000e+00
  %670 = uitofp i1 %669 to float
  %671 = fsub fast float %87, %646
  %672 = call float @dx.op.unary.f32(i32 6, float %671)  ; FAbs(value)
  %673 = fmul fast float %624, %672
  %674 = call float @dx.op.unary.f32(i32 7, float %673)  ; Saturate(value)
  %675 = fsub fast float 1.000000e+00, %674
  %676 = fmul fast float %675, %670
  %677 = fmul fast float %676, %643
  %678 = fmul fast float %677, %666
  %679 = fmul fast float %676, %644
  %680 = fmul fast float %679, %667
  %681 = fmul fast float %676, %645
  %682 = fmul fast float %681, %668
  %683 = fadd fast float %678, %632
  %684 = fadd fast float %680, %634
  %685 = fadd fast float %682, %636
  %686 = fadd fast float %676, %630
  %687 = fmul fast float %683, %573
  %688 = fmul fast float %684, %574
  %689 = fmul fast float %685, %575
  %690 = fadd fast float %563, %687
  %691 = fadd fast float %564, %688
  %692 = fadd fast float %565, %689
  %693 = fmul fast float %686, %573
  %694 = fmul fast float %686, %574
  %695 = fmul fast float %686, %575
  %696 = fadd fast float %569, %693
  %697 = fadd fast float %570, %694
  %698 = fadd fast float %571, %695
  %699 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %700 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %699, i32 0, i32 25, i32 %68, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %701 = extractvalue %dx.types.ResRet.f32 %700, 0
  %702 = extractvalue %dx.types.ResRet.f32 %700, 1
  %703 = extractvalue %dx.types.ResRet.f32 %700, 2
  %704 = extractvalue %dx.types.ResRet.f32 %700, 3
  %705 = fmul fast float %134, %704
  %706 = fsub fast float %47, %705
  %707 = call float @dx.op.binary.f32(i32 35, float %706, float %590)  ; FMax(a,b)
  %708 = call float @dx.op.binary.f32(i32 36, float %707, float %588)  ; FMin(a,b)
  %709 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %640, %dx.types.Handle %641, float %593, float %708, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %710 = extractvalue %dx.types.ResRet.f32 %709, 0
  %711 = extractvalue %dx.types.ResRet.f32 %709, 1
  %712 = extractvalue %dx.types.ResRet.f32 %709, 2
  %713 = extractvalue %dx.types.ResRet.f32 %709, 3
  %714 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %595, %dx.types.Handle %596, float %593, float %708, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %715 = extractvalue %dx.types.ResRet.f32 %714, 3
  %716 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %599, %dx.types.Handle %596, float %593, float %708, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %717 = extractvalue %dx.types.ResRet.f32 %716, 0
  %718 = fmul fast float %715, 2.550000e+02
  %719 = fadd fast float %718, 5.000000e-01
  %720 = fptoui float %719 to i32
  %721 = and i32 %720, 14
  %722 = icmp eq i32 %721, 2
  %723 = and i32 %720, 12
  %724 = icmp eq i32 %723, 4
  %725 = or i1 %724, %722
  %726 = icmp eq i32 %721, 8
  %727 = or i1 %726, %725
  %728 = fmul fast float %717, 2.550000e+02
  %729 = fadd fast float %728, 5.000000e-01
  %730 = fptoui float %729 to i32
  %731 = select i1 %727, i32 %730, i32 0
  %732 = icmp eq i32 %731, %68
  %733 = select i1 %732, float 1.000000e+00, float %126
  %734 = select i1 %732, float 1.000000e+00, float %127
  %735 = select i1 %732, float 1.000000e+00, float %128
  %736 = fcmp fast ogt float %713, 0.000000e+00
  %737 = uitofp i1 %736 to float
  %738 = fsub fast float %87, %713
  %739 = call float @dx.op.unary.f32(i32 6, float %738)  ; FAbs(value)
  %740 = fmul fast float %624, %739
  %741 = call float @dx.op.unary.f32(i32 7, float %740)  ; Saturate(value)
  %742 = fsub fast float 1.000000e+00, %741
  %743 = fmul fast float %742, %737
  %744 = fmul fast float %743, %710
  %745 = fmul fast float %744, %733
  %746 = fmul fast float %743, %711
  %747 = fmul fast float %746, %734
  %748 = fmul fast float %743, %712
  %749 = fmul fast float %748, %735
  %750 = fadd fast float %705, %47
  %751 = call float @dx.op.binary.f32(i32 35, float %750, float %590)  ; FMax(a,b)
  %752 = call float @dx.op.binary.f32(i32 36, float %751, float %588)  ; FMin(a,b)
  %753 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %640, %dx.types.Handle %641, float %593, float %752, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %754 = extractvalue %dx.types.ResRet.f32 %753, 0
  %755 = extractvalue %dx.types.ResRet.f32 %753, 1
  %756 = extractvalue %dx.types.ResRet.f32 %753, 2
  %757 = extractvalue %dx.types.ResRet.f32 %753, 3
  %758 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %595, %dx.types.Handle %596, float %593, float %752, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %759 = extractvalue %dx.types.ResRet.f32 %758, 3
  %760 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %599, %dx.types.Handle %596, float %593, float %752, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %761 = extractvalue %dx.types.ResRet.f32 %760, 0
  %762 = fmul fast float %759, 2.550000e+02
  %763 = fadd fast float %762, 5.000000e-01
  %764 = fptoui float %763 to i32
  %765 = and i32 %764, 14
  %766 = icmp eq i32 %765, 2
  %767 = and i32 %764, 12
  %768 = icmp eq i32 %767, 4
  %769 = or i1 %768, %766
  %770 = icmp eq i32 %765, 8
  %771 = or i1 %770, %769
  %772 = fmul fast float %761, 2.550000e+02
  %773 = fadd fast float %772, 5.000000e-01
  %774 = fptoui float %773 to i32
  %775 = select i1 %771, i32 %774, i32 0
  %776 = icmp eq i32 %775, %68
  %777 = select i1 %776, float 1.000000e+00, float %126
  %778 = select i1 %776, float 1.000000e+00, float %127
  %779 = select i1 %776, float 1.000000e+00, float %128
  %780 = fcmp fast ogt float %757, 0.000000e+00
  %781 = uitofp i1 %780 to float
  %782 = fsub fast float %87, %757
  %783 = call float @dx.op.unary.f32(i32 6, float %782)  ; FAbs(value)
  %784 = fmul fast float %624, %783
  %785 = call float @dx.op.unary.f32(i32 7, float %784)  ; Saturate(value)
  %786 = fsub fast float 1.000000e+00, %785
  %787 = fmul fast float %786, %781
  %788 = fmul fast float %787, %754
  %789 = fmul fast float %788, %777
  %790 = fmul fast float %787, %755
  %791 = fmul fast float %790, %778
  %792 = fmul fast float %787, %756
  %793 = fmul fast float %792, %779
  %794 = fadd fast float %789, %745
  %795 = fadd fast float %791, %747
  %796 = fadd fast float %793, %749
  %797 = fadd fast float %787, %743
  %798 = fmul fast float %794, %701
  %799 = fmul fast float %795, %702
  %800 = fmul fast float %796, %703
  %801 = fadd fast float %690, %798
  %802 = fadd fast float %691, %799
  %803 = fadd fast float %692, %800
  %804 = fmul fast float %797, %701
  %805 = fmul fast float %797, %702
  %806 = fmul fast float %797, %703
  %807 = fadd fast float %696, %804
  %808 = fadd fast float %697, %805
  %809 = fadd fast float %698, %806
  %810 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %699, i32 0, i32 26, i32 %68, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %811 = extractvalue %dx.types.ResRet.f32 %810, 0
  %812 = extractvalue %dx.types.ResRet.f32 %810, 1
  %813 = extractvalue %dx.types.ResRet.f32 %810, 2
  %814 = extractvalue %dx.types.ResRet.f32 %810, 3
  %815 = fmul fast float %134, %814
  %816 = fsub fast float %47, %815
  %817 = call float @dx.op.binary.f32(i32 35, float %816, float %590)  ; FMax(a,b)
  %818 = call float @dx.op.binary.f32(i32 36, float %817, float %588)  ; FMin(a,b)
  %819 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %640, %dx.types.Handle %641, float %593, float %818, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %820 = extractvalue %dx.types.ResRet.f32 %819, 0
  %821 = extractvalue %dx.types.ResRet.f32 %819, 1
  %822 = extractvalue %dx.types.ResRet.f32 %819, 2
  %823 = extractvalue %dx.types.ResRet.f32 %819, 3
  %824 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %595, %dx.types.Handle %596, float %593, float %818, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %825 = extractvalue %dx.types.ResRet.f32 %824, 3
  %826 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %599, %dx.types.Handle %596, float %593, float %818, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %827 = extractvalue %dx.types.ResRet.f32 %826, 0
  %828 = fmul fast float %825, 2.550000e+02
  %829 = fadd fast float %828, 5.000000e-01
  %830 = fptoui float %829 to i32
  %831 = and i32 %830, 14
  %832 = icmp eq i32 %831, 2
  %833 = and i32 %830, 12
  %834 = icmp eq i32 %833, 4
  %835 = or i1 %834, %832
  %836 = icmp eq i32 %831, 8
  %837 = or i1 %836, %835
  %838 = fmul fast float %827, 2.550000e+02
  %839 = fadd fast float %838, 5.000000e-01
  %840 = fptoui float %839 to i32
  %841 = select i1 %837, i32 %840, i32 0
  %842 = icmp eq i32 %841, %68
  %843 = select i1 %842, float 1.000000e+00, float %126
  %844 = select i1 %842, float 1.000000e+00, float %127
  %845 = select i1 %842, float 1.000000e+00, float %128
  %846 = fcmp fast ogt float %823, 0.000000e+00
  %847 = uitofp i1 %846 to float
  %848 = fsub fast float %87, %823
  %849 = call float @dx.op.unary.f32(i32 6, float %848)  ; FAbs(value)
  %850 = fmul fast float %624, %849
  %851 = call float @dx.op.unary.f32(i32 7, float %850)  ; Saturate(value)
  %852 = fsub fast float 1.000000e+00, %851
  %853 = fmul fast float %852, %847
  %854 = fmul fast float %853, %820
  %855 = fmul fast float %854, %843
  %856 = fmul fast float %853, %821
  %857 = fmul fast float %856, %844
  %858 = fmul fast float %853, %822
  %859 = fmul fast float %858, %845
  %860 = fadd fast float %815, %47
  %861 = call float @dx.op.binary.f32(i32 35, float %860, float %590)  ; FMax(a,b)
  %862 = call float @dx.op.binary.f32(i32 36, float %861, float %588)  ; FMin(a,b)
  %863 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %640, %dx.types.Handle %641, float %593, float %862, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %864 = extractvalue %dx.types.ResRet.f32 %863, 0
  %865 = extractvalue %dx.types.ResRet.f32 %863, 1
  %866 = extractvalue %dx.types.ResRet.f32 %863, 2
  %867 = extractvalue %dx.types.ResRet.f32 %863, 3
  %868 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %595, %dx.types.Handle %596, float %593, float %862, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %869 = extractvalue %dx.types.ResRet.f32 %868, 3
  %870 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %599, %dx.types.Handle %596, float %593, float %862, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %871 = extractvalue %dx.types.ResRet.f32 %870, 0
  %872 = fmul fast float %869, 2.550000e+02
  %873 = fadd fast float %872, 5.000000e-01
  %874 = fptoui float %873 to i32
  %875 = and i32 %874, 14
  %876 = icmp eq i32 %875, 2
  %877 = and i32 %874, 12
  %878 = icmp eq i32 %877, 4
  %879 = or i1 %878, %876
  %880 = icmp eq i32 %875, 8
  %881 = or i1 %880, %879
  %882 = fmul fast float %871, 2.550000e+02
  %883 = fadd fast float %882, 5.000000e-01
  %884 = fptoui float %883 to i32
  %885 = select i1 %881, i32 %884, i32 0
  %886 = icmp eq i32 %885, %68
  %887 = select i1 %886, float 1.000000e+00, float %126
  %888 = select i1 %886, float 1.000000e+00, float %127
  %889 = select i1 %886, float 1.000000e+00, float %128
  %890 = fcmp fast ogt float %867, 0.000000e+00
  %891 = uitofp i1 %890 to float
  %892 = fsub fast float %87, %867
  %893 = call float @dx.op.unary.f32(i32 6, float %892)  ; FAbs(value)
  %894 = fmul fast float %624, %893
  %895 = call float @dx.op.unary.f32(i32 7, float %894)  ; Saturate(value)
  %896 = fsub fast float 1.000000e+00, %895
  %897 = fmul fast float %896, %891
  %898 = fmul fast float %897, %864
  %899 = fmul fast float %898, %887
  %900 = fmul fast float %897, %865
  %901 = fmul fast float %900, %888
  %902 = fmul fast float %897, %866
  %903 = fmul fast float %902, %889
  %904 = fadd fast float %899, %855
  %905 = fadd fast float %901, %857
  %906 = fadd fast float %903, %859
  %907 = fadd fast float %897, %853
  %908 = fmul fast float %904, %811
  %909 = fmul fast float %905, %812
  %910 = fmul fast float %906, %813
  %911 = fadd fast float %801, %908
  %912 = fadd fast float %802, %909
  %913 = fadd fast float %803, %910
  %914 = fmul fast float %907, %811
  %915 = fmul fast float %907, %812
  %916 = fmul fast float %907, %813
  %917 = fadd fast float %807, %914
  %918 = fadd fast float %808, %915
  %919 = fadd fast float %809, %916
  %920 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %699, i32 0, i32 27, i32 %68, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %921 = extractvalue %dx.types.ResRet.f32 %920, 0
  %922 = extractvalue %dx.types.ResRet.f32 %920, 1
  %923 = extractvalue %dx.types.ResRet.f32 %920, 2
  %924 = extractvalue %dx.types.ResRet.f32 %920, 3
  %925 = fmul fast float %134, %924
  %926 = fsub fast float %47, %925
  %927 = call float @dx.op.binary.f32(i32 35, float %926, float %590)  ; FMax(a,b)
  %928 = call float @dx.op.binary.f32(i32 36, float %927, float %588)  ; FMin(a,b)
  %929 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %640, %dx.types.Handle %641, float %593, float %928, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %930 = extractvalue %dx.types.ResRet.f32 %929, 0
  %931 = extractvalue %dx.types.ResRet.f32 %929, 1
  %932 = extractvalue %dx.types.ResRet.f32 %929, 2
  %933 = extractvalue %dx.types.ResRet.f32 %929, 3
  %934 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %595, %dx.types.Handle %596, float %593, float %928, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %935 = extractvalue %dx.types.ResRet.f32 %934, 3
  %936 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %599, %dx.types.Handle %596, float %593, float %928, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %937 = extractvalue %dx.types.ResRet.f32 %936, 0
  %938 = fmul fast float %935, 2.550000e+02
  %939 = fadd fast float %938, 5.000000e-01
  %940 = fptoui float %939 to i32
  %941 = and i32 %940, 14
  %942 = icmp eq i32 %941, 2
  %943 = and i32 %940, 12
  %944 = icmp eq i32 %943, 4
  %945 = or i1 %944, %942
  %946 = icmp eq i32 %941, 8
  %947 = or i1 %946, %945
  %948 = fmul fast float %937, 2.550000e+02
  %949 = fadd fast float %948, 5.000000e-01
  %950 = fptoui float %949 to i32
  %951 = select i1 %947, i32 %950, i32 0
  %952 = icmp eq i32 %951, %68
  %953 = select i1 %952, float 1.000000e+00, float %126
  %954 = select i1 %952, float 1.000000e+00, float %127
  %955 = select i1 %952, float 1.000000e+00, float %128
  %956 = fcmp fast ogt float %933, 0.000000e+00
  %957 = uitofp i1 %956 to float
  %958 = fsub fast float %87, %933
  %959 = call float @dx.op.unary.f32(i32 6, float %958)  ; FAbs(value)
  %960 = fmul fast float %624, %959
  %961 = call float @dx.op.unary.f32(i32 7, float %960)  ; Saturate(value)
  %962 = fsub fast float 1.000000e+00, %961
  %963 = fmul fast float %962, %957
  %964 = fmul fast float %963, %930
  %965 = fmul fast float %964, %953
  %966 = fmul fast float %963, %931
  %967 = fmul fast float %966, %954
  %968 = fmul fast float %963, %932
  %969 = fmul fast float %968, %955
  %970 = fadd fast float %925, %47
  %971 = call float @dx.op.binary.f32(i32 35, float %970, float %590)  ; FMax(a,b)
  %972 = call float @dx.op.binary.f32(i32 36, float %971, float %588)  ; FMin(a,b)
  %973 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %640, %dx.types.Handle %641, float %593, float %972, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %974 = extractvalue %dx.types.ResRet.f32 %973, 0
  %975 = extractvalue %dx.types.ResRet.f32 %973, 1
  %976 = extractvalue %dx.types.ResRet.f32 %973, 2
  %977 = extractvalue %dx.types.ResRet.f32 %973, 3
  %978 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %595, %dx.types.Handle %596, float %593, float %972, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %979 = extractvalue %dx.types.ResRet.f32 %978, 3
  %980 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %599, %dx.types.Handle %596, float %593, float %972, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %981 = extractvalue %dx.types.ResRet.f32 %980, 0
  %982 = fmul fast float %979, 2.550000e+02
  %983 = fadd fast float %982, 5.000000e-01
  %984 = fptoui float %983 to i32
  %985 = and i32 %984, 14
  %986 = icmp eq i32 %985, 2
  %987 = and i32 %984, 12
  %988 = icmp eq i32 %987, 4
  %989 = or i1 %988, %986
  %990 = icmp eq i32 %985, 8
  %991 = or i1 %990, %989
  %992 = fmul fast float %981, 2.550000e+02
  %993 = fadd fast float %992, 5.000000e-01
  %994 = fptoui float %993 to i32
  %995 = select i1 %991, i32 %994, i32 0
  %996 = icmp eq i32 %995, %68
  %997 = select i1 %996, float 1.000000e+00, float %126
  %998 = select i1 %996, float 1.000000e+00, float %127
  %999 = select i1 %996, float 1.000000e+00, float %128
  %1000 = fcmp fast ogt float %977, 0.000000e+00
  %1001 = uitofp i1 %1000 to float
  %1002 = fsub fast float %87, %977
  %1003 = call float @dx.op.unary.f32(i32 6, float %1002)  ; FAbs(value)
  %1004 = fmul fast float %624, %1003
  %1005 = call float @dx.op.unary.f32(i32 7, float %1004)  ; Saturate(value)
  %1006 = fsub fast float 1.000000e+00, %1005
  %1007 = fmul fast float %1006, %1001
  %1008 = fmul fast float %1007, %974
  %1009 = fmul fast float %1008, %997
  %1010 = fmul fast float %1007, %975
  %1011 = fmul fast float %1010, %998
  %1012 = fmul fast float %1007, %976
  %1013 = fmul fast float %1012, %999
  %1014 = fadd fast float %1009, %965
  %1015 = fadd fast float %1011, %967
  %1016 = fadd fast float %1013, %969
  %1017 = fadd fast float %1007, %963
  %1018 = fmul fast float %1014, %921
  %1019 = fmul fast float %1015, %922
  %1020 = fmul fast float %1016, %923
  %1021 = fadd fast float %911, %1018
  %1022 = fadd fast float %912, %1019
  %1023 = fadd fast float %913, %1020
  %1024 = fmul fast float %1017, %921
  %1025 = fmul fast float %1017, %922
  %1026 = fmul fast float %1017, %923
  %1027 = fadd fast float %917, %1024
  %1028 = fadd fast float %918, %1025
  %1029 = fadd fast float %919, %1026
  %1030 = fdiv fast float %1021, %1027
  %1031 = fdiv fast float %1022, %1028
  %1032 = fdiv fast float %1023, %1029
  br label %1033

; <label>:1033                                    ; preds = %89, %74
  %1034 = phi float [ %1030, %89 ], [ 0.000000e+00, %74 ]
  %1035 = phi float [ %1031, %89 ], [ 0.000000e+00, %74 ]
  %1036 = phi float [ %1032, %89 ], [ 0.000000e+00, %74 ]
  %1037 = phi float [ 1.000000e+00, %89 ], [ 0.000000e+00, %74 ]
  %1038 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %10, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1039 = extractvalue %dx.types.CBufRet.i32 %1038, 2
  %1040 = extractvalue %dx.types.CBufRet.i32 %1038, 3
  %1041 = icmp ult i32 %37, %1039
  %1042 = icmp ult i32 %38, %1040
  %1043 = and i1 %1041, %1042
  br i1 %1043, label %1044, label %1046

; <label>:1044                                    ; preds = %1033
  %1045 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1045, i32 %37, i32 %38, i32 undef, float %1034, float %1035, float %1036, float %1037, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %1046

; <label>:1046                                    ; preds = %1044, %1033, %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.flattenedThreadIdInGroup.i32(i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!20}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !13, !15, !17}
!5 = !{!6, !8, !9, !10, !11}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{i32 2, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !7}
!10 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!11 = !{i32 4, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 4, i32 1, i32 10, i32 0, !12}
!12 = !{i32 0, i32 5}
!13 = !{!14}
!14 = !{i32 0, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!15 = !{!16}
!16 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 480, null}
!17 = !{!18, !19}
!18 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!19 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!20 = !{void ()* @MainIndirectDispatchCS, !"MainIndirectDispatchCS", null, !4, !21}
!21 = !{i32 4, !22, i32 5, !23}
!22 = !{i32 64, i32 1, i32 1}
!23 = !{i32 0}
!24 = distinct !{!24, !"dx.controlflow.hints", i32 1}
!25 = distinct !{!25, !"dx.controlflow.hints", i32 1}
