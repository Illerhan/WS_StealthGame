;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xyzw        0     NONE   float   xy w
; SV_Position              0   xyzw        1      POS   float   xy  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader hash: e15582692ed8c03902b16deca9aca404
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; SV_Position              0          noperspective       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       int VirtualShadowMapId;                       ; Offset:  320
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   324
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_DeferredLightUniforms
; {
;
;   struct UniformBufferConstants_DeferredLightUniforms
;   {
;
;       float4 DeferredLightUniforms_ShadowMapChannelMask;; Offset:    0
;       float2 DeferredLightUniforms_DistanceFadeMAD; ; Offset:   16
;       float DeferredLightUniforms_ContactShadowLength;; Offset:   24
;       float DeferredLightUniforms_ContactShadowCastingIntensity;; Offset:   28
;       float DeferredLightUniforms_ContactShadowNonCastingIntensity;; Offset:   32
;       float DeferredLightUniforms_VolumetricScatteringIntensity;; Offset:   36
;       uint DeferredLightUniforms_ShadowedBits;      ; Offset:   40
;       uint DeferredLightUniforms_LightingChannelMask;; Offset:   44
;       float3 DeferredLightUniforms_TranslatedWorldPosition;; Offset:   48
;       float DeferredLightUniforms_InvRadius;        ; Offset:   60
;       float3 DeferredLightUniforms_Color;           ; Offset:   64
;       float DeferredLightUniforms_FalloffExponent;  ; Offset:   76
;       float3 DeferredLightUniforms_Direction;       ; Offset:   80
;       float DeferredLightUniforms_SpecularScale;    ; Offset:   92
;       float3 DeferredLightUniforms_Tangent;         ; Offset:   96
;       float DeferredLightUniforms_SourceRadius;     ; Offset:  108
;       float2 DeferredLightUniforms_SpotAngles;      ; Offset:  112
;       float DeferredLightUniforms_SoftSourceRadius; ; Offset:  120
;       float DeferredLightUniforms_SourceLength;     ; Offset:  124
;       float DeferredLightUniforms_RectLightBarnCosAngle;; Offset:  128
;       float DeferredLightUniforms_RectLightBarnLength;; Offset:  132
;       float2 DeferredLightUniforms_RectLightAtlasUVOffset;; Offset:  136
;       float2 DeferredLightUniforms_RectLightAtlasUVScale;; Offset:  144
;       float DeferredLightUniforms_RectLightAtlasMaxLevel;; Offset:  152
;       float DeferredLightUniforms_IESAtlasIndex;    ; Offset:  156
;   
;   } UniformBufferConstants_DeferredLightUniforms;   ; Offset:    0 Size:   160
;
; }
;
; cbuffer UniformBufferConstants_VirtualShadowMap
; {
;
;   struct UniformBufferConstants_VirtualShadowMap
;   {
;
;       uint VirtualShadowMap_NumFullShadowMaps;      ; Offset:    0
;       uint VirtualShadowMap_NumSinglePageShadowMaps;; Offset:    4
;       uint VirtualShadowMap_MaxPhysicalPages;       ; Offset:    8
;       uint VirtualShadowMap_NumShadowMapSlots;      ; Offset:   12
;       uint VirtualShadowMap_StaticCachedArrayIndex; ; Offset:   16
;       uint VirtualShadowMap_PhysicalPageRowMask;    ; Offset:   20
;       uint VirtualShadowMap_PhysicalPageRowShift;   ; Offset:   24
;       uint VirtualShadowMap_PackedShadowMaskMaxLightCount;; Offset:   28
;       float4 VirtualShadowMap_RecPhysicalPoolSize;  ; Offset:   32
;       int2 VirtualShadowMap_PhysicalPoolSize;       ; Offset:   48
;       int2 VirtualShadowMap_PhysicalPoolSizePages;  ; Offset:   56
;       uint VirtualShadowMap_bExcludeNonNaniteFromCoarsePages;; Offset:   64
;       float VirtualShadowMap_CoarsePagePixelThresholdDynamic;; Offset:   68
;       float VirtualShadowMap_CoarsePagePixelThresholdStatic;; Offset:   72
;       float VirtualShadowMap_CoarsePagePixelThresholdDynamicNanite;; Offset:   76
;       uint BindlessResource_VirtualShadowMap_ProjectionData;; Offset:   80
;       uint PrePadding_VirtualShadowMap_84;          ; Offset:   84
;       uint BindlessResource_VirtualShadowMap_PageTable;; Offset:   88
;       uint PrePadding_VirtualShadowMap_92;          ; Offset:   92
;       uint BindlessResource_VirtualShadowMap_PageFlags;; Offset:   96
;       uint PrePadding_VirtualShadowMap_100;         ; Offset:  100
;       uint BindlessResource_VirtualShadowMap_PageRectBounds;; Offset:  104
;       uint PrePadding_VirtualShadowMap_108;         ; Offset:  108
;       uint BindlessResource_VirtualShadowMap_PhysicalPagePool;; Offset:  112
;   
;   } UniformBufferConstants_VirtualShadowMap;        ; Offset:    0 Size:   116
;
; }
;
; cbuffer UniformBufferConstants_ForwardLightData
; {
;
;   struct hostlayout.UniformBufferConstants_ForwardLightData
;   {
;
;       uint ForwardLightData_NumLocalLights;         ; Offset:    0
;       uint ForwardLightData_NumReflectionCaptures;  ; Offset:    4
;       uint ForwardLightData_HasDirectionalLight;    ; Offset:    8
;       uint ForwardLightData_NumGridCells;           ; Offset:   12
;       int3 ForwardLightData_CulledGridSize;         ; Offset:   16
;       uint ForwardLightData_MaxCulledLightsPerCell; ; Offset:   28
;       uint ForwardLightData_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_ForwardLightData_36;          ; Offset:   36
;       uint PrePadding_ForwardLightData_40;          ; Offset:   40
;       uint PrePadding_ForwardLightData_44;          ; Offset:   44
;       float3 ForwardLightData_LightGridZParams;     ; Offset:   48
;       float PrePadding_ForwardLightData_60;         ; Offset:   60
;       float3 ForwardLightData_DirectionalLightDirection;; Offset:   64
;       float ForwardLightData_DirectionalLightSourceRadius;; Offset:   76
;       float3 ForwardLightData_DirectionalLightColor;; Offset:   80
;       float ForwardLightData_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint ForwardLightData_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_ForwardLightData_100;         ; Offset:  100
;       float2 ForwardLightData_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint ForwardLightData_NumDirectionalLightCascades;; Offset:  112
;       int ForwardLightData_DirectionalLightVSM;     ; Offset:  116
;       int PrePadding_ForwardLightData_120;          ; Offset:  120
;       int PrePadding_ForwardLightData_124;          ; Offset:  124
;       float4 ForwardLightData_CascadeEndDepths;     ; Offset:  128
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 ForwardLightData_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float ForwardLightData_DirectionalLightDepthBias;; Offset:  480
;       uint ForwardLightData_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint ForwardLightData_SimpleLightsEndIndex;   ; Offset:  488
;       uint ForwardLightData_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint ForwardLightData_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_ForwardLightData_500;         ; Offset:  500
;       uint PrePadding_ForwardLightData_504;         ; Offset:  504
;       uint PrePadding_ForwardLightData_508;         ; Offset:  508
;       float4 ForwardLightData_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint ForwardLightData_DirectLightingShowFlag; ; Offset:  592
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_604;; Offset:  604
;       float ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_ForwardLightData_644;         ; Offset:  644
;       uint PrePadding_ForwardLightData_648;         ; Offset:  648
;       uint PrePadding_ForwardLightData_652;         ; Offset:  652
;       uint BindlessResource_ForwardLightData_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_ForwardLightData_660;         ; Offset:  660
;       uint BindlessSampler_ForwardLightData_ShadowmapSampler;; Offset:  664
;       uint PrePadding_ForwardLightData_668;         ; Offset:  668
;       uint BindlessResource_ForwardLightData_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_ForwardLightData_676;         ; Offset:  676
;       uint BindlessSampler_ForwardLightData_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_ForwardLightData_684;         ; Offset:  684
;       uint BindlessResource_ForwardLightData_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_ForwardLightData_692;         ; Offset:  692
;       uint BindlessResource_ForwardLightData_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_ForwardLightData_700;         ; Offset:  700
;       uint BindlessResource_ForwardLightData_CulledLightDataGrid;; Offset:  704
;   
;   } UniformBufferConstants_ForwardLightData;        ; Offset:    0 Size:   708
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_DeferredLightUniforms   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_VirtualShadowMap   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_ForwardLightData   cbuffer      NA          NA     CB4            cb4     1
; View_PreIntegratedBRDFSampler     sampler      NA          NA      S0             s0     1
; View_SSProfilesTransmissionSampler   sampler      NA          NA      S1             s1     1
; SceneTexturesStruct_PointClampSampler   sampler      NA          NA      S2             s2     1
; LightAttenuationTextureSampler    sampler      NA          NA      S3             s3     1
; View_PreIntegratedBRDF            texture     f32          2d      T0             t0     1
; View_SSProfilesTexture            texture     f32          2d      T1             t1     1
; SceneTexturesStruct_SceneDepthTexture   texture     f32          2d      T2             t2     1
; SceneTexturesStruct_GBufferATexture   texture     f32          2d      T3             t3     1
; SceneTexturesStruct_GBufferBTexture   texture     f32          2d      T4             t4     1
; SceneTexturesStruct_GBufferCTexture   texture     f32          2d      T5             t5     1
; SceneTexturesStruct_GBufferDTexture   texture     f32          2d      T6             t6     1
; SceneTexturesStruct_GBufferETexture   texture     f32          2d      T7             t7     1
; SceneTexturesStruct_GBufferFTexture   texture     f32          2d      T8             t8     1
; SceneTexturesStruct_ScreenSpaceAOTexture   texture     f32          2d      T9             t9     1
; ForwardLightData_ForwardLocalLightBuffer   texture     f32         buf     T10            t10     1
; ForwardLightData_NumCulledLightsGrid   texture     u32         buf     T11            t11     1
; ForwardLightData_CulledLightDataGrid   texture     u32         buf     T12            t12     1
; LightAttenuationTexture           texture     f32          2d     T13            t13     1
; LightingChannelsTexture           texture     u32          2d     T14            t14     1
; ShadowMaskBits                    texture     u32          2d     T15            t15     1
;
;
; ViewId state:
;
; Number of inputs: 8, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 3, 4, 5 }
;   output 1 depends on inputs: { 0, 1, 3, 4, 5 }
;   output 2 depends on inputs: { 0, 1, 3, 4, 5 }
;   output 3 depends on inputs: { 0, 1, 3, 4, 5 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Buffer<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.Texture2D<unsigned int>" = type { i32, %"class.Texture2D<unsigned int>::mips_type" }
%"class.Texture2D<unsigned int>::mips_type" = type { i32 }
%"class.Texture2D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture2D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture2D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%_RootShaderParameters = type { i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_DeferredLightUniforms = type { <4 x float>, <2 x float>, float, float, float, float, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, float, float, <2 x float>, <2 x float>, float, float }
%UniformBufferConstants_VirtualShadowMap = type { i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x i32>, <2 x i32>, i32, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%hostlayout.UniformBufferConstants_ForwardLightData = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @DeferredLightPixelMain() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 13, i32 708 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %27 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 13, i32 116 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %28 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 13, i32 160 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %29 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %30 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 13, i32 324 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %31 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %33 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %34 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %35 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %36 = alloca [4 x i32], align 4
  %37 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %38 = extractvalue %dx.types.CBufRet.i32 %37, 0
  %39 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %40 = extractvalue %dx.types.CBufRet.i32 %39, 0
  %41 = extractvalue %dx.types.CBufRet.i32 %39, 1
  %42 = extractvalue %dx.types.CBufRet.i32 %39, 2
  %43 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %44 = extractvalue %dx.types.CBufRet.i32 %43, 0
  %45 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %46 = extractvalue %dx.types.CBufRet.f32 %45, 0
  %47 = extractvalue %dx.types.CBufRet.f32 %45, 1
  %48 = extractvalue %dx.types.CBufRet.f32 %45, 2
  %49 = fdiv fast float %33, %35
  %50 = fdiv fast float %34, %35
  %51 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %52 = extractvalue %dx.types.CBufRet.f32 %51, 0
  %53 = extractvalue %dx.types.CBufRet.f32 %51, 1
  %54 = fmul fast float %52, %49
  %55 = fmul fast float %53, %50
  %56 = extractvalue %dx.types.CBufRet.f32 %51, 2
  %57 = extractvalue %dx.types.CBufRet.f32 %51, 3
  %58 = fadd fast float %54, %57
  %59 = fadd fast float %55, %56
  %60 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %61 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %62 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %60, %dx.types.Handle %61, float %58, float %59, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %63 = extractvalue %dx.types.ResRet.f32 %62, 0
  %64 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %65 = extractvalue %dx.types.CBufRet.f32 %64, 0
  %66 = fmul fast float %65, %63
  %67 = extractvalue %dx.types.CBufRet.f32 %64, 1
  %68 = fadd fast float %66, %67
  %69 = extractvalue %dx.types.CBufRet.f32 %64, 2
  %70 = fmul fast float %69, %63
  %71 = extractvalue %dx.types.CBufRet.f32 %64, 3
  %72 = fsub fast float %70, %71
  %73 = fdiv fast float 1.000000e+00, %72
  %74 = fadd fast float %68, %73
  %75 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %76 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %75, %dx.types.Handle %61, float %58, float %59, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %77 = extractvalue %dx.types.ResRet.f32 %76, 0
  %78 = extractvalue %dx.types.ResRet.f32 %76, 1
  %79 = extractvalue %dx.types.ResRet.f32 %76, 2
  %80 = extractvalue %dx.types.ResRet.f32 %76, 3
  %81 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %82 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %81, %dx.types.Handle %61, float %58, float %59, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %83 = extractvalue %dx.types.ResRet.f32 %82, 0
  %84 = extractvalue %dx.types.ResRet.f32 %82, 1
  %85 = extractvalue %dx.types.ResRet.f32 %82, 2
  %86 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %87 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %86, %dx.types.Handle %61, float %58, float %59, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %88 = extractvalue %dx.types.ResRet.f32 %87, 0
  %89 = extractvalue %dx.types.ResRet.f32 %87, 1
  %90 = extractvalue %dx.types.ResRet.f32 %87, 2
  %91 = extractvalue %dx.types.ResRet.f32 %87, 3
  %92 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %93 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %92, %dx.types.Handle %61, float %58, float %59, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %94 = extractvalue %dx.types.ResRet.f32 %93, 0
  %95 = extractvalue %dx.types.ResRet.f32 %93, 1
  %96 = extractvalue %dx.types.ResRet.f32 %93, 2
  %97 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %98 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %97, %dx.types.Handle %61, float %58, float %59, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %99 = extractvalue %dx.types.ResRet.f32 %98, 0
  %100 = extractvalue %dx.types.ResRet.f32 %98, 1
  %101 = extractvalue %dx.types.ResRet.f32 %98, 2
  %102 = extractvalue %dx.types.ResRet.f32 %98, 3
  %103 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %104 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %103, %dx.types.Handle %61, float %58, float %59, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %105 = extractvalue %dx.types.ResRet.f32 %104, 0
  %106 = extractvalue %dx.types.ResRet.f32 %104, 1
  %107 = extractvalue %dx.types.ResRet.f32 %104, 2
  %108 = extractvalue %dx.types.ResRet.f32 %104, 3
  %109 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %110 = extractvalue %dx.types.CBufRet.f32 %109, 0
  %111 = extractvalue %dx.types.CBufRet.f32 %109, 1
  %112 = fmul fast float %110, %58
  %113 = fmul fast float %111, %59
  %114 = fptoui float %112 to i32
  %115 = fptoui float %113 to i32
  %116 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 153)  ; CBufferLoadLegacy(handle,regIndex)
  %117 = extractvalue %dx.types.CBufRet.f32 %116, 0
  %118 = fptoui float %117 to i32
  %119 = add i32 %114, %115
  %120 = add i32 %119, %118
  %121 = and i32 %120, 1
  %122 = icmp ne i32 %121, 0
  %123 = fmul fast float %91, 2.550000e+02
  %124 = fadd fast float %123, 5.000000e-01
  %125 = fptoui float %124 to i32
  %126 = and i32 %125, 15
  %127 = lshr i32 %125, 4
  %128 = fmul fast float %83, 2.000000e+00
  %129 = fmul fast float %84, 2.000000e+00
  %130 = fmul fast float %85, 2.000000e+00
  %131 = fadd fast float %128, -1.000000e+00
  %132 = fadd fast float %129, -1.000000e+00
  %133 = fadd fast float %130, -1.000000e+00
  %134 = and i32 %125, 14
  %135 = icmp eq i32 %134, 2
  %136 = and i32 %125, 12
  %137 = icmp eq i32 %136, 4
  %138 = or i1 %137, %135
  %139 = icmp eq i32 %134, 8
  %140 = or i1 %139, %138
  %141 = select i1 %140, float %99, float 0.000000e+00
  %142 = select i1 %140, float %100, float 0.000000e+00
  %143 = select i1 %140, float %101, float 0.000000e+00
  %144 = select i1 %140, float %102, float 0.000000e+00
  %145 = and i32 %127, 2
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %151, label %147

; <label>:147                                     ; preds = %0
  %148 = and i32 %127, 4
  %149 = icmp ne i32 %148, 0
  %150 = select i1 %149, float 0.000000e+00, float 1.000000e+00
  br label %151

; <label>:151                                     ; preds = %147, %0
  %152 = phi float [ %150, %147 ], [ %105, %0 ]
  %153 = phi float [ %150, %147 ], [ %106, %0 ]
  %154 = phi float [ %150, %147 ], [ %107, %0 ]
  %155 = phi float [ %150, %147 ], [ %108, %0 ]
  %156 = and i32 %127, 1
  %157 = icmp eq i32 %156, 0
  %158 = call float @dx.op.dot3.f32(i32 55, float %131, float %132, float %133, float %131, float %132, float %133)  ; Dot3(ax,ay,az,bx,by,bz)
  %159 = call float @dx.op.unary.f32(i32 25, float %158)  ; Rsqrt(value)
  %160 = fmul fast float %159, %131
  %161 = fmul fast float %159, %132
  %162 = fmul fast float %159, %133
  %163 = icmp eq i32 %126, 9
  %164 = select i1 %163, float 0.000000e+00, float %88
  %165 = fmul fast float %89, 0x3FB47AE140000000
  %166 = fsub fast float %94, %165
  %167 = fsub fast float %95, %165
  %168 = fsub fast float %96, %165
  %169 = fmul fast float %164, %166
  %170 = fmul fast float %164, %167
  %171 = fmul fast float %164, %168
  %172 = fadd fast float %169, %165
  %173 = fadd fast float %170, %165
  %174 = fadd fast float %171, %165
  %175 = icmp eq i32 %126, 5
  %176 = or i1 %175, %163
  br i1 %176, label %177, label %199

; <label>:177                                     ; preds = %151
  %178 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 247)  ; CBufferLoadLegacy(handle,regIndex)
  %179 = extractvalue %dx.types.CBufRet.f32 %178, 3
  %180 = fcmp fast ogt float %179, 0.000000e+00
  br i1 %180, label %181, label %185

; <label>:181                                     ; preds = %177
  %182 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 228)  ; CBufferLoadLegacy(handle,regIndex)
  %183 = extractvalue %dx.types.CBufRet.f32 %182, 2
  %184 = fcmp fast ogt float %183, 0.000000e+00
  br label %185

; <label>:185                                     ; preds = %181, %177
  %186 = phi i1 [ false, %177 ], [ %184, %181 ]
  %187 = fcmp fast une float %179, 0.000000e+00
  %188 = select i1 %187, float 1.000000e+00, float %94
  %189 = select i1 %187, float 1.000000e+00, float %95
  %190 = select i1 %187, float 1.000000e+00, float %96
  br i1 %186, label %191, label %199

; <label>:191                                     ; preds = %185
  %192 = uitofp i1 %122 to float
  %193 = xor i1 %122, true
  %194 = uitofp i1 %193 to float
  %195 = fmul fast float %194, %172
  %196 = fmul fast float %194, %173
  %197 = fmul fast float %194, %174
  %198 = fmul fast float %194, %89
  br label %199

; <label>:199                                     ; preds = %191, %185, %151
  %200 = phi float [ %172, %151 ], [ %195, %191 ], [ %172, %185 ]
  %201 = phi float [ %173, %151 ], [ %196, %191 ], [ %173, %185 ]
  %202 = phi float [ %174, %151 ], [ %197, %191 ], [ %174, %185 ]
  %203 = phi float [ %94, %151 ], [ %192, %191 ], [ %188, %185 ]
  %204 = phi float [ %95, %151 ], [ %192, %191 ], [ %189, %185 ]
  %205 = phi float [ %96, %151 ], [ %192, %191 ], [ %190, %185 ]
  %206 = phi float [ %89, %151 ], [ %198, %191 ], [ %89, %185 ]
  %207 = fmul fast float %203, %164
  %208 = fmul fast float %204, %164
  %209 = fmul fast float %205, %164
  %210 = fsub fast float %203, %207
  %211 = fsub fast float %204, %208
  %212 = fsub fast float %205, %209
  %213 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 137)  ; CBufferLoadLegacy(handle,regIndex)
  %214 = extractvalue %dx.types.CBufRet.f32 %213, 3
  %215 = fmul fast float %214, %210
  %216 = fmul fast float %214, %211
  %217 = fmul fast float %214, %212
  %218 = extractvalue %dx.types.CBufRet.f32 %213, 0
  %219 = extractvalue %dx.types.CBufRet.f32 %213, 1
  %220 = extractvalue %dx.types.CBufRet.f32 %213, 2
  %221 = fadd fast float %215, %218
  %222 = fadd fast float %216, %219
  %223 = fadd fast float %217, %220
  %224 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 138)  ; CBufferLoadLegacy(handle,regIndex)
  %225 = extractvalue %dx.types.CBufRet.f32 %224, 3
  %226 = fmul fast float %225, %200
  %227 = fmul fast float %225, %201
  %228 = fmul fast float %225, %202
  %229 = extractvalue %dx.types.CBufRet.f32 %224, 0
  %230 = extractvalue %dx.types.CBufRet.f32 %224, 1
  %231 = extractvalue %dx.types.CBufRet.f32 %224, 2
  %232 = fadd fast float %226, %229
  %233 = fadd fast float %227, %230
  %234 = fadd fast float %228, %231
  br i1 %157, label %249, label %235

; <label>:235                                     ; preds = %199
  %236 = fmul fast float %77, 2.000000e+00
  %237 = fmul fast float %78, 2.000000e+00
  %238 = fmul fast float %79, 2.000000e+00
  %239 = fadd fast float %236, -1.000000e+00
  %240 = fadd fast float %237, -1.000000e+00
  %241 = fadd fast float %238, -1.000000e+00
  %242 = fmul fast float %80, 2.000000e+00
  %243 = fadd fast float %242, -1.000000e+00
  %244 = call float @dx.op.dot3.f32(i32 55, float %239, float %240, float %241, float %239, float %240, float %241)  ; Dot3(ax,ay,az,bx,by,bz)
  %245 = call float @dx.op.unary.f32(i32 25, float %244)  ; Rsqrt(value)
  %246 = fmul fast float %245, %239
  %247 = fmul fast float %245, %240
  %248 = fmul fast float %245, %241
  br label %249

; <label>:249                                     ; preds = %235, %199
  %250 = phi float [ %246, %235 ], [ 0.000000e+00, %199 ]
  %251 = phi float [ %247, %235 ], [ 0.000000e+00, %199 ]
  %252 = phi float [ %248, %235 ], [ 0.000000e+00, %199 ]
  %253 = phi float [ %243, %235 ], [ 0.000000e+00, %199 ]
  %254 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %255 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %254, %dx.types.Handle %61, float %58, float %59, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %256 = extractvalue %dx.types.ResRet.f32 %255, 0
  %257 = icmp eq i32 %126, 0
  br i1 %257, label %3890, label %258

; <label>:258                                     ; preds = %249
  %259 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %260 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %259, i32 0, i32 %114, i32 %115, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %261 = extractvalue %dx.types.ResRet.i32 %260, 0
  %262 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %28, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %263 = extractvalue %dx.types.CBufRet.i32 %262, 3
  %264 = and i32 %263, %261
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %3890, label %266, !dx.controlflow.hints !48

; <label>:266                                     ; preds = %258
  %267 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %268 = extractvalue %dx.types.CBufRet.f32 %267, 3
  %269 = fcmp fast olt float %268, 1.000000e+00
  %270 = select i1 %269, float %74, float 1.000000e+00
  %271 = fmul fast float %270, %49
  %272 = fmul fast float %270, %50
  %273 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 56)  ; CBufferLoadLegacy(handle,regIndex)
  %274 = extractvalue %dx.types.CBufRet.f32 %273, 0
  %275 = extractvalue %dx.types.CBufRet.f32 %273, 1
  %276 = extractvalue %dx.types.CBufRet.f32 %273, 2
  %277 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 57)  ; CBufferLoadLegacy(handle,regIndex)
  %278 = extractvalue %dx.types.CBufRet.f32 %277, 0
  %279 = extractvalue %dx.types.CBufRet.f32 %277, 1
  %280 = extractvalue %dx.types.CBufRet.f32 %277, 2
  %281 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 58)  ; CBufferLoadLegacy(handle,regIndex)
  %282 = extractvalue %dx.types.CBufRet.f32 %281, 0
  %283 = extractvalue %dx.types.CBufRet.f32 %281, 1
  %284 = extractvalue %dx.types.CBufRet.f32 %281, 2
  %285 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 59)  ; CBufferLoadLegacy(handle,regIndex)
  %286 = extractvalue %dx.types.CBufRet.f32 %285, 0
  %287 = extractvalue %dx.types.CBufRet.f32 %285, 1
  %288 = extractvalue %dx.types.CBufRet.f32 %285, 2
  %289 = fmul fast float %271, %274
  %290 = call float @dx.op.tertiary.f32(i32 46, float %272, float %278, float %289)  ; FMad(a,b,c)
  %291 = call float @dx.op.tertiary.f32(i32 46, float %74, float %282, float %290)  ; FMad(a,b,c)
  %292 = fadd fast float %291, %286
  %293 = fmul fast float %271, %275
  %294 = call float @dx.op.tertiary.f32(i32 46, float %272, float %279, float %293)  ; FMad(a,b,c)
  %295 = call float @dx.op.tertiary.f32(i32 46, float %74, float %283, float %294)  ; FMad(a,b,c)
  %296 = fadd fast float %295, %287
  %297 = fmul fast float %271, %276
  %298 = call float @dx.op.tertiary.f32(i32 46, float %272, float %280, float %297)  ; FMad(a,b,c)
  %299 = call float @dx.op.tertiary.f32(i32 46, float %74, float %284, float %298)  ; FMad(a,b,c)
  %300 = fadd fast float %299, %288
  %301 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %302 = extractvalue %dx.types.CBufRet.f32 %301, 0
  %303 = extractvalue %dx.types.CBufRet.f32 %301, 1
  %304 = extractvalue %dx.types.CBufRet.f32 %301, 2
  %305 = fsub fast float %292, %302
  %306 = fsub fast float %296, %303
  %307 = fsub fast float %300, %304
  %308 = call float @dx.op.dot3.f32(i32 55, float %305, float %306, float %307, float %305, float %306, float %307)  ; Dot3(ax,ay,az,bx,by,bz)
  %309 = call float @dx.op.unary.f32(i32 25, float %308)  ; Rsqrt(value)
  %310 = fmul fast float %305, %309
  %311 = fmul fast float %306, %309
  %312 = fmul fast float %307, %309
  %313 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %314 = extractvalue %dx.types.CBufRet.f32 %313, 0
  %315 = extractvalue %dx.types.CBufRet.f32 %313, 1
  %316 = extractvalue %dx.types.CBufRet.f32 %313, 2
  %317 = extractvalue %dx.types.CBufRet.f32 %313, 3
  %318 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %319 = extractvalue %dx.types.CBufRet.f32 %318, 0
  %320 = extractvalue %dx.types.CBufRet.f32 %318, 1
  %321 = extractvalue %dx.types.CBufRet.f32 %318, 2
  %322 = extractvalue %dx.types.CBufRet.f32 %318, 3
  %323 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %324 = extractvalue %dx.types.CBufRet.f32 %323, 0
  %325 = extractvalue %dx.types.CBufRet.f32 %323, 1
  %326 = extractvalue %dx.types.CBufRet.f32 %323, 2
  %327 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %328 = extractvalue %dx.types.CBufRet.f32 %327, 0
  %329 = extractvalue %dx.types.CBufRet.f32 %327, 1
  %330 = extractvalue %dx.types.CBufRet.f32 %327, 2
  %331 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %332 = extractvalue %dx.types.CBufRet.f32 %331, 0
  %333 = extractvalue %dx.types.CBufRet.f32 %331, 1
  %334 = extractvalue %dx.types.CBufRet.f32 %327, 3
  %335 = extractvalue %dx.types.CBufRet.f32 %331, 3
  %336 = extractvalue %dx.types.CBufRet.f32 %331, 2
  %337 = extractvalue %dx.types.CBufRet.f32 %323, 3
  %338 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %339 = extractvalue %dx.types.CBufRet.f32 %338, 2
  %340 = call float @dx.op.unary.f32(i32 6, float %339)  ; FAbs(value)
  %341 = fcmp fast olt float %339, 0.000000e+00
  %342 = extractvalue %dx.types.CBufRet.f32 %338, 3
  %343 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %344 = extractvalue %dx.types.CBufRet.f32 %343, 0
  %345 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %28, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %346 = extractvalue %dx.types.CBufRet.f32 %345, 0
  %347 = extractvalue %dx.types.CBufRet.f32 %345, 1
  %348 = extractvalue %dx.types.CBufRet.f32 %345, 2
  %349 = extractvalue %dx.types.CBufRet.f32 %345, 3
  %350 = extractvalue %dx.types.CBufRet.i32 %262, 2
  %351 = fcmp fast oeq float %322, 0.000000e+00
  %352 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %353 = extractvalue %dx.types.CBufRet.i32 %352, 0
  %354 = uitofp i32 %353 to float
  %355 = fmul fast float %354, 0x4040551EC0000000
  %356 = fmul fast float %354, 0x4027A147A0000000
  %357 = fadd fast float %355, %31
  %358 = fadd fast float %356, %32
  %359 = call float @dx.op.dot2.f32(i32 54, float %357, float %358, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %360 = call float @dx.op.unary.f32(i32 22, float %359)  ; Frc(value)
  %361 = fmul fast float %360, 0x404A7DD040000000
  %362 = call float @dx.op.unary.f32(i32 22, float %361)  ; Frc(value)
  %363 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %364 = extractvalue %dx.types.CBufRet.i32 %363, 0
  %365 = icmp eq i32 %364, -1
  br i1 %365, label %447, label %366

; <label>:366                                     ; preds = %266
  %367 = fptoui float %31 to i32
  %368 = fptoui float %32 to i32
  %369 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 130)  ; CBufferLoadLegacy(handle,regIndex)
  %370 = extractvalue %dx.types.CBufRet.i32 %369, 0
  %371 = extractvalue %dx.types.CBufRet.i32 %369, 1
  %372 = sub i32 %367, %370
  %373 = sub i32 %368, %371
  %374 = fmul fast float %74, %46
  %375 = fadd fast float %374, %47
  %376 = call float @dx.op.unary.f32(i32 23, float %375)  ; Log(value)
  %377 = fmul fast float %376, %48
  %378 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %377)  ; FMax(a,b)
  %379 = fptoui float %378 to i32
  %380 = add nsw i32 %42, -1
  %381 = call i32 @dx.op.binary.i32(i32 40, i32 %379, i32 %380)  ; UMin(a,b)
  %382 = and i32 %44, 31
  %383 = lshr i32 %372, %382
  %384 = lshr i32 %373, %382
  %385 = mul i32 %381, %41
  %386 = add i32 %385, %384
  %387 = mul i32 %386, %40
  %388 = add i32 %387, %383
  %389 = shl i32 %388, 1
  %390 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %391 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %390, i32 %389, i32 undef)  ; BufferLoad(srv,index,wot)
  %392 = extractvalue %dx.types.ResRet.i32 %391, 0
  %393 = call i32 @dx.op.binary.i32(i32 40, i32 %392, i32 %38)  ; UMin(a,b)
  %394 = or i32 %389, 1
  %395 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %390, i32 %394, i32 undef)  ; BufferLoad(srv,index,wot)
  %396 = extractvalue %dx.types.ResRet.i32 %395, 0
  %397 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %398 = extractvalue %dx.types.CBufRet.i32 %397, 3
  %399 = call i32 @dx.op.binary.i32(i32 40, i32 %398, i32 %393)  ; UMin(a,b)
  %400 = icmp eq i32 %399, 0
  br i1 %400, label %420, label %401

; <label>:401                                     ; preds = %366
  br label %402

; <label>:402                                     ; preds = %415, %401
  %403 = phi i32 [ %416, %415 ], [ 0, %401 ]
  %404 = add i32 %403, %396
  %405 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %406 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %405, i32 %404, i32 undef)  ; BufferLoad(srv,index,wot)
  %407 = extractvalue %dx.types.ResRet.i32 %406, 0
  %408 = mul i32 %407, 6
  %409 = add i32 %408, 5
  %410 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 10, i32 1033 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<4xF32>
  %411 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %410, i32 %409, i32 undef)  ; BufferLoad(srv,index,wot)
  %412 = extractvalue %dx.types.ResRet.f32 %411, 2
  %413 = fptosi float %412 to i32
  %414 = icmp eq i32 %413, %364
  br i1 %414, label %418, label %415

; <label>:415                                     ; preds = %402
  %416 = add nuw i32 %403, 1
  %417 = icmp ult i32 %416, %399
  br i1 %417, label %402, label %418

; <label>:418                                     ; preds = %415, %402
  %419 = phi i32 [ %416, %415 ], [ %403, %402 ]
  br label %420

; <label>:420                                     ; preds = %418, %366
  %421 = phi i32 [ 0, %366 ], [ %419, %418 ]
  %422 = icmp ult i32 %421, %399
  br i1 %422, label %423, label %455

; <label>:423                                     ; preds = %420
  %424 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 2, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xU32>
  %425 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %424, i32 0, i32 %367, i32 %368, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %426 = extractvalue %dx.types.ResRet.i32 %425, 0
  %427 = extractvalue %dx.types.ResRet.i32 %425, 1
  %428 = extractvalue %dx.types.ResRet.i32 %425, 2
  %429 = extractvalue %dx.types.ResRet.i32 %425, 3
  %430 = xor i32 %426, -1
  %431 = xor i32 %427, -1
  %432 = xor i32 %428, -1
  %433 = xor i32 %429, -1
  %434 = getelementptr inbounds [4 x i32], [4 x i32]* %36, i32 0, i32 0
  store i32 %430, i32* %434, align 4
  %435 = getelementptr inbounds [4 x i32], [4 x i32]* %36, i32 0, i32 1
  store i32 %431, i32* %435, align 4
  %436 = getelementptr inbounds [4 x i32], [4 x i32]* %36, i32 0, i32 2
  store i32 %432, i32* %436, align 4
  %437 = getelementptr inbounds [4 x i32], [4 x i32]* %36, i32 0, i32 3
  store i32 %433, i32* %437, align 4
  %438 = lshr i32 %421, 3
  %439 = getelementptr [4 x i32], [4 x i32]* %36, i32 0, i32 %438
  %440 = load i32, i32* %439, align 4, !tbaa !49
  %441 = shl i32 %421, 2
  %442 = and i32 %441, 28
  %443 = lshr i32 %440, %442
  %444 = and i32 %443, 15
  %445 = uitofp i32 %444 to float
  %446 = fmul fast float %445, 0x3FB1111120000000
  br label %455

; <label>:447                                     ; preds = %266
  %448 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %449 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %450 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %448, %dx.types.Handle %449, float %58, float %59, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %451 = extractvalue %dx.types.ResRet.f32 %450, 2
  %452 = extractvalue %dx.types.ResRet.f32 %450, 3
  %453 = fmul fast float %451, %451
  %454 = fmul fast float %452, %452
  br label %455

; <label>:455                                     ; preds = %447, %423, %420
  %456 = phi float [ %453, %447 ], [ %446, %423 ], [ 1.000000e+00, %420 ]
  %457 = phi float [ %454, %447 ], [ %446, %423 ], [ 1.000000e+00, %420 ]
  %458 = fsub fast float -0.000000e+00, %310
  %459 = fsub fast float -0.000000e+00, %311
  %460 = fsub fast float -0.000000e+00, %312
  %461 = fsub fast float %314, %292
  %462 = fsub fast float %315, %296
  %463 = fsub fast float %316, %300
  %464 = call float @dx.op.dot3.f32(i32 55, float %461, float %462, float %463, float %461, float %462, float %463)  ; Dot3(ax,ay,az,bx,by,bz)
  %465 = call float @dx.op.unary.f32(i32 25, float %464)  ; Rsqrt(value)
  %466 = fmul fast float %465, %461
  %467 = fmul fast float %465, %462
  %468 = fmul fast float %465, %463
  br i1 %351, label %469, label %476

; <label>:469                                     ; preds = %455
  %470 = fmul fast float %317, %317
  %471 = fmul fast float %470, %464
  %472 = fmul fast float %471, %471
  %473 = fsub fast float 1.000000e+00, %472
  %474 = call float @dx.op.unary.f32(i32 7, float %473)  ; Saturate(value)
  %475 = fmul fast float %474, %474
  br label %486

; <label>:476                                     ; preds = %455
  %477 = fmul fast float %461, %317
  %478 = fmul fast float %462, %317
  %479 = fmul fast float %463, %317
  %480 = call float @dx.op.dot3.f32(i32 55, float %477, float %478, float %479, float %477, float %478, float %479)  ; Dot3(ax,ay,az,bx,by,bz)
  %481 = call float @dx.op.unary.f32(i32 7, float %480)  ; Saturate(value)
  %482 = fsub fast float 1.000000e+00, %481
  %483 = call float @dx.op.unary.f32(i32 23, float %482)  ; Log(value)
  %484 = fmul fast float %483, %322
  %485 = call float @dx.op.unary.f32(i32 21, float %484)  ; Exp(value)
  br label %486

; <label>:486                                     ; preds = %476, %469
  %487 = phi float [ %475, %469 ], [ %485, %476 ]
  %488 = call float @dx.op.dot3.f32(i32 55, float %466, float %467, float %468, float %324, float %325, float %326)  ; Dot3(ax,ay,az,bx,by,bz)
  %489 = fsub fast float %488, %332
  %490 = fmul fast float %489, %333
  %491 = call float @dx.op.unary.f32(i32 7, float %490)  ; Saturate(value)
  %492 = fmul fast float %491, %491
  %493 = fmul fast float %492, %487
  %494 = fmul fast float %493, %319
  %495 = fmul fast float %493, %320
  %496 = fmul fast float %493, %321
  %497 = fcmp fast ogt float %493, 0.000000e+00
  br i1 %497, label %498, label %3875, !dx.controlflow.hints !53

; <label>:498                                     ; preds = %486
  %499 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %500 = extractvalue %dx.types.CBufRet.f32 %499, 1
  %501 = fmul fast float %500, %74
  %502 = icmp eq i32 %350, 0
  br i1 %502, label %517, label %503, !dx.controlflow.hints !54

; <label>:503                                     ; preds = %498
  %504 = call float @dx.op.dot4.f32(i32 56, float %346, float %347, float %348, float %349, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %505 = call float @dx.op.dot4.f32(i32 56, float %152, float %153, float %154, float %155, float %346, float %347, float %348, float %349)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %506 = fadd fast float %505, -1.000000e+00
  %507 = fmul fast float %506, %504
  %508 = fadd fast float %507, 1.000000e+00
  %509 = fmul fast float %508, %456
  %510 = fmul fast float %508, %457
  %511 = icmp ugt i32 %350, 1
  %512 = fcmp fast ogt float %340, 0.000000e+00
  %513 = and i1 %512, %511
  br i1 %513, label %514, label %517

; <label>:514                                     ; preds = %503
  %515 = select i1 %341, float 1.000000e+00, float %501
  %516 = fmul fast float %515, %340
  br label %517

; <label>:517                                     ; preds = %514, %503, %498
  %518 = phi float [ %457, %514 ], [ %457, %503 ], [ 1.000000e+00, %498 ]
  %519 = phi float [ %510, %514 ], [ %510, %503 ], [ 1.000000e+00, %498 ]
  %520 = phi float [ %509, %514 ], [ %509, %503 ], [ %256, %498 ]
  %521 = phi float [ %516, %514 ], [ 0.000000e+00, %503 ], [ 0.000000e+00, %498 ]
  %522 = icmp ult i32 %350, 2
  %523 = icmp eq i32 %126, 7
  %524 = and i1 %523, %522
  %525 = fmul fast float %501, 0x3FC99999A0000000
  %526 = select i1 %524, float %525, float %521
  %527 = select i1 %163, float 5.000000e-01, float %526
  %528 = fcmp fast ogt float %527, 0.000000e+00
  br i1 %528, label %529, label %821, !dx.controlflow.hints !55

; <label>:529                                     ; preds = %517
  %530 = fadd fast float %362, -5.000000e-01
  %531 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %532 = extractvalue %dx.types.CBufRet.f32 %531, 0
  %533 = extractvalue %dx.types.CBufRet.f32 %531, 1
  %534 = extractvalue %dx.types.CBufRet.f32 %531, 2
  %535 = extractvalue %dx.types.CBufRet.f32 %531, 3
  %536 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %537 = extractvalue %dx.types.CBufRet.f32 %536, 0
  %538 = extractvalue %dx.types.CBufRet.f32 %536, 1
  %539 = extractvalue %dx.types.CBufRet.f32 %536, 2
  %540 = extractvalue %dx.types.CBufRet.f32 %536, 3
  %541 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %542 = extractvalue %dx.types.CBufRet.f32 %541, 0
  %543 = extractvalue %dx.types.CBufRet.f32 %541, 1
  %544 = extractvalue %dx.types.CBufRet.f32 %541, 2
  %545 = extractvalue %dx.types.CBufRet.f32 %541, 3
  %546 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %547 = extractvalue %dx.types.CBufRet.f32 %546, 0
  %548 = extractvalue %dx.types.CBufRet.f32 %546, 1
  %549 = extractvalue %dx.types.CBufRet.f32 %546, 2
  %550 = extractvalue %dx.types.CBufRet.f32 %546, 3
  %551 = fmul fast float %532, %292
  %552 = call float @dx.op.tertiary.f32(i32 46, float %296, float %537, float %551)  ; FMad(a,b,c)
  %553 = call float @dx.op.tertiary.f32(i32 46, float %300, float %542, float %552)  ; FMad(a,b,c)
  %554 = fadd fast float %553, %547
  %555 = fmul fast float %533, %292
  %556 = call float @dx.op.tertiary.f32(i32 46, float %296, float %538, float %555)  ; FMad(a,b,c)
  %557 = call float @dx.op.tertiary.f32(i32 46, float %300, float %543, float %556)  ; FMad(a,b,c)
  %558 = fadd fast float %557, %548
  %559 = fmul fast float %534, %292
  %560 = call float @dx.op.tertiary.f32(i32 46, float %296, float %539, float %559)  ; FMad(a,b,c)
  %561 = call float @dx.op.tertiary.f32(i32 46, float %300, float %544, float %560)  ; FMad(a,b,c)
  %562 = fadd fast float %561, %549
  %563 = fmul fast float %535, %292
  %564 = call float @dx.op.tertiary.f32(i32 46, float %296, float %540, float %563)  ; FMad(a,b,c)
  %565 = call float @dx.op.tertiary.f32(i32 46, float %300, float %545, float %564)  ; FMad(a,b,c)
  %566 = fadd fast float %565, %550
  %567 = fmul fast float %527, %466
  %568 = fmul fast float %527, %467
  %569 = fmul fast float %527, %468
  %570 = fmul fast float %532, %567
  %571 = call float @dx.op.tertiary.f32(i32 46, float %568, float %537, float %570)  ; FMad(a,b,c)
  %572 = call float @dx.op.tertiary.f32(i32 46, float %569, float %542, float %571)  ; FMad(a,b,c)
  %573 = fmul fast float %533, %567
  %574 = call float @dx.op.tertiary.f32(i32 46, float %568, float %538, float %573)  ; FMad(a,b,c)
  %575 = call float @dx.op.tertiary.f32(i32 46, float %569, float %543, float %574)  ; FMad(a,b,c)
  %576 = fmul fast float %534, %567
  %577 = call float @dx.op.tertiary.f32(i32 46, float %568, float %539, float %576)  ; FMad(a,b,c)
  %578 = call float @dx.op.tertiary.f32(i32 46, float %569, float %544, float %577)  ; FMad(a,b,c)
  %579 = fmul fast float %535, %567
  %580 = call float @dx.op.tertiary.f32(i32 46, float %568, float %540, float %579)  ; FMad(a,b,c)
  %581 = call float @dx.op.tertiary.f32(i32 46, float %569, float %545, float %580)  ; FMad(a,b,c)
  %582 = fadd fast float %572, %554
  %583 = fadd fast float %575, %558
  %584 = fadd fast float %578, %562
  %585 = fadd fast float %581, %566
  %586 = fdiv fast float %554, %566
  %587 = fdiv fast float %558, %566
  %588 = fdiv fast float %562, %566
  %589 = fdiv fast float %582, %585
  %590 = fdiv fast float %583, %585
  %591 = fdiv fast float %584, %585
  %592 = fsub fast float %589, %586
  %593 = fsub fast float %590, %587
  %594 = fsub fast float %591, %588
  %595 = fmul fast float %52, %586
  %596 = fmul fast float %53, %587
  %597 = fadd fast float %595, %57
  %598 = fadd fast float %596, %56
  %599 = fmul fast float %52, %592
  %600 = fmul fast float %53, %593
  %601 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %602 = extractvalue %dx.types.CBufRet.f32 %601, 2
  %603 = extractvalue %dx.types.CBufRet.f32 %601, 3
  %604 = call float @dx.op.tertiary.f32(i32 46, float %527, float %602, float 0.000000e+00)  ; FMad(a,b,c)
  %605 = call float @dx.op.tertiary.f32(i32 46, float %527, float %603, float 0.000000e+00)  ; FMad(a,b,c)
  %606 = fadd fast float %604, %562
  %607 = fadd fast float %605, %566
  %608 = fdiv fast float %606, %607
  %609 = fsub fast float %608, %588
  %610 = call float @dx.op.unary.f32(i32 6, float %609)  ; FAbs(value)
  %611 = fmul fast float %610, 2.500000e-01
  %612 = fmul fast float %530, 1.250000e-01
  %613 = fadd fast float %612, 1.250000e-01
  %614 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %60, %dx.types.Handle %61, float %597, float %598, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %615 = extractvalue %dx.types.ResRet.f32 %614, 0
  %616 = fmul fast float %599, %613
  %617 = fmul fast float %600, %613
  %618 = fmul fast float %594, %613
  %619 = fadd fast float %616, %597
  %620 = fadd fast float %617, %598
  %621 = fadd fast float %618, %588
  %622 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %60, %dx.types.Handle %61, float %619, float %620, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %623 = extractvalue %dx.types.ResRet.f32 %622, 0
  %624 = fadd fast float %621, %611
  %625 = fsub fast float %624, %623
  %626 = call float @dx.op.unary.f32(i32 6, float %625)  ; FAbs(value)
  %627 = fcmp fast olt float %626, %611
  %628 = fcmp fast une float %623, %615
  %629 = and i1 %627, %628
  %630 = select i1 %629, float %613, float -1.000000e+00
  %631 = fadd fast float %612, 2.500000e-01
  %632 = fmul fast float %599, %631
  %633 = fmul fast float %600, %631
  %634 = fmul fast float %594, %631
  %635 = fadd fast float %632, %597
  %636 = fadd fast float %633, %598
  %637 = fadd fast float %634, %588
  %638 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %60, %dx.types.Handle %61, float %635, float %636, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %639 = extractvalue %dx.types.ResRet.f32 %638, 0
  %640 = fadd fast float %637, %611
  %641 = fsub fast float %640, %639
  %642 = call float @dx.op.unary.f32(i32 6, float %641)  ; FAbs(value)
  %643 = fcmp fast olt float %642, %611
  %644 = fcmp fast une float %639, %615
  %645 = and i1 %643, %644
  %646 = fcmp fast olt float %630, 0.000000e+00
  %647 = and i1 %646, %645
  %648 = select i1 %647, float %631, float %630
  %649 = fadd fast float %612, 3.750000e-01
  %650 = fmul fast float %599, %649
  %651 = fmul fast float %600, %649
  %652 = fmul fast float %594, %649
  %653 = fadd fast float %650, %597
  %654 = fadd fast float %651, %598
  %655 = fadd fast float %652, %588
  %656 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %60, %dx.types.Handle %61, float %653, float %654, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %657 = extractvalue %dx.types.ResRet.f32 %656, 0
  %658 = fadd fast float %655, %611
  %659 = fsub fast float %658, %657
  %660 = call float @dx.op.unary.f32(i32 6, float %659)  ; FAbs(value)
  %661 = fcmp fast olt float %660, %611
  %662 = fcmp fast une float %657, %615
  %663 = and i1 %661, %662
  %664 = fcmp fast olt float %648, 0.000000e+00
  %665 = and i1 %664, %663
  %666 = select i1 %665, float %649, float %648
  %667 = fadd fast float %612, 5.000000e-01
  %668 = fmul fast float %599, %667
  %669 = fmul fast float %600, %667
  %670 = fmul fast float %594, %667
  %671 = fadd fast float %668, %597
  %672 = fadd fast float %669, %598
  %673 = fadd fast float %670, %588
  %674 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %60, %dx.types.Handle %61, float %671, float %672, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %675 = extractvalue %dx.types.ResRet.f32 %674, 0
  %676 = fadd fast float %673, %611
  %677 = fsub fast float %676, %675
  %678 = call float @dx.op.unary.f32(i32 6, float %677)  ; FAbs(value)
  %679 = fcmp fast olt float %678, %611
  %680 = fcmp fast une float %675, %615
  %681 = and i1 %679, %680
  %682 = fcmp fast olt float %666, 0.000000e+00
  %683 = and i1 %682, %681
  %684 = select i1 %683, float %667, float %666
  %685 = fadd fast float %612, 6.250000e-01
  %686 = fmul fast float %599, %685
  %687 = fmul fast float %600, %685
  %688 = fmul fast float %594, %685
  %689 = fadd fast float %686, %597
  %690 = fadd fast float %687, %598
  %691 = fadd fast float %688, %588
  %692 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %60, %dx.types.Handle %61, float %689, float %690, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %693 = extractvalue %dx.types.ResRet.f32 %692, 0
  %694 = fadd fast float %691, %611
  %695 = fsub fast float %694, %693
  %696 = call float @dx.op.unary.f32(i32 6, float %695)  ; FAbs(value)
  %697 = fcmp fast olt float %696, %611
  %698 = fcmp fast une float %693, %615
  %699 = and i1 %697, %698
  %700 = fcmp fast olt float %684, 0.000000e+00
  %701 = and i1 %700, %699
  %702 = select i1 %701, float %685, float %684
  %703 = fadd fast float %612, 7.500000e-01
  %704 = fmul fast float %599, %703
  %705 = fmul fast float %600, %703
  %706 = fmul fast float %594, %703
  %707 = fadd fast float %704, %597
  %708 = fadd fast float %705, %598
  %709 = fadd fast float %706, %588
  %710 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %60, %dx.types.Handle %61, float %707, float %708, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %711 = extractvalue %dx.types.ResRet.f32 %710, 0
  %712 = fadd fast float %709, %611
  %713 = fsub fast float %712, %711
  %714 = call float @dx.op.unary.f32(i32 6, float %713)  ; FAbs(value)
  %715 = fcmp fast olt float %714, %611
  %716 = fcmp fast une float %711, %615
  %717 = and i1 %715, %716
  %718 = fcmp fast olt float %702, 0.000000e+00
  %719 = and i1 %718, %717
  %720 = select i1 %719, float %703, float %702
  %721 = fadd fast float %612, 8.750000e-01
  %722 = fmul fast float %599, %721
  %723 = fmul fast float %600, %721
  %724 = fmul fast float %594, %721
  %725 = fadd fast float %722, %597
  %726 = fadd fast float %723, %598
  %727 = fadd fast float %724, %588
  %728 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %60, %dx.types.Handle %61, float %725, float %726, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %729 = extractvalue %dx.types.ResRet.f32 %728, 0
  %730 = fadd fast float %727, %611
  %731 = fsub fast float %730, %729
  %732 = call float @dx.op.unary.f32(i32 6, float %731)  ; FAbs(value)
  %733 = fcmp fast olt float %732, %611
  %734 = fcmp fast une float %729, %615
  %735 = and i1 %733, %734
  %736 = fcmp fast olt float %720, 0.000000e+00
  %737 = and i1 %736, %735
  %738 = select i1 %737, float %721, float %720
  %739 = fadd fast float %612, 1.000000e+00
  %740 = fmul fast float %599, %739
  %741 = fmul fast float %600, %739
  %742 = fmul fast float %594, %739
  %743 = fadd fast float %740, %597
  %744 = fadd fast float %741, %598
  %745 = fadd fast float %742, %588
  %746 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %60, %dx.types.Handle %61, float %743, float %744, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %747 = extractvalue %dx.types.ResRet.f32 %746, 0
  %748 = fadd fast float %745, %611
  %749 = fsub fast float %748, %747
  %750 = call float @dx.op.unary.f32(i32 6, float %749)  ; FAbs(value)
  %751 = fcmp fast olt float %750, %611
  %752 = fcmp fast une float %747, %615
  %753 = and i1 %751, %752
  %754 = fcmp fast olt float %738, 0.000000e+00
  %755 = and i1 %754, %753
  %756 = select i1 %755, float %739, float %738
  %757 = fcmp fast ogt float %756, 0.000000e+00
  br i1 %757, label %758, label %787

; <label>:758                                     ; preds = %529
  %759 = fmul fast float %756, %599
  %760 = fmul fast float %756, %600
  %761 = fadd fast float %759, %597
  %762 = fadd fast float %760, %598
  %763 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %81, %dx.types.Handle %61, float %761, float %762, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %764 = extractvalue %dx.types.ResRet.f32 %763, 3
  %765 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %86, %dx.types.Handle %61, float %761, float %762, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %766 = extractvalue %dx.types.ResRet.f32 %765, 3
  %767 = fmul fast float %766, 2.550000e+02
  %768 = fadd fast float %767, 5.000000e-01
  %769 = fptoui float %768 to i32
  %770 = and i32 %769, 15
  %771 = fmul fast float %764, 0x400FFDF3C0000000
  %772 = fptoui float %771 to i32
  %773 = and i32 %772, 1
  %774 = icmp ne i32 %773, 0
  %775 = icmp ne i32 %770, 9
  %776 = and i1 %774, %775
  %777 = zext i1 %776 to i32
  %778 = fcmp fast olt float %761, 1.000000e+00
  %779 = fcmp fast olt float %762, 1.000000e+00
  %780 = fcmp fast ogt float %761, 0.000000e+00
  %781 = fcmp fast ogt float %762, 0.000000e+00
  %782 = and i1 %780, %778
  %783 = and i1 %781, %779
  %784 = and i1 %782, %783
  %785 = fmul fast float %756, %527
  %786 = select i1 %784, float %785, float -1.000000e+00
  br label %787

; <label>:787                                     ; preds = %758, %529
  %788 = phi float [ %786, %758 ], [ -1.000000e+00, %529 ]
  %789 = phi i32 [ %777, %758 ], [ 0, %529 ]
  %790 = fcmp fast ogt float %788, 0.000000e+00
  br i1 %790, label %791, label %821

; <label>:791                                     ; preds = %787
  %792 = icmp ne i32 %789, 0
  %793 = select i1 %792, float %342, float %344
  %794 = fcmp fast ogt float %793, 0.000000e+00
  br i1 %794, label %795, label %816

; <label>:795                                     ; preds = %791
  %796 = add nsw i32 %126, -5
  %797 = icmp ult i32 %796, 3
  %798 = or i1 %135, %797
  %799 = or i1 %163, %798
  %800 = icmp ne i32 %126, 7
  %801 = and i1 %800, %799
  %802 = icmp ne i32 %126, 9
  %803 = and i1 %802, %801
  %804 = icmp ne i32 %126, 5
  %805 = and i1 %804, %803
  br i1 %805, label %806, label %816

; <label>:806                                     ; preds = %795
  %807 = call float @dx.op.binary.f32(i32 36, float %144, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %808 = fsub fast float 1.000000e+00, %807
  %809 = call float @dx.op.unary.f32(i32 23, float %808)  ; Log(value)
  %810 = fmul fast float %788, 0x3FA99999A0000000
  %811 = fmul fast float %810, %809
  %812 = call float @dx.op.unary.f32(i32 21, float %811)  ; Exp(value)
  %813 = call float @dx.op.unary.f32(i32 7, float %812)  ; Saturate(value)
  %814 = fsub fast float 1.000000e+00, %813
  %815 = fmul fast float %814, %793
  br label %816

; <label>:816                                     ; preds = %806, %795, %791
  %817 = phi float [ %815, %806 ], [ %793, %795 ], [ %793, %791 ]
  %818 = fsub fast float 1.000000e+00, %817
  %819 = fmul fast float %818, %520
  %820 = fmul fast float %818, %519
  br label %821

; <label>:821                                     ; preds = %816, %787, %517
  %822 = phi float [ %820, %816 ], [ %519, %787 ], [ %519, %517 ]
  %823 = phi float [ %819, %816 ], [ %520, %787 ], [ %520, %517 ]
  %824 = fadd fast float %823, %822
  %825 = fcmp fast ogt float %824, 0.000000e+00
  br i1 %825, label %826, label %3875, !dx.controlflow.hints !56

; <label>:826                                     ; preds = %821
  %827 = fmul fast float %335, 5.000000e-01
  %828 = fmul fast float %827, %328
  %829 = fmul fast float %827, %329
  %830 = fmul fast float %827, %330
  %831 = fsub fast float %461, %828
  %832 = fsub fast float %462, %829
  %833 = fsub fast float %463, %830
  %834 = fadd fast float %828, %461
  %835 = fadd fast float %829, %462
  %836 = fadd fast float %830, %463
  %837 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 245)  ; CBufferLoadLegacy(handle,regIndex)
  %838 = extractvalue %dx.types.CBufRet.f32 %837, 2
  %839 = call float @dx.op.binary.f32(i32 35, float %90, float %838)  ; FMax(a,b)
  %840 = fcmp fast ogt float %335, 0.000000e+00
  %841 = call float @dx.op.dot3.f32(i32 55, float %831, float %832, float %833, float %831, float %832, float %833)  ; Dot3(ax,ay,az,bx,by,bz)
  %842 = call float @dx.op.unary.f32(i32 25, float %841)  ; Rsqrt(value)
  br i1 %840, label %843, label %859, !dx.controlflow.hints !57

; <label>:843                                     ; preds = %826
  %844 = call float @dx.op.dot3.f32(i32 55, float %834, float %835, float %836, float %834, float %835, float %836)  ; Dot3(ax,ay,az,bx,by,bz)
  %845 = call float @dx.op.unary.f32(i32 25, float %844)  ; Rsqrt(value)
  %846 = fmul fast float %845, %842
  %847 = call float @dx.op.dot3.f32(i32 55, float %831, float %832, float %833, float %834, float %835, float %836)  ; Dot3(ax,ay,az,bx,by,bz)
  %848 = fmul fast float %847, %846
  %849 = fmul fast float %848, 5.000000e-01
  %850 = fadd fast float %846, 5.000000e-01
  %851 = fadd fast float %850, %849
  %852 = fdiv fast float %846, %851
  %853 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %831, float %832, float %833)  ; Dot3(ax,ay,az,bx,by,bz)
  %854 = fmul fast float %853, %842
  %855 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %834, float %835, float %836)  ; Dot3(ax,ay,az,bx,by,bz)
  %856 = fmul fast float %855, %845
  %857 = fadd fast float %856, %854
  %858 = fmul fast float %857, 5.000000e-01
  br label %866

; <label>:859                                     ; preds = %826
  %860 = fadd fast float %841, 1.000000e+00
  %861 = fdiv fast float 1.000000e+00, %860
  %862 = fmul fast float %842, %831
  %863 = fmul fast float %842, %832
  %864 = fmul fast float %842, %833
  %865 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %862, float %863, float %864)  ; Dot3(ax,ay,az,bx,by,bz)
  br label %866

; <label>:866                                     ; preds = %859, %843
  %867 = phi float [ %858, %843 ], [ %865, %859 ]
  %868 = phi float [ %852, %843 ], [ %861, %859 ]
  %869 = phi float [ %848, %843 ], [ 1.000000e+00, %859 ]
  %870 = fcmp fast ogt float %334, 0.000000e+00
  br i1 %870, label %871, label %884

; <label>:871                                     ; preds = %866
  %872 = fmul fast float %334, %334
  %873 = fmul fast float %872, %868
  %874 = call float @dx.op.unary.f32(i32 7, float %873)  ; Saturate(value)
  %875 = call float @dx.op.unary.f32(i32 24, float %874)  ; Sqrt(value)
  %876 = fcmp fast olt float %867, %875
  br i1 %876, label %877, label %884

; <label>:877                                     ; preds = %871
  %878 = fsub fast float -0.000000e+00, %875
  %879 = call float @dx.op.binary.f32(i32 35, float %867, float %878)  ; FMax(a,b)
  %880 = fadd fast float %879, %875
  %881 = fmul fast float %880, %880
  %882 = fmul fast float %875, 4.000000e+00
  %883 = fdiv fast float %881, %882
  br label %884

; <label>:884                                     ; preds = %877, %871, %866
  %885 = phi float [ %867, %866 ], [ %883, %877 ], [ %867, %871 ]
  %886 = call float @dx.op.unary.f32(i32 7, float %885)  ; Saturate(value)
  %887 = select i1 %351, float %868, float 1.000000e+00
  br i1 %840, label %888, label %919

; <label>:888                                     ; preds = %884
  %889 = call float @dx.op.dot3.f32(i32 55, float %310, float %311, float %312, float %160, float %161, float %162)  ; Dot3(ax,ay,az,bx,by,bz)
  %890 = fmul fast float %889, 2.000000e+00
  %891 = fmul fast float %890, %160
  %892 = fmul fast float %890, %161
  %893 = fmul fast float %890, %162
  %894 = fsub fast float %310, %891
  %895 = fsub fast float %311, %892
  %896 = fsub fast float %312, %893
  %897 = fmul fast float %335, %328
  %898 = fmul fast float %335, %329
  %899 = fmul fast float %335, %330
  %900 = fmul fast float %335, %335
  %901 = call float @dx.op.dot3.f32(i32 55, float %894, float %895, float %896, float %897, float %898, float %899)  ; Dot3(ax,ay,az,bx,by,bz)
  %902 = fmul fast float %894, %901
  %903 = fmul fast float %895, %901
  %904 = fmul fast float %896, %901
  %905 = fsub fast float %902, %897
  %906 = fsub fast float %903, %898
  %907 = fsub fast float %904, %899
  %908 = call float @dx.op.dot3.f32(i32 55, float %831, float %832, float %833, float %905, float %906, float %907)  ; Dot3(ax,ay,az,bx,by,bz)
  %909 = fmul fast float %901, %901
  %910 = fsub fast float %900, %909
  %911 = fdiv fast float %908, %910
  %912 = call float @dx.op.unary.f32(i32 7, float %911)  ; Saturate(value)
  %913 = fmul fast float %912, %897
  %914 = fmul fast float %912, %898
  %915 = fmul fast float %912, %899
  %916 = fadd fast float %913, %831
  %917 = fadd fast float %914, %832
  %918 = fadd fast float %915, %833
  br label %919

; <label>:919                                     ; preds = %888, %884
  %920 = phi float [ %916, %888 ], [ %831, %884 ]
  %921 = phi float [ %917, %888 ], [ %832, %884 ]
  %922 = phi float [ %918, %888 ], [ %833, %884 ]
  %923 = call float @dx.op.dot3.f32(i32 55, float %920, float %921, float %922, float %920, float %921, float %922)  ; Dot3(ax,ay,az,bx,by,bz)
  %924 = call float @dx.op.unary.f32(i32 25, float %923)  ; Rsqrt(value)
  %925 = fmul fast float %924, %920
  %926 = fmul fast float %924, %921
  %927 = fmul fast float %924, %922
  %928 = call float @dx.op.binary.f32(i32 35, float %839, float %838)  ; FMax(a,b)
  %929 = fmul fast float %928, %928
  %930 = fmul fast float %924, %334
  %931 = fsub fast float 1.000000e+00, %929
  %932 = fmul fast float %930, %931
  %933 = call float @dx.op.unary.f32(i32 7, float %932)  ; Saturate(value)
  %934 = fmul fast float %924, %336
  %935 = call float @dx.op.unary.f32(i32 7, float %934)  ; Saturate(value)
  switch i32 %126, label %3821 [
    i32 1, label %936
    i32 10, label %936
    i32 11, label %936
    i32 2, label %1228
    i32 3, label %1637
    i32 4, label %1953
    i32 5, label %2421
    i32 6, label %2793
    i32 7, label %3111
    i32 8, label %3370
    i32 9, label %3617
  ]

; <label>:936                                     ; preds = %919, %919, %919
  %937 = and i32 %125, 16
  %938 = icmp ne i32 %937, 0
  %939 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %940 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %458, float %459, float %460)  ; Dot3(ax,ay,az,bx,by,bz)
  %941 = call float @dx.op.dot3.f32(i32 55, float %458, float %459, float %460, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %942 = fmul fast float %941, 2.000000e+00
  %943 = fadd fast float %942, 2.000000e+00
  %944 = call float @dx.op.unary.f32(i32 25, float %943)  ; Rsqrt(value)
  %945 = fadd fast float %940, %939
  %946 = fmul fast float %944, %945
  %947 = call float @dx.op.unary.f32(i32 7, float %946)  ; Saturate(value)
  %948 = fmul fast float %944, %941
  %949 = fadd fast float %948, %944
  %950 = call float @dx.op.unary.f32(i32 7, float %949)  ; Saturate(value)
  br i1 %938, label %951, label %974, !dx.controlflow.hints !58

; <label>:951                                     ; preds = %936
  %952 = fmul fast float %252, %161
  %953 = fmul fast float %251, %162
  %954 = fsub fast float %952, %953
  %955 = fmul fast float %250, %162
  %956 = fmul fast float %252, %160
  %957 = fsub fast float %955, %956
  %958 = fmul fast float %251, %160
  %959 = fmul fast float %250, %161
  %960 = fsub fast float %958, %959
  %961 = call float @dx.op.dot3.f32(i32 55, float %954, float %957, float %960, float %954, float %957, float %960)  ; Dot3(ax,ay,az,bx,by,bz)
  %962 = call float @dx.op.unary.f32(i32 25, float %961)  ; Rsqrt(value)
  %963 = fmul fast float %962, %954
  %964 = fmul fast float %962, %957
  %965 = fmul fast float %962, %960
  %966 = call float @dx.op.dot3.f32(i32 55, float %250, float %251, float %252, float %458, float %459, float %460)  ; Dot3(ax,ay,az,bx,by,bz)
  %967 = call float @dx.op.dot3.f32(i32 55, float %250, float %251, float %252, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %968 = fadd fast float %967, %966
  %969 = fmul fast float %968, %944
  %970 = call float @dx.op.dot3.f32(i32 55, float %963, float %964, float %965, float %458, float %459, float %460)  ; Dot3(ax,ay,az,bx,by,bz)
  %971 = call float @dx.op.dot3.f32(i32 55, float %963, float %964, float %965, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %972 = fadd fast float %971, %970
  %973 = fmul fast float %972, %944
  br label %1065

; <label>:974                                     ; preds = %936
  %975 = fcmp fast ogt float %933, 0.000000e+00
  br i1 %975, label %976, label %1065

; <label>:976                                     ; preds = %974
  %977 = fmul fast float %933, %933
  %978 = fsub fast float 1.000000e+00, %977
  %979 = call float @dx.op.unary.f32(i32 24, float %978)  ; Sqrt(value)
  %980 = fmul fast float %939, 2.000000e+00
  %981 = fmul fast float %980, %940
  %982 = fsub fast float %981, %941
  %983 = fcmp fast ult float %982, %979
  br i1 %983, label %986, label %984

; <label>:984                                     ; preds = %976
  %985 = call float @dx.op.unary.f32(i32 6, float %940)  ; FAbs(value)
  br label %1065

; <label>:986                                     ; preds = %976
  %987 = fmul fast float %982, %982
  %988 = fsub fast float 1.000000e+00, %987
  %989 = call float @dx.op.unary.f32(i32 25, float %988)  ; Rsqrt(value)
  %990 = fmul fast float %989, %933
  %991 = fmul fast float %982, %939
  %992 = fsub fast float %940, %991
  %993 = fmul fast float %990, %992
  %994 = fmul fast float %940, %940
  %995 = fmul fast float %994, 2.000000e+00
  %996 = fadd fast float %995, -1.000000e+00
  %997 = fmul fast float %982, %941
  %998 = fsub fast float %996, %997
  %999 = fmul fast float %990, %998
  %1000 = fmul fast float %939, %939
  %1001 = fsub fast float 1.000000e+00, %1000
  %1002 = fsub fast float %1001, %994
  %1003 = fmul fast float %941, %941
  %1004 = fsub fast float %1002, %1003
  %1005 = fmul fast float %981, %941
  %1006 = fadd fast float %1004, %1005
  %1007 = call float @dx.op.unary.f32(i32 7, float %1006)  ; Saturate(value)
  %1008 = call float @dx.op.unary.f32(i32 24, float %1007)  ; Sqrt(value)
  %1009 = fmul fast float %1008, %990
  %1010 = fmul fast float %940, 2.000000e+00
  %1011 = fmul fast float %1010, %990
  %1012 = fmul fast float %1011, %1008
  %1013 = fmul fast float %979, %939
  %1014 = fadd fast float %1013, %940
  %1015 = fadd fast float %1014, %993
  %1016 = fmul fast float %979, %941
  %1017 = fadd fast float %1016, 1.000000e+00
  %1018 = fadd fast float %1017, %999
  %1019 = fmul fast float %1009, %1018
  %1020 = fmul fast float %1015, %1018
  %1021 = fmul fast float %1012, %1015
  %1022 = fmul fast float %1019, 5.000000e-01
  %1023 = fmul fast float %1015, 2.500000e-01
  %1024 = fmul fast float %1023, %1012
  %1025 = fsub fast float %1024, %1022
  %1026 = fmul fast float %1025, %1020
  %1027 = fmul fast float %1019, %1019
  %1028 = fmul fast float %1019, 2.000000e+00
  %1029 = fsub fast float %1021, %1028
  %1030 = fmul fast float %1029, %1021
  %1031 = fadd fast float %1030, %1027
  %1032 = fmul fast float %1018, %1018
  %1033 = fmul fast float %1032, %1014
  %1034 = fadd fast float %1018, %1016
  %1035 = fmul fast float %1034, 5.000000e-01
  %1036 = fsub fast float -5.000000e-01, %1035
  %1037 = fmul fast float %1036, %1020
  %1038 = fadd fast float %1037, %1033
  %1039 = fmul fast float %1038, %1015
  %1040 = fadd fast float %1031, %1039
  %1041 = fmul fast float %1026, 2.000000e+00
  %1042 = fmul fast float %1040, %1040
  %1043 = fmul fast float %1026, %1026
  %1044 = fadd fast float %1042, %1043
  %1045 = fdiv fast float %1041, %1044
  %1046 = fmul fast float %1040, %1045
  %1047 = fmul fast float %1026, %1045
  %1048 = fsub fast float 1.000000e+00, %1047
  %1049 = fmul fast float %1048, %993
  %1050 = fmul fast float %1046, %1009
  %1051 = fmul fast float %1048, %999
  %1052 = fmul fast float %1046, %1012
  %1053 = fadd fast float %1052, %1016
  %1054 = fadd fast float %1053, %1051
  %1055 = fmul fast float %1054, 2.000000e+00
  %1056 = fadd fast float %1055, 2.000000e+00
  %1057 = call float @dx.op.unary.f32(i32 25, float %1056)  ; Rsqrt(value)
  %1058 = fadd fast float %1014, %1050
  %1059 = fadd fast float %1058, %1049
  %1060 = fmul fast float %1059, %1057
  %1061 = call float @dx.op.unary.f32(i32 7, float %1060)  ; Saturate(value)
  %1062 = fmul fast float %1054, %1057
  %1063 = fadd fast float %1062, %1057
  %1064 = call float @dx.op.unary.f32(i32 7, float %1063)  ; Saturate(value)
  br label %1065

; <label>:1065                                    ; preds = %986, %984, %974, %951
  %1066 = phi float [ %973, %951 ], [ 0.000000e+00, %986 ], [ 0.000000e+00, %984 ], [ 0.000000e+00, %974 ]
  %1067 = phi float [ %971, %951 ], [ 0.000000e+00, %986 ], [ 0.000000e+00, %984 ], [ 0.000000e+00, %974 ]
  %1068 = phi float [ %970, %951 ], [ 0.000000e+00, %986 ], [ 0.000000e+00, %984 ], [ 0.000000e+00, %974 ]
  %1069 = phi float [ %969, %951 ], [ 0.000000e+00, %986 ], [ 0.000000e+00, %984 ], [ 0.000000e+00, %974 ]
  %1070 = phi float [ %967, %951 ], [ 0.000000e+00, %986 ], [ 0.000000e+00, %984 ], [ 0.000000e+00, %974 ]
  %1071 = phi float [ %966, %951 ], [ 0.000000e+00, %986 ], [ 0.000000e+00, %984 ], [ 0.000000e+00, %974 ]
  %1072 = phi float [ %950, %951 ], [ %1064, %986 ], [ %985, %984 ], [ %950, %974 ]
  %1073 = phi float [ %947, %951 ], [ %1061, %986 ], [ 1.000000e+00, %984 ], [ %947, %974 ]
  %1074 = call float @dx.op.unary.f32(i32 6, float %940)  ; FAbs(value)
  %1075 = fadd fast float %1074, 0x3EE4F8B580000000
  %1076 = call float @dx.op.unary.f32(i32 7, float %1075)  ; Saturate(value)
  %1077 = fmul fast float %221, 0x3FD45F3060000000
  %1078 = fmul fast float %222, 0x3FD45F3060000000
  %1079 = fmul fast float %223, 0x3FD45F3060000000
  %1080 = fmul fast float %886, %887
  %1081 = fmul fast float %1077, %1080
  %1082 = fmul fast float %1078, %1080
  %1083 = fmul fast float %1079, %1080
  %1084 = fmul fast float %839, %839
  br i1 %938, label %1085, label %1140, !dx.controlflow.hints !59

; <label>:1085                                    ; preds = %1065
  %1086 = fadd fast float %253, 1.000000e+00
  %1087 = fmul fast float %1084, %1086
  %1088 = call float @dx.op.binary.f32(i32 35, float %1087, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1089 = fsub fast float 1.000000e+00, %253
  %1090 = fmul fast float %1084, %1089
  %1091 = call float @dx.op.binary.f32(i32 35, float %1090, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1092 = fmul fast float %1091, %1088
  %1093 = fmul fast float %1091, %1069
  %1094 = fmul fast float %1088, %1066
  %1095 = fmul fast float %1092, %1073
  %1096 = call float @dx.op.dot3.f32(i32 55, float %1093, float %1094, float %1095, float %1093, float %1094, float %1095)  ; Dot3(ax,ay,az,bx,by,bz)
  %1097 = fdiv fast float %1092, %1096
  %1098 = fmul fast float %1092, 0x3FD45F3060000000
  %1099 = fmul fast float %1097, %1097
  %1100 = fmul fast float %1099, %1098
  %1101 = fmul fast float %1088, %1071
  %1102 = fmul fast float %1091, %1068
  %1103 = fmul fast float %1101, %1101
  %1104 = fmul fast float %1102, %1102
  %1105 = fmul fast float %1076, %1076
  %1106 = fadd fast float %1103, %1105
  %1107 = fadd fast float %1106, %1104
  %1108 = call float @dx.op.unary.f32(i32 24, float %1107)  ; Sqrt(value)
  %1109 = fmul fast float %1108, %886
  %1110 = fmul fast float %1088, %1070
  %1111 = fmul fast float %1091, %1067
  %1112 = fmul fast float %1110, %1110
  %1113 = fmul fast float %1111, %1111
  %1114 = fmul fast float %886, %886
  %1115 = fadd fast float %1112, %1114
  %1116 = fadd fast float %1115, %1113
  %1117 = call float @dx.op.unary.f32(i32 24, float %1116)  ; Sqrt(value)
  %1118 = fmul fast float %1117, %1076
  %1119 = fadd fast float %1118, %1109
  %1120 = fdiv fast float 5.000000e-01, %1119
  %1121 = fsub fast float 1.000000e+00, %1072
  %1122 = fmul fast float %1121, %1121
  %1123 = fmul fast float %1122, %1122
  %1124 = fmul fast float %1123, %1121
  %1125 = fmul fast float %233, 5.000000e+01
  %1126 = call float @dx.op.unary.f32(i32 7, float %1125)  ; Saturate(value)
  %1127 = fmul fast float %1126, %1124
  %1128 = fsub fast float 1.000000e+00, %1124
  %1129 = fmul fast float %1128, %232
  %1130 = fmul fast float %1128, %233
  %1131 = fmul fast float %1128, %234
  %1132 = fadd fast float %1127, %1129
  %1133 = fadd fast float %1127, %1130
  %1134 = fadd fast float %1127, %1131
  %1135 = fmul fast float %1100, %1080
  %1136 = fmul fast float %1135, %1120
  %1137 = fmul fast float %1136, %1132
  %1138 = fmul fast float %1136, %1133
  %1139 = fmul fast float %1136, %1134
  br label %3821

; <label>:1140                                    ; preds = %1065
  %1141 = fmul fast float %1084, %1084
  %1142 = fcmp fast ogt float %935, 0.000000e+00
  br i1 %1142, label %1143, label %1150

; <label>:1143                                    ; preds = %1140
  %1144 = fmul fast float %935, %935
  %1145 = fmul fast float %1072, 0x400CCCCCC0000000
  %1146 = fadd fast float %1145, 0x3FD99999A0000000
  %1147 = fdiv fast float %1144, %1146
  %1148 = fadd fast float %1147, %1141
  %1149 = call float @dx.op.unary.f32(i32 7, float %1148)  ; Saturate(value)
  br label %1150

; <label>:1150                                    ; preds = %1143, %1140
  %1151 = phi float [ %1149, %1143 ], [ %1141, %1140 ]
  %1152 = fcmp fast ogt float %933, 0.000000e+00
  br i1 %1152, label %1153, label %1166

; <label>:1153                                    ; preds = %1150
  %1154 = fmul fast float %933, 2.500000e-01
  %1155 = bitcast float %1151 to i32
  %1156 = ashr i32 %1155, 1
  %1157 = add nsw i32 %1156, 532487669
  %1158 = bitcast i32 %1157 to float
  %1159 = fmul fast float %1158, 3.000000e+00
  %1160 = fadd fast float %1159, %933
  %1161 = fmul fast float %1154, %1160
  %1162 = fadd fast float %1072, 0x3F50624DE0000000
  %1163 = fdiv fast float %1161, %1162
  %1164 = fadd fast float %1163, %1151
  %1165 = fdiv fast float %1151, %1164
  br label %1166

; <label>:1166                                    ; preds = %1153, %1150
  %1167 = phi float [ %1164, %1153 ], [ %1151, %1150 ]
  %1168 = phi float [ %1165, %1153 ], [ 1.000000e+00, %1150 ]
  %1169 = fcmp fast olt float %869, 1.000000e+00
  br i1 %1169, label %1170, label %1189

; <label>:1170                                    ; preds = %1166
  %1171 = fsub fast float 0x3FF00068E0000000, %869
  %1172 = fadd fast float %869, 1.000000e+00
  %1173 = fdiv fast float %1171, %1172
  %1174 = call float @dx.op.unary.f32(i32 24, float %1173)  ; Sqrt(value)
  %1175 = fmul fast float %1174, 2.500000e-01
  %1176 = bitcast float %1167 to i32
  %1177 = ashr i32 %1176, 1
  %1178 = add nsw i32 %1177, 532487669
  %1179 = bitcast i32 %1178 to float
  %1180 = fmul fast float %1179, 3.000000e+00
  %1181 = fadd fast float %1174, %1180
  %1182 = fmul fast float %1175, %1181
  %1183 = fadd fast float %1072, 0x3F50624DE0000000
  %1184 = fdiv fast float %1182, %1183
  %1185 = fadd fast float %1184, %1167
  %1186 = fdiv fast float %1167, %1185
  %1187 = call float @dx.op.unary.f32(i32 24, float %1186)  ; Sqrt(value)
  %1188 = fmul fast float %1187, %1168
  br label %1189

; <label>:1189                                    ; preds = %1170, %1166
  %1190 = phi float [ %1188, %1170 ], [ %1168, %1166 ]
  %1191 = fmul fast float %1151, %1073
  %1192 = fsub fast float %1191, %1073
  %1193 = fmul fast float %1192, %1073
  %1194 = fadd fast float %1193, 1.000000e+00
  %1195 = fmul fast float %1194, %1194
  %1196 = fmul fast float %1195, 0x400921FB60000000
  %1197 = fdiv fast float %1151, %1196
  %1198 = fmul fast float %1197, %1190
  %1199 = call float @dx.op.unary.f32(i32 24, float %1151)  ; Sqrt(value)
  %1200 = fsub fast float 1.000000e+00, %1199
  %1201 = fmul fast float %1200, %1076
  %1202 = fadd fast float %1201, %1199
  %1203 = fmul fast float %1202, %886
  %1204 = fmul fast float %1200, %886
  %1205 = fadd fast float %1204, %1199
  %1206 = fmul fast float %1205, %1076
  %1207 = fadd fast float %1203, %1206
  %1208 = fdiv fast float 5.000000e-01, %1207
  %1209 = fsub fast float 1.000000e+00, %1072
  %1210 = fmul fast float %1209, %1209
  %1211 = fmul fast float %1210, %1210
  %1212 = fmul fast float %1211, %1209
  %1213 = fmul fast float %233, 5.000000e+01
  %1214 = call float @dx.op.unary.f32(i32 7, float %1213)  ; Saturate(value)
  %1215 = fmul fast float %1214, %1212
  %1216 = fsub fast float 1.000000e+00, %1212
  %1217 = fmul fast float %1216, %232
  %1218 = fmul fast float %1216, %233
  %1219 = fmul fast float %1216, %234
  %1220 = fadd fast float %1215, %1217
  %1221 = fadd fast float %1215, %1218
  %1222 = fadd fast float %1215, %1219
  %1223 = fmul fast float %1198, %1208
  %1224 = fmul fast float %1223, %1080
  %1225 = fmul fast float %1224, %1220
  %1226 = fmul fast float %1224, %1221
  %1227 = fmul fast float %1224, %1222
  br label %3821

; <label>:1228                                    ; preds = %919
  %1229 = and i32 %125, 16
  %1230 = icmp ne i32 %1229, 0
  %1231 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %1232 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %458, float %459, float %460)  ; Dot3(ax,ay,az,bx,by,bz)
  %1233 = call float @dx.op.dot3.f32(i32 55, float %458, float %459, float %460, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %1234 = fmul fast float %1233, 2.000000e+00
  %1235 = fadd fast float %1234, 2.000000e+00
  %1236 = call float @dx.op.unary.f32(i32 25, float %1235)  ; Rsqrt(value)
  %1237 = fadd fast float %1232, %1231
  %1238 = fmul fast float %1236, %1237
  %1239 = call float @dx.op.unary.f32(i32 7, float %1238)  ; Saturate(value)
  %1240 = fmul fast float %1236, %1233
  %1241 = fadd fast float %1240, %1236
  %1242 = call float @dx.op.unary.f32(i32 7, float %1241)  ; Saturate(value)
  br i1 %1230, label %1243, label %1266, !dx.controlflow.hints !58

; <label>:1243                                    ; preds = %1228
  %1244 = fmul fast float %252, %161
  %1245 = fmul fast float %251, %162
  %1246 = fsub fast float %1244, %1245
  %1247 = fmul fast float %250, %162
  %1248 = fmul fast float %252, %160
  %1249 = fsub fast float %1247, %1248
  %1250 = fmul fast float %251, %160
  %1251 = fmul fast float %250, %161
  %1252 = fsub fast float %1250, %1251
  %1253 = call float @dx.op.dot3.f32(i32 55, float %1246, float %1249, float %1252, float %1246, float %1249, float %1252)  ; Dot3(ax,ay,az,bx,by,bz)
  %1254 = call float @dx.op.unary.f32(i32 25, float %1253)  ; Rsqrt(value)
  %1255 = fmul fast float %1254, %1246
  %1256 = fmul fast float %1254, %1249
  %1257 = fmul fast float %1254, %1252
  %1258 = call float @dx.op.dot3.f32(i32 55, float %250, float %251, float %252, float %458, float %459, float %460)  ; Dot3(ax,ay,az,bx,by,bz)
  %1259 = call float @dx.op.dot3.f32(i32 55, float %250, float %251, float %252, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %1260 = fadd fast float %1259, %1258
  %1261 = fmul fast float %1260, %1236
  %1262 = call float @dx.op.dot3.f32(i32 55, float %1255, float %1256, float %1257, float %458, float %459, float %460)  ; Dot3(ax,ay,az,bx,by,bz)
  %1263 = call float @dx.op.dot3.f32(i32 55, float %1255, float %1256, float %1257, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %1264 = fadd fast float %1263, %1262
  %1265 = fmul fast float %1264, %1236
  br label %1357

; <label>:1266                                    ; preds = %1228
  %1267 = fcmp fast ogt float %933, 0.000000e+00
  br i1 %1267, label %1268, label %1357

; <label>:1268                                    ; preds = %1266
  %1269 = fmul fast float %933, %933
  %1270 = fsub fast float 1.000000e+00, %1269
  %1271 = call float @dx.op.unary.f32(i32 24, float %1270)  ; Sqrt(value)
  %1272 = fmul fast float %1231, 2.000000e+00
  %1273 = fmul fast float %1272, %1232
  %1274 = fsub fast float %1273, %1233
  %1275 = fcmp fast ult float %1274, %1271
  br i1 %1275, label %1278, label %1276

; <label>:1276                                    ; preds = %1268
  %1277 = call float @dx.op.unary.f32(i32 6, float %1232)  ; FAbs(value)
  br label %1357

; <label>:1278                                    ; preds = %1268
  %1279 = fmul fast float %1274, %1274
  %1280 = fsub fast float 1.000000e+00, %1279
  %1281 = call float @dx.op.unary.f32(i32 25, float %1280)  ; Rsqrt(value)
  %1282 = fmul fast float %1281, %933
  %1283 = fmul fast float %1274, %1231
  %1284 = fsub fast float %1232, %1283
  %1285 = fmul fast float %1282, %1284
  %1286 = fmul fast float %1232, %1232
  %1287 = fmul fast float %1286, 2.000000e+00
  %1288 = fadd fast float %1287, -1.000000e+00
  %1289 = fmul fast float %1274, %1233
  %1290 = fsub fast float %1288, %1289
  %1291 = fmul fast float %1282, %1290
  %1292 = fmul fast float %1231, %1231
  %1293 = fsub fast float 1.000000e+00, %1292
  %1294 = fsub fast float %1293, %1286
  %1295 = fmul fast float %1233, %1233
  %1296 = fsub fast float %1294, %1295
  %1297 = fmul fast float %1273, %1233
  %1298 = fadd fast float %1296, %1297
  %1299 = call float @dx.op.unary.f32(i32 7, float %1298)  ; Saturate(value)
  %1300 = call float @dx.op.unary.f32(i32 24, float %1299)  ; Sqrt(value)
  %1301 = fmul fast float %1300, %1282
  %1302 = fmul fast float %1232, 2.000000e+00
  %1303 = fmul fast float %1302, %1282
  %1304 = fmul fast float %1303, %1300
  %1305 = fmul fast float %1271, %1231
  %1306 = fadd fast float %1305, %1232
  %1307 = fadd fast float %1306, %1285
  %1308 = fmul fast float %1271, %1233
  %1309 = fadd fast float %1308, 1.000000e+00
  %1310 = fadd fast float %1309, %1291
  %1311 = fmul fast float %1301, %1310
  %1312 = fmul fast float %1307, %1310
  %1313 = fmul fast float %1304, %1307
  %1314 = fmul fast float %1311, 5.000000e-01
  %1315 = fmul fast float %1307, 2.500000e-01
  %1316 = fmul fast float %1315, %1304
  %1317 = fsub fast float %1316, %1314
  %1318 = fmul fast float %1317, %1312
  %1319 = fmul fast float %1311, %1311
  %1320 = fmul fast float %1311, 2.000000e+00
  %1321 = fsub fast float %1313, %1320
  %1322 = fmul fast float %1321, %1313
  %1323 = fadd fast float %1322, %1319
  %1324 = fmul fast float %1310, %1310
  %1325 = fmul fast float %1324, %1306
  %1326 = fadd fast float %1310, %1308
  %1327 = fmul fast float %1326, 5.000000e-01
  %1328 = fsub fast float -5.000000e-01, %1327
  %1329 = fmul fast float %1328, %1312
  %1330 = fadd fast float %1329, %1325
  %1331 = fmul fast float %1330, %1307
  %1332 = fadd fast float %1323, %1331
  %1333 = fmul fast float %1318, 2.000000e+00
  %1334 = fmul fast float %1332, %1332
  %1335 = fmul fast float %1318, %1318
  %1336 = fadd fast float %1334, %1335
  %1337 = fdiv fast float %1333, %1336
  %1338 = fmul fast float %1332, %1337
  %1339 = fmul fast float %1318, %1337
  %1340 = fsub fast float 1.000000e+00, %1339
  %1341 = fmul fast float %1340, %1285
  %1342 = fmul fast float %1338, %1301
  %1343 = fmul fast float %1340, %1291
  %1344 = fmul fast float %1338, %1304
  %1345 = fadd fast float %1344, %1308
  %1346 = fadd fast float %1345, %1343
  %1347 = fmul fast float %1346, 2.000000e+00
  %1348 = fadd fast float %1347, 2.000000e+00
  %1349 = call float @dx.op.unary.f32(i32 25, float %1348)  ; Rsqrt(value)
  %1350 = fadd fast float %1306, %1342
  %1351 = fadd fast float %1350, %1341
  %1352 = fmul fast float %1351, %1349
  %1353 = call float @dx.op.unary.f32(i32 7, float %1352)  ; Saturate(value)
  %1354 = fmul fast float %1346, %1349
  %1355 = fadd fast float %1354, %1349
  %1356 = call float @dx.op.unary.f32(i32 7, float %1355)  ; Saturate(value)
  br label %1357

; <label>:1357                                    ; preds = %1278, %1276, %1266, %1243
  %1358 = phi float [ %1265, %1243 ], [ 0.000000e+00, %1278 ], [ 0.000000e+00, %1276 ], [ 0.000000e+00, %1266 ]
  %1359 = phi float [ %1263, %1243 ], [ 0.000000e+00, %1278 ], [ 0.000000e+00, %1276 ], [ 0.000000e+00, %1266 ]
  %1360 = phi float [ %1262, %1243 ], [ 0.000000e+00, %1278 ], [ 0.000000e+00, %1276 ], [ 0.000000e+00, %1266 ]
  %1361 = phi float [ %1261, %1243 ], [ 0.000000e+00, %1278 ], [ 0.000000e+00, %1276 ], [ 0.000000e+00, %1266 ]
  %1362 = phi float [ %1259, %1243 ], [ 0.000000e+00, %1278 ], [ 0.000000e+00, %1276 ], [ 0.000000e+00, %1266 ]
  %1363 = phi float [ %1258, %1243 ], [ 0.000000e+00, %1278 ], [ 0.000000e+00, %1276 ], [ 0.000000e+00, %1266 ]
  %1364 = phi float [ %1242, %1243 ], [ %1356, %1278 ], [ %1277, %1276 ], [ %1242, %1266 ]
  %1365 = phi float [ %1239, %1243 ], [ %1353, %1278 ], [ 1.000000e+00, %1276 ], [ %1239, %1266 ]
  %1366 = call float @dx.op.unary.f32(i32 6, float %1232)  ; FAbs(value)
  %1367 = fadd fast float %1366, 0x3EE4F8B580000000
  %1368 = call float @dx.op.unary.f32(i32 7, float %1367)  ; Saturate(value)
  %1369 = fmul fast float %221, 0x3FD45F3060000000
  %1370 = fmul fast float %222, 0x3FD45F3060000000
  %1371 = fmul fast float %223, 0x3FD45F3060000000
  %1372 = fmul fast float %886, %887
  %1373 = fmul fast float %1369, %1372
  %1374 = fmul fast float %1370, %1372
  %1375 = fmul fast float %1371, %1372
  %1376 = fmul fast float %839, %839
  br i1 %1230, label %1377, label %1432, !dx.controlflow.hints !59

; <label>:1377                                    ; preds = %1357
  %1378 = fadd fast float %253, 1.000000e+00
  %1379 = fmul fast float %1376, %1378
  %1380 = call float @dx.op.binary.f32(i32 35, float %1379, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1381 = fsub fast float 1.000000e+00, %253
  %1382 = fmul fast float %1376, %1381
  %1383 = call float @dx.op.binary.f32(i32 35, float %1382, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1384 = fmul fast float %1383, %1380
  %1385 = fmul fast float %1383, %1361
  %1386 = fmul fast float %1380, %1358
  %1387 = fmul fast float %1384, %1365
  %1388 = call float @dx.op.dot3.f32(i32 55, float %1385, float %1386, float %1387, float %1385, float %1386, float %1387)  ; Dot3(ax,ay,az,bx,by,bz)
  %1389 = fdiv fast float %1384, %1388
  %1390 = fmul fast float %1384, 0x3FD45F3060000000
  %1391 = fmul fast float %1389, %1389
  %1392 = fmul fast float %1391, %1390
  %1393 = fmul fast float %1380, %1363
  %1394 = fmul fast float %1383, %1360
  %1395 = fmul fast float %1393, %1393
  %1396 = fmul fast float %1394, %1394
  %1397 = fmul fast float %1368, %1368
  %1398 = fadd fast float %1395, %1397
  %1399 = fadd fast float %1398, %1396
  %1400 = call float @dx.op.unary.f32(i32 24, float %1399)  ; Sqrt(value)
  %1401 = fmul fast float %1400, %886
  %1402 = fmul fast float %1380, %1362
  %1403 = fmul fast float %1383, %1359
  %1404 = fmul fast float %1402, %1402
  %1405 = fmul fast float %1403, %1403
  %1406 = fmul fast float %886, %886
  %1407 = fadd fast float %1404, %1406
  %1408 = fadd fast float %1407, %1405
  %1409 = call float @dx.op.unary.f32(i32 24, float %1408)  ; Sqrt(value)
  %1410 = fmul fast float %1409, %1368
  %1411 = fadd fast float %1410, %1401
  %1412 = fdiv fast float 5.000000e-01, %1411
  %1413 = fsub fast float 1.000000e+00, %1364
  %1414 = fmul fast float %1413, %1413
  %1415 = fmul fast float %1414, %1414
  %1416 = fmul fast float %1415, %1413
  %1417 = fmul fast float %233, 5.000000e+01
  %1418 = call float @dx.op.unary.f32(i32 7, float %1417)  ; Saturate(value)
  %1419 = fmul fast float %1418, %1416
  %1420 = fsub fast float 1.000000e+00, %1416
  %1421 = fmul fast float %1420, %232
  %1422 = fmul fast float %1420, %233
  %1423 = fmul fast float %1420, %234
  %1424 = fadd fast float %1419, %1421
  %1425 = fadd fast float %1419, %1422
  %1426 = fadd fast float %1419, %1423
  %1427 = fmul fast float %1392, %1372
  %1428 = fmul fast float %1427, %1412
  %1429 = fmul fast float %1428, %1424
  %1430 = fmul fast float %1428, %1425
  %1431 = fmul fast float %1428, %1426
  br label %1520

; <label>:1432                                    ; preds = %1357
  %1433 = fmul fast float %1376, %1376
  %1434 = fcmp fast ogt float %935, 0.000000e+00
  br i1 %1434, label %1435, label %1442

; <label>:1435                                    ; preds = %1432
  %1436 = fmul fast float %935, %935
  %1437 = fmul fast float %1364, 0x400CCCCCC0000000
  %1438 = fadd fast float %1437, 0x3FD99999A0000000
  %1439 = fdiv fast float %1436, %1438
  %1440 = fadd fast float %1439, %1433
  %1441 = call float @dx.op.unary.f32(i32 7, float %1440)  ; Saturate(value)
  br label %1442

; <label>:1442                                    ; preds = %1435, %1432
  %1443 = phi float [ %1441, %1435 ], [ %1433, %1432 ]
  %1444 = fcmp fast ogt float %933, 0.000000e+00
  br i1 %1444, label %1445, label %1458

; <label>:1445                                    ; preds = %1442
  %1446 = fmul fast float %933, 2.500000e-01
  %1447 = bitcast float %1443 to i32
  %1448 = ashr i32 %1447, 1
  %1449 = add nsw i32 %1448, 532487669
  %1450 = bitcast i32 %1449 to float
  %1451 = fmul fast float %1450, 3.000000e+00
  %1452 = fadd fast float %1451, %933
  %1453 = fmul fast float %1446, %1452
  %1454 = fadd fast float %1364, 0x3F50624DE0000000
  %1455 = fdiv fast float %1453, %1454
  %1456 = fadd fast float %1455, %1443
  %1457 = fdiv fast float %1443, %1456
  br label %1458

; <label>:1458                                    ; preds = %1445, %1442
  %1459 = phi float [ %1456, %1445 ], [ %1443, %1442 ]
  %1460 = phi float [ %1457, %1445 ], [ 1.000000e+00, %1442 ]
  %1461 = fcmp fast olt float %869, 1.000000e+00
  br i1 %1461, label %1462, label %1481

; <label>:1462                                    ; preds = %1458
  %1463 = fsub fast float 0x3FF00068E0000000, %869
  %1464 = fadd fast float %869, 1.000000e+00
  %1465 = fdiv fast float %1463, %1464
  %1466 = call float @dx.op.unary.f32(i32 24, float %1465)  ; Sqrt(value)
  %1467 = fmul fast float %1466, 2.500000e-01
  %1468 = bitcast float %1459 to i32
  %1469 = ashr i32 %1468, 1
  %1470 = add nsw i32 %1469, 532487669
  %1471 = bitcast i32 %1470 to float
  %1472 = fmul fast float %1471, 3.000000e+00
  %1473 = fadd fast float %1466, %1472
  %1474 = fmul fast float %1467, %1473
  %1475 = fadd fast float %1364, 0x3F50624DE0000000
  %1476 = fdiv fast float %1474, %1475
  %1477 = fadd fast float %1476, %1459
  %1478 = fdiv fast float %1459, %1477
  %1479 = call float @dx.op.unary.f32(i32 24, float %1478)  ; Sqrt(value)
  %1480 = fmul fast float %1479, %1460
  br label %1481

; <label>:1481                                    ; preds = %1462, %1458
  %1482 = phi float [ %1480, %1462 ], [ %1460, %1458 ]
  %1483 = fmul fast float %1443, %1365
  %1484 = fsub fast float %1483, %1365
  %1485 = fmul fast float %1484, %1365
  %1486 = fadd fast float %1485, 1.000000e+00
  %1487 = fmul fast float %1486, %1486
  %1488 = fmul fast float %1487, 0x400921FB60000000
  %1489 = fdiv fast float %1443, %1488
  %1490 = fmul fast float %1489, %1482
  %1491 = call float @dx.op.unary.f32(i32 24, float %1443)  ; Sqrt(value)
  %1492 = fsub fast float 1.000000e+00, %1491
  %1493 = fmul fast float %1492, %1368
  %1494 = fadd fast float %1493, %1491
  %1495 = fmul fast float %1494, %886
  %1496 = fmul fast float %1492, %886
  %1497 = fadd fast float %1496, %1491
  %1498 = fmul fast float %1497, %1368
  %1499 = fadd fast float %1495, %1498
  %1500 = fdiv fast float 5.000000e-01, %1499
  %1501 = fsub fast float 1.000000e+00, %1364
  %1502 = fmul fast float %1501, %1501
  %1503 = fmul fast float %1502, %1502
  %1504 = fmul fast float %1503, %1501
  %1505 = fmul fast float %233, 5.000000e+01
  %1506 = call float @dx.op.unary.f32(i32 7, float %1505)  ; Saturate(value)
  %1507 = fmul fast float %1506, %1504
  %1508 = fsub fast float 1.000000e+00, %1504
  %1509 = fmul fast float %1508, %232
  %1510 = fmul fast float %1508, %233
  %1511 = fmul fast float %1508, %234
  %1512 = fadd fast float %1507, %1509
  %1513 = fadd fast float %1507, %1510
  %1514 = fadd fast float %1507, %1511
  %1515 = fmul fast float %1490, %1500
  %1516 = fmul fast float %1515, %1372
  %1517 = fmul fast float %1516, %1512
  %1518 = fmul fast float %1516, %1513
  %1519 = fmul fast float %1516, %1514
  br label %1520

; <label>:1520                                    ; preds = %1481, %1377
  %1521 = phi float [ %1429, %1377 ], [ %1517, %1481 ]
  %1522 = phi float [ %1430, %1377 ], [ %1518, %1481 ]
  %1523 = phi float [ %1431, %1377 ], [ %1519, %1481 ]
  %1524 = fmul fast float %141, %141
  %1525 = fmul fast float %142, %142
  %1526 = fmul fast float %143, %143
  %1527 = call float @dx.op.dot3.f32(i32 55, float %925, float %926, float %927, float %310, float %311, float %312)  ; Dot3(ax,ay,az,bx,by,bz)
  %1528 = call float @dx.op.unary.f32(i32 7, float %1527)  ; Saturate(value)
  %1529 = call float @dx.op.unary.f32(i32 23, float %1528)  ; Log(value)
  %1530 = fmul fast float %1529, 1.200000e+01
  %1531 = call float @dx.op.unary.f32(i32 21, float %1530)  ; Exp(value)
  %1532 = fmul fast float %144, 0x4007333340000000
  %1533 = fsub fast float 3.000000e+00, %1532
  %1534 = fmul fast float %1531, %1533
  %1535 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %1536 = fmul fast float %1535, 0x3FE5555560000000
  %1537 = fadd fast float %1536, 0x3FD5555560000000
  %1538 = call float @dx.op.unary.f32(i32 7, float %1537)  ; Saturate(value)
  %1539 = call float @dx.op.unary.f32(i32 23, float %1538)  ; Log(value)
  %1540 = fmul fast float %1539, 1.500000e+00
  %1541 = call float @dx.op.unary.f32(i32 21, float %1540)  ; Exp(value)
  %1542 = fmul fast float %1541, 0x3FFAAAAAA0000000
  %1543 = fadd fast float %1542, -1.000000e+00
  %1544 = fmul fast float %1543, %144
  %1545 = fadd fast float %1544, 1.000000e+00
  %1546 = fmul fast float %1545, 0x3FC45F3060000000
  %1547 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 284)  ; CBufferLoadLegacy(handle,regIndex)
  %1548 = extractvalue %dx.types.CBufRet.f32 %1547, 3
  %1549 = call float @dx.op.binary.f32(i32 35, float %1524, float 0x3D71979980000000)  ; FMax(a,b)
  %1550 = call float @dx.op.binary.f32(i32 35, float %1525, float 0x3D71979980000000)  ; FMax(a,b)
  %1551 = call float @dx.op.binary.f32(i32 35, float %1526, float 0x3D71979980000000)  ; FMax(a,b)
  %1552 = call float @dx.op.binary.f32(i32 36, float %1549, float 1.000000e+00)  ; FMin(a,b)
  %1553 = call float @dx.op.binary.f32(i32 36, float %1550, float 1.000000e+00)  ; FMin(a,b)
  %1554 = call float @dx.op.binary.f32(i32 36, float %1551, float 1.000000e+00)  ; FMin(a,b)
  %1555 = call float @dx.op.unary.f32(i32 23, float %1552)  ; Log(value)
  %1556 = call float @dx.op.unary.f32(i32 23, float %1553)  ; Log(value)
  %1557 = call float @dx.op.unary.f32(i32 23, float %1554)  ; Log(value)
  %1558 = fmul fast float %1555, 0xBFE62E4300000000
  %1559 = fmul fast float %1556, 0xBFE62E4300000000
  %1560 = fmul fast float %1557, 0xBFE62E4300000000
  %1561 = call float @dx.op.binary.f32(i32 35, float 0x3D71979980000000, float %1548)  ; FMax(a,b)
  %1562 = fdiv fast float %1558, %1561
  %1563 = fdiv fast float %1559, %1561
  %1564 = fdiv fast float %1560, %1561
  %1565 = fmul fast float %1562, 0xBFF7154760000000
  %1566 = fmul fast float %1563, 0xBFF7154760000000
  %1567 = fmul fast float %1564, 0xBFF7154760000000
  %1568 = call float @dx.op.unary.f32(i32 21, float %1565)  ; Exp(value)
  %1569 = call float @dx.op.unary.f32(i32 21, float %1566)  ; Exp(value)
  %1570 = call float @dx.op.unary.f32(i32 21, float %1567)  ; Exp(value)
  %1571 = fcmp fast olt float %1569, %1570
  br i1 %1571, label %1573, label %1572

; <label>:1572                                    ; preds = %1520
  br label %1573

; <label>:1573                                    ; preds = %1572, %1520
  %1574 = phi float [ %1569, %1572 ], [ %1570, %1520 ]
  %1575 = phi float [ %1570, %1572 ], [ %1569, %1520 ]
  %1576 = phi float [ 0.000000e+00, %1572 ], [ -1.000000e+00, %1520 ]
  %1577 = phi float [ 0xBFD5555560000000, %1572 ], [ 0x3FE5555560000000, %1520 ]
  %1578 = fcmp fast olt float %1568, %1574
  %1579 = select i1 %1578, float %1574, float %1568
  %1580 = select i1 %1578, float %1577, float %1576
  %1581 = select i1 %1578, float %1568, float %1574
  %1582 = call float @dx.op.binary.f32(i32 36, float %1581, float %1575)  ; FMin(a,b)
  %1583 = fsub fast float %1579, %1582
  %1584 = fsub fast float %1581, %1575
  %1585 = fmul fast float %1583, 6.000000e+00
  %1586 = fadd fast float %1585, 0x3DDB7CDFE0000000
  %1587 = fdiv fast float %1584, %1586
  %1588 = fadd fast float %1587, %1580
  %1589 = call float @dx.op.unary.f32(i32 6, float %1588)  ; FAbs(value)
  %1590 = fadd fast float %1579, 0x3DDB7CDFE0000000
  %1591 = fdiv fast float %1583, %1590
  %1592 = fcmp fast olt float %1525, %1526
  %1593 = select i1 %1592, float %1526, float %1525
  %1594 = fcmp fast olt float %1524, %1593
  %1595 = select i1 %1594, float %1593, float %1524
  %1596 = fmul fast float %1589, 6.000000e+00
  %1597 = fadd fast float %1596, -3.000000e+00
  %1598 = call float @dx.op.unary.f32(i32 6, float %1597)  ; FAbs(value)
  %1599 = fadd fast float %1598, -1.000000e+00
  %1600 = fadd fast float %1596, -2.000000e+00
  %1601 = call float @dx.op.unary.f32(i32 6, float %1600)  ; FAbs(value)
  %1602 = fsub fast float 2.000000e+00, %1601
  %1603 = fadd fast float %1596, -4.000000e+00
  %1604 = call float @dx.op.unary.f32(i32 6, float %1603)  ; FAbs(value)
  %1605 = fsub fast float 2.000000e+00, %1604
  %1606 = call float @dx.op.unary.f32(i32 7, float %1599)  ; Saturate(value)
  %1607 = call float @dx.op.unary.f32(i32 7, float %1602)  ; Saturate(value)
  %1608 = call float @dx.op.unary.f32(i32 7, float %1605)  ; Saturate(value)
  %1609 = fadd fast float %1606, -1.000000e+00
  %1610 = fadd fast float %1607, -1.000000e+00
  %1611 = fadd fast float %1608, -1.000000e+00
  %1612 = fmul fast float %1609, %1591
  %1613 = fmul fast float %1610, %1591
  %1614 = fmul fast float %1611, %1591
  %1615 = fadd fast float %1612, 1.000000e+00
  %1616 = fadd fast float %1613, 1.000000e+00
  %1617 = fadd fast float %1614, 1.000000e+00
  %1618 = fmul fast float %1615, %1595
  %1619 = fmul fast float %1616, %1595
  %1620 = fmul fast float %1617, %1595
  %1621 = fsub fast float 1.000000e+00, %1546
  %1622 = fmul fast float %1534, %1621
  %1623 = fadd fast float %1622, %1546
  %1624 = fmul fast float %1623, %887
  %1625 = fsub fast float %1524, %1618
  %1626 = fsub fast float %1525, %1619
  %1627 = fsub fast float %1526, %1620
  %1628 = fmul fast float %1625, %518
  %1629 = fmul fast float %1626, %518
  %1630 = fmul fast float %1627, %518
  %1631 = fadd fast float %1628, %1618
  %1632 = fadd fast float %1629, %1619
  %1633 = fadd fast float %1630, %1620
  %1634 = fmul fast float %1631, %1624
  %1635 = fmul fast float %1632, %1624
  %1636 = fmul fast float %1633, %1624
  br label %3821

; <label>:1637                                    ; preds = %919
  %1638 = and i32 %125, 16
  %1639 = icmp ne i32 %1638, 0
  %1640 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %1641 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %458, float %459, float %460)  ; Dot3(ax,ay,az,bx,by,bz)
  %1642 = call float @dx.op.dot3.f32(i32 55, float %458, float %459, float %460, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %1643 = fmul fast float %1642, 2.000000e+00
  %1644 = fadd fast float %1643, 2.000000e+00
  %1645 = call float @dx.op.unary.f32(i32 25, float %1644)  ; Rsqrt(value)
  %1646 = fadd fast float %1641, %1640
  %1647 = fmul fast float %1645, %1646
  %1648 = call float @dx.op.unary.f32(i32 7, float %1647)  ; Saturate(value)
  %1649 = fmul fast float %1645, %1642
  %1650 = fadd fast float %1649, %1645
  %1651 = call float @dx.op.unary.f32(i32 7, float %1650)  ; Saturate(value)
  br i1 %1639, label %1652, label %1675, !dx.controlflow.hints !58

; <label>:1652                                    ; preds = %1637
  %1653 = fmul fast float %252, %161
  %1654 = fmul fast float %251, %162
  %1655 = fsub fast float %1653, %1654
  %1656 = fmul fast float %250, %162
  %1657 = fmul fast float %252, %160
  %1658 = fsub fast float %1656, %1657
  %1659 = fmul fast float %251, %160
  %1660 = fmul fast float %250, %161
  %1661 = fsub fast float %1659, %1660
  %1662 = call float @dx.op.dot3.f32(i32 55, float %1655, float %1658, float %1661, float %1655, float %1658, float %1661)  ; Dot3(ax,ay,az,bx,by,bz)
  %1663 = call float @dx.op.unary.f32(i32 25, float %1662)  ; Rsqrt(value)
  %1664 = fmul fast float %1663, %1655
  %1665 = fmul fast float %1663, %1658
  %1666 = fmul fast float %1663, %1661
  %1667 = call float @dx.op.dot3.f32(i32 55, float %250, float %251, float %252, float %458, float %459, float %460)  ; Dot3(ax,ay,az,bx,by,bz)
  %1668 = call float @dx.op.dot3.f32(i32 55, float %250, float %251, float %252, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %1669 = fadd fast float %1668, %1667
  %1670 = fmul fast float %1669, %1645
  %1671 = call float @dx.op.dot3.f32(i32 55, float %1664, float %1665, float %1666, float %458, float %459, float %460)  ; Dot3(ax,ay,az,bx,by,bz)
  %1672 = call float @dx.op.dot3.f32(i32 55, float %1664, float %1665, float %1666, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %1673 = fadd fast float %1672, %1671
  %1674 = fmul fast float %1673, %1645
  br label %1766

; <label>:1675                                    ; preds = %1637
  %1676 = fcmp fast ogt float %933, 0.000000e+00
  br i1 %1676, label %1677, label %1766

; <label>:1677                                    ; preds = %1675
  %1678 = fmul fast float %933, %933
  %1679 = fsub fast float 1.000000e+00, %1678
  %1680 = call float @dx.op.unary.f32(i32 24, float %1679)  ; Sqrt(value)
  %1681 = fmul fast float %1640, 2.000000e+00
  %1682 = fmul fast float %1681, %1641
  %1683 = fsub fast float %1682, %1642
  %1684 = fcmp fast ult float %1683, %1680
  br i1 %1684, label %1687, label %1685

; <label>:1685                                    ; preds = %1677
  %1686 = call float @dx.op.unary.f32(i32 6, float %1641)  ; FAbs(value)
  br label %1766

; <label>:1687                                    ; preds = %1677
  %1688 = fmul fast float %1683, %1683
  %1689 = fsub fast float 1.000000e+00, %1688
  %1690 = call float @dx.op.unary.f32(i32 25, float %1689)  ; Rsqrt(value)
  %1691 = fmul fast float %1690, %933
  %1692 = fmul fast float %1683, %1640
  %1693 = fsub fast float %1641, %1692
  %1694 = fmul fast float %1691, %1693
  %1695 = fmul fast float %1641, %1641
  %1696 = fmul fast float %1695, 2.000000e+00
  %1697 = fadd fast float %1696, -1.000000e+00
  %1698 = fmul fast float %1683, %1642
  %1699 = fsub fast float %1697, %1698
  %1700 = fmul fast float %1691, %1699
  %1701 = fmul fast float %1640, %1640
  %1702 = fsub fast float 1.000000e+00, %1701
  %1703 = fsub fast float %1702, %1695
  %1704 = fmul fast float %1642, %1642
  %1705 = fsub fast float %1703, %1704
  %1706 = fmul fast float %1682, %1642
  %1707 = fadd fast float %1705, %1706
  %1708 = call float @dx.op.unary.f32(i32 7, float %1707)  ; Saturate(value)
  %1709 = call float @dx.op.unary.f32(i32 24, float %1708)  ; Sqrt(value)
  %1710 = fmul fast float %1709, %1691
  %1711 = fmul fast float %1641, 2.000000e+00
  %1712 = fmul fast float %1711, %1691
  %1713 = fmul fast float %1712, %1709
  %1714 = fmul fast float %1680, %1640
  %1715 = fadd fast float %1714, %1641
  %1716 = fadd fast float %1715, %1694
  %1717 = fmul fast float %1680, %1642
  %1718 = fadd fast float %1717, 1.000000e+00
  %1719 = fadd fast float %1718, %1700
  %1720 = fmul fast float %1710, %1719
  %1721 = fmul fast float %1716, %1719
  %1722 = fmul fast float %1713, %1716
  %1723 = fmul fast float %1720, 5.000000e-01
  %1724 = fmul fast float %1716, 2.500000e-01
  %1725 = fmul fast float %1724, %1713
  %1726 = fsub fast float %1725, %1723
  %1727 = fmul fast float %1726, %1721
  %1728 = fmul fast float %1720, %1720
  %1729 = fmul fast float %1720, 2.000000e+00
  %1730 = fsub fast float %1722, %1729
  %1731 = fmul fast float %1730, %1722
  %1732 = fadd fast float %1731, %1728
  %1733 = fmul fast float %1719, %1719
  %1734 = fmul fast float %1733, %1715
  %1735 = fadd fast float %1719, %1717
  %1736 = fmul fast float %1735, 5.000000e-01
  %1737 = fsub fast float -5.000000e-01, %1736
  %1738 = fmul fast float %1737, %1721
  %1739 = fadd fast float %1738, %1734
  %1740 = fmul fast float %1739, %1716
  %1741 = fadd fast float %1732, %1740
  %1742 = fmul fast float %1727, 2.000000e+00
  %1743 = fmul fast float %1741, %1741
  %1744 = fmul fast float %1727, %1727
  %1745 = fadd fast float %1743, %1744
  %1746 = fdiv fast float %1742, %1745
  %1747 = fmul fast float %1741, %1746
  %1748 = fmul fast float %1727, %1746
  %1749 = fsub fast float 1.000000e+00, %1748
  %1750 = fmul fast float %1749, %1694
  %1751 = fmul fast float %1747, %1710
  %1752 = fmul fast float %1749, %1700
  %1753 = fmul fast float %1747, %1713
  %1754 = fadd fast float %1753, %1717
  %1755 = fadd fast float %1754, %1752
  %1756 = fmul fast float %1755, 2.000000e+00
  %1757 = fadd fast float %1756, 2.000000e+00
  %1758 = call float @dx.op.unary.f32(i32 25, float %1757)  ; Rsqrt(value)
  %1759 = fadd fast float %1715, %1751
  %1760 = fadd fast float %1759, %1750
  %1761 = fmul fast float %1760, %1758
  %1762 = call float @dx.op.unary.f32(i32 7, float %1761)  ; Saturate(value)
  %1763 = fmul fast float %1755, %1758
  %1764 = fadd fast float %1763, %1758
  %1765 = call float @dx.op.unary.f32(i32 7, float %1764)  ; Saturate(value)
  br label %1766

; <label>:1766                                    ; preds = %1687, %1685, %1675, %1652
  %1767 = phi float [ %1674, %1652 ], [ 0.000000e+00, %1687 ], [ 0.000000e+00, %1685 ], [ 0.000000e+00, %1675 ]
  %1768 = phi float [ %1672, %1652 ], [ 0.000000e+00, %1687 ], [ 0.000000e+00, %1685 ], [ 0.000000e+00, %1675 ]
  %1769 = phi float [ %1671, %1652 ], [ 0.000000e+00, %1687 ], [ 0.000000e+00, %1685 ], [ 0.000000e+00, %1675 ]
  %1770 = phi float [ %1670, %1652 ], [ 0.000000e+00, %1687 ], [ 0.000000e+00, %1685 ], [ 0.000000e+00, %1675 ]
  %1771 = phi float [ %1668, %1652 ], [ 0.000000e+00, %1687 ], [ 0.000000e+00, %1685 ], [ 0.000000e+00, %1675 ]
  %1772 = phi float [ %1667, %1652 ], [ 0.000000e+00, %1687 ], [ 0.000000e+00, %1685 ], [ 0.000000e+00, %1675 ]
  %1773 = phi float [ %1651, %1652 ], [ %1765, %1687 ], [ %1686, %1685 ], [ %1651, %1675 ]
  %1774 = phi float [ %1648, %1652 ], [ %1762, %1687 ], [ 1.000000e+00, %1685 ], [ %1648, %1675 ]
  %1775 = call float @dx.op.unary.f32(i32 6, float %1641)  ; FAbs(value)
  %1776 = fadd fast float %1775, 0x3EE4F8B580000000
  %1777 = call float @dx.op.unary.f32(i32 7, float %1776)  ; Saturate(value)
  %1778 = fmul fast float %221, 0x3FD45F3060000000
  %1779 = fmul fast float %222, 0x3FD45F3060000000
  %1780 = fmul fast float %223, 0x3FD45F3060000000
  %1781 = fmul fast float %886, %887
  %1782 = fmul fast float %1778, %1781
  %1783 = fmul fast float %1779, %1781
  %1784 = fmul fast float %1780, %1781
  %1785 = fmul fast float %839, %839
  br i1 %1639, label %1786, label %1841, !dx.controlflow.hints !59

; <label>:1786                                    ; preds = %1766
  %1787 = fadd fast float %253, 1.000000e+00
  %1788 = fmul fast float %1785, %1787
  %1789 = call float @dx.op.binary.f32(i32 35, float %1788, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1790 = fsub fast float 1.000000e+00, %253
  %1791 = fmul fast float %1785, %1790
  %1792 = call float @dx.op.binary.f32(i32 35, float %1791, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1793 = fmul fast float %1792, %1789
  %1794 = fmul fast float %1792, %1770
  %1795 = fmul fast float %1789, %1767
  %1796 = fmul fast float %1793, %1774
  %1797 = call float @dx.op.dot3.f32(i32 55, float %1794, float %1795, float %1796, float %1794, float %1795, float %1796)  ; Dot3(ax,ay,az,bx,by,bz)
  %1798 = fdiv fast float %1793, %1797
  %1799 = fmul fast float %1793, 0x3FD45F3060000000
  %1800 = fmul fast float %1798, %1798
  %1801 = fmul fast float %1800, %1799
  %1802 = fmul fast float %1789, %1772
  %1803 = fmul fast float %1792, %1769
  %1804 = fmul fast float %1802, %1802
  %1805 = fmul fast float %1803, %1803
  %1806 = fmul fast float %1777, %1777
  %1807 = fadd fast float %1804, %1806
  %1808 = fadd fast float %1807, %1805
  %1809 = call float @dx.op.unary.f32(i32 24, float %1808)  ; Sqrt(value)
  %1810 = fmul fast float %1809, %886
  %1811 = fmul fast float %1789, %1771
  %1812 = fmul fast float %1792, %1768
  %1813 = fmul fast float %1811, %1811
  %1814 = fmul fast float %1812, %1812
  %1815 = fmul fast float %886, %886
  %1816 = fadd fast float %1813, %1815
  %1817 = fadd fast float %1816, %1814
  %1818 = call float @dx.op.unary.f32(i32 24, float %1817)  ; Sqrt(value)
  %1819 = fmul fast float %1818, %1777
  %1820 = fadd fast float %1819, %1810
  %1821 = fdiv fast float 5.000000e-01, %1820
  %1822 = fsub fast float 1.000000e+00, %1773
  %1823 = fmul fast float %1822, %1822
  %1824 = fmul fast float %1823, %1823
  %1825 = fmul fast float %1824, %1822
  %1826 = fmul fast float %233, 5.000000e+01
  %1827 = call float @dx.op.unary.f32(i32 7, float %1826)  ; Saturate(value)
  %1828 = fmul fast float %1827, %1825
  %1829 = fsub fast float 1.000000e+00, %1825
  %1830 = fmul fast float %1829, %232
  %1831 = fmul fast float %1829, %233
  %1832 = fmul fast float %1829, %234
  %1833 = fadd fast float %1828, %1830
  %1834 = fadd fast float %1828, %1831
  %1835 = fadd fast float %1828, %1832
  %1836 = fmul fast float %1801, %1781
  %1837 = fmul fast float %1836, %1821
  %1838 = fmul fast float %1837, %1833
  %1839 = fmul fast float %1837, %1834
  %1840 = fmul fast float %1837, %1835
  br label %1929

; <label>:1841                                    ; preds = %1766
  %1842 = fmul fast float %1785, %1785
  %1843 = fcmp fast ogt float %935, 0.000000e+00
  br i1 %1843, label %1844, label %1851

; <label>:1844                                    ; preds = %1841
  %1845 = fmul fast float %935, %935
  %1846 = fmul fast float %1773, 0x400CCCCCC0000000
  %1847 = fadd fast float %1846, 0x3FD99999A0000000
  %1848 = fdiv fast float %1845, %1847
  %1849 = fadd fast float %1848, %1842
  %1850 = call float @dx.op.unary.f32(i32 7, float %1849)  ; Saturate(value)
  br label %1851

; <label>:1851                                    ; preds = %1844, %1841
  %1852 = phi float [ %1850, %1844 ], [ %1842, %1841 ]
  %1853 = fcmp fast ogt float %933, 0.000000e+00
  br i1 %1853, label %1854, label %1867

; <label>:1854                                    ; preds = %1851
  %1855 = fmul fast float %933, 2.500000e-01
  %1856 = bitcast float %1852 to i32
  %1857 = ashr i32 %1856, 1
  %1858 = add nsw i32 %1857, 532487669
  %1859 = bitcast i32 %1858 to float
  %1860 = fmul fast float %1859, 3.000000e+00
  %1861 = fadd fast float %1860, %933
  %1862 = fmul fast float %1855, %1861
  %1863 = fadd fast float %1773, 0x3F50624DE0000000
  %1864 = fdiv fast float %1862, %1863
  %1865 = fadd fast float %1864, %1852
  %1866 = fdiv fast float %1852, %1865
  br label %1867

; <label>:1867                                    ; preds = %1854, %1851
  %1868 = phi float [ %1865, %1854 ], [ %1852, %1851 ]
  %1869 = phi float [ %1866, %1854 ], [ 1.000000e+00, %1851 ]
  %1870 = fcmp fast olt float %869, 1.000000e+00
  br i1 %1870, label %1871, label %1890

; <label>:1871                                    ; preds = %1867
  %1872 = fsub fast float 0x3FF00068E0000000, %869
  %1873 = fadd fast float %869, 1.000000e+00
  %1874 = fdiv fast float %1872, %1873
  %1875 = call float @dx.op.unary.f32(i32 24, float %1874)  ; Sqrt(value)
  %1876 = fmul fast float %1875, 2.500000e-01
  %1877 = bitcast float %1868 to i32
  %1878 = ashr i32 %1877, 1
  %1879 = add nsw i32 %1878, 532487669
  %1880 = bitcast i32 %1879 to float
  %1881 = fmul fast float %1880, 3.000000e+00
  %1882 = fadd fast float %1875, %1881
  %1883 = fmul fast float %1876, %1882
  %1884 = fadd fast float %1773, 0x3F50624DE0000000
  %1885 = fdiv fast float %1883, %1884
  %1886 = fadd fast float %1885, %1868
  %1887 = fdiv fast float %1868, %1886
  %1888 = call float @dx.op.unary.f32(i32 24, float %1887)  ; Sqrt(value)
  %1889 = fmul fast float %1888, %1869
  br label %1890

; <label>:1890                                    ; preds = %1871, %1867
  %1891 = phi float [ %1889, %1871 ], [ %1869, %1867 ]
  %1892 = fmul fast float %1852, %1774
  %1893 = fsub fast float %1892, %1774
  %1894 = fmul fast float %1893, %1774
  %1895 = fadd fast float %1894, 1.000000e+00
  %1896 = fmul fast float %1895, %1895
  %1897 = fmul fast float %1896, 0x400921FB60000000
  %1898 = fdiv fast float %1852, %1897
  %1899 = fmul fast float %1898, %1891
  %1900 = call float @dx.op.unary.f32(i32 24, float %1852)  ; Sqrt(value)
  %1901 = fsub fast float 1.000000e+00, %1900
  %1902 = fmul fast float %1901, %1777
  %1903 = fadd fast float %1902, %1900
  %1904 = fmul fast float %1903, %886
  %1905 = fmul fast float %1901, %886
  %1906 = fadd fast float %1905, %1900
  %1907 = fmul fast float %1906, %1777
  %1908 = fadd fast float %1904, %1907
  %1909 = fdiv fast float 5.000000e-01, %1908
  %1910 = fsub fast float 1.000000e+00, %1773
  %1911 = fmul fast float %1910, %1910
  %1912 = fmul fast float %1911, %1911
  %1913 = fmul fast float %1912, %1910
  %1914 = fmul fast float %233, 5.000000e+01
  %1915 = call float @dx.op.unary.f32(i32 7, float %1914)  ; Saturate(value)
  %1916 = fmul fast float %1915, %1913
  %1917 = fsub fast float 1.000000e+00, %1913
  %1918 = fmul fast float %1917, %232
  %1919 = fmul fast float %1917, %233
  %1920 = fmul fast float %1917, %234
  %1921 = fadd fast float %1916, %1918
  %1922 = fadd fast float %1916, %1919
  %1923 = fadd fast float %1916, %1920
  %1924 = fmul fast float %1899, %1909
  %1925 = fmul fast float %1924, %1781
  %1926 = fmul fast float %1925, %1921
  %1927 = fmul fast float %1925, %1922
  %1928 = fmul fast float %1925, %1923
  br label %1929

; <label>:1929                                    ; preds = %1890, %1786
  %1930 = phi float [ %1838, %1786 ], [ %1926, %1890 ]
  %1931 = phi float [ %1839, %1786 ], [ %1927, %1890 ]
  %1932 = phi float [ %1840, %1786 ], [ %1928, %1890 ]
  %1933 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %1934 = fmul fast float %1933, 5.000000e-01
  %1935 = fadd fast float %1934, 5.000000e-01
  %1936 = call float @dx.op.unary.f32(i32 7, float %1935)  ; Saturate(value)
  %1937 = fsub fast float 1.000000e+00, %144
  %1938 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1939 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1940 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1938, %dx.types.Handle %1939, float %1936, float %1937, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1941 = extractvalue %dx.types.ResRet.f32 %1940, 0
  %1942 = extractvalue %dx.types.ResRet.f32 %1940, 1
  %1943 = extractvalue %dx.types.ResRet.f32 %1940, 2
  %1944 = fmul fast float %141, %141
  %1945 = fmul fast float %1944, %887
  %1946 = fmul fast float %1945, %1941
  %1947 = fmul fast float %142, %142
  %1948 = fmul fast float %1947, %887
  %1949 = fmul fast float %1948, %1942
  %1950 = fmul fast float %143, %143
  %1951 = fmul fast float %1950, %887
  %1952 = fmul fast float %1951, %1943
  br label %3821

; <label>:1953                                    ; preds = %919
  %1954 = call float @dx.op.binary.f32(i32 35, float %142, float 0x3F947AE140000000)  ; FMax(a,b)
  %1955 = and i32 %125, 16
  %1956 = icmp ne i32 %1955, 0
  %1957 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %1958 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %458, float %459, float %460)  ; Dot3(ax,ay,az,bx,by,bz)
  %1959 = call float @dx.op.dot3.f32(i32 55, float %458, float %459, float %460, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %1960 = fmul fast float %1959, 2.000000e+00
  %1961 = fadd fast float %1960, 2.000000e+00
  %1962 = call float @dx.op.unary.f32(i32 25, float %1961)  ; Rsqrt(value)
  %1963 = fadd fast float %1958, %1957
  %1964 = fmul fast float %1962, %1963
  %1965 = call float @dx.op.unary.f32(i32 7, float %1964)  ; Saturate(value)
  %1966 = fmul fast float %1962, %1959
  %1967 = fadd fast float %1966, %1962
  %1968 = call float @dx.op.unary.f32(i32 7, float %1967)  ; Saturate(value)
  %1969 = fmul fast float %839, %839
  %1970 = fsub fast float 1.000000e+00, %1969
  %1971 = fmul fast float %1954, %1954
  %1972 = fcmp fast ogt float %1970, 0.000000e+00
  %1973 = fsub fast float 1.000000e+00, %1971
  %1974 = fdiv fast float %1973, %1970
  %1975 = select i1 %1972, float %1974, float 0.000000e+00
  %1976 = fmul fast float %1975, %933
  %1977 = call float @dx.op.unary.f32(i32 7, float %1976)  ; Saturate(value)
  %1978 = fcmp fast ogt float %1977, 0.000000e+00
  br i1 %1978, label %1979, label %2069

; <label>:1979                                    ; preds = %1953
  %1980 = fmul fast float %1977, %1977
  %1981 = fsub fast float 1.000000e+00, %1980
  %1982 = call float @dx.op.unary.f32(i32 24, float %1981)  ; Sqrt(value)
  %1983 = fmul fast float %1957, 2.000000e+00
  %1984 = fmul fast float %1983, %1958
  %1985 = fsub fast float %1984, %1959
  %1986 = fcmp fast ult float %1985, %1982
  br i1 %1986, label %1989, label %1987

; <label>:1987                                    ; preds = %1979
  %1988 = call float @dx.op.unary.f32(i32 6, float %1958)  ; FAbs(value)
  br label %2069

; <label>:1989                                    ; preds = %1979
  %1990 = fmul fast float %1985, %1985
  %1991 = fsub fast float 1.000000e+00, %1990
  %1992 = call float @dx.op.unary.f32(i32 25, float %1991)  ; Rsqrt(value)
  %1993 = fmul fast float %1992, %1977
  %1994 = fmul fast float %1985, %1957
  %1995 = fsub fast float %1958, %1994
  %1996 = fmul fast float %1993, %1995
  %1997 = fmul fast float %1958, %1958
  %1998 = fmul fast float %1997, 2.000000e+00
  %1999 = fadd fast float %1998, -1.000000e+00
  %2000 = fmul fast float %1985, %1959
  %2001 = fsub fast float %1999, %2000
  %2002 = fmul fast float %1993, %2001
  %2003 = fmul fast float %1957, %1957
  %2004 = fsub fast float 1.000000e+00, %2003
  %2005 = fsub fast float %2004, %1997
  %2006 = fmul fast float %1959, %1959
  %2007 = fsub fast float %2005, %2006
  %2008 = fmul fast float %1984, %1959
  %2009 = fadd fast float %2007, %2008
  %2010 = call float @dx.op.unary.f32(i32 7, float %2009)  ; Saturate(value)
  %2011 = call float @dx.op.unary.f32(i32 24, float %2010)  ; Sqrt(value)
  %2012 = fmul fast float %2011, %1993
  %2013 = fmul fast float %1958, 2.000000e+00
  %2014 = fmul fast float %2013, %1993
  %2015 = fmul fast float %2014, %2011
  %2016 = fmul fast float %1982, %1957
  %2017 = fadd fast float %2016, %1958
  %2018 = fadd fast float %2017, %1996
  %2019 = fmul fast float %1982, %1959
  %2020 = fadd fast float %2019, 1.000000e+00
  %2021 = fadd fast float %2020, %2002
  %2022 = fmul fast float %2012, %2021
  %2023 = fmul fast float %2018, %2021
  %2024 = fmul fast float %2015, %2018
  %2025 = fmul fast float %2022, 5.000000e-01
  %2026 = fmul fast float %2018, 2.500000e-01
  %2027 = fmul fast float %2026, %2015
  %2028 = fsub fast float %2027, %2025
  %2029 = fmul fast float %2028, %2023
  %2030 = fmul fast float %2022, %2022
  %2031 = fmul fast float %2022, 2.000000e+00
  %2032 = fsub fast float %2024, %2031
  %2033 = fmul fast float %2032, %2024
  %2034 = fadd fast float %2033, %2030
  %2035 = fmul fast float %2021, %2021
  %2036 = fmul fast float %2035, %2017
  %2037 = fadd fast float %2021, %2019
  %2038 = fmul fast float %2037, 5.000000e-01
  %2039 = fsub fast float -5.000000e-01, %2038
  %2040 = fmul fast float %2039, %2023
  %2041 = fadd fast float %2040, %2036
  %2042 = fmul fast float %2041, %2018
  %2043 = fadd fast float %2034, %2042
  %2044 = fmul fast float %2029, 2.000000e+00
  %2045 = fmul fast float %2043, %2043
  %2046 = fmul fast float %2029, %2029
  %2047 = fadd fast float %2045, %2046
  %2048 = fdiv fast float %2044, %2047
  %2049 = fmul fast float %2043, %2048
  %2050 = fmul fast float %2029, %2048
  %2051 = fsub fast float 1.000000e+00, %2050
  %2052 = fmul fast float %2051, %1996
  %2053 = fmul fast float %2049, %2012
  %2054 = fmul fast float %2051, %2002
  %2055 = fmul fast float %2049, %2015
  %2056 = fadd fast float %2053, %2016
  %2057 = fadd fast float %2056, %2052
  %2058 = fadd fast float %2055, %2019
  %2059 = fadd fast float %2058, %2054
  %2060 = fmul fast float %2059, 2.000000e+00
  %2061 = fadd fast float %2060, 2.000000e+00
  %2062 = call float @dx.op.unary.f32(i32 25, float %2061)  ; Rsqrt(value)
  %2063 = fadd fast float %2057, %1958
  %2064 = fmul fast float %2063, %2062
  %2065 = call float @dx.op.unary.f32(i32 7, float %2064)  ; Saturate(value)
  %2066 = fmul fast float %2059, %2062
  %2067 = fadd fast float %2066, %2062
  %2068 = call float @dx.op.unary.f32(i32 7, float %2067)  ; Saturate(value)
  br label %2069

; <label>:2069                                    ; preds = %1989, %1987, %1953
  %2070 = phi float [ %1988, %1987 ], [ %2068, %1989 ], [ %1968, %1953 ]
  %2071 = phi float [ 1.000000e+00, %1987 ], [ %2065, %1989 ], [ %1965, %1953 ]
  %2072 = phi float [ %1957, %1987 ], [ %2057, %1989 ], [ %1957, %1953 ]
  %2073 = call float @dx.op.unary.f32(i32 6, float %1958)  ; FAbs(value)
  %2074 = fadd fast float %2073, 0x3EE4F8B580000000
  %2075 = call float @dx.op.unary.f32(i32 7, float %2074)  ; Saturate(value)
  %2076 = fsub fast float 1.000000e+00, %2070
  %2077 = fmul fast float %2076, %2076
  %2078 = fmul fast float %2077, %2077
  %2079 = fmul fast float %2078, %2076
  %2080 = fsub fast float 1.000000e+00, %2079
  %2081 = fmul fast float %2080, 0x3FA47AE140000000
  %2082 = fadd fast float %2081, %2079
  %2083 = fmul fast float %1971, %1971
  %2084 = fcmp fast ogt float %935, 0.000000e+00
  br i1 %2084, label %2085, label %2092

; <label>:2085                                    ; preds = %2069
  %2086 = fmul fast float %935, %935
  %2087 = fmul fast float %2070, 0x400CCCCCC0000000
  %2088 = fadd fast float %2087, 0x3FD99999A0000000
  %2089 = fdiv fast float %2086, %2088
  %2090 = fadd fast float %2089, %2083
  %2091 = call float @dx.op.unary.f32(i32 7, float %2090)  ; Saturate(value)
  br label %2092

; <label>:2092                                    ; preds = %2085, %2069
  %2093 = phi float [ %2091, %2085 ], [ %2083, %2069 ]
  br i1 %1978, label %2094, label %2107

; <label>:2094                                    ; preds = %2092
  %2095 = fmul fast float %1977, 2.500000e-01
  %2096 = bitcast float %2093 to i32
  %2097 = ashr i32 %2096, 1
  %2098 = add nsw i32 %2097, 532487669
  %2099 = bitcast i32 %2098 to float
  %2100 = fmul fast float %2099, 3.000000e+00
  %2101 = fadd fast float %2100, %1977
  %2102 = fmul fast float %2095, %2101
  %2103 = fadd fast float %2070, 0x3F50624DE0000000
  %2104 = fdiv fast float %2102, %2103
  %2105 = fadd fast float %2104, %2093
  %2106 = fdiv fast float %2093, %2105
  br label %2107

; <label>:2107                                    ; preds = %2094, %2092
  %2108 = phi float [ %2105, %2094 ], [ %2093, %2092 ]
  %2109 = phi float [ %2106, %2094 ], [ 1.000000e+00, %2092 ]
  %2110 = fcmp fast olt float %869, 1.000000e+00
  br i1 %2110, label %2111, label %2130

; <label>:2111                                    ; preds = %2107
  %2112 = fsub fast float 0x3FF00068E0000000, %869
  %2113 = fadd fast float %869, 1.000000e+00
  %2114 = fdiv fast float %2112, %2113
  %2115 = call float @dx.op.unary.f32(i32 24, float %2114)  ; Sqrt(value)
  %2116 = fmul fast float %2115, 2.500000e-01
  %2117 = bitcast float %2108 to i32
  %2118 = ashr i32 %2117, 1
  %2119 = add nsw i32 %2118, 532487669
  %2120 = bitcast i32 %2119 to float
  %2121 = fmul fast float %2120, 3.000000e+00
  %2122 = fadd fast float %2115, %2121
  %2123 = fmul fast float %2116, %2122
  %2124 = fadd fast float %2070, 0x3F50624DE0000000
  %2125 = fdiv fast float %2123, %2124
  %2126 = fadd fast float %2125, %2108
  %2127 = fdiv fast float %2108, %2126
  %2128 = call float @dx.op.unary.f32(i32 24, float %2127)  ; Sqrt(value)
  %2129 = fmul fast float %2128, %2109
  br label %2130

; <label>:2130                                    ; preds = %2111, %2107
  %2131 = phi float [ %2129, %2111 ], [ %2109, %2107 ]
  %2132 = call float @dx.op.unary.f32(i32 24, float %2093)  ; Sqrt(value)
  %2133 = fsub fast float 1.000000e+00, %2132
  %2134 = fmul fast float %2133, %2075
  %2135 = fadd fast float %2134, %2132
  %2136 = fmul fast float %2135, %886
  %2137 = fmul fast float %2133, %886
  %2138 = fadd fast float %2137, %2132
  %2139 = fmul fast float %2138, %2075
  %2140 = fadd fast float %2136, %2139
  %2141 = fdiv fast float 5.000000e-01, %2140
  %2142 = fmul fast float %2093, %2071
  %2143 = fsub fast float %2142, %2071
  %2144 = fmul fast float %2143, %2071
  %2145 = fadd fast float %2144, 1.000000e+00
  %2146 = fmul fast float %2145, %2145
  %2147 = fmul fast float %2146, 0x400921FB60000000
  %2148 = fdiv fast float %2093, %2147
  %2149 = fmul fast float %886, %887
  %2150 = fmul fast float %2149, %2082
  %2151 = fmul fast float %2150, %2131
  %2152 = fmul fast float %2151, %2141
  %2153 = fmul fast float %2152, %2148
  %2154 = fmul fast float %2153, %141
  %2155 = fsub fast float 1.000000e+00, %2082
  %2156 = fmul fast float %2155, %2155
  br i1 %1956, label %2157, label %2180

; <label>:2157                                    ; preds = %2130
  %2158 = fmul fast float %252, %161
  %2159 = fmul fast float %251, %162
  %2160 = fsub fast float %2158, %2159
  %2161 = fmul fast float %250, %162
  %2162 = fmul fast float %252, %160
  %2163 = fsub fast float %2161, %2162
  %2164 = fmul fast float %251, %160
  %2165 = fmul fast float %250, %161
  %2166 = fsub fast float %2164, %2165
  %2167 = call float @dx.op.dot3.f32(i32 55, float %2160, float %2163, float %2166, float %2160, float %2163, float %2166)  ; Dot3(ax,ay,az,bx,by,bz)
  %2168 = call float @dx.op.unary.f32(i32 25, float %2167)  ; Rsqrt(value)
  %2169 = fmul fast float %2168, %2160
  %2170 = fmul fast float %2168, %2163
  %2171 = fmul fast float %2168, %2166
  %2172 = call float @dx.op.dot3.f32(i32 55, float %250, float %251, float %252, float %458, float %459, float %460)  ; Dot3(ax,ay,az,bx,by,bz)
  %2173 = call float @dx.op.dot3.f32(i32 55, float %250, float %251, float %252, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %2174 = fadd fast float %2173, %2172
  %2175 = fmul fast float %2174, %1962
  %2176 = call float @dx.op.dot3.f32(i32 55, float %2169, float %2170, float %2171, float %458, float %459, float %460)  ; Dot3(ax,ay,az,bx,by,bz)
  %2177 = call float @dx.op.dot3.f32(i32 55, float %2169, float %2170, float %2171, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %2178 = fadd fast float %2177, %2176
  %2179 = fmul fast float %2178, %1962
  br label %2180

; <label>:2180                                    ; preds = %2157, %2130
  %2181 = phi float [ %2179, %2157 ], [ 0.000000e+00, %2130 ]
  %2182 = phi float [ %2177, %2157 ], [ 0.000000e+00, %2130 ]
  %2183 = phi float [ %2176, %2157 ], [ 0.000000e+00, %2130 ]
  %2184 = phi float [ %2175, %2157 ], [ 0.000000e+00, %2130 ]
  %2185 = phi float [ %2173, %2157 ], [ 0.000000e+00, %2130 ]
  %2186 = phi float [ %2172, %2157 ], [ 0.000000e+00, %2130 ]
  %2187 = phi float [ %1968, %2157 ], [ %2070, %2130 ]
  %2188 = phi float [ %1965, %2157 ], [ %2071, %2130 ]
  %2189 = phi float [ %1957, %2157 ], [ %2072, %2130 ]
  %2190 = phi float [ %1958, %2157 ], [ %2075, %2130 ]
  %2191 = fmul fast float %2187, 0x3FCC28F5C0000000
  %2192 = fsub fast float 0x3FE428F5C0000000, %2191
  %2193 = fmul fast float %2192, %2187
  %2194 = fadd fast float %2193, 0xBFE7D70A40000000
  %2195 = fmul fast float %2194, %2188
  %2196 = fmul fast float %2190, 0x3FE5555560000000
  %2197 = fsub fast float %2196, %2195
  %2198 = call float @dx.op.binary.f32(i32 35, float %2197, float 0x3F50624DE0000000)  ; FMax(a,b)
  %2199 = call float @dx.op.binary.f32(i32 36, float %2198, float 1.000000e+00)  ; FMin(a,b)
  %2200 = fmul fast float %2189, 0x3FE5555560000000
  %2201 = fsub fast float %2200, %2195
  %2202 = call float @dx.op.binary.f32(i32 35, float %2201, float 0x3F50624DE0000000)  ; FMax(a,b)
  %2203 = call float @dx.op.binary.f32(i32 36, float %2202, float 1.000000e+00)  ; FMin(a,b)
  %2204 = fmul fast float %2187, 0x3FE5555560000000
  %2205 = fsub fast float %2204, %2194
  %2206 = call float @dx.op.unary.f32(i32 7, float %2205)  ; Saturate(value)
  %2207 = fcmp fast ogt float %164, 0.000000e+00
  br i1 %2207, label %2208, label %2241

; <label>:2208                                    ; preds = %2180
  %2209 = fdiv fast float 1.000000e+00, %2199
  %2210 = fdiv fast float 1.000000e+00, %2203
  %2211 = fmul fast float %203, 0x3FD45F3060000000
  %2212 = fmul fast float %204, 0x3FD45F3060000000
  %2213 = fmul fast float %205, 0x3FD45F3060000000
  %2214 = call float @dx.op.binary.f32(i32 35, float %2211, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %2215 = call float @dx.op.binary.f32(i32 35, float %2212, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %2216 = call float @dx.op.binary.f32(i32 35, float %2213, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %2217 = call float @dx.op.unary.f32(i32 23, float %2214)  ; Log(value)
  %2218 = call float @dx.op.unary.f32(i32 23, float %2215)  ; Log(value)
  %2219 = call float @dx.op.unary.f32(i32 23, float %2216)  ; Log(value)
  %2220 = fadd fast float %2209, -2.000000e+00
  %2221 = fadd fast float %2220, %2210
  %2222 = call float @dx.op.binary.f32(i32 35, float %2221, float 0.000000e+00)  ; FMax(a,b)
  %2223 = fmul fast float %2217, 5.000000e-01
  %2224 = fmul fast float %2223, %2222
  %2225 = fmul fast float %2218, 5.000000e-01
  %2226 = fmul fast float %2225, %2222
  %2227 = fmul fast float %2219, 5.000000e-01
  %2228 = fmul fast float %2227, %2222
  %2229 = call float @dx.op.unary.f32(i32 21, float %2224)  ; Exp(value)
  %2230 = call float @dx.op.unary.f32(i32 21, float %2226)  ; Exp(value)
  %2231 = call float @dx.op.unary.f32(i32 21, float %2228)  ; Exp(value)
  %2232 = fadd fast float %2229, -1.000000e+00
  %2233 = fadd fast float %2230, -1.000000e+00
  %2234 = fadd fast float %2231, -1.000000e+00
  %2235 = fmul fast float %2232, %164
  %2236 = fmul fast float %2233, %164
  %2237 = fmul fast float %2234, %164
  %2238 = fadd fast float %2235, 1.000000e+00
  %2239 = fadd fast float %2236, 1.000000e+00
  %2240 = fadd fast float %2237, 1.000000e+00
  br label %2241

; <label>:2241                                    ; preds = %2208, %2180
  %2242 = phi float [ %2238, %2208 ], [ 1.000000e+00, %2180 ]
  %2243 = phi float [ %2239, %2208 ], [ 1.000000e+00, %2180 ]
  %2244 = phi float [ %2240, %2208 ], [ 1.000000e+00, %2180 ]
  %2245 = fmul fast float %221, 0x3FD45F3060000000
  %2246 = fmul fast float %222, 0x3FD45F3060000000
  %2247 = fmul fast float %223, 0x3FD45F3060000000
  %2248 = fmul fast float %2245, %2149
  %2249 = fmul fast float %2246, %2149
  %2250 = fmul fast float %2247, %2149
  %2251 = fmul fast float %2156, %2248
  %2252 = fmul fast float %2251, %2242
  %2253 = fmul fast float %2156, %2249
  %2254 = fmul fast float %2253, %2243
  %2255 = fmul fast float %2156, %2250
  %2256 = fmul fast float %2255, %2244
  %2257 = fsub fast float %2252, %2248
  %2258 = fsub fast float %2254, %2249
  %2259 = fsub fast float %2256, %2250
  %2260 = fmul fast float %2257, %141
  %2261 = fmul fast float %2258, %141
  %2262 = fmul fast float %2259, %141
  %2263 = fadd fast float %2260, %2248
  %2264 = fadd fast float %2261, %2249
  %2265 = fadd fast float %2262, %2250
  %2266 = fmul fast float %1969, %1969
  br i1 %1956, label %2267, label %2302, !dx.controlflow.hints !60

; <label>:2267                                    ; preds = %2241
  %2268 = fadd fast float %253, 1.000000e+00
  %2269 = fmul fast float %1969, %2268
  %2270 = call float @dx.op.binary.f32(i32 35, float %2269, float 0x3F50624DE0000000)  ; FMax(a,b)
  %2271 = fsub fast float 1.000000e+00, %253
  %2272 = fmul fast float %1969, %2271
  %2273 = call float @dx.op.binary.f32(i32 35, float %2272, float 0x3F50624DE0000000)  ; FMax(a,b)
  %2274 = fmul fast float %2273, %2270
  %2275 = fmul fast float %2273, %2184
  %2276 = fmul fast float %2270, %2181
  %2277 = fmul fast float %2274, %2188
  %2278 = call float @dx.op.dot3.f32(i32 55, float %2275, float %2276, float %2277, float %2275, float %2276, float %2277)  ; Dot3(ax,ay,az,bx,by,bz)
  %2279 = fdiv fast float %2274, %2278
  %2280 = fmul fast float %2274, 0x3FD45F3060000000
  %2281 = fmul fast float %2279, %2279
  %2282 = fmul fast float %2281, %2280
  %2283 = fmul fast float %2270, %2186
  %2284 = fmul fast float %2273, %2183
  %2285 = fmul fast float %2283, %2283
  %2286 = fmul fast float %2284, %2284
  %2287 = fmul fast float %2199, %2199
  %2288 = fadd fast float %2285, %2287
  %2289 = fadd fast float %2288, %2286
  %2290 = call float @dx.op.unary.f32(i32 24, float %2289)  ; Sqrt(value)
  %2291 = fmul fast float %2290, %2203
  %2292 = fmul fast float %2270, %2185
  %2293 = fmul fast float %2273, %2182
  %2294 = fmul fast float %2292, %2292
  %2295 = fmul fast float %2293, %2293
  %2296 = fmul fast float %2203, %2203
  %2297 = fadd fast float %2294, %2296
  %2298 = fadd fast float %2297, %2295
  %2299 = call float @dx.op.unary.f32(i32 24, float %2298)  ; Sqrt(value)
  %2300 = fmul fast float %2299, %2199
  %2301 = fadd fast float %2300, %2291
  br label %2319

; <label>:2302                                    ; preds = %2241
  %2303 = call float @dx.op.unary.f32(i32 24, float %2266)  ; Sqrt(value)
  %2304 = fsub fast float 1.000000e+00, %2303
  %2305 = fmul fast float %2304, %2199
  %2306 = fadd fast float %2305, %2303
  %2307 = fmul fast float %2306, %886
  %2308 = fmul fast float %2304, %886
  %2309 = fadd fast float %2308, %2303
  %2310 = fmul fast float %2309, %2199
  %2311 = fadd fast float %2307, %2310
  %2312 = fmul fast float %2188, %2266
  %2313 = fsub fast float %2312, %2188
  %2314 = fmul fast float %2313, %2188
  %2315 = fadd fast float %2314, 1.000000e+00
  %2316 = fmul fast float %2315, %2315
  %2317 = fmul fast float %2316, 0x400921FB60000000
  %2318 = fdiv fast float %2266, %2317
  br label %2319

; <label>:2319                                    ; preds = %2302, %2267
  %2320 = phi float [ %2282, %2267 ], [ %2318, %2302 ]
  %2321 = phi float [ %2301, %2267 ], [ %2311, %2302 ]
  %2322 = fdiv float 5.000000e-01, %2321
  %2323 = fsub fast float 1.000000e+00, %2206
  %2324 = fmul fast float %2323, %2323
  %2325 = fmul fast float %2324, %2324
  %2326 = fmul fast float %2325, %2323
  %2327 = fmul fast float %233, 5.000000e+01
  %2328 = call float @dx.op.unary.f32(i32 7, float %2327)  ; Saturate(value)
  %2329 = fmul fast float %2328, %2326
  %2330 = fsub fast float 1.000000e+00, %2326
  %2331 = fmul fast float %2330, %232
  %2332 = fmul fast float %2330, %233
  %2333 = fmul fast float %2330, %234
  %2334 = fadd fast float %2329, %2331
  %2335 = fadd fast float %2329, %2332
  %2336 = fadd fast float %2329, %2333
  %2337 = fsub fast float 1.000000e+00, %2187
  %2338 = fmul fast float %2337, %2337
  %2339 = fmul fast float %2338, %2338
  %2340 = fmul fast float %2339, %2337
  %2341 = fmul fast float %2328, %2340
  %2342 = fsub fast float 1.000000e+00, %2340
  %2343 = fmul fast float %2342, %232
  %2344 = fmul fast float %2342, %233
  %2345 = fmul fast float %2342, %234
  %2346 = fadd fast float %2341, %2343
  %2347 = fadd fast float %2341, %2344
  %2348 = fadd fast float %2341, %2345
  br i1 %1956, label %2395, label %2349, !dx.controlflow.hints !61

; <label>:2349                                    ; preds = %2319
  br i1 %2084, label %2350, label %2357

; <label>:2350                                    ; preds = %2349
  %2351 = fmul fast float %935, %935
  %2352 = fmul fast float %2187, 0x400CCCCCC0000000
  %2353 = fadd fast float %2352, 0x3FD99999A0000000
  %2354 = fdiv fast float %2351, %2353
  %2355 = fadd fast float %2354, %2266
  %2356 = call float @dx.op.unary.f32(i32 7, float %2355)  ; Saturate(value)
  br label %2357

; <label>:2357                                    ; preds = %2350, %2349
  %2358 = phi float [ %2356, %2350 ], [ %2266, %2349 ]
  %2359 = fcmp fast ogt float %933, 0.000000e+00
  br i1 %2359, label %2360, label %2373

; <label>:2360                                    ; preds = %2357
  %2361 = fmul fast float %933, 2.500000e-01
  %2362 = bitcast float %2358 to i32
  %2363 = ashr i32 %2362, 1
  %2364 = add nsw i32 %2363, 532487669
  %2365 = bitcast i32 %2364 to float
  %2366 = fmul fast float %2365, 3.000000e+00
  %2367 = fadd fast float %2366, %933
  %2368 = fmul fast float %2361, %2367
  %2369 = fadd fast float %2187, 0x3F50624DE0000000
  %2370 = fdiv fast float %2368, %2369
  %2371 = fadd fast float %2370, %2358
  %2372 = fdiv fast float %2358, %2371
  br label %2373

; <label>:2373                                    ; preds = %2360, %2357
  %2374 = phi float [ %2371, %2360 ], [ %2358, %2357 ]
  %2375 = phi float [ %2372, %2360 ], [ 1.000000e+00, %2357 ]
  br i1 %2110, label %2376, label %2395

; <label>:2376                                    ; preds = %2373
  %2377 = fsub fast float 0x3FF00068E0000000, %869
  %2378 = fadd fast float %869, 1.000000e+00
  %2379 = fdiv fast float %2377, %2378
  %2380 = call float @dx.op.unary.f32(i32 24, float %2379)  ; Sqrt(value)
  %2381 = fmul fast float %2380, 2.500000e-01
  %2382 = bitcast float %2374 to i32
  %2383 = ashr i32 %2382, 1
  %2384 = add nsw i32 %2383, 532487669
  %2385 = bitcast i32 %2384 to float
  %2386 = fmul fast float %2385, 3.000000e+00
  %2387 = fadd fast float %2380, %2386
  %2388 = fmul fast float %2381, %2387
  %2389 = fadd fast float %2187, 0x3F50624DE0000000
  %2390 = fdiv fast float %2388, %2389
  %2391 = fadd fast float %2390, %2374
  %2392 = fdiv fast float %2374, %2391
  %2393 = call float @dx.op.unary.f32(i32 24, float %2392)  ; Sqrt(value)
  %2394 = fmul fast float %2393, %2375
  br label %2395

; <label>:2395                                    ; preds = %2376, %2373, %2319
  %2396 = phi float [ 1.000000e+00, %2319 ], [ %2394, %2376 ], [ %2375, %2373 ]
  %2397 = fmul fast float %2149, %2320
  %2398 = fmul fast float %2397, %2322
  %2399 = fmul fast float %2398, %2396
  %2400 = fmul fast float %2242, %2156
  %2401 = fmul fast float %2243, %2156
  %2402 = fmul fast float %2244, %2156
  %2403 = fmul fast float %2400, %2334
  %2404 = fmul fast float %2401, %2335
  %2405 = fmul fast float %2402, %2336
  %2406 = fsub fast float %2403, %2346
  %2407 = fsub fast float %2404, %2347
  %2408 = fsub fast float %2405, %2348
  %2409 = fmul fast float %2406, %141
  %2410 = fmul fast float %2407, %141
  %2411 = fmul fast float %2408, %141
  %2412 = fadd fast float %2409, %2346
  %2413 = fadd fast float %2410, %2347
  %2414 = fadd fast float %2411, %2348
  %2415 = fmul fast float %2399, %2412
  %2416 = fmul fast float %2399, %2413
  %2417 = fmul fast float %2399, %2414
  %2418 = fadd fast float %2415, %2154
  %2419 = fadd fast float %2416, %2154
  %2420 = fadd fast float %2417, %2154
  br label %3821

; <label>:2421                                    ; preds = %919
  %2422 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %2423 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %458, float %459, float %460)  ; Dot3(ax,ay,az,bx,by,bz)
  %2424 = call float @dx.op.dot3.f32(i32 55, float %458, float %459, float %460, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %2425 = fmul fast float %2424, 2.000000e+00
  %2426 = fadd fast float %2425, 2.000000e+00
  %2427 = call float @dx.op.unary.f32(i32 25, float %2426)  ; Rsqrt(value)
  %2428 = fadd fast float %2423, %2422
  %2429 = fmul fast float %2427, %2428
  %2430 = call float @dx.op.unary.f32(i32 7, float %2429)  ; Saturate(value)
  %2431 = fmul fast float %2427, %2424
  %2432 = fadd fast float %2431, %2427
  %2433 = call float @dx.op.unary.f32(i32 7, float %2432)  ; Saturate(value)
  %2434 = fcmp fast ogt float %933, 0.000000e+00
  br i1 %2434, label %2435, label %2524

; <label>:2435                                    ; preds = %2421
  %2436 = fmul fast float %933, %933
  %2437 = fsub fast float 1.000000e+00, %2436
  %2438 = call float @dx.op.unary.f32(i32 24, float %2437)  ; Sqrt(value)
  %2439 = fmul fast float %2422, 2.000000e+00
  %2440 = fmul fast float %2439, %2423
  %2441 = fsub fast float %2440, %2424
  %2442 = fcmp fast ult float %2441, %2438
  br i1 %2442, label %2445, label %2443

; <label>:2443                                    ; preds = %2435
  %2444 = call float @dx.op.unary.f32(i32 6, float %2423)  ; FAbs(value)
  br label %2524

; <label>:2445                                    ; preds = %2435
  %2446 = fmul fast float %2441, %2441
  %2447 = fsub fast float 1.000000e+00, %2446
  %2448 = call float @dx.op.unary.f32(i32 25, float %2447)  ; Rsqrt(value)
  %2449 = fmul fast float %2448, %933
  %2450 = fmul fast float %2441, %2422
  %2451 = fsub fast float %2423, %2450
  %2452 = fmul fast float %2449, %2451
  %2453 = fmul fast float %2423, %2423
  %2454 = fmul fast float %2453, 2.000000e+00
  %2455 = fadd fast float %2454, -1.000000e+00
  %2456 = fmul fast float %2441, %2424
  %2457 = fsub fast float %2455, %2456
  %2458 = fmul fast float %2449, %2457
  %2459 = fmul fast float %2422, %2422
  %2460 = fsub fast float 1.000000e+00, %2459
  %2461 = fsub fast float %2460, %2453
  %2462 = fmul fast float %2424, %2424
  %2463 = fsub fast float %2461, %2462
  %2464 = fmul fast float %2440, %2424
  %2465 = fadd fast float %2463, %2464
  %2466 = call float @dx.op.unary.f32(i32 7, float %2465)  ; Saturate(value)
  %2467 = call float @dx.op.unary.f32(i32 24, float %2466)  ; Sqrt(value)
  %2468 = fmul fast float %2467, %2449
  %2469 = fmul fast float %2423, 2.000000e+00
  %2470 = fmul fast float %2469, %2449
  %2471 = fmul fast float %2470, %2467
  %2472 = fmul fast float %2438, %2422
  %2473 = fadd fast float %2472, %2423
  %2474 = fadd fast float %2473, %2452
  %2475 = fmul fast float %2438, %2424
  %2476 = fadd fast float %2475, 1.000000e+00
  %2477 = fadd fast float %2476, %2458
  %2478 = fmul fast float %2468, %2477
  %2479 = fmul fast float %2474, %2477
  %2480 = fmul fast float %2471, %2474
  %2481 = fmul fast float %2478, 5.000000e-01
  %2482 = fmul fast float %2474, 2.500000e-01
  %2483 = fmul fast float %2482, %2471
  %2484 = fsub fast float %2483, %2481
  %2485 = fmul fast float %2484, %2479
  %2486 = fmul fast float %2478, %2478
  %2487 = fmul fast float %2478, 2.000000e+00
  %2488 = fsub fast float %2480, %2487
  %2489 = fmul fast float %2488, %2480
  %2490 = fadd fast float %2489, %2486
  %2491 = fmul fast float %2477, %2477
  %2492 = fmul fast float %2491, %2473
  %2493 = fadd fast float %2477, %2475
  %2494 = fmul fast float %2493, 5.000000e-01
  %2495 = fsub fast float -5.000000e-01, %2494
  %2496 = fmul fast float %2495, %2479
  %2497 = fadd fast float %2496, %2492
  %2498 = fmul fast float %2497, %2474
  %2499 = fadd fast float %2490, %2498
  %2500 = fmul fast float %2485, 2.000000e+00
  %2501 = fmul fast float %2499, %2499
  %2502 = fmul fast float %2485, %2485
  %2503 = fadd fast float %2501, %2502
  %2504 = fdiv fast float %2500, %2503
  %2505 = fmul fast float %2499, %2504
  %2506 = fmul fast float %2485, %2504
  %2507 = fsub fast float 1.000000e+00, %2506
  %2508 = fmul fast float %2507, %2452
  %2509 = fmul fast float %2505, %2468
  %2510 = fmul fast float %2507, %2458
  %2511 = fmul fast float %2505, %2471
  %2512 = fadd fast float %2511, %2475
  %2513 = fadd fast float %2512, %2510
  %2514 = fmul fast float %2513, 2.000000e+00
  %2515 = fadd fast float %2514, 2.000000e+00
  %2516 = call float @dx.op.unary.f32(i32 25, float %2515)  ; Rsqrt(value)
  %2517 = fadd fast float %2473, %2509
  %2518 = fadd fast float %2517, %2508
  %2519 = fmul fast float %2518, %2516
  %2520 = call float @dx.op.unary.f32(i32 7, float %2519)  ; Saturate(value)
  %2521 = fmul fast float %2513, %2516
  %2522 = fadd fast float %2521, %2516
  %2523 = call float @dx.op.unary.f32(i32 7, float %2522)  ; Saturate(value)
  br label %2524

; <label>:2524                                    ; preds = %2445, %2443, %2421
  %2525 = phi float [ %2444, %2443 ], [ %2523, %2445 ], [ %2433, %2421 ]
  %2526 = phi float [ 1.000000e+00, %2443 ], [ %2520, %2445 ], [ %2430, %2421 ]
  %2527 = call float @dx.op.unary.f32(i32 6, float %2423)  ; FAbs(value)
  %2528 = fadd fast float %2527, 0x3EE4F8B580000000
  %2529 = call float @dx.op.unary.f32(i32 7, float %2528)  ; Saturate(value)
  %2530 = fmul fast float %141, 2.550000e+02
  %2531 = fadd fast float %2530, 5.000000e-01
  %2532 = fptoui float %2531 to i32
  %2533 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2534 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2533, i32 0, i32 5, i32 %2532, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2535 = extractvalue %dx.types.ResRet.f32 %2534, 0
  %2536 = extractvalue %dx.types.ResRet.f32 %2534, 1
  %2537 = extractvalue %dx.types.ResRet.f32 %2534, 2
  %2538 = fadd fast float %144, 0xBFB99999A0000000
  %2539 = fmul fast float %2538, 1.000000e+01
  %2540 = call float @dx.op.unary.f32(i32 7, float %2539)  ; Saturate(value)
  %2541 = fmul fast float %2535, 2.000000e+00
  %2542 = fadd fast float %2541, -1.000000e+00
  %2543 = fmul fast float %2542, %2540
  %2544 = fadd fast float %2543, 1.000000e+00
  %2545 = fmul fast float %2536, 2.000000e+00
  %2546 = fadd fast float %2545, -1.000000e+00
  %2547 = fmul fast float %2546, %2540
  %2548 = fadd fast float %2547, 1.000000e+00
  %2549 = fmul fast float %2544, %839
  %2550 = call float @dx.op.unary.f32(i32 7, float %2549)  ; Saturate(value)
  %2551 = call float @dx.op.binary.f32(i32 35, float %2550, float 0x3F947AE140000000)  ; FMax(a,b)
  %2552 = fmul fast float %2548, %839
  %2553 = call float @dx.op.unary.f32(i32 7, float %2552)  ; Saturate(value)
  %2554 = fsub fast float %2553, %2551
  %2555 = fmul fast float %2554, %2537
  %2556 = fadd fast float %2555, %2551
  %2557 = fmul fast float %839, 2.000000e+00
  %2558 = fmul fast float %2525, %2525
  %2559 = fmul fast float %2558, %2557
  %2560 = fadd fast float %2559, -5.000000e-01
  %2561 = fsub fast float 1.000000e+00, %2529
  %2562 = fmul fast float %2561, %2561
  %2563 = fmul fast float %2560, %2561
  %2564 = fmul fast float %2562, %2562
  %2565 = fmul fast float %2564, %2563
  %2566 = fadd fast float %2565, 1.000000e+00
  %2567 = fsub fast float 1.000000e+00, %886
  %2568 = fmul fast float %2567, %2567
  %2569 = fmul fast float %2568, %2568
  %2570 = fmul fast float %2569, %2567
  %2571 = fmul fast float %2570, %2560
  %2572 = fadd fast float %2571, 1.000000e+00
  %2573 = fmul fast float %2572, 0x3FD45F3060000000
  %2574 = fmul fast float %2573, %2566
  %2575 = fmul fast float %886, %887
  %2576 = fmul fast float %2575, %221
  %2577 = fmul fast float %2576, %2574
  %2578 = fmul fast float %2575, %222
  %2579 = fmul fast float %2578, %2574
  %2580 = fmul fast float %2575, %223
  %2581 = fmul fast float %2580, %2574
  %2582 = fmul fast float %2556, %2556
  %2583 = fmul fast float %2582, %2582
  %2584 = fmul fast float %2551, %2551
  %2585 = fmul fast float %2584, %2584
  %2586 = fmul fast float %2553, %2553
  %2587 = fmul fast float %2586, %2586
  %2588 = fcmp fast ogt float %935, 0.000000e+00
  br i1 %2588, label %2589, label %2596

; <label>:2589                                    ; preds = %2524
  %2590 = fmul fast float %935, %935
  %2591 = fmul fast float %2525, 0x400CCCCCC0000000
  %2592 = fadd fast float %2591, 0x3FD99999A0000000
  %2593 = fdiv fast float %2590, %2592
  %2594 = fadd fast float %2593, %2585
  %2595 = call float @dx.op.unary.f32(i32 7, float %2594)  ; Saturate(value)
  br label %2596

; <label>:2596                                    ; preds = %2589, %2524
  %2597 = phi float [ %2595, %2589 ], [ %2585, %2524 ]
  br i1 %2434, label %2598, label %2611

; <label>:2598                                    ; preds = %2596
  %2599 = fmul fast float %933, 2.500000e-01
  %2600 = bitcast float %2597 to i32
  %2601 = ashr i32 %2600, 1
  %2602 = add nsw i32 %2601, 532487669
  %2603 = bitcast i32 %2602 to float
  %2604 = fmul fast float %2603, 3.000000e+00
  %2605 = fadd fast float %2604, %933
  %2606 = fmul fast float %2599, %2605
  %2607 = fadd fast float %2525, 0x3F50624DE0000000
  %2608 = fdiv fast float %2606, %2607
  %2609 = fadd fast float %2608, %2597
  %2610 = fdiv fast float %2597, %2609
  br label %2611

; <label>:2611                                    ; preds = %2598, %2596
  %2612 = phi float [ %2609, %2598 ], [ %2597, %2596 ]
  %2613 = phi float [ %2610, %2598 ], [ 1.000000e+00, %2596 ]
  %2614 = fcmp fast olt float %869, 1.000000e+00
  br i1 %2614, label %2615, label %2634

; <label>:2615                                    ; preds = %2611
  %2616 = fsub fast float 0x3FF00068E0000000, %869
  %2617 = fadd fast float %869, 1.000000e+00
  %2618 = fdiv fast float %2616, %2617
  %2619 = call float @dx.op.unary.f32(i32 24, float %2618)  ; Sqrt(value)
  %2620 = fmul fast float %2619, 2.500000e-01
  %2621 = bitcast float %2612 to i32
  %2622 = ashr i32 %2621, 1
  %2623 = add nsw i32 %2622, 532487669
  %2624 = bitcast i32 %2623 to float
  %2625 = fmul fast float %2624, 3.000000e+00
  %2626 = fadd fast float %2619, %2625
  %2627 = fmul fast float %2620, %2626
  %2628 = fadd fast float %2525, 0x3F50624DE0000000
  %2629 = fdiv fast float %2627, %2628
  %2630 = fadd fast float %2629, %2612
  %2631 = fdiv fast float %2612, %2630
  %2632 = call float @dx.op.unary.f32(i32 24, float %2631)  ; Sqrt(value)
  %2633 = fmul fast float %2632, %2613
  br label %2634

; <label>:2634                                    ; preds = %2615, %2611
  %2635 = phi float [ %2633, %2615 ], [ %2613, %2611 ]
  br i1 %2588, label %2636, label %2643

; <label>:2636                                    ; preds = %2634
  %2637 = fmul fast float %935, %935
  %2638 = fmul fast float %2525, 0x400CCCCCC0000000
  %2639 = fadd fast float %2638, 0x3FD99999A0000000
  %2640 = fdiv fast float %2637, %2639
  %2641 = fadd fast float %2640, %2587
  %2642 = call float @dx.op.unary.f32(i32 7, float %2641)  ; Saturate(value)
  br label %2643

; <label>:2643                                    ; preds = %2636, %2634
  %2644 = phi float [ %2642, %2636 ], [ %2587, %2634 ]
  br i1 %2434, label %2645, label %2658

; <label>:2645                                    ; preds = %2643
  %2646 = fmul fast float %933, 2.500000e-01
  %2647 = bitcast float %2644 to i32
  %2648 = ashr i32 %2647, 1
  %2649 = add nsw i32 %2648, 532487669
  %2650 = bitcast i32 %2649 to float
  %2651 = fmul fast float %2650, 3.000000e+00
  %2652 = fadd fast float %2651, %933
  %2653 = fmul fast float %2646, %2652
  %2654 = fadd fast float %2525, 0x3F50624DE0000000
  %2655 = fdiv fast float %2653, %2654
  %2656 = fadd fast float %2655, %2644
  %2657 = fdiv fast float %2644, %2656
  br label %2658

; <label>:2658                                    ; preds = %2645, %2643
  %2659 = phi float [ %2656, %2645 ], [ %2644, %2643 ]
  %2660 = phi float [ %2657, %2645 ], [ 1.000000e+00, %2643 ]
  br i1 %2614, label %2661, label %2680

; <label>:2661                                    ; preds = %2658
  %2662 = fsub fast float 0x3FF00068E0000000, %869
  %2663 = fadd fast float %869, 1.000000e+00
  %2664 = fdiv fast float %2662, %2663
  %2665 = call float @dx.op.unary.f32(i32 24, float %2664)  ; Sqrt(value)
  %2666 = fmul fast float %2665, 2.500000e-01
  %2667 = bitcast float %2659 to i32
  %2668 = ashr i32 %2667, 1
  %2669 = add nsw i32 %2668, 532487669
  %2670 = bitcast i32 %2669 to float
  %2671 = fmul fast float %2670, 3.000000e+00
  %2672 = fadd fast float %2665, %2671
  %2673 = fmul fast float %2666, %2672
  %2674 = fadd fast float %2525, 0x3F50624DE0000000
  %2675 = fdiv fast float %2673, %2674
  %2676 = fadd fast float %2675, %2659
  %2677 = fdiv fast float %2659, %2676
  %2678 = call float @dx.op.unary.f32(i32 24, float %2677)  ; Sqrt(value)
  %2679 = fmul fast float %2678, %2660
  br label %2680

; <label>:2680                                    ; preds = %2661, %2658
  %2681 = phi float [ %2679, %2661 ], [ %2660, %2658 ]
  %2682 = fmul fast float %2644, %2526
  %2683 = fsub fast float %2682, %2526
  %2684 = fmul fast float %2683, %2526
  %2685 = fadd fast float %2684, 1.000000e+00
  %2686 = fmul fast float %2685, %2685
  %2687 = fmul fast float %2686, 0x400921FB60000000
  %2688 = fdiv fast float %2644, %2687
  %2689 = fmul fast float %2688, %2681
  %2690 = fmul fast float %2597, %2526
  %2691 = fsub fast float %2690, %2526
  %2692 = fmul fast float %2691, %2526
  %2693 = fadd fast float %2692, 1.000000e+00
  %2694 = fmul fast float %2693, %2693
  %2695 = fmul fast float %2694, 0x400921FB60000000
  %2696 = fdiv fast float %2597, %2695
  %2697 = fmul fast float %2696, %2635
  %2698 = fsub fast float %2689, %2697
  %2699 = fmul fast float %2698, %2537
  %2700 = fadd fast float %2699, %2697
  %2701 = call float @dx.op.unary.f32(i32 24, float %2583)  ; Sqrt(value)
  %2702 = fsub fast float 1.000000e+00, %2701
  %2703 = fmul fast float %2702, %2529
  %2704 = fadd fast float %2703, %2701
  %2705 = fmul fast float %2704, %886
  %2706 = fmul fast float %2702, %886
  %2707 = fadd fast float %2706, %2701
  %2708 = fmul fast float %2707, %2529
  %2709 = fadd fast float %2705, %2708
  %2710 = fdiv fast float 5.000000e-01, %2709
  %2711 = fsub fast float 1.000000e+00, %2525
  %2712 = fmul fast float %2711, %2711
  %2713 = fmul fast float %2712, %2712
  %2714 = fmul fast float %2713, %2711
  %2715 = fmul fast float %233, 5.000000e+01
  %2716 = call float @dx.op.unary.f32(i32 7, float %2715)  ; Saturate(value)
  %2717 = fmul fast float %2716, %2714
  %2718 = fsub fast float 1.000000e+00, %2714
  %2719 = fmul fast float %2718, %232
  %2720 = fmul fast float %2718, %233
  %2721 = fmul fast float %2718, %234
  %2722 = fadd fast float %2717, %2719
  %2723 = fadd fast float %2717, %2720
  %2724 = fadd fast float %2717, %2721
  %2725 = fmul fast float %2700, %2710
  %2726 = fmul fast float %2722, %2575
  %2727 = fmul fast float %2726, %2725
  %2728 = fmul fast float %2723, %2575
  %2729 = fmul fast float %2728, %2725
  %2730 = fmul fast float %2724, %2575
  %2731 = fmul fast float %2730, %2725
  %2732 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2533, i32 0, i32 3, i32 %2532, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2733 = extractvalue %dx.types.ResRet.f32 %2732, 2
  %2734 = extractvalue %dx.types.ResRet.f32 %2732, 3
  %2735 = fmul fast float %2733, 2.000000e+00
  %2736 = fadd fast float %2735, -1.000000e+00
  %2737 = fsub fast float 1.000000e+00, %518
  %2738 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 248)  ; CBufferLoadLegacy(handle,regIndex)
  %2739 = extractvalue %dx.types.CBufRet.f32 %2738, 0
  %2740 = extractvalue %dx.types.CBufRet.f32 %2738, 1
  %2741 = fmul fast float %2737, 3.100000e+01
  %2742 = fadd fast float %2741, 3.450000e+01
  %2743 = uitofp i32 %2532 to float
  %2744 = fadd fast float %2743, 5.000000e-01
  %2745 = fdiv fast float %2742, %2739
  %2746 = fdiv fast float %2744, %2740
  %2747 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2748 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2533, %dx.types.Handle %2747, float %2745, float %2746, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2749 = extractvalue %dx.types.ResRet.f32 %2748, 0
  %2750 = extractvalue %dx.types.ResRet.f32 %2748, 1
  %2751 = extractvalue %dx.types.ResRet.f32 %2748, 2
  %2752 = fsub fast float -0.000000e+00, %160
  %2753 = fsub fast float -0.000000e+00, %161
  %2754 = fsub fast float -0.000000e+00, %162
  %2755 = call float @dx.op.dot3.f32(i32 55, float %458, float %459, float %460, float %2752, float %2753, float %2754)  ; Dot3(ax,ay,az,bx,by,bz)
  %2756 = fmul fast float %2734, %2734
  %2757 = fmul fast float %2755, %2755
  %2758 = fsub fast float 1.000000e+00, %2757
  %2759 = fmul fast float %2756, %2758
  %2760 = fsub fast float 1.000000e+00, %2759
  %2761 = fcmp fast oge float %2760, 0.000000e+00
  %2762 = fmul fast float %2734, %458
  %2763 = fmul fast float %2734, %459
  %2764 = fmul fast float %2734, %460
  %2765 = call float @dx.op.unary.f32(i32 24, float %2760)  ; Sqrt(value)
  %2766 = fmul fast float %2755, %2734
  %2767 = fadd fast float %2766, %2765
  %2768 = fmul fast float %2767, %2752
  %2769 = fmul fast float %2767, %2753
  %2770 = fmul fast float %2767, %2754
  %2771 = fsub fast float %2762, %2768
  %2772 = fsub fast float %2763, %2769
  %2773 = fsub fast float %2764, %2770
  %2774 = select i1 %2761, float %2771, float 0.000000e+00
  %2775 = select i1 %2761, float %2772, float 0.000000e+00
  %2776 = select i1 %2761, float %2773, float 0.000000e+00
  %2777 = fsub fast float -0.000000e+00, %925
  %2778 = fsub fast float -0.000000e+00, %926
  %2779 = fsub fast float -0.000000e+00, %927
  %2780 = call float @dx.op.dot3.f32(i32 55, float %2777, float %2778, float %2779, float %2774, float %2775, float %2776)  ; Dot3(ax,ay,az,bx,by,bz)
  %2781 = fmul fast float %2736, %2736
  %2782 = fmul fast float %2780, %2736
  %2783 = fsub fast float 1.000000e+00, %2782
  %2784 = fmul fast float %2783, %2783
  %2785 = fsub fast float 1.000000e+00, %2781
  %2786 = fmul fast float %2785, 5.000000e-01
  %2787 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %2784)  ; FMax(a,b)
  %2788 = fdiv fast float %2786, %2787
  %2789 = fmul fast float %2788, %887
  %2790 = fmul fast float %2789, %2749
  %2791 = fmul fast float %2789, %2750
  %2792 = fmul fast float %2789, %2751
  br label %3821

; <label>:2793                                    ; preds = %919
  %2794 = and i32 %125, 16
  %2795 = icmp ne i32 %2794, 0
  %2796 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %2797 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %458, float %459, float %460)  ; Dot3(ax,ay,az,bx,by,bz)
  %2798 = call float @dx.op.dot3.f32(i32 55, float %458, float %459, float %460, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %2799 = fmul fast float %2798, 2.000000e+00
  %2800 = fadd fast float %2799, 2.000000e+00
  %2801 = call float @dx.op.unary.f32(i32 25, float %2800)  ; Rsqrt(value)
  %2802 = fadd fast float %2797, %2796
  %2803 = fmul fast float %2801, %2802
  %2804 = call float @dx.op.unary.f32(i32 7, float %2803)  ; Saturate(value)
  %2805 = fmul fast float %2801, %2798
  %2806 = fadd fast float %2805, %2801
  %2807 = call float @dx.op.unary.f32(i32 7, float %2806)  ; Saturate(value)
  br i1 %2795, label %2808, label %2831, !dx.controlflow.hints !58

; <label>:2808                                    ; preds = %2793
  %2809 = fmul fast float %252, %161
  %2810 = fmul fast float %251, %162
  %2811 = fsub fast float %2809, %2810
  %2812 = fmul fast float %250, %162
  %2813 = fmul fast float %252, %160
  %2814 = fsub fast float %2812, %2813
  %2815 = fmul fast float %251, %160
  %2816 = fmul fast float %250, %161
  %2817 = fsub fast float %2815, %2816
  %2818 = call float @dx.op.dot3.f32(i32 55, float %2811, float %2814, float %2817, float %2811, float %2814, float %2817)  ; Dot3(ax,ay,az,bx,by,bz)
  %2819 = call float @dx.op.unary.f32(i32 25, float %2818)  ; Rsqrt(value)
  %2820 = fmul fast float %2819, %2811
  %2821 = fmul fast float %2819, %2814
  %2822 = fmul fast float %2819, %2817
  %2823 = call float @dx.op.dot3.f32(i32 55, float %250, float %251, float %252, float %458, float %459, float %460)  ; Dot3(ax,ay,az,bx,by,bz)
  %2824 = call float @dx.op.dot3.f32(i32 55, float %250, float %251, float %252, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %2825 = fadd fast float %2824, %2823
  %2826 = fmul fast float %2825, %2801
  %2827 = call float @dx.op.dot3.f32(i32 55, float %2820, float %2821, float %2822, float %458, float %459, float %460)  ; Dot3(ax,ay,az,bx,by,bz)
  %2828 = call float @dx.op.dot3.f32(i32 55, float %2820, float %2821, float %2822, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %2829 = fadd fast float %2828, %2827
  %2830 = fmul fast float %2829, %2801
  br label %2922

; <label>:2831                                    ; preds = %2793
  %2832 = fcmp fast ogt float %933, 0.000000e+00
  br i1 %2832, label %2833, label %2922

; <label>:2833                                    ; preds = %2831
  %2834 = fmul fast float %933, %933
  %2835 = fsub fast float 1.000000e+00, %2834
  %2836 = call float @dx.op.unary.f32(i32 24, float %2835)  ; Sqrt(value)
  %2837 = fmul fast float %2796, 2.000000e+00
  %2838 = fmul fast float %2837, %2797
  %2839 = fsub fast float %2838, %2798
  %2840 = fcmp fast ult float %2839, %2836
  br i1 %2840, label %2843, label %2841

; <label>:2841                                    ; preds = %2833
  %2842 = call float @dx.op.unary.f32(i32 6, float %2797)  ; FAbs(value)
  br label %2922

; <label>:2843                                    ; preds = %2833
  %2844 = fmul fast float %2839, %2839
  %2845 = fsub fast float 1.000000e+00, %2844
  %2846 = call float @dx.op.unary.f32(i32 25, float %2845)  ; Rsqrt(value)
  %2847 = fmul fast float %2846, %933
  %2848 = fmul fast float %2839, %2796
  %2849 = fsub fast float %2797, %2848
  %2850 = fmul fast float %2847, %2849
  %2851 = fmul fast float %2797, %2797
  %2852 = fmul fast float %2851, 2.000000e+00
  %2853 = fadd fast float %2852, -1.000000e+00
  %2854 = fmul fast float %2839, %2798
  %2855 = fsub fast float %2853, %2854
  %2856 = fmul fast float %2847, %2855
  %2857 = fmul fast float %2796, %2796
  %2858 = fsub fast float 1.000000e+00, %2857
  %2859 = fsub fast float %2858, %2851
  %2860 = fmul fast float %2798, %2798
  %2861 = fsub fast float %2859, %2860
  %2862 = fmul fast float %2838, %2798
  %2863 = fadd fast float %2861, %2862
  %2864 = call float @dx.op.unary.f32(i32 7, float %2863)  ; Saturate(value)
  %2865 = call float @dx.op.unary.f32(i32 24, float %2864)  ; Sqrt(value)
  %2866 = fmul fast float %2865, %2847
  %2867 = fmul fast float %2797, 2.000000e+00
  %2868 = fmul fast float %2867, %2847
  %2869 = fmul fast float %2868, %2865
  %2870 = fmul fast float %2836, %2796
  %2871 = fadd fast float %2870, %2797
  %2872 = fadd fast float %2871, %2850
  %2873 = fmul fast float %2836, %2798
  %2874 = fadd fast float %2873, 1.000000e+00
  %2875 = fadd fast float %2874, %2856
  %2876 = fmul fast float %2866, %2875
  %2877 = fmul fast float %2872, %2875
  %2878 = fmul fast float %2869, %2872
  %2879 = fmul fast float %2876, 5.000000e-01
  %2880 = fmul fast float %2872, 2.500000e-01
  %2881 = fmul fast float %2880, %2869
  %2882 = fsub fast float %2881, %2879
  %2883 = fmul fast float %2882, %2877
  %2884 = fmul fast float %2876, %2876
  %2885 = fmul fast float %2876, 2.000000e+00
  %2886 = fsub fast float %2878, %2885
  %2887 = fmul fast float %2886, %2878
  %2888 = fadd fast float %2887, %2884
  %2889 = fmul fast float %2875, %2875
  %2890 = fmul fast float %2889, %2871
  %2891 = fadd fast float %2875, %2873
  %2892 = fmul fast float %2891, 5.000000e-01
  %2893 = fsub fast float -5.000000e-01, %2892
  %2894 = fmul fast float %2893, %2877
  %2895 = fadd fast float %2894, %2890
  %2896 = fmul fast float %2895, %2872
  %2897 = fadd fast float %2888, %2896
  %2898 = fmul fast float %2883, 2.000000e+00
  %2899 = fmul fast float %2897, %2897
  %2900 = fmul fast float %2883, %2883
  %2901 = fadd fast float %2899, %2900
  %2902 = fdiv fast float %2898, %2901
  %2903 = fmul fast float %2897, %2902
  %2904 = fmul fast float %2883, %2902
  %2905 = fsub fast float 1.000000e+00, %2904
  %2906 = fmul fast float %2905, %2850
  %2907 = fmul fast float %2903, %2866
  %2908 = fmul fast float %2905, %2856
  %2909 = fmul fast float %2903, %2869
  %2910 = fadd fast float %2909, %2873
  %2911 = fadd fast float %2910, %2908
  %2912 = fmul fast float %2911, 2.000000e+00
  %2913 = fadd fast float %2912, 2.000000e+00
  %2914 = call float @dx.op.unary.f32(i32 25, float %2913)  ; Rsqrt(value)
  %2915 = fadd fast float %2871, %2907
  %2916 = fadd fast float %2915, %2906
  %2917 = fmul fast float %2916, %2914
  %2918 = call float @dx.op.unary.f32(i32 7, float %2917)  ; Saturate(value)
  %2919 = fmul fast float %2911, %2914
  %2920 = fadd fast float %2919, %2914
  %2921 = call float @dx.op.unary.f32(i32 7, float %2920)  ; Saturate(value)
  br label %2922

; <label>:2922                                    ; preds = %2843, %2841, %2831, %2808
  %2923 = phi float [ %2830, %2808 ], [ 0.000000e+00, %2843 ], [ 0.000000e+00, %2841 ], [ 0.000000e+00, %2831 ]
  %2924 = phi float [ %2828, %2808 ], [ 0.000000e+00, %2843 ], [ 0.000000e+00, %2841 ], [ 0.000000e+00, %2831 ]
  %2925 = phi float [ %2827, %2808 ], [ 0.000000e+00, %2843 ], [ 0.000000e+00, %2841 ], [ 0.000000e+00, %2831 ]
  %2926 = phi float [ %2826, %2808 ], [ 0.000000e+00, %2843 ], [ 0.000000e+00, %2841 ], [ 0.000000e+00, %2831 ]
  %2927 = phi float [ %2824, %2808 ], [ 0.000000e+00, %2843 ], [ 0.000000e+00, %2841 ], [ 0.000000e+00, %2831 ]
  %2928 = phi float [ %2823, %2808 ], [ 0.000000e+00, %2843 ], [ 0.000000e+00, %2841 ], [ 0.000000e+00, %2831 ]
  %2929 = phi float [ %2807, %2808 ], [ %2921, %2843 ], [ %2842, %2841 ], [ %2807, %2831 ]
  %2930 = phi float [ %2804, %2808 ], [ %2918, %2843 ], [ 1.000000e+00, %2841 ], [ %2804, %2831 ]
  %2931 = call float @dx.op.unary.f32(i32 6, float %2797)  ; FAbs(value)
  %2932 = fadd fast float %2931, 0x3EE4F8B580000000
  %2933 = call float @dx.op.unary.f32(i32 7, float %2932)  ; Saturate(value)
  %2934 = fmul fast float %221, 0x3FD45F3060000000
  %2935 = fmul fast float %222, 0x3FD45F3060000000
  %2936 = fmul fast float %223, 0x3FD45F3060000000
  %2937 = fmul fast float %886, %887
  %2938 = fmul fast float %2934, %2937
  %2939 = fmul fast float %2935, %2937
  %2940 = fmul fast float %2936, %2937
  %2941 = fmul fast float %839, %839
  br i1 %2795, label %2942, label %2997, !dx.controlflow.hints !59

; <label>:2942                                    ; preds = %2922
  %2943 = fadd fast float %253, 1.000000e+00
  %2944 = fmul fast float %2941, %2943
  %2945 = call float @dx.op.binary.f32(i32 35, float %2944, float 0x3F50624DE0000000)  ; FMax(a,b)
  %2946 = fsub fast float 1.000000e+00, %253
  %2947 = fmul fast float %2941, %2946
  %2948 = call float @dx.op.binary.f32(i32 35, float %2947, float 0x3F50624DE0000000)  ; FMax(a,b)
  %2949 = fmul fast float %2948, %2945
  %2950 = fmul fast float %2948, %2926
  %2951 = fmul fast float %2945, %2923
  %2952 = fmul fast float %2949, %2930
  %2953 = call float @dx.op.dot3.f32(i32 55, float %2950, float %2951, float %2952, float %2950, float %2951, float %2952)  ; Dot3(ax,ay,az,bx,by,bz)
  %2954 = fdiv fast float %2949, %2953
  %2955 = fmul fast float %2949, 0x3FD45F3060000000
  %2956 = fmul fast float %2954, %2954
  %2957 = fmul fast float %2956, %2955
  %2958 = fmul fast float %2945, %2928
  %2959 = fmul fast float %2948, %2925
  %2960 = fmul fast float %2958, %2958
  %2961 = fmul fast float %2959, %2959
  %2962 = fmul fast float %2933, %2933
  %2963 = fadd fast float %2960, %2962
  %2964 = fadd fast float %2963, %2961
  %2965 = call float @dx.op.unary.f32(i32 24, float %2964)  ; Sqrt(value)
  %2966 = fmul fast float %2965, %886
  %2967 = fmul fast float %2945, %2927
  %2968 = fmul fast float %2948, %2924
  %2969 = fmul fast float %2967, %2967
  %2970 = fmul fast float %2968, %2968
  %2971 = fmul fast float %886, %886
  %2972 = fadd fast float %2969, %2971
  %2973 = fadd fast float %2972, %2970
  %2974 = call float @dx.op.unary.f32(i32 24, float %2973)  ; Sqrt(value)
  %2975 = fmul fast float %2974, %2933
  %2976 = fadd fast float %2975, %2966
  %2977 = fdiv fast float 5.000000e-01, %2976
  %2978 = fsub fast float 1.000000e+00, %2929
  %2979 = fmul fast float %2978, %2978
  %2980 = fmul fast float %2979, %2979
  %2981 = fmul fast float %2980, %2978
  %2982 = fmul fast float %233, 5.000000e+01
  %2983 = call float @dx.op.unary.f32(i32 7, float %2982)  ; Saturate(value)
  %2984 = fmul fast float %2983, %2981
  %2985 = fsub fast float 1.000000e+00, %2981
  %2986 = fmul fast float %2985, %232
  %2987 = fmul fast float %2985, %233
  %2988 = fmul fast float %2985, %234
  %2989 = fadd fast float %2984, %2986
  %2990 = fadd fast float %2984, %2987
  %2991 = fadd fast float %2984, %2988
  %2992 = fmul fast float %2957, %2937
  %2993 = fmul fast float %2992, %2977
  %2994 = fmul fast float %2993, %2989
  %2995 = fmul fast float %2993, %2990
  %2996 = fmul fast float %2993, %2991
  br label %3085

; <label>:2997                                    ; preds = %2922
  %2998 = fmul fast float %2941, %2941
  %2999 = fcmp fast ogt float %935, 0.000000e+00
  br i1 %2999, label %3000, label %3007

; <label>:3000                                    ; preds = %2997
  %3001 = fmul fast float %935, %935
  %3002 = fmul fast float %2929, 0x400CCCCCC0000000
  %3003 = fadd fast float %3002, 0x3FD99999A0000000
  %3004 = fdiv fast float %3001, %3003
  %3005 = fadd fast float %3004, %2998
  %3006 = call float @dx.op.unary.f32(i32 7, float %3005)  ; Saturate(value)
  br label %3007

; <label>:3007                                    ; preds = %3000, %2997
  %3008 = phi float [ %3006, %3000 ], [ %2998, %2997 ]
  %3009 = fcmp fast ogt float %933, 0.000000e+00
  br i1 %3009, label %3010, label %3023

; <label>:3010                                    ; preds = %3007
  %3011 = fmul fast float %933, 2.500000e-01
  %3012 = bitcast float %3008 to i32
  %3013 = ashr i32 %3012, 1
  %3014 = add nsw i32 %3013, 532487669
  %3015 = bitcast i32 %3014 to float
  %3016 = fmul fast float %3015, 3.000000e+00
  %3017 = fadd fast float %3016, %933
  %3018 = fmul fast float %3011, %3017
  %3019 = fadd fast float %2929, 0x3F50624DE0000000
  %3020 = fdiv fast float %3018, %3019
  %3021 = fadd fast float %3020, %3008
  %3022 = fdiv fast float %3008, %3021
  br label %3023

; <label>:3023                                    ; preds = %3010, %3007
  %3024 = phi float [ %3021, %3010 ], [ %3008, %3007 ]
  %3025 = phi float [ %3022, %3010 ], [ 1.000000e+00, %3007 ]
  %3026 = fcmp fast olt float %869, 1.000000e+00
  br i1 %3026, label %3027, label %3046

; <label>:3027                                    ; preds = %3023
  %3028 = fsub fast float 0x3FF00068E0000000, %869
  %3029 = fadd fast float %869, 1.000000e+00
  %3030 = fdiv fast float %3028, %3029
  %3031 = call float @dx.op.unary.f32(i32 24, float %3030)  ; Sqrt(value)
  %3032 = fmul fast float %3031, 2.500000e-01
  %3033 = bitcast float %3024 to i32
  %3034 = ashr i32 %3033, 1
  %3035 = add nsw i32 %3034, 532487669
  %3036 = bitcast i32 %3035 to float
  %3037 = fmul fast float %3036, 3.000000e+00
  %3038 = fadd fast float %3031, %3037
  %3039 = fmul fast float %3032, %3038
  %3040 = fadd fast float %2929, 0x3F50624DE0000000
  %3041 = fdiv fast float %3039, %3040
  %3042 = fadd fast float %3041, %3024
  %3043 = fdiv fast float %3024, %3042
  %3044 = call float @dx.op.unary.f32(i32 24, float %3043)  ; Sqrt(value)
  %3045 = fmul fast float %3044, %3025
  br label %3046

; <label>:3046                                    ; preds = %3027, %3023
  %3047 = phi float [ %3045, %3027 ], [ %3025, %3023 ]
  %3048 = fmul fast float %3008, %2930
  %3049 = fsub fast float %3048, %2930
  %3050 = fmul fast float %3049, %2930
  %3051 = fadd fast float %3050, 1.000000e+00
  %3052 = fmul fast float %3051, %3051
  %3053 = fmul fast float %3052, 0x400921FB60000000
  %3054 = fdiv fast float %3008, %3053
  %3055 = fmul fast float %3054, %3047
  %3056 = call float @dx.op.unary.f32(i32 24, float %3008)  ; Sqrt(value)
  %3057 = fsub fast float 1.000000e+00, %3056
  %3058 = fmul fast float %3057, %2933
  %3059 = fadd fast float %3058, %3056
  %3060 = fmul fast float %3059, %886
  %3061 = fmul fast float %3057, %886
  %3062 = fadd fast float %3061, %3056
  %3063 = fmul fast float %3062, %2933
  %3064 = fadd fast float %3060, %3063
  %3065 = fdiv fast float 5.000000e-01, %3064
  %3066 = fsub fast float 1.000000e+00, %2929
  %3067 = fmul fast float %3066, %3066
  %3068 = fmul fast float %3067, %3067
  %3069 = fmul fast float %3068, %3066
  %3070 = fmul fast float %233, 5.000000e+01
  %3071 = call float @dx.op.unary.f32(i32 7, float %3070)  ; Saturate(value)
  %3072 = fmul fast float %3071, %3069
  %3073 = fsub fast float 1.000000e+00, %3069
  %3074 = fmul fast float %3073, %232
  %3075 = fmul fast float %3073, %233
  %3076 = fmul fast float %3073, %234
  %3077 = fadd fast float %3072, %3074
  %3078 = fadd fast float %3072, %3075
  %3079 = fadd fast float %3072, %3076
  %3080 = fmul fast float %3055, %3065
  %3081 = fmul fast float %3080, %2937
  %3082 = fmul fast float %3081, %3077
  %3083 = fmul fast float %3081, %3078
  %3084 = fmul fast float %3081, %3079
  br label %3085

; <label>:3085                                    ; preds = %3046, %2942
  %3086 = phi float [ %2994, %2942 ], [ %3082, %3046 ]
  %3087 = phi float [ %2995, %2942 ], [ %3083, %3046 ]
  %3088 = phi float [ %2996, %2942 ], [ %3084, %3046 ]
  %3089 = fmul fast float %141, %141
  %3090 = fmul fast float %142, %142
  %3091 = fmul fast float %143, %143
  %3092 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %3093 = fsub fast float 5.000000e-01, %3092
  %3094 = fmul fast float %3093, 0x3FDC71C720000000
  %3095 = call float @dx.op.unary.f32(i32 7, float %3094)  ; Saturate(value)
  %3096 = call float @dx.op.dot3.f32(i32 55, float %458, float %459, float %460, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %3097 = fsub fast float -0.000000e+00, %3096
  %3098 = call float @dx.op.unary.f32(i32 7, float %3097)  ; Saturate(value)
  %3099 = fmul fast float %3098, %3098
  %3100 = fmul fast float %3099, 0x3FE47AE140000000
  %3101 = fsub fast float 1.000000e+00, %3100
  %3102 = fmul fast float %3099, 0x400015BFA0000000
  %3103 = fsub fast float 0x400921FB60000000, %3102
  %3104 = fmul fast float %3103, %3101
  %3105 = fdiv fast float 0x3FD70A3D80000000, %3104
  %3106 = fmul fast float %3095, %887
  %3107 = fmul fast float %3106, %3105
  %3108 = fmul fast float %3089, %3107
  %3109 = fmul fast float %3090, %3107
  %3110 = fmul fast float %3091, %3107
  br label %3821

; <label>:3111                                    ; preds = %919
  %3112 = call float @dx.op.binary.f32(i32 35, float %839, float 0x3F70101020000000)  ; FMax(a,b)
  %3113 = call float @dx.op.binary.f32(i32 36, float %3112, float 1.000000e+00)  ; FMin(a,b)
  %3114 = call float @dx.op.dot3.f32(i32 55, float %458, float %459, float %460, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %3115 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %3116 = call float @dx.op.binary.f32(i32 35, float %3115, float -1.000000e+00)  ; FMax(a,b)
  %3117 = call float @dx.op.binary.f32(i32 36, float %3116, float 1.000000e+00)  ; FMin(a,b)
  %3118 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %458, float %459, float %460)  ; Dot3(ax,ay,az,bx,by,bz)
  %3119 = call float @dx.op.binary.f32(i32 35, float %3118, float -1.000000e+00)  ; FMax(a,b)
  %3120 = call float @dx.op.binary.f32(i32 36, float %3119, float 1.000000e+00)  ; FMin(a,b)
  %3121 = call float @dx.op.unary.f32(i32 6, float %3120)  ; FAbs(value)
  %3122 = fmul fast float %3121, 0x3FC40AE960000000
  %3123 = fsub fast float 0x3FF921FB60000000, %3122
  %3124 = fsub fast float 1.000000e+00, %3121
  %3125 = call float @dx.op.unary.f32(i32 24, float %3124)  ; Sqrt(value)
  %3126 = fmul fast float %3123, %3125
  %3127 = fcmp fast oge float %3120, 0.000000e+00
  %3128 = fsub fast float 0x400921FB60000000, %3126
  %3129 = select i1 %3127, float %3126, float %3128
  %3130 = call float @dx.op.unary.f32(i32 6, float %3117)  ; FAbs(value)
  %3131 = fmul fast float %3130, 0x3FC40AE960000000
  %3132 = fsub fast float 0x3FF921FB60000000, %3131
  %3133 = fsub fast float 1.000000e+00, %3130
  %3134 = call float @dx.op.unary.f32(i32 24, float %3133)  ; Sqrt(value)
  %3135 = fmul fast float %3132, %3134
  %3136 = fcmp fast oge float %3117, 0.000000e+00
  %3137 = fsub fast float 0x400921FB60000000, %3135
  %3138 = select i1 %3136, float %3135, float %3137
  %3139 = fsub fast float %3138, %3129
  %3140 = call float @dx.op.unary.f32(i32 6, float %3139)  ; FAbs(value)
  %3141 = fmul fast float %3140, 5.000000e-01
  %3142 = call float @dx.op.unary.f32(i32 12, float %3141)  ; Cos(value)
  %3143 = fmul fast float %3117, %160
  %3144 = fmul fast float %3117, %161
  %3145 = fmul fast float %3117, %162
  %3146 = fsub fast float %925, %3143
  %3147 = fsub fast float %926, %3144
  %3148 = fsub fast float %927, %3145
  %3149 = fmul fast float %3120, %160
  %3150 = fmul fast float %3120, %161
  %3151 = fmul fast float %3120, %162
  %3152 = fsub fast float %458, %3149
  %3153 = fsub fast float %459, %3150
  %3154 = fsub fast float %460, %3151
  %3155 = call float @dx.op.dot3.f32(i32 55, float %3146, float %3147, float %3148, float %3152, float %3153, float %3154)  ; Dot3(ax,ay,az,bx,by,bz)
  %3156 = call float @dx.op.dot3.f32(i32 55, float %3146, float %3147, float %3148, float %3146, float %3147, float %3148)  ; Dot3(ax,ay,az,bx,by,bz)
  %3157 = call float @dx.op.dot3.f32(i32 55, float %3152, float %3153, float %3154, float %3152, float %3153, float %3154)  ; Dot3(ax,ay,az,bx,by,bz)
  %3158 = fmul fast float %3157, %3156
  %3159 = fadd fast float %3158, 0x3F1A36E2E0000000
  %3160 = call float @dx.op.unary.f32(i32 25, float %3159)  ; Rsqrt(value)
  %3161 = fmul fast float %3160, %3155
  %3162 = fmul fast float %3161, 5.000000e-01
  %3163 = fadd fast float %3162, 5.000000e-01
  %3164 = call float @dx.op.unary.f32(i32 7, float %3163)  ; Saturate(value)
  %3165 = call float @dx.op.unary.f32(i32 24, float %3164)  ; Sqrt(value)
  %3166 = fdiv fast float 0x3FF30A3D80000000, %3142
  %3167 = fmul fast float %3142, 0x3FD70A3D80000000
  %3168 = fadd fast float %3166, %3167
  %3169 = fmul fast float %3113, %3113
  %3170 = fmul fast float %3169, 5.000000e-01
  %3171 = fmul fast float %3169, 2.000000e+00
  %3172 = fmul fast float %3165, 0x3FEFEBF020000000
  %3173 = fmul fast float %3120, %3120
  %3174 = fsub fast float 1.000000e+00, %3173
  %3175 = call float @dx.op.unary.f32(i32 24, float %3174)  ; Sqrt(value)
  %3176 = fmul fast float %3172, %3175
  %3177 = fmul fast float %3120, 0x3FB1E7C640000000
  %3178 = fsub fast float %3176, %3177
  %3179 = fmul fast float %3178, 0x3FC1E7C640000000
  %3180 = fadd fast float %3120, %3117
  %3181 = fadd fast float %3180, %3179
  %3182 = fmul fast float %3169, 0x3FF6A09E60000000
  %3183 = fmul fast float %3182, %3165
  %3184 = fmul fast float %3181, %3181
  %3185 = fmul fast float %3184, -5.000000e-01
  %3186 = fmul fast float %3183, %3183
  %3187 = fdiv fast float %3185, %3186
  %3188 = fmul fast float %3187, 0x3FF7154760000000
  %3189 = call float @dx.op.unary.f32(i32 21, float %3188)  ; Exp(value)
  %3190 = fmul fast float %3183, 0x40040D9320000000
  %3191 = fdiv fast float %3189, %3190
  %3192 = fmul fast float %3114, 5.000000e-01
  %3193 = fadd fast float %3192, 5.000000e-01
  %3194 = call float @dx.op.unary.f32(i32 7, float %3193)  ; Saturate(value)
  %3195 = call float @dx.op.unary.f32(i32 24, float %3194)  ; Sqrt(value)
  %3196 = fsub fast float 1.000000e+00, %3195
  %3197 = fmul fast float %3196, %3196
  %3198 = fmul fast float %3196, 0x3FEE82E740000000
  %3199 = fmul fast float %3197, %3197
  %3200 = fmul fast float %3199, %3198
  %3201 = fadd fast float %3200, 0x3FA7D18B20000000
  %3202 = fmul fast float %206, 5.000000e-01
  %3203 = fmul fast float %3202, %3165
  %3204 = fmul fast float %3203, %3191
  %3205 = fmul fast float %3204, %3201
  %3206 = fadd fast float %3117, 0xBFA1EB8520000000
  %3207 = fadd fast float %3206, %3120
  %3208 = fmul fast float %3207, %3207
  %3209 = fmul fast float %3208, -5.000000e-01
  %3210 = fmul fast float %3170, %3170
  %3211 = fdiv fast float %3209, %3210
  %3212 = fmul fast float %3211, 0x3FF7154760000000
  %3213 = call float @dx.op.unary.f32(i32 21, float %3212)  ; Exp(value)
  %3214 = fmul fast float %3169, 0x3FF40D9320000000
  %3215 = fdiv fast float %3213, %3214
  %3216 = fdiv fast float 1.000000e+00, %3168
  %3217 = fmul fast float %3161, 0x3FE99999A0000000
  %3218 = fsub fast float 0x3FE3333340000000, %3217
  %3219 = fmul fast float %3216, %3218
  %3220 = fadd fast float %3219, 1.000000e+00
  %3221 = fmul fast float %3220, %3165
  %3222 = fmul fast float %3221, %3221
  %3223 = fsub fast float 1.000000e+00, %3222
  %3224 = call float @dx.op.unary.f32(i32 7, float %3223)  ; Saturate(value)
  %3225 = call float @dx.op.unary.f32(i32 24, float %3224)  ; Sqrt(value)
  %3226 = fmul fast float %3225, %3142
  %3227 = fsub fast float 1.000000e+00, %3226
  %3228 = fmul fast float %3227, %3227
  %3229 = fmul fast float %3227, 0x3FEE82E740000000
  %3230 = fmul fast float %3228, %3228
  %3231 = fmul fast float %3230, %3229
  %3232 = fsub fast float 0x3FEE82E740000000, %3231
  %3233 = fmul fast float %3221, %3216
  %3234 = fmul fast float %3233, %3233
  %3235 = fsub fast float 1.000000e+00, %3234
  %3236 = call float @dx.op.unary.f32(i32 24, float %3235)  ; Sqrt(value)
  %3237 = fmul fast float %3236, 5.000000e-01
  %3238 = fdiv fast float %3237, %3142
  %3239 = call float @dx.op.unary.f32(i32 6, float %203)  ; FAbs(value)
  %3240 = call float @dx.op.unary.f32(i32 6, float %204)  ; FAbs(value)
  %3241 = call float @dx.op.unary.f32(i32 6, float %205)  ; FAbs(value)
  %3242 = call float @dx.op.unary.f32(i32 23, float %3239)  ; Log(value)
  %3243 = call float @dx.op.unary.f32(i32 23, float %3240)  ; Log(value)
  %3244 = call float @dx.op.unary.f32(i32 23, float %3241)  ; Log(value)
  %3245 = fmul fast float %3242, %3238
  %3246 = fmul fast float %3243, %3238
  %3247 = fmul fast float %3244, %3238
  %3248 = call float @dx.op.unary.f32(i32 21, float %3245)  ; Exp(value)
  %3249 = call float @dx.op.unary.f32(i32 21, float %3246)  ; Exp(value)
  %3250 = call float @dx.op.unary.f32(i32 21, float %3247)  ; Exp(value)
  %3251 = fmul fast float %3161, 0x40151037A0000000
  %3252 = fsub fast float 0xC016F7BB80000000, %3251
  %3253 = call float @dx.op.unary.f32(i32 21, float %3252)  ; Exp(value)
  %3254 = fmul fast float %3232, %3232
  %3255 = fmul fast float %3254, %3215
  %3256 = fmul fast float %3255, %3253
  %3257 = fmul fast float %3256, %3248
  %3258 = fmul fast float %3256, %3249
  %3259 = fmul fast float %3256, %3250
  %3260 = fadd fast float %3257, %3205
  %3261 = fadd fast float %3258, %3205
  %3262 = fadd fast float %3259, %3205
  %3263 = fadd fast float %3117, 0xBFC1EB8520000000
  %3264 = fadd fast float %3263, %3120
  %3265 = fmul fast float %3264, %3264
  %3266 = fmul fast float %3265, -5.000000e-01
  %3267 = fmul fast float %3171, %3171
  %3268 = fdiv fast float %3266, %3267
  %3269 = fmul fast float %3268, 0x3FF7154760000000
  %3270 = call float @dx.op.unary.f32(i32 21, float %3269)  ; Exp(value)
  %3271 = fmul fast float %3169, 0x40140D9320000000
  %3272 = fdiv fast float %3270, %3271
  %3273 = fmul fast float %3142, 5.000000e-01
  %3274 = fsub fast float 1.000000e+00, %3273
  %3275 = fmul fast float %3274, %3274
  %3276 = fmul fast float %3142, 0x3FDE82E740000000
  %3277 = fsub fast float 0x3FEE82E740000000, %3276
  %3278 = fmul fast float %3275, %3275
  %3279 = fmul fast float %3278, %3277
  %3280 = fadd fast float %3279, 0x3FA7D18B20000000
  %3281 = fsub fast float 0x3FEE82E740000000, %3279
  %3282 = fdiv fast float 0x3FE99999A0000000, %3142
  %3283 = fmul fast float %3242, %3282
  %3284 = fmul fast float %3243, %3282
  %3285 = fmul fast float %3244, %3282
  %3286 = call float @dx.op.unary.f32(i32 21, float %3283)  ; Exp(value)
  %3287 = call float @dx.op.unary.f32(i32 21, float %3284)  ; Exp(value)
  %3288 = call float @dx.op.unary.f32(i32 21, float %3285)  ; Exp(value)
  %3289 = fmul fast float %3161, 0x4038869BE0000000
  %3290 = fadd fast float %3289, 0xC038355B40000000
  %3291 = call float @dx.op.unary.f32(i32 21, float %3290)  ; Exp(value)
  %3292 = fmul fast float %3281, %3281
  %3293 = fmul fast float %3292, %3280
  %3294 = fmul fast float %3293, %3272
  %3295 = fmul fast float %3294, %3291
  %3296 = fmul fast float %3295, %3286
  %3297 = fmul fast float %3295, %3287
  %3298 = fmul fast float %3295, %3288
  %3299 = fadd fast float %3260, %3296
  %3300 = fadd fast float %3261, %3297
  %3301 = fadd fast float %3262, %3298
  %3302 = fmul fast float %3299, %823
  %3303 = fmul fast float %3300, %823
  %3304 = fmul fast float %3301, %823
  %3305 = call float @dx.op.unary.f32(i32 6, float %3115)  ; FAbs(value)
  %3306 = fsub fast float 1.000000e+00, %3305
  %3307 = call float @dx.op.dot3.f32(i32 55, float %458, float %459, float %460, float %160, float %161, float %162)  ; Dot3(ax,ay,az,bx,by,bz)
  %3308 = fmul fast float %3307, %160
  %3309 = fmul fast float %3307, %161
  %3310 = fmul fast float %3307, %162
  %3311 = fsub fast float %458, %3308
  %3312 = fsub fast float %459, %3309
  %3313 = fsub fast float %460, %3310
  %3314 = call float @dx.op.dot3.f32(i32 55, float %3311, float %3312, float %3313, float %3311, float %3312, float %3313)  ; Dot3(ax,ay,az,bx,by,bz)
  %3315 = call float @dx.op.unary.f32(i32 25, float %3314)  ; Rsqrt(value)
  %3316 = fmul fast float %3311, %3315
  %3317 = fmul fast float %3312, %3315
  %3318 = fmul fast float %3313, %3315
  %3319 = call float @dx.op.dot3.f32(i32 55, float %3316, float %3317, float %3318, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %3320 = fadd fast float %3319, 1.000000e+00
  %3321 = fmul fast float %3320, 2.500000e-01
  %3322 = call float @dx.op.unary.f32(i32 7, float %3321)  ; Saturate(value)
  %3323 = fsub fast float %3306, %3322
  %3324 = fmul fast float %3323, 0x3FD51EB860000000
  %3325 = fadd fast float %3324, %3322
  %3326 = fmul fast float %164, 0x3FD45F3060000000
  %3327 = fmul fast float %3326, %3325
  %3328 = call float @dx.op.dot3.f32(i32 55, float %203, float %204, float %205, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %3329 = fsub fast float 1.000000e+00, %822
  %3330 = call float @dx.op.binary.f32(i32 35, float %3328, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %3331 = fdiv fast float %203, %3330
  %3332 = fdiv fast float %204, %3330
  %3333 = fdiv fast float %205, %3330
  %3334 = call float @dx.op.unary.f32(i32 6, float %3331)  ; FAbs(value)
  %3335 = call float @dx.op.unary.f32(i32 6, float %3332)  ; FAbs(value)
  %3336 = call float @dx.op.unary.f32(i32 6, float %3333)  ; FAbs(value)
  %3337 = call float @dx.op.unary.f32(i32 23, float %3334)  ; Log(value)
  %3338 = call float @dx.op.unary.f32(i32 23, float %3335)  ; Log(value)
  %3339 = call float @dx.op.unary.f32(i32 23, float %3336)  ; Log(value)
  %3340 = fmul fast float %3337, %3329
  %3341 = fmul fast float %3338, %3329
  %3342 = fmul fast float %3339, %3329
  %3343 = call float @dx.op.unary.f32(i32 21, float %3340)  ; Exp(value)
  %3344 = call float @dx.op.unary.f32(i32 21, float %3341)  ; Exp(value)
  %3345 = call float @dx.op.unary.f32(i32 21, float %3342)  ; Exp(value)
  %3346 = call float @dx.op.unary.f32(i32 24, float %3239)  ; Sqrt(value)
  %3347 = call float @dx.op.unary.f32(i32 24, float %3240)  ; Sqrt(value)
  %3348 = call float @dx.op.unary.f32(i32 24, float %3241)  ; Sqrt(value)
  %3349 = fmul fast float %3343, %3327
  %3350 = fmul fast float %3349, %3346
  %3351 = fmul fast float %3344, %3327
  %3352 = fmul fast float %3351, %3347
  %3353 = fmul fast float %3345, %3327
  %3354 = fmul fast float %3353, %3348
  %3355 = fadd fast float %3302, %3350
  %3356 = fadd fast float %3303, %3352
  %3357 = fadd fast float %3304, %3354
  %3358 = fsub fast float -0.000000e+00, %3355
  %3359 = fsub fast float -0.000000e+00, %3356
  %3360 = fsub fast float -0.000000e+00, %3357
  %3361 = call float @dx.op.binary.f32(i32 36, float %3358, float 0.000000e+00)  ; FMin(a,b)
  %3362 = call float @dx.op.binary.f32(i32 36, float %3359, float 0.000000e+00)  ; FMin(a,b)
  %3363 = call float @dx.op.binary.f32(i32 36, float %3360, float 0.000000e+00)  ; FMin(a,b)
  %3364 = fmul fast float %887, %3361
  %3365 = fsub fast float -0.000000e+00, %3364
  %3366 = fmul fast float %887, %3362
  %3367 = fsub fast float -0.000000e+00, %3366
  %3368 = fmul fast float %887, %3363
  %3369 = fsub fast float -0.000000e+00, %3368
  br label %3821

; <label>:3370                                    ; preds = %919
  %3371 = fmul fast float %141, %141
  %3372 = fmul fast float %142, %142
  %3373 = fmul fast float %143, %143
  %3374 = call float @dx.op.unary.f32(i32 7, float %144)  ; Saturate(value)
  %3375 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %3376 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %458, float %459, float %460)  ; Dot3(ax,ay,az,bx,by,bz)
  %3377 = call float @dx.op.dot3.f32(i32 55, float %458, float %459, float %460, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %3378 = fmul fast float %3377, 2.000000e+00
  %3379 = fadd fast float %3378, 2.000000e+00
  %3380 = call float @dx.op.unary.f32(i32 25, float %3379)  ; Rsqrt(value)
  %3381 = fadd fast float %3376, %3375
  %3382 = fmul fast float %3380, %3381
  %3383 = call float @dx.op.unary.f32(i32 7, float %3382)  ; Saturate(value)
  %3384 = fmul fast float %3380, %3377
  %3385 = fadd fast float %3384, %3380
  %3386 = call float @dx.op.unary.f32(i32 7, float %3385)  ; Saturate(value)
  %3387 = fcmp fast ogt float %933, 0.000000e+00
  br i1 %3387, label %3388, label %3477

; <label>:3388                                    ; preds = %3370
  %3389 = fmul fast float %933, %933
  %3390 = fsub fast float 1.000000e+00, %3389
  %3391 = call float @dx.op.unary.f32(i32 24, float %3390)  ; Sqrt(value)
  %3392 = fmul fast float %3375, 2.000000e+00
  %3393 = fmul fast float %3392, %3376
  %3394 = fsub fast float %3393, %3377
  %3395 = fcmp fast ult float %3394, %3391
  br i1 %3395, label %3398, label %3396

; <label>:3396                                    ; preds = %3388
  %3397 = call float @dx.op.unary.f32(i32 6, float %3376)  ; FAbs(value)
  br label %3477

; <label>:3398                                    ; preds = %3388
  %3399 = fmul fast float %3394, %3394
  %3400 = fsub fast float 1.000000e+00, %3399
  %3401 = call float @dx.op.unary.f32(i32 25, float %3400)  ; Rsqrt(value)
  %3402 = fmul fast float %3401, %933
  %3403 = fmul fast float %3394, %3375
  %3404 = fsub fast float %3376, %3403
  %3405 = fmul fast float %3402, %3404
  %3406 = fmul fast float %3376, %3376
  %3407 = fmul fast float %3406, 2.000000e+00
  %3408 = fadd fast float %3407, -1.000000e+00
  %3409 = fmul fast float %3394, %3377
  %3410 = fsub fast float %3408, %3409
  %3411 = fmul fast float %3402, %3410
  %3412 = fmul fast float %3375, %3375
  %3413 = fsub fast float 1.000000e+00, %3412
  %3414 = fsub fast float %3413, %3406
  %3415 = fmul fast float %3377, %3377
  %3416 = fsub fast float %3414, %3415
  %3417 = fmul fast float %3393, %3377
  %3418 = fadd fast float %3416, %3417
  %3419 = call float @dx.op.unary.f32(i32 7, float %3418)  ; Saturate(value)
  %3420 = call float @dx.op.unary.f32(i32 24, float %3419)  ; Sqrt(value)
  %3421 = fmul fast float %3420, %3402
  %3422 = fmul fast float %3376, 2.000000e+00
  %3423 = fmul fast float %3422, %3402
  %3424 = fmul fast float %3423, %3420
  %3425 = fmul fast float %3391, %3375
  %3426 = fadd fast float %3425, %3376
  %3427 = fadd fast float %3426, %3405
  %3428 = fmul fast float %3391, %3377
  %3429 = fadd fast float %3428, 1.000000e+00
  %3430 = fadd fast float %3429, %3411
  %3431 = fmul fast float %3421, %3430
  %3432 = fmul fast float %3427, %3430
  %3433 = fmul fast float %3424, %3427
  %3434 = fmul fast float %3431, 5.000000e-01
  %3435 = fmul fast float %3427, 2.500000e-01
  %3436 = fmul fast float %3435, %3424
  %3437 = fsub fast float %3436, %3434
  %3438 = fmul fast float %3437, %3432
  %3439 = fmul fast float %3431, %3431
  %3440 = fmul fast float %3431, 2.000000e+00
  %3441 = fsub fast float %3433, %3440
  %3442 = fmul fast float %3441, %3433
  %3443 = fadd fast float %3442, %3439
  %3444 = fmul fast float %3430, %3430
  %3445 = fmul fast float %3444, %3426
  %3446 = fadd fast float %3430, %3428
  %3447 = fmul fast float %3446, 5.000000e-01
  %3448 = fsub fast float -5.000000e-01, %3447
  %3449 = fmul fast float %3448, %3432
  %3450 = fadd fast float %3449, %3445
  %3451 = fmul fast float %3450, %3427
  %3452 = fadd fast float %3443, %3451
  %3453 = fmul fast float %3438, 2.000000e+00
  %3454 = fmul fast float %3452, %3452
  %3455 = fmul fast float %3438, %3438
  %3456 = fadd fast float %3454, %3455
  %3457 = fdiv fast float %3453, %3456
  %3458 = fmul fast float %3452, %3457
  %3459 = fmul fast float %3438, %3457
  %3460 = fsub fast float 1.000000e+00, %3459
  %3461 = fmul fast float %3460, %3405
  %3462 = fmul fast float %3458, %3421
  %3463 = fmul fast float %3460, %3411
  %3464 = fmul fast float %3458, %3424
  %3465 = fadd fast float %3464, %3428
  %3466 = fadd fast float %3465, %3463
  %3467 = fmul fast float %3466, 2.000000e+00
  %3468 = fadd fast float %3467, 2.000000e+00
  %3469 = call float @dx.op.unary.f32(i32 25, float %3468)  ; Rsqrt(value)
  %3470 = fadd fast float %3426, %3462
  %3471 = fadd fast float %3470, %3461
  %3472 = fmul fast float %3471, %3469
  %3473 = call float @dx.op.unary.f32(i32 7, float %3472)  ; Saturate(value)
  %3474 = fmul fast float %3466, %3469
  %3475 = fadd fast float %3474, %3469
  %3476 = call float @dx.op.unary.f32(i32 7, float %3475)  ; Saturate(value)
  br label %3477

; <label>:3477                                    ; preds = %3398, %3396, %3370
  %3478 = phi float [ %3397, %3396 ], [ %3476, %3398 ], [ %3386, %3370 ]
  %3479 = phi float [ 1.000000e+00, %3396 ], [ %3473, %3398 ], [ %3383, %3370 ]
  %3480 = call float @dx.op.unary.f32(i32 6, float %3376)  ; FAbs(value)
  %3481 = fadd fast float %3480, 0x3EE4F8B580000000
  %3482 = call float @dx.op.unary.f32(i32 7, float %3481)  ; Saturate(value)
  %3483 = fmul fast float %886, %887
  %3484 = fmul fast float %839, %839
  %3485 = fmul fast float %3484, %3484
  %3486 = fcmp fast ogt float %935, 0.000000e+00
  br i1 %3486, label %3487, label %3494

; <label>:3487                                    ; preds = %3477
  %3488 = fmul fast float %935, %935
  %3489 = fmul fast float %3478, 0x400CCCCCC0000000
  %3490 = fadd fast float %3489, 0x3FD99999A0000000
  %3491 = fdiv fast float %3488, %3490
  %3492 = fadd fast float %3491, %3485
  %3493 = call float @dx.op.unary.f32(i32 7, float %3492)  ; Saturate(value)
  br label %3494

; <label>:3494                                    ; preds = %3487, %3477
  %3495 = phi float [ %3493, %3487 ], [ %3485, %3477 ]
  br i1 %3387, label %3496, label %3509

; <label>:3496                                    ; preds = %3494
  %3497 = fmul fast float %933, 2.500000e-01
  %3498 = bitcast float %3495 to i32
  %3499 = ashr i32 %3498, 1
  %3500 = add nsw i32 %3499, 532487669
  %3501 = bitcast i32 %3500 to float
  %3502 = fmul fast float %3501, 3.000000e+00
  %3503 = fadd fast float %3502, %933
  %3504 = fmul fast float %3497, %3503
  %3505 = fadd fast float %3478, 0x3F50624DE0000000
  %3506 = fdiv fast float %3504, %3505
  %3507 = fadd fast float %3506, %3495
  %3508 = fdiv fast float %3495, %3507
  br label %3509

; <label>:3509                                    ; preds = %3496, %3494
  %3510 = phi float [ %3507, %3496 ], [ %3495, %3494 ]
  %3511 = phi float [ %3508, %3496 ], [ 1.000000e+00, %3494 ]
  %3512 = fcmp fast olt float %869, 1.000000e+00
  br i1 %3512, label %3513, label %3532

; <label>:3513                                    ; preds = %3509
  %3514 = fsub fast float 0x3FF00068E0000000, %869
  %3515 = fadd fast float %869, 1.000000e+00
  %3516 = fdiv fast float %3514, %3515
  %3517 = call float @dx.op.unary.f32(i32 24, float %3516)  ; Sqrt(value)
  %3518 = fmul fast float %3517, 2.500000e-01
  %3519 = bitcast float %3510 to i32
  %3520 = ashr i32 %3519, 1
  %3521 = add nsw i32 %3520, 532487669
  %3522 = bitcast i32 %3521 to float
  %3523 = fmul fast float %3522, 3.000000e+00
  %3524 = fadd fast float %3517, %3523
  %3525 = fmul fast float %3518, %3524
  %3526 = fadd fast float %3478, 0x3F50624DE0000000
  %3527 = fdiv fast float %3525, %3526
  %3528 = fadd fast float %3527, %3510
  %3529 = fdiv fast float %3510, %3528
  %3530 = call float @dx.op.unary.f32(i32 24, float %3529)  ; Sqrt(value)
  %3531 = fmul fast float %3530, %3511
  br label %3532

; <label>:3532                                    ; preds = %3513, %3509
  %3533 = phi float [ %3531, %3513 ], [ %3511, %3509 ]
  %3534 = fmul fast float %3495, %3479
  %3535 = fsub fast float %3534, %3479
  %3536 = fmul fast float %3535, %3479
  %3537 = fadd fast float %3536, 1.000000e+00
  %3538 = fmul fast float %3537, %3537
  %3539 = fmul fast float %3538, 0x400921FB60000000
  %3540 = fdiv fast float %3495, %3539
  %3541 = fmul fast float %3540, %3533
  %3542 = call float @dx.op.unary.f32(i32 24, float %3495)  ; Sqrt(value)
  %3543 = fsub fast float 1.000000e+00, %3542
  %3544 = fmul fast float %3543, %3482
  %3545 = fadd fast float %3544, %3542
  %3546 = fmul fast float %3545, %886
  %3547 = fmul fast float %3543, %886
  %3548 = fadd fast float %3547, %3542
  %3549 = fmul fast float %3548, %3482
  %3550 = fadd fast float %3546, %3549
  %3551 = fdiv fast float 5.000000e-01, %3550
  %3552 = fsub fast float 1.000000e+00, %3478
  %3553 = fmul fast float %3552, %3552
  %3554 = fmul fast float %3553, %3553
  %3555 = fmul fast float %3554, %3552
  %3556 = fmul fast float %233, 5.000000e+01
  %3557 = call float @dx.op.unary.f32(i32 7, float %3556)  ; Saturate(value)
  %3558 = fmul fast float %3557, %3555
  %3559 = fsub fast float 1.000000e+00, %3555
  %3560 = fmul fast float %3559, %232
  %3561 = fmul fast float %3559, %233
  %3562 = fmul fast float %3559, %234
  %3563 = fadd fast float %3558, %3560
  %3564 = fadd fast float %3558, %3561
  %3565 = fadd fast float %3558, %3562
  %3566 = fmul fast float %3541, %3551
  %3567 = fmul fast float %3566, %3483
  %3568 = fmul fast float %3567, %3563
  %3569 = fmul fast float %3567, %3564
  %3570 = fmul fast float %3567, %3565
  %3571 = fmul fast float %3479, %3485
  %3572 = fsub fast float %3479, %3571
  %3573 = fmul fast float %3572, %3479
  %3574 = fadd fast float %3573, %3485
  %3575 = fmul fast float %3485, 0x402921FB60000000
  %3576 = fadd fast float %3575, 0x400921FB60000000
  %3577 = fdiv fast float 1.000000e+00, %3576
  %3578 = fmul fast float %3485, %3485
  %3579 = fmul fast float %3578, 4.000000e+00
  %3580 = fmul fast float %3574, %3574
  %3581 = fdiv fast float %3579, %3580
  %3582 = fadd fast float %3581, 1.000000e+00
  %3583 = fmul fast float %3582, %3577
  %3584 = fadd fast float %3482, %886
  %3585 = fmul fast float %3482, %886
  %3586 = fsub fast float %3584, %3585
  %3587 = fdiv fast float 2.500000e-01, %3586
  %3588 = fmul fast float %3372, 5.000000e+01
  %3589 = call float @dx.op.unary.f32(i32 7, float %3588)  ; Saturate(value)
  %3590 = fmul fast float %3589, %3555
  %3591 = fmul fast float %3371, %3559
  %3592 = fmul fast float %3559, %3372
  %3593 = fmul fast float %3373, %3559
  %3594 = fadd fast float %3590, %3591
  %3595 = fadd fast float %3590, %3592
  %3596 = fadd fast float %3590, %3593
  %3597 = fmul fast float %3583, %3587
  %3598 = fmul fast float %3597, %3483
  %3599 = fmul fast float %3598, %3594
  %3600 = fmul fast float %3598, %3595
  %3601 = fmul fast float %3598, %3596
  %3602 = fmul fast float %221, 0x3FD45F3060000000
  %3603 = fmul fast float %222, 0x3FD45F3060000000
  %3604 = fmul fast float %223, 0x3FD45F3060000000
  %3605 = fmul fast float %3602, %3483
  %3606 = fmul fast float %3603, %3483
  %3607 = fmul fast float %3604, %3483
  %3608 = fsub fast float %3599, %3568
  %3609 = fsub fast float %3600, %3569
  %3610 = fsub fast float %3601, %3570
  %3611 = fmul fast float %3608, %3374
  %3612 = fmul fast float %3609, %3374
  %3613 = fmul fast float %3610, %3374
  %3614 = fadd fast float %3611, %3568
  %3615 = fadd fast float %3612, %3569
  %3616 = fadd fast float %3613, %3570
  br label %3821

; <label>:3617                                    ; preds = %919
  %3618 = fmul fast float %142, 2.000000e+00
  %3619 = fmul fast float %143, 2.000000e+00
  %3620 = fadd fast float %3618, -1.000000e+00
  %3621 = fadd fast float %3619, -1.000000e+00
  %3622 = call float @dx.op.unary.f32(i32 6, float %3620)  ; FAbs(value)
  %3623 = call float @dx.op.unary.f32(i32 6, float %3621)  ; FAbs(value)
  %3624 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %3622, float %3623)  ; Dot2(ax,ay,bx,by)
  %3625 = fsub fast float 1.000000e+00, %3624
  %3626 = fsub fast float -0.000000e+00, %3625
  %3627 = call float @dx.op.binary.f32(i32 35, float %3626, float 0.000000e+00)  ; FMax(a,b)
  %3628 = fsub fast float -0.000000e+00, %3627
  %3629 = fcmp fast oge float %3620, 0.000000e+00
  %3630 = fcmp fast oge float %3621, 0.000000e+00
  %3631 = select i1 %3629, float %3628, float %3627
  %3632 = select i1 %3630, float %3628, float %3627
  %3633 = fadd fast float %3631, %3620
  %3634 = fadd fast float %3632, %3621
  %3635 = call float @dx.op.dot3.f32(i32 55, float %3633, float %3634, float %3625, float %3633, float %3634, float %3625)  ; Dot3(ax,ay,az,bx,by,bz)
  %3636 = call float @dx.op.unary.f32(i32 25, float %3635)  ; Rsqrt(value)
  %3637 = fmul fast float %3633, %3636
  %3638 = fmul fast float %3634, %3636
  %3639 = fmul fast float %3636, %3625
  %3640 = fsub fast float 1.000000e+00, %144
  %3641 = fmul fast float %3640, %88
  %3642 = fsub fast float -0.000000e+00, %160
  %3643 = fsub fast float -0.000000e+00, %161
  %3644 = fsub fast float -0.000000e+00, %162
  %3645 = fsub fast float %3642, %3637
  %3646 = fsub fast float %3643, %3638
  %3647 = fsub fast float %3644, %3639
  %3648 = fmul fast float %3645, %3641
  %3649 = fmul fast float %3646, %3641
  %3650 = fmul fast float %3647, %3641
  %3651 = fadd fast float %3648, %3637
  %3652 = fadd fast float %3649, %3638
  %3653 = fadd fast float %3650, %3639
  %3654 = call float @dx.op.dot3.f32(i32 55, float %3651, float %3652, float %3653, float %3651, float %3652, float %3653)  ; Dot3(ax,ay,az,bx,by,bz)
  %3655 = call float @dx.op.unary.f32(i32 25, float %3654)  ; Rsqrt(value)
  %3656 = fmul fast float %3651, %3655
  %3657 = fmul fast float %3652, %3655
  %3658 = fmul fast float %3653, %3655
  %3659 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %3660 = call float @dx.op.dot3.f32(i32 55, float %160, float %161, float %162, float %458, float %459, float %460)  ; Dot3(ax,ay,az,bx,by,bz)
  %3661 = call float @dx.op.dot3.f32(i32 55, float %458, float %459, float %460, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %3662 = fmul fast float %3661, 2.000000e+00
  %3663 = fadd fast float %3662, 2.000000e+00
  %3664 = call float @dx.op.unary.f32(i32 25, float %3663)  ; Rsqrt(value)
  %3665 = fadd fast float %3660, %3659
  %3666 = fmul fast float %3664, %3665
  %3667 = call float @dx.op.unary.f32(i32 7, float %3666)  ; Saturate(value)
  %3668 = fmul fast float %3664, %3661
  %3669 = fadd fast float %3668, %3664
  %3670 = call float @dx.op.unary.f32(i32 7, float %3669)  ; Saturate(value)
  %3671 = fcmp fast ogt float %933, 0.000000e+00
  br i1 %3671, label %3672, label %3709

; <label>:3672                                    ; preds = %3617
  %3673 = fmul fast float %933, %933
  %3674 = fsub fast float 1.000000e+00, %3673
  %3675 = call float @dx.op.unary.f32(i32 24, float %3674)  ; Sqrt(value)
  %3676 = fmul fast float %3659, 2.000000e+00
  %3677 = fmul fast float %3676, %3660
  %3678 = fsub fast float %3677, %3661
  %3679 = fcmp fast ult float %3678, %3675
  br i1 %3679, label %3682, label %3680

; <label>:3680                                    ; preds = %3672
  %3681 = call float @dx.op.unary.f32(i32 6, float %3660)  ; FAbs(value)
  br label %3709

; <label>:3682                                    ; preds = %3672
  %3683 = fmul fast float %3678, %3678
  %3684 = fsub fast float 1.000000e+00, %3683
  %3685 = call float @dx.op.unary.f32(i32 25, float %3684)  ; Rsqrt(value)
  %3686 = fmul fast float %3685, %933
  %3687 = fmul fast float %3678, %3659
  %3688 = fsub fast float %3660, %3687
  %3689 = fmul fast float %3686, %3688
  %3690 = fmul fast float %3660, %3660
  %3691 = fmul fast float %3690, 2.000000e+00
  %3692 = fadd fast float %3691, -1.000000e+00
  %3693 = fmul fast float %3678, %3661
  %3694 = fsub fast float %3692, %3693
  %3695 = fmul fast float %3686, %3694
  %3696 = fmul fast float %3675, %3659
  %3697 = fmul fast float %3675, %3661
  %3698 = fadd fast float %3695, %3697
  %3699 = fmul fast float %3698, 2.000000e+00
  %3700 = fadd fast float %3699, 2.000000e+00
  %3701 = call float @dx.op.unary.f32(i32 25, float %3700)  ; Rsqrt(value)
  %3702 = fadd fast float %3696, %3660
  %3703 = fadd fast float %3702, %3689
  %3704 = fmul fast float %3703, %3701
  %3705 = call float @dx.op.unary.f32(i32 7, float %3704)  ; Saturate(value)
  %3706 = fmul fast float %3698, %3701
  %3707 = fadd fast float %3706, %3701
  %3708 = call float @dx.op.unary.f32(i32 7, float %3707)  ; Saturate(value)
  br label %3709

; <label>:3709                                    ; preds = %3682, %3680, %3617
  %3710 = phi float [ %3681, %3680 ], [ %3708, %3682 ], [ %3670, %3617 ]
  %3711 = phi float [ 1.000000e+00, %3680 ], [ %3705, %3682 ], [ %3667, %3617 ]
  %3712 = call float @dx.op.unary.f32(i32 6, float %3660)  ; FAbs(value)
  %3713 = fadd fast float %3712, 0x3EE4F8B580000000
  %3714 = call float @dx.op.unary.f32(i32 7, float %3713)  ; Saturate(value)
  %3715 = fmul fast float %206, 0x3FB47AE140000000
  %3716 = fsub fast float 1.000000e+00, %3710
  %3717 = fmul fast float %3716, %3716
  %3718 = fmul fast float %3717, %3717
  %3719 = fmul fast float %3718, %3716
  %3720 = fsub fast float 1.000000e+00, %3719
  %3721 = fmul fast float %3715, %3720
  %3722 = fadd fast float %3721, %3719
  %3723 = fmul fast float %839, %839
  %3724 = fmul fast float %3723, %3723
  %3725 = fcmp fast ogt float %935, 0.000000e+00
  br i1 %3725, label %3726, label %3733

; <label>:3726                                    ; preds = %3709
  %3727 = fmul fast float %935, %935
  %3728 = fmul fast float %3710, 0x400CCCCCC0000000
  %3729 = fadd fast float %3728, 0x3FD99999A0000000
  %3730 = fdiv fast float %3727, %3729
  %3731 = fadd fast float %3730, %3724
  %3732 = call float @dx.op.unary.f32(i32 7, float %3731)  ; Saturate(value)
  br label %3733

; <label>:3733                                    ; preds = %3726, %3709
  %3734 = phi float [ %3732, %3726 ], [ %3724, %3709 ]
  br i1 %3671, label %3735, label %3748

; <label>:3735                                    ; preds = %3733
  %3736 = fmul fast float %933, 2.500000e-01
  %3737 = bitcast float %3734 to i32
  %3738 = ashr i32 %3737, 1
  %3739 = add nsw i32 %3738, 532487669
  %3740 = bitcast i32 %3739 to float
  %3741 = fmul fast float %3740, 3.000000e+00
  %3742 = fadd fast float %3741, %933
  %3743 = fmul fast float %3736, %3742
  %3744 = fadd fast float %3710, 0x3F50624DE0000000
  %3745 = fdiv fast float %3743, %3744
  %3746 = fadd fast float %3745, %3734
  %3747 = fdiv fast float %3734, %3746
  br label %3748

; <label>:3748                                    ; preds = %3735, %3733
  %3749 = phi float [ %3746, %3735 ], [ %3734, %3733 ]
  %3750 = phi float [ %3747, %3735 ], [ 1.000000e+00, %3733 ]
  %3751 = fcmp fast olt float %869, 1.000000e+00
  br i1 %3751, label %3752, label %3771

; <label>:3752                                    ; preds = %3748
  %3753 = fsub fast float 0x3FF00068E0000000, %869
  %3754 = fadd fast float %869, 1.000000e+00
  %3755 = fdiv fast float %3753, %3754
  %3756 = call float @dx.op.unary.f32(i32 24, float %3755)  ; Sqrt(value)
  %3757 = fmul fast float %3756, 2.500000e-01
  %3758 = bitcast float %3749 to i32
  %3759 = ashr i32 %3758, 1
  %3760 = add nsw i32 %3759, 532487669
  %3761 = bitcast i32 %3760 to float
  %3762 = fmul fast float %3761, 3.000000e+00
  %3763 = fadd fast float %3756, %3762
  %3764 = fmul fast float %3757, %3763
  %3765 = fadd fast float %3710, 0x3F50624DE0000000
  %3766 = fdiv fast float %3764, %3765
  %3767 = fadd fast float %3766, %3749
  %3768 = fdiv fast float %3749, %3767
  %3769 = call float @dx.op.unary.f32(i32 24, float %3768)  ; Sqrt(value)
  %3770 = fmul fast float %3769, %3750
  br label %3771

; <label>:3771                                    ; preds = %3752, %3748
  %3772 = phi float [ %3770, %3752 ], [ %3750, %3748 ]
  %3773 = call float @dx.op.unary.f32(i32 24, float %3734)  ; Sqrt(value)
  %3774 = fsub fast float 1.000000e+00, %3773
  %3775 = fmul fast float %3774, %3714
  %3776 = fadd fast float %3775, %3773
  %3777 = fmul fast float %3776, %886
  %3778 = fmul fast float %3774, %886
  %3779 = fadd fast float %3778, %3773
  %3780 = fmul fast float %3779, %3714
  %3781 = fadd fast float %3777, %3780
  %3782 = fdiv fast float 5.000000e-01, %3781
  %3783 = fmul fast float %3734, %3711
  %3784 = fsub fast float %3783, %3711
  %3785 = fmul fast float %3784, %3711
  %3786 = fadd fast float %3785, 1.000000e+00
  %3787 = fmul fast float %3786, %3786
  %3788 = fmul fast float %3787, 0x400921FB60000000
  %3789 = fdiv fast float %3734, %3788
  %3790 = fmul fast float %3789, %3772
  %3791 = fmul fast float %886, %887
  %3792 = fmul fast float %3722, %3791
  %3793 = fmul fast float %3792, %3782
  %3794 = fmul fast float %3793, %3790
  %3795 = call float @dx.op.dot3.f32(i32 55, float %3637, float %3638, float %3639, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %3796 = call float @dx.op.unary.f32(i32 7, float %3795)  ; Saturate(value)
  %3797 = fmul fast float %3796, 1.100000e+01
  %3798 = fsub fast float 1.200000e+01, %3797
  %3799 = fmul fast float %3796, 0x40019999A0000000
  %3800 = fsub fast float 0x4004CCCCE0000000, %3799
  %3801 = call float @dx.op.dot3.f32(i32 55, float %3656, float %3657, float %3658, float %925, float %926, float %927)  ; Dot3(ax,ay,az,bx,by,bz)
  %3802 = call float @dx.op.unary.f32(i32 7, float %3801)  ; Saturate(value)
  %3803 = call float @dx.op.unary.f32(i32 23, float %3802)  ; Log(value)
  %3804 = fmul fast float %3803, %3798
  %3805 = call float @dx.op.unary.f32(i32 21, float %3804)  ; Exp(value)
  %3806 = fmul fast float %3805, %3800
  %3807 = fadd fast float %3806, 0x3FE99999A0000000
  %3808 = fmul fast float %3807, %3796
  %3809 = fsub fast float 1.000000e+00, %3722
  %3810 = fsub fast float %3808, %886
  %3811 = fmul fast float %3810, %3640
  %3812 = fadd fast float %3811, %886
  %3813 = fmul fast float %3809, %887
  %3814 = fmul fast float %3813, %3812
  %3815 = fmul fast float %221, 0x3FD45F3060000000
  %3816 = fmul fast float %222, 0x3FD45F3060000000
  %3817 = fmul fast float %223, 0x3FD45F3060000000
  %3818 = fmul fast float %3815, %3814
  %3819 = fmul fast float %3816, %3814
  %3820 = fmul fast float %3817, %3814
  br label %3821

; <label>:3821                                    ; preds = %3771, %3532, %3111, %3085, %2680, %2395, %1929, %1573, %1189, %1085, %919
  %3822 = phi float [ %3818, %3771 ], [ 0.000000e+00, %3532 ], [ %3365, %3111 ], [ %3108, %3085 ], [ %2790, %2680 ], [ 0.000000e+00, %2395 ], [ %1946, %1929 ], [ %1634, %1573 ], [ 0.000000e+00, %1189 ], [ 0.000000e+00, %1085 ], [ 0.000000e+00, %919 ]
  %3823 = phi float [ %3819, %3771 ], [ 0.000000e+00, %3532 ], [ %3367, %3111 ], [ %3109, %3085 ], [ %2791, %2680 ], [ 0.000000e+00, %2395 ], [ %1949, %1929 ], [ %1635, %1573 ], [ 0.000000e+00, %1189 ], [ 0.000000e+00, %1085 ], [ 0.000000e+00, %919 ]
  %3824 = phi float [ %3820, %3771 ], [ 0.000000e+00, %3532 ], [ %3369, %3111 ], [ %3110, %3085 ], [ %2792, %2680 ], [ 0.000000e+00, %2395 ], [ %1952, %1929 ], [ %1636, %1573 ], [ 0.000000e+00, %1189 ], [ 0.000000e+00, %1085 ], [ 0.000000e+00, %919 ]
  %3825 = phi float [ %3794, %3771 ], [ %3614, %3532 ], [ 0.000000e+00, %3111 ], [ %3086, %3085 ], [ %2727, %2680 ], [ %2418, %2395 ], [ %1930, %1929 ], [ %1521, %1573 ], [ %1225, %1189 ], [ %1137, %1085 ], [ 0.000000e+00, %919 ]
  %3826 = phi float [ %3794, %3771 ], [ %3615, %3532 ], [ 0.000000e+00, %3111 ], [ %3087, %3085 ], [ %2729, %2680 ], [ %2419, %2395 ], [ %1931, %1929 ], [ %1522, %1573 ], [ %1226, %1189 ], [ %1138, %1085 ], [ 0.000000e+00, %919 ]
  %3827 = phi float [ %3794, %3771 ], [ %3616, %3532 ], [ 0.000000e+00, %3111 ], [ %3088, %3085 ], [ %2731, %2680 ], [ %2420, %2395 ], [ %1932, %1929 ], [ %1523, %1573 ], [ %1227, %1189 ], [ %1139, %1085 ], [ 0.000000e+00, %919 ]
  %3828 = phi float [ 0.000000e+00, %3771 ], [ %3605, %3532 ], [ 0.000000e+00, %3111 ], [ %2938, %3085 ], [ %2577, %2680 ], [ %2263, %2395 ], [ %1782, %1929 ], [ %1373, %1573 ], [ %1081, %1189 ], [ %1081, %1085 ], [ 0.000000e+00, %919 ]
  %3829 = phi float [ 0.000000e+00, %3771 ], [ %3606, %3532 ], [ 0.000000e+00, %3111 ], [ %2939, %3085 ], [ %2579, %2680 ], [ %2264, %2395 ], [ %1783, %1929 ], [ %1374, %1573 ], [ %1082, %1189 ], [ %1082, %1085 ], [ 0.000000e+00, %919 ]
  %3830 = phi float [ 0.000000e+00, %3771 ], [ %3607, %3532 ], [ 0.000000e+00, %3111 ], [ %2940, %3085 ], [ %2581, %2680 ], [ %2265, %2395 ], [ %1784, %1929 ], [ %1375, %1573 ], [ %1083, %1189 ], [ %1083, %1085 ], [ 0.000000e+00, %919 ]
  %3831 = fmul fast float %823, %494
  %3832 = fmul fast float %823, %495
  %3833 = fmul fast float %823, %496
  br i1 %176, label %3834, label %3843

; <label>:3834                                    ; preds = %3821
  %3835 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 228)  ; CBufferLoadLegacy(handle,regIndex)
  %3836 = extractvalue %dx.types.CBufRet.f32 %3835, 2
  %3837 = fcmp fast oeq float %3836, 0.000000e+00
  br i1 %3837, label %3838, label %3843

; <label>:3838                                    ; preds = %3834
  %3839 = fmul fast float %3828, %3831
  %3840 = fmul fast float %3829, %3832
  %3841 = fmul fast float %3830, %3833
  %3842 = call float @dx.op.dot3.f32(i32 55, float %3839, float %3840, float %3841, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  br label %3843

; <label>:3843                                    ; preds = %3838, %3834, %3821
  %3844 = phi float [ %3842, %3838 ], [ 0.000000e+00, %3834 ], [ 0.000000e+00, %3821 ]
  %3845 = fmul fast float %3828, %3831
  %3846 = fmul fast float %3829, %3832
  %3847 = fmul fast float %3830, %3833
  %3848 = fmul fast float %3831, %337
  %3849 = fmul fast float %3848, %3825
  %3850 = fmul fast float %3832, %337
  %3851 = fmul fast float %3850, %3826
  %3852 = fmul fast float %3833, %337
  %3853 = fmul fast float %3852, %3827
  %3854 = fmul fast float %822, %494
  %3855 = fmul fast float %822, %495
  %3856 = fmul fast float %822, %496
  br i1 %176, label %3857, label %3867

; <label>:3857                                    ; preds = %3843
  %3858 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 228)  ; CBufferLoadLegacy(handle,regIndex)
  %3859 = extractvalue %dx.types.CBufRet.f32 %3858, 2
  %3860 = fcmp fast oeq float %3859, 0.000000e+00
  br i1 %3860, label %3861, label %3867

; <label>:3861                                    ; preds = %3857
  %3862 = fmul fast float %3822, %3854
  %3863 = fmul fast float %3823, %3855
  %3864 = fmul fast float %3824, %3856
  %3865 = call float @dx.op.dot3.f32(i32 55, float %3862, float %3863, float %3864, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %3866 = fadd fast float %3865, %3844
  br label %3867

; <label>:3867                                    ; preds = %3861, %3857, %3843
  %3868 = phi float [ %3866, %3861 ], [ %3844, %3857 ], [ %3844, %3843 ]
  %3869 = fmul fast float %3822, %3854
  %3870 = fmul fast float %3823, %3855
  %3871 = fmul fast float %3824, %3856
  %3872 = fadd fast float %3845, %3869
  %3873 = fadd fast float %3846, %3870
  %3874 = fadd fast float %3847, %3871
  br label %3875

; <label>:3875                                    ; preds = %3867, %821, %486
  %3876 = phi float [ %3849, %3867 ], [ 0.000000e+00, %821 ], [ 0.000000e+00, %486 ]
  %3877 = phi float [ %3851, %3867 ], [ 0.000000e+00, %821 ], [ 0.000000e+00, %486 ]
  %3878 = phi float [ %3853, %3867 ], [ 0.000000e+00, %821 ], [ 0.000000e+00, %486 ]
  %3879 = phi float [ %3872, %3867 ], [ 0.000000e+00, %821 ], [ 0.000000e+00, %486 ]
  %3880 = phi float [ %3873, %3867 ], [ 0.000000e+00, %821 ], [ 0.000000e+00, %486 ]
  %3881 = phi float [ %3874, %3867 ], [ 0.000000e+00, %821 ], [ 0.000000e+00, %486 ]
  %3882 = phi float [ %3868, %3867 ], [ 0.000000e+00, %821 ], [ 0.000000e+00, %486 ]
  %3883 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 228)  ; CBufferLoadLegacy(handle,regIndex)
  %3884 = extractvalue %dx.types.CBufRet.f32 %3883, 2
  %3885 = fcmp fast oeq float %3884, 0.000000e+00
  %3886 = select i1 %3885, float %3882, float 0.000000e+00
  %3887 = fadd fast float %3879, %3876
  %3888 = fadd fast float %3880, %3877
  %3889 = fadd fast float %3881, %3878
  br label %3890

; <label>:3890                                    ; preds = %3875, %258, %249
  %3891 = phi float [ %3887, %3875 ], [ 0.000000e+00, %258 ], [ 0.000000e+00, %249 ]
  %3892 = phi float [ %3888, %3875 ], [ 0.000000e+00, %258 ], [ 0.000000e+00, %249 ]
  %3893 = phi float [ %3889, %3875 ], [ 0.000000e+00, %258 ], [ 0.000000e+00, %249 ]
  %3894 = phi float [ %3886, %3875 ], [ 0.000000e+00, %258 ], [ 0.000000e+00, %249 ]
  %3895 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %3896 = extractvalue %dx.types.CBufRet.f32 %3895, 1
  %3897 = fmul fast float %3896, %3891
  %3898 = fmul fast float %3896, %3892
  %3899 = fmul fast float %3896, %3893
  %3900 = fmul fast float %3896, %3894
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %3897)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %3898)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %3899)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %3900)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!35}
!dx.entryPoints = !{!36}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"ps", i32 6, i32 6}
!4 = !{!5, null, !24, !30}
!5 = !{!6, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !20, !21, !22, !23}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{i32 2, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !7}
!10 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!11 = !{i32 4, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i32 0, !7}
!12 = !{i32 5, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 2, i32 0, !7}
!13 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !7}
!14 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !7}
!15 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 2, i32 0, !7}
!16 = !{i32 9, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 2, i32 0, !7}
!17 = !{i32 10, %"class.Buffer<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 10, i32 0, !7}
!18 = !{i32 11, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 11, i32 1, i32 10, i32 0, !19}
!19 = !{i32 0, i32 5}
!20 = !{i32 12, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 12, i32 1, i32 10, i32 0, !19}
!21 = !{i32 13, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !7}
!22 = !{i32 14, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 14, i32 1, i32 2, i32 0, !19}
!23 = !{i32 15, %"class.Texture2D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 2, i32 0, !19}
!24 = !{!25, !26, !27, !28, !29}
!25 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 324, null}
!26 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!27 = !{i32 2, %UniformBufferConstants_DeferredLightUniforms* undef, !"", i32 0, i32 2, i32 1, i32 160, null}
!28 = !{i32 3, %UniformBufferConstants_VirtualShadowMap* undef, !"", i32 0, i32 3, i32 1, i32 116, null}
!29 = !{i32 4, %hostlayout.UniformBufferConstants_ForwardLightData* undef, !"", i32 0, i32 4, i32 1, i32 708, null}
!30 = !{!31, !32, !33, !34}
!31 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!32 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!33 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!34 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!35 = !{[10 x i32] [i32 8, i32 4, i32 15, i32 15, i32 0, i32 15, i32 15, i32 15, i32 0, i32 0]}
!36 = !{void ()* @DeferredLightPixelMain, !"DeferredLightPixelMain", !37, !4, !47}
!37 = !{!38, !44, null}
!38 = !{!39, !42}
!39 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !40, i8 2, i32 1, i8 4, i32 0, i8 0, !41}
!40 = !{i32 0}
!41 = !{i32 3, i32 11}
!42 = !{i32 1, !"SV_Position", i8 9, i8 3, !40, i8 4, i32 1, i8 4, i32 1, i8 0, !43}
!43 = !{i32 3, i32 3}
!44 = !{!45}
!45 = !{i32 0, !"SV_Target", i8 9, i8 16, !40, i8 0, i32 1, i8 4, i32 0, i8 0, !46}
!46 = !{i32 3, i32 15}
!47 = !{i32 5, !40}
!48 = distinct !{!48, !"dx.controlflow.hints", i32 1}
!49 = !{!50, !50, i64 0}
!50 = !{!"int", !51, i64 0}
!51 = !{!"omnipotent char", !52, i64 0}
!52 = !{!"Simple C/C++ TBAA"}
!53 = distinct !{!53, !"dx.controlflow.hints", i32 1}
!54 = distinct !{!54, !"dx.controlflow.hints", i32 1}
!55 = distinct !{!55, !"dx.controlflow.hints", i32 1}
!56 = distinct !{!56, !"dx.controlflow.hints", i32 1}
!57 = distinct !{!57, !"dx.controlflow.hints", i32 1}
!58 = distinct !{!58, !"dx.controlflow.hints", i32 1}
!59 = distinct !{!59, !"dx.controlflow.hints", i32 1}
!60 = distinct !{!60, !"dx.controlflow.hints", i32 1}
!61 = distinct !{!61, !"dx.controlflow.hints", i32 1}
