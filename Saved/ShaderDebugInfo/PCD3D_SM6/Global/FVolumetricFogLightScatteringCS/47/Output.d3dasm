;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: adb9f3fb21779c940cda3be4dac469c1
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(4,4,4)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct hostlayout._RootShaderParameters
;   {
;
;       row_major float4x4 UnjitteredClipToTranslatedWorld;; Offset:   64
;       row_major float4x4 UnjitteredPrevTranslatedWorldToClip;; Offset:  128
;       float4 FrameJitterOffsets[16];                ; Offset:  192
;       float HistoryWeight;                          ; Offset:  448
;       uint HistoryMissSuperSampleCount;             ; Offset:  452
;       float AOObjectMaxDistance;                    ; Offset:  592
;       float AOStepScale;                            ; Offset:  596
;       float AOStepExponentScale;                    ; Offset:  600
;       float AOMaxViewDistance;                      ; Offset:  604
;       float AOGlobalMaxOcclusionDistance;           ; Offset:  608
;       float4 GlobalVolumeTranslatedCenterAndExtent[6];; Offset:  656
;       float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset:  752
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset:  848
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset:  944
;       float GlobalDistanceFieldMipFactor;           ; Offset: 1040
;       float GlobalDistanceFieldMipTransition;       ; Offset: 1044
;       uint GlobalDistanceFieldClipmapSizeInPages;   ; Offset: 1048
;       float3 GlobalDistanceFieldInvPageAtlasSize;   ; Offset: 1056
;       float3 GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 1072
;       float GlobalVolumeDimension;                  ; Offset: 1084
;       float GlobalVolumeTexelSize;                  ; Offset: 1088
;       float MaxGlobalDFAOConeDistance;              ; Offset: 1092
;       uint NumGlobalSDFClipmaps;                    ; Offset: 1096
;       float CoveredExpandSurfaceScale;              ; Offset: 1100
;       float NotCoveredExpandSurfaceScale;           ; Offset: 1104
;       float NotCoveredMinStepScale;                 ; Offset: 1108
;       float DitheredTransparencyStepThreshold;      ; Offset: 1112
;       float DitheredTransparencyTraceThreshold;     ; Offset: 1116
;       float4 SkySH[3];                              ; Offset: 1136
;       row_major float4x4 DirectionalLightFunctionTranslatedWorldToShadow;; Offset: 1184
;       float2 PrevConservativeDepthTextureSize;      ; Offset: 1312
;       float2 UseHeightFogColors;                    ; Offset: 1320
;       float2 LightScatteringHistoryPreExposureAndInv;; Offset: 1328
;       float StaticLightingScatteringIntensity;      ; Offset: 1336
;       float SkyLightVolumetricScatteringIntensity;  ; Offset: 1340
;       float SkyLightUseStaticShadowing;             ; Offset: 1344
;       float PhaseG;                                 ; Offset: 1348
;       float InverseSquaredLightDistanceBiasScale;   ; Offset: 1352
;       float LightScatteringSampleJitterMultiplier;  ; Offset: 1356
;       float UseDirectionalLightShadowing;           ; Offset: 1368
;       uint UseConservativeDepthTexture;             ; Offset: 1372
;       uint UseEmissive;                             ; Offset: 1376
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:  1380
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_ForwardLightData
; {
;
;   struct hostlayout.UniformBufferConstants_ForwardLightData
;   {
;
;       uint ForwardLightData_NumLocalLights;         ; Offset:    0
;       uint ForwardLightData_NumReflectionCaptures;  ; Offset:    4
;       uint ForwardLightData_HasDirectionalLight;    ; Offset:    8
;       uint ForwardLightData_NumGridCells;           ; Offset:   12
;       int3 ForwardLightData_CulledGridSize;         ; Offset:   16
;       uint ForwardLightData_MaxCulledLightsPerCell; ; Offset:   28
;       uint ForwardLightData_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_ForwardLightData_36;          ; Offset:   36
;       uint PrePadding_ForwardLightData_40;          ; Offset:   40
;       uint PrePadding_ForwardLightData_44;          ; Offset:   44
;       float3 ForwardLightData_LightGridZParams;     ; Offset:   48
;       float PrePadding_ForwardLightData_60;         ; Offset:   60
;       float3 ForwardLightData_DirectionalLightDirection;; Offset:   64
;       float ForwardLightData_DirectionalLightSourceRadius;; Offset:   76
;       float3 ForwardLightData_DirectionalLightColor;; Offset:   80
;       float ForwardLightData_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint ForwardLightData_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_ForwardLightData_100;         ; Offset:  100
;       float2 ForwardLightData_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint ForwardLightData_NumDirectionalLightCascades;; Offset:  112
;       int ForwardLightData_DirectionalLightVSM;     ; Offset:  116
;       int PrePadding_ForwardLightData_120;          ; Offset:  120
;       int PrePadding_ForwardLightData_124;          ; Offset:  124
;       float4 ForwardLightData_CascadeEndDepths;     ; Offset:  128
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 ForwardLightData_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float ForwardLightData_DirectionalLightDepthBias;; Offset:  480
;       uint ForwardLightData_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint ForwardLightData_SimpleLightsEndIndex;   ; Offset:  488
;       uint ForwardLightData_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint ForwardLightData_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_ForwardLightData_500;         ; Offset:  500
;       uint PrePadding_ForwardLightData_504;         ; Offset:  504
;       uint PrePadding_ForwardLightData_508;         ; Offset:  508
;       float4 ForwardLightData_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint ForwardLightData_DirectLightingShowFlag; ; Offset:  592
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_604;; Offset:  604
;       float ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_ForwardLightData_644;         ; Offset:  644
;       uint PrePadding_ForwardLightData_648;         ; Offset:  648
;       uint PrePadding_ForwardLightData_652;         ; Offset:  652
;       uint BindlessResource_ForwardLightData_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_ForwardLightData_660;         ; Offset:  660
;       uint BindlessSampler_ForwardLightData_ShadowmapSampler;; Offset:  664
;       uint PrePadding_ForwardLightData_668;         ; Offset:  668
;       uint BindlessResource_ForwardLightData_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_ForwardLightData_676;         ; Offset:  676
;       uint BindlessSampler_ForwardLightData_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_ForwardLightData_684;         ; Offset:  684
;       uint BindlessResource_ForwardLightData_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_ForwardLightData_692;         ; Offset:  692
;       uint BindlessResource_ForwardLightData_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_ForwardLightData_700;         ; Offset:  700
;       uint BindlessResource_ForwardLightData_CulledLightDataGrid;; Offset:  704
;   
;   } UniformBufferConstants_ForwardLightData;        ; Offset:    0 Size:   708
;
; }
;
; cbuffer UniformBufferConstants_FogStruct
; {
;
;   struct UniformBufferConstants_FogStruct
;   {
;
;       float4 FogStruct_ExponentialFogParameters;    ; Offset:    0
;       float4 FogStruct_ExponentialFogParameters2;   ; Offset:   16
;       float4 FogStruct_ExponentialFogColorParameter;; Offset:   32
;       float4 FogStruct_ExponentialFogParameters3;   ; Offset:   48
;       float4 FogStruct_SkyAtmosphereAmbientContributionColorScale;; Offset:   64
;       float4 FogStruct_InscatteringLightDirection;  ; Offset:   80
;       float4 FogStruct_DirectionalInscatteringColor;; Offset:   96
;       float2 FogStruct_SinCosInscatteringColorCubemapRotation;; Offset:  112
;       float PrePadding_FogStruct_120;               ; Offset:  120
;       float PrePadding_FogStruct_124;               ; Offset:  124
;       float3 FogStruct_FogInscatteringTextureParameters;; Offset:  128
;       float FogStruct_ApplyVolumetricFog;           ; Offset:  140
;       float FogStruct_VolumetricFogStartDistance;   ; Offset:  144
;       float FogStruct_VolumetricFogNearFadeInDistanceInv;; Offset:  148
;       uint BindlessResource_FogStruct_FogInscatteringColorCubemap;; Offset:  152
;       uint PrePadding_FogStruct_156;                ; Offset:  156
;       uint BindlessSampler_FogStruct_FogInscatteringColorSampler;; Offset:  160
;       uint PrePadding_FogStruct_164;                ; Offset:  164
;       uint BindlessResource_FogStruct_IntegratedLightScattering;; Offset:  168
;       uint PrePadding_FogStruct_172;                ; Offset:  172
;       uint BindlessSampler_FogStruct_IntegratedLightScatteringSampler;; Offset:  176
;   
;   } UniformBufferConstants_FogStruct;               ; Offset:    0 Size:   180
;
; }
;
; cbuffer UniformBufferConstants_VolumetricFog
; {
;
;   struct UniformBufferConstants_VolumetricFog
;   {
;
;       int3 VolumetricFog_GridSizeInt;               ; Offset:    0
;       int PrePadding_VolumetricFog_12;              ; Offset:   12
;       float3 VolumetricFog_GridSize;                ; Offset:   16
;       float PrePadding_VolumetricFog_28;            ; Offset:   28
;       float3 VolumetricFog_GridZParams;             ; Offset:   32
;       float PrePadding_VolumetricFog_44;            ; Offset:   44
;       float2 VolumetricFog_SVPosToVolumeUV;         ; Offset:   48
;       float VolumetricFog_MaxDistance;              ; Offset:   56
;       float PrePadding_VolumetricFog_60;            ; Offset:   60
;       float3 VolumetricFog_HeightFogInscatteringColor;; Offset:   64
;       float PrePadding_VolumetricFog_76;            ; Offset:   76
;       float3 VolumetricFog_HeightFogDirectionalLightInscatteringColor;; Offset:   80
;       float PrePadding_VolumetricFog_92;            ; Offset:   92
;       int2 VolumetricFog_FogGridToPixelXY;          ; Offset:   96
;   
;   } UniformBufferConstants_VolumetricFog;           ; Offset:    0 Size:   104
;
; }
;
; Resource bind info for VirtualShadowMap_PageTable
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_ForwardLightData   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_FogStruct   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_VolumetricFog   cbuffer      NA          NA     CB4            cb4     1
; D3DStaticTrilinearWrappedSampler   sampler      NA          NA      S0   s4,space1000     1
; View_SharedBilinearClampedSampler   sampler      NA          NA      S1             s0     1
; View_DistantSkyLightLutTextureSampler   sampler      NA          NA      S2             s1     1
; ForwardLightData_ShadowmapSampler   sampler      NA          NA      S3             s2     1
; ForwardLightData_StaticShadowmapSampler   sampler      NA          NA      S4             s3     1
; FogStruct_FogInscatteringColorSampler   sampler      NA          NA      S5             s4     1
; LightScatteringHistorySampler     sampler      NA          NA      S6             s5     1
; LightFunctionSampler              sampler      NA          NA      S7             s6     1
; View_VolumetricLightmapIndirectionTexture   texture     u32          3d      T0             t0     1
; View_VolumetricLightmapBrickAmbientVector   texture     f32          3d      T1             t1     1
; View_VolumetricLightmapBrickSHCoefficients0   texture     f32          3d      T2             t2     1
; View_VolumetricLightmapBrickSHCoefficients2   texture     f32          3d      T3             t3     1
; View_VolumetricLightmapBrickSHCoefficients4   texture     f32          3d      T4             t4     1
; View_SkyBentNormalBrickTexture    texture     f32          3d      T5             t5     1
; View_DistantSkyLightLutTexture    texture     f32          2d      T6             t6     1
; VirtualShadowMap_ProjectionData   texture    byte         r/o      T7             t7     1
; VirtualShadowMap_PageTable        texture  struct         r/o      T8             t8     1
; VirtualShadowMap_PhysicalPagePool   texture     u32     2darray      T9             t9     1
; ForwardLightData_DirectionalLightShadowmapAtlas   texture     f32          2d     T10            t10     1
; ForwardLightData_DirectionalLightStaticShadowmap   texture     f32          2d     T11            t11     1
; ForwardLightData_ForwardLocalLightBuffer   texture     f32         buf     T12            t12     1
; ForwardLightData_NumCulledLightsGrid   texture     u32         buf     T13            t13     1
; ForwardLightData_CulledLightDataGrid   texture     u32         buf     T14            t14     1
; FogStruct_FogInscatteringColorCubemap   texture     f32        cube     T15            t15     1
; GlobalDistanceFieldPageAtlasTexture   texture     f32          3d     T16            t16     1
; GlobalDistanceFieldPageTableTexture   texture     u32          3d     T17            t17     1
; ConservativeDepthTexture          texture     f32          2d     T18            t18     1
; PrevConservativeDepthTexture      texture     f32          2d     T19            t19     1
; VBufferA                          texture     f32          3d     T20            t20     1
; VBufferB                          texture     f32          3d     T21            t21     1
; LightScatteringHistory            texture     f32          3d     T22            t22     1
; LocalShadowedLightScattering      texture     f32          3d     T23            t23     1
; LightFunctionTexture              texture     f32          2d     T24            t24     1
; RWLightScattering                     UAV     f32          3d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.Texture3D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture3D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture3D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Texture2DArray<unsigned int>" = type { i32, %"class.Texture2DArray<unsigned int>::mips_type" }
%"class.Texture2DArray<unsigned int>::mips_type" = type { i32 }
%"class.Buffer<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.Texture3D<unsigned int>" = type { i32, %"class.Texture3D<unsigned int>::mips_type" }
%"class.Texture3D<unsigned int>::mips_type" = type { i32 }
%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%"class.RWTexture3D<vector<float, 4> >" = type { <4 x float> }
%hostlayout._RootShaderParameters = type { [4 x <4 x float>], [4 x <4 x float>], [16 x <4 x float>], float, i32, float, float, float, float, float, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, <3 x float>, <3 x float>, float, float, float, i32, float, float, float, float, float, [3 x <4 x float>], [4 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, float, float, float, float, float, float, float, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%hostlayout.UniformBufferConstants_ForwardLightData = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_FogStruct = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_VolumetricFog = type { <3 x i32>, i32, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, <3 x float>, float, <3 x float>, float, <2 x i32> }
%struct.SamplerState = type { i32 }

define void @LightScatteringCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 24, i32 24, i32 0, i8 0 }, i32 24, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 23, i32 23, i32 0, i8 0 }, i32 23, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 22, i32 22, i32 0, i8 0 }, i32 22, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 0 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 3 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 1000, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %36 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %37 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %38 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %39 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %40 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 13, i32 104 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %41 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 13, i32 180 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %42 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 13, i32 708 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %43 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %38, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %44 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %39, %dx.types.ResourceProperties { i32 13, i32 1380 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %45 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %46 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %47 = call i32 @dx.op.threadId.i32(i32 93, i32 2)  ; ThreadId(component)
  %48 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %42, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %49 = extractvalue %dx.types.CBufRet.i32 %48, 0
  %50 = extractvalue %dx.types.CBufRet.i32 %48, 2
  %51 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %42, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %52 = extractvalue %dx.types.CBufRet.i32 %51, 0
  %53 = extractvalue %dx.types.CBufRet.i32 %51, 1
  %54 = extractvalue %dx.types.CBufRet.i32 %51, 2
  %55 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %42, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %56 = extractvalue %dx.types.CBufRet.i32 %55, 0
  %57 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %58 = extractvalue %dx.types.CBufRet.f32 %57, 0
  %59 = extractvalue %dx.types.CBufRet.f32 %57, 1
  %60 = extractvalue %dx.types.CBufRet.f32 %57, 2
  %61 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %62 = extractvalue %dx.types.CBufRet.f32 %61, 0
  %63 = extractvalue %dx.types.CBufRet.f32 %61, 1
  %64 = extractvalue %dx.types.CBufRet.f32 %61, 2
  %65 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %66 = extractvalue %dx.types.CBufRet.f32 %65, 0
  %67 = extractvalue %dx.types.CBufRet.f32 %65, 1
  %68 = extractvalue %dx.types.CBufRet.f32 %65, 2
  %69 = extractvalue %dx.types.CBufRet.f32 %65, 3
  %70 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %42, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %71 = extractvalue %dx.types.CBufRet.i32 %70, 0
  %72 = extractvalue %dx.types.CBufRet.i32 %70, 1
  %73 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %74 = extractvalue %dx.types.CBufRet.f32 %73, 0
  %75 = extractvalue %dx.types.CBufRet.f32 %73, 1
  %76 = extractvalue %dx.types.CBufRet.f32 %73, 2
  %77 = extractvalue %dx.types.CBufRet.f32 %73, 3
  %78 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %79 = extractvalue %dx.types.CBufRet.f32 %78, 0
  %80 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %42, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %81 = extractvalue %dx.types.CBufRet.i32 %80, 1
  %82 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %83 = extractvalue %dx.types.CBufRet.f32 %82, 0
  %84 = extractvalue %dx.types.CBufRet.f32 %82, 1
  %85 = extractvalue %dx.types.CBufRet.f32 %82, 2
  %86 = extractvalue %dx.types.CBufRet.f32 %82, 3
  %87 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %88 = extractvalue %dx.types.CBufRet.f32 %87, 0
  %89 = extractvalue %dx.types.CBufRet.f32 %87, 1
  %90 = extractvalue %dx.types.CBufRet.f32 %87, 2
  %91 = extractvalue %dx.types.CBufRet.f32 %87, 3
  %92 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %93 = extractvalue %dx.types.CBufRet.f32 %92, 0
  %94 = extractvalue %dx.types.CBufRet.f32 %92, 1
  %95 = extractvalue %dx.types.CBufRet.f32 %92, 2
  %96 = extractvalue %dx.types.CBufRet.f32 %92, 3
  %97 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 36)  ; CBufferLoadLegacy(handle,regIndex)
  %98 = extractvalue %dx.types.CBufRet.f32 %97, 0
  %99 = extractvalue %dx.types.CBufRet.f32 %97, 1
  %100 = extractvalue %dx.types.CBufRet.f32 %97, 2
  %101 = extractvalue %dx.types.CBufRet.f32 %97, 3
  %102 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %103 = extractvalue %dx.types.CBufRet.i32 %102, 3
  %104 = icmp eq i32 %103, 0
  %105 = uitofp i32 %45 to float
  %106 = uitofp i32 %46 to float
  %107 = fadd fast float %105, 5.000000e-01
  %108 = fadd fast float %106, 5.000000e-01
  %109 = uitofp i32 %47 to float
  br i1 %104, label %261, label %110

; <label>:110                                     ; preds = %0
  %111 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %112 = extractvalue %dx.types.CBufRet.f32 %111, 0
  %113 = extractvalue %dx.types.CBufRet.f32 %111, 1
  %114 = fdiv fast float %107, %112
  %115 = fdiv fast float %108, %113
  %116 = fmul fast float %114, 2.000000e+00
  %117 = fmul fast float %115, 2.000000e+00
  %118 = fadd fast float %116, -1.000000e+00
  %119 = fadd fast float %117, -1.000000e+00
  %120 = fsub fast float -0.000000e+00, %119
  %121 = fadd fast float %109, -1.000000e+00
  %122 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %123 = extractvalue %dx.types.CBufRet.f32 %122, 2
  %124 = fdiv fast float %121, %123
  %125 = call float @dx.op.unary.f32(i32 21, float %124)  ; Exp(value)
  %126 = extractvalue %dx.types.CBufRet.f32 %122, 1
  %127 = fsub fast float %125, %126
  %128 = extractvalue %dx.types.CBufRet.f32 %122, 0
  %129 = fdiv fast float %127, %128
  %130 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %131 = extractvalue %dx.types.CBufRet.f32 %130, 3
  %132 = fcmp fast ult float %131, 1.000000e+00
  br i1 %132, label %139, label %133, !dx.controlflow.hints !55

; <label>:133                                     ; preds = %110
  %134 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %135 = extractvalue %dx.types.CBufRet.f32 %134, 2
  %136 = fmul fast float %135, %129
  %137 = extractvalue %dx.types.CBufRet.f32 %130, 2
  %138 = fadd fast float %136, %137
  br label %146

; <label>:139                                     ; preds = %110
  %140 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %141 = extractvalue %dx.types.CBufRet.f32 %140, 3
  %142 = fadd fast float %141, %129
  %143 = extractvalue %dx.types.CBufRet.f32 %140, 2
  %144 = fmul fast float %142, %143
  %145 = fdiv fast float 1.000000e+00, %144
  br label %146

; <label>:146                                     ; preds = %139, %133
  %147 = phi float [ %138, %133 ], [ %145, %139 ]
  %148 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %149 = extractvalue %dx.types.CBufRet.f32 %148, 0
  %150 = extractvalue %dx.types.CBufRet.f32 %148, 1
  %151 = extractvalue %dx.types.CBufRet.f32 %148, 2
  %152 = extractvalue %dx.types.CBufRet.f32 %148, 3
  %153 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %154 = extractvalue %dx.types.CBufRet.f32 %153, 0
  %155 = extractvalue %dx.types.CBufRet.f32 %153, 1
  %156 = extractvalue %dx.types.CBufRet.f32 %153, 2
  %157 = extractvalue %dx.types.CBufRet.f32 %153, 3
  %158 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %159 = extractvalue %dx.types.CBufRet.f32 %158, 0
  %160 = extractvalue %dx.types.CBufRet.f32 %158, 1
  %161 = extractvalue %dx.types.CBufRet.f32 %158, 2
  %162 = extractvalue %dx.types.CBufRet.f32 %158, 3
  %163 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %164 = extractvalue %dx.types.CBufRet.f32 %163, 0
  %165 = extractvalue %dx.types.CBufRet.f32 %163, 1
  %166 = extractvalue %dx.types.CBufRet.f32 %163, 2
  %167 = extractvalue %dx.types.CBufRet.f32 %163, 3
  %168 = fmul fast float %149, %118
  %169 = call float @dx.op.tertiary.f32(i32 46, float %120, float %154, float %168)  ; FMad(a,b,c)
  %170 = call float @dx.op.tertiary.f32(i32 46, float %147, float %159, float %169)  ; FMad(a,b,c)
  %171 = fadd fast float %170, %164
  %172 = fmul fast float %150, %118
  %173 = call float @dx.op.tertiary.f32(i32 46, float %120, float %155, float %172)  ; FMad(a,b,c)
  %174 = call float @dx.op.tertiary.f32(i32 46, float %147, float %160, float %173)  ; FMad(a,b,c)
  %175 = fadd fast float %174, %165
  %176 = fmul fast float %151, %118
  %177 = call float @dx.op.tertiary.f32(i32 46, float %120, float %156, float %176)  ; FMad(a,b,c)
  %178 = call float @dx.op.tertiary.f32(i32 46, float %147, float %161, float %177)  ; FMad(a,b,c)
  %179 = fadd fast float %178, %166
  %180 = fmul fast float %152, %118
  %181 = call float @dx.op.tertiary.f32(i32 46, float %120, float %157, float %180)  ; FMad(a,b,c)
  %182 = call float @dx.op.tertiary.f32(i32 46, float %147, float %162, float %181)  ; FMad(a,b,c)
  %183 = fadd fast float %182, %167
  %184 = fdiv fast float %171, %183
  %185 = fdiv fast float %175, %183
  %186 = fdiv fast float %179, %183
  %187 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %188 = extractvalue %dx.types.CBufRet.f32 %187, 2
  %189 = extractvalue %dx.types.CBufRet.f32 %187, 3
  %190 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %191 = extractvalue %dx.types.CBufRet.f32 %190, 2
  %192 = extractvalue %dx.types.CBufRet.f32 %190, 3
  %193 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %194 = extractvalue %dx.types.CBufRet.f32 %193, 2
  %195 = extractvalue %dx.types.CBufRet.f32 %193, 3
  %196 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %197 = extractvalue %dx.types.CBufRet.f32 %196, 2
  %198 = extractvalue %dx.types.CBufRet.f32 %196, 3
  %199 = fmul fast float %188, %184
  %200 = call float @dx.op.tertiary.f32(i32 46, float %185, float %191, float %199)  ; FMad(a,b,c)
  %201 = call float @dx.op.tertiary.f32(i32 46, float %186, float %194, float %200)  ; FMad(a,b,c)
  %202 = fadd fast float %201, %197
  %203 = fmul fast float %189, %184
  %204 = call float @dx.op.tertiary.f32(i32 46, float %185, float %192, float %203)  ; FMad(a,b,c)
  %205 = call float @dx.op.tertiary.f32(i32 46, float %186, float %195, float %204)  ; FMad(a,b,c)
  %206 = fadd fast float %205, %198
  %207 = fdiv fast float %202, %206
  %208 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %209 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %208, i32 0, i32 %45, i32 %46, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %210 = extractvalue %dx.types.ResRet.f32 %209, 0
  %211 = fcmp fast ogt float %210, %207
  br i1 %211, label %212, label %214

; <label>:212                                     ; preds = %146
  %213 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %213, i32 %45, i32 %46, i32 %47, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %2295

; <label>:214                                     ; preds = %146
  %215 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %216 = extractvalue %dx.types.CBufRet.f32 %215, 0
  %217 = extractvalue %dx.types.CBufRet.f32 %215, 1
  %218 = extractvalue %dx.types.CBufRet.f32 %215, 3
  %219 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %220 = extractvalue %dx.types.CBufRet.f32 %219, 0
  %221 = extractvalue %dx.types.CBufRet.f32 %219, 1
  %222 = extractvalue %dx.types.CBufRet.f32 %219, 3
  %223 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %224 = extractvalue %dx.types.CBufRet.f32 %223, 0
  %225 = extractvalue %dx.types.CBufRet.f32 %223, 1
  %226 = extractvalue %dx.types.CBufRet.f32 %223, 3
  %227 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %228 = extractvalue %dx.types.CBufRet.f32 %227, 0
  %229 = extractvalue %dx.types.CBufRet.f32 %227, 1
  %230 = extractvalue %dx.types.CBufRet.f32 %227, 3
  %231 = fmul fast float %216, %184
  %232 = call float @dx.op.tertiary.f32(i32 46, float %185, float %220, float %231)  ; FMad(a,b,c)
  %233 = call float @dx.op.tertiary.f32(i32 46, float %186, float %224, float %232)  ; FMad(a,b,c)
  %234 = fadd fast float %233, %228
  %235 = fmul fast float %217, %184
  %236 = call float @dx.op.tertiary.f32(i32 46, float %185, float %221, float %235)  ; FMad(a,b,c)
  %237 = call float @dx.op.tertiary.f32(i32 46, float %186, float %225, float %236)  ; FMad(a,b,c)
  %238 = fadd fast float %237, %229
  %239 = fmul fast float %218, %184
  %240 = call float @dx.op.tertiary.f32(i32 46, float %185, float %222, float %239)  ; FMad(a,b,c)
  %241 = call float @dx.op.tertiary.f32(i32 46, float %186, float %226, float %240)  ; FMad(a,b,c)
  %242 = fadd fast float %241, %230
  %243 = fdiv fast float %234, %242
  %244 = fdiv fast float %238, %242
  %245 = fmul fast float %243, 5.000000e-01
  %246 = fmul fast float %244, 5.000000e-01
  %247 = fadd fast float %245, 5.000000e-01
  %248 = fsub fast float 5.000000e-01, %246
  %249 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %250 = extractvalue %dx.types.CBufRet.f32 %249, 0
  %251 = extractvalue %dx.types.CBufRet.f32 %249, 1
  %252 = fmul fast float %250, %247
  %253 = fmul fast float %251, %248
  %254 = fptoui float %252 to i32
  %255 = fptoui float %253 to i32
  %256 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %257 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %256, i32 0, i32 %254, i32 %255, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %258 = extractvalue %dx.types.ResRet.f32 %257, 0
  %259 = fcmp fast ogt float %258, %207
  br i1 %259, label %260, label %261

; <label>:260                                     ; preds = %214
  br label %261

; <label>:261                                     ; preds = %260, %214, %0
  %262 = phi i32 [ 1, %260 ], [ 0, %214 ], [ 0, %0 ]
  %263 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %264 = extractvalue %dx.types.CBufRet.f32 %263, 0
  %265 = extractvalue %dx.types.CBufRet.f32 %263, 1
  %266 = extractvalue %dx.types.CBufRet.f32 %263, 3
  %267 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %268 = extractvalue %dx.types.CBufRet.f32 %267, 0
  %269 = extractvalue %dx.types.CBufRet.f32 %267, 1
  %270 = extractvalue %dx.types.CBufRet.f32 %267, 3
  %271 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %272 = extractvalue %dx.types.CBufRet.f32 %271, 0
  %273 = extractvalue %dx.types.CBufRet.f32 %271, 1
  %274 = extractvalue %dx.types.CBufRet.f32 %271, 3
  %275 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %276 = extractvalue %dx.types.CBufRet.f32 %275, 0
  %277 = extractvalue %dx.types.CBufRet.f32 %275, 1
  %278 = extractvalue %dx.types.CBufRet.f32 %275, 3
  %279 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %280 = extractvalue %dx.types.CBufRet.f32 %279, 0
  %281 = extractvalue %dx.types.CBufRet.f32 %279, 1
  %282 = fdiv fast float %107, %280
  %283 = fdiv fast float %108, %281
  %284 = fmul fast float %282, 2.000000e+00
  %285 = fmul fast float %283, 2.000000e+00
  %286 = fadd fast float %284, -1.000000e+00
  %287 = fadd fast float %285, -1.000000e+00
  %288 = fsub fast float -0.000000e+00, %287
  %289 = fadd fast float %109, 5.000000e-01
  %290 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %291 = extractvalue %dx.types.CBufRet.f32 %290, 2
  %292 = fdiv fast float %289, %291
  %293 = call float @dx.op.unary.f32(i32 21, float %292)  ; Exp(value)
  %294 = extractvalue %dx.types.CBufRet.f32 %290, 1
  %295 = fsub fast float %293, %294
  %296 = extractvalue %dx.types.CBufRet.f32 %290, 0
  %297 = fdiv fast float %295, %296
  %298 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %299 = extractvalue %dx.types.CBufRet.f32 %298, 3
  %300 = fcmp fast ult float %299, 1.000000e+00
  br i1 %300, label %307, label %301, !dx.controlflow.hints !55

; <label>:301                                     ; preds = %261
  %302 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %303 = extractvalue %dx.types.CBufRet.f32 %302, 2
  %304 = fmul fast float %303, %297
  %305 = extractvalue %dx.types.CBufRet.f32 %298, 2
  %306 = fadd fast float %304, %305
  br label %314

; <label>:307                                     ; preds = %261
  %308 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %309 = extractvalue %dx.types.CBufRet.f32 %308, 3
  %310 = fadd fast float %309, %297
  %311 = extractvalue %dx.types.CBufRet.f32 %308, 2
  %312 = fmul fast float %310, %311
  %313 = fdiv fast float 1.000000e+00, %312
  br label %314

; <label>:314                                     ; preds = %307, %301
  %315 = phi float [ %306, %301 ], [ %313, %307 ]
  %316 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %317 = extractvalue %dx.types.CBufRet.f32 %316, 0
  %318 = extractvalue %dx.types.CBufRet.f32 %316, 1
  %319 = extractvalue %dx.types.CBufRet.f32 %316, 2
  %320 = extractvalue %dx.types.CBufRet.f32 %316, 3
  %321 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %322 = extractvalue %dx.types.CBufRet.f32 %321, 0
  %323 = extractvalue %dx.types.CBufRet.f32 %321, 1
  %324 = extractvalue %dx.types.CBufRet.f32 %321, 2
  %325 = extractvalue %dx.types.CBufRet.f32 %321, 3
  %326 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %327 = extractvalue %dx.types.CBufRet.f32 %326, 0
  %328 = extractvalue %dx.types.CBufRet.f32 %326, 1
  %329 = extractvalue %dx.types.CBufRet.f32 %326, 2
  %330 = extractvalue %dx.types.CBufRet.f32 %326, 3
  %331 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %332 = extractvalue %dx.types.CBufRet.f32 %331, 0
  %333 = extractvalue %dx.types.CBufRet.f32 %331, 1
  %334 = extractvalue %dx.types.CBufRet.f32 %331, 2
  %335 = extractvalue %dx.types.CBufRet.f32 %331, 3
  %336 = fmul fast float %317, %286
  %337 = call float @dx.op.tertiary.f32(i32 46, float %288, float %322, float %336)  ; FMad(a,b,c)
  %338 = call float @dx.op.tertiary.f32(i32 46, float %315, float %327, float %337)  ; FMad(a,b,c)
  %339 = fadd fast float %338, %332
  %340 = fmul fast float %318, %286
  %341 = call float @dx.op.tertiary.f32(i32 46, float %288, float %323, float %340)  ; FMad(a,b,c)
  %342 = call float @dx.op.tertiary.f32(i32 46, float %315, float %328, float %341)  ; FMad(a,b,c)
  %343 = fadd fast float %342, %333
  %344 = fmul fast float %319, %286
  %345 = call float @dx.op.tertiary.f32(i32 46, float %288, float %324, float %344)  ; FMad(a,b,c)
  %346 = call float @dx.op.tertiary.f32(i32 46, float %315, float %329, float %345)  ; FMad(a,b,c)
  %347 = fadd fast float %346, %334
  %348 = fmul fast float %320, %286
  %349 = call float @dx.op.tertiary.f32(i32 46, float %288, float %325, float %348)  ; FMad(a,b,c)
  %350 = call float @dx.op.tertiary.f32(i32 46, float %315, float %330, float %349)  ; FMad(a,b,c)
  %351 = fadd fast float %350, %335
  %352 = fdiv fast float %339, %351
  %353 = fdiv fast float %343, %351
  %354 = fdiv fast float %347, %351
  %355 = fmul fast float %352, %264
  %356 = call float @dx.op.tertiary.f32(i32 46, float %353, float %268, float %355)  ; FMad(a,b,c)
  %357 = call float @dx.op.tertiary.f32(i32 46, float %354, float %272, float %356)  ; FMad(a,b,c)
  %358 = fadd fast float %357, %276
  %359 = fmul fast float %352, %265
  %360 = call float @dx.op.tertiary.f32(i32 46, float %353, float %269, float %359)  ; FMad(a,b,c)
  %361 = call float @dx.op.tertiary.f32(i32 46, float %354, float %273, float %360)  ; FMad(a,b,c)
  %362 = fadd fast float %361, %277
  %363 = fmul fast float %352, %266
  %364 = call float @dx.op.tertiary.f32(i32 46, float %353, float %270, float %363)  ; FMad(a,b,c)
  %365 = call float @dx.op.tertiary.f32(i32 46, float %354, float %274, float %364)  ; FMad(a,b,c)
  %366 = fadd fast float %365, %278
  %367 = fdiv fast float %358, %366
  %368 = fdiv fast float %362, %366
  %369 = fmul fast float %367, 5.000000e-01
  %370 = fmul fast float %368, 5.000000e-01
  %371 = fadd fast float %369, 5.000000e-01
  %372 = fsub fast float 5.000000e-01, %370
  %373 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 230)  ; CBufferLoadLegacy(handle,regIndex)
  %374 = extractvalue %dx.types.CBufRet.f32 %373, 0
  %375 = fmul fast float %374, %366
  %376 = extractvalue %dx.types.CBufRet.f32 %373, 1
  %377 = fadd fast float %375, %376
  %378 = call float @dx.op.unary.f32(i32 23, float %377)  ; Log(value)
  %379 = extractvalue %dx.types.CBufRet.f32 %373, 2
  %380 = fmul fast float %379, %378
  %381 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 229)  ; CBufferLoadLegacy(handle,regIndex)
  %382 = extractvalue %dx.types.CBufRet.f32 %381, 2
  %383 = fmul fast float %380, %382
  %384 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 231)  ; CBufferLoadLegacy(handle,regIndex)
  %385 = extractvalue %dx.types.CBufRet.f32 %384, 2
  %386 = extractvalue %dx.types.CBufRet.f32 %384, 3
  %387 = fmul fast float %385, %371
  %388 = fmul fast float %386, %372
  %389 = fcmp fast olt float %387, 0.000000e+00
  %390 = fcmp fast olt float %388, 0.000000e+00
  %391 = fcmp fast olt float %383, 0.000000e+00
  %392 = or i1 %389, %390
  %393 = or i1 %391, %392
  br i1 %393, label %404, label %394

; <label>:394                                     ; preds = %314
  %395 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %396 = extractvalue %dx.types.CBufRet.f32 %395, 0
  %397 = fcmp fast ogt float %387, 1.000000e+00
  %398 = fcmp fast ogt float %388, 1.000000e+00
  %399 = fcmp fast ogt float %383, 1.000000e+00
  %400 = or i1 %397, %398
  %401 = or i1 %399, %400
  %402 = icmp ne i32 %262, 0
  %403 = or i1 %402, %401
  br i1 %403, label %404, label %405

; <label>:404                                     ; preds = %394, %314
  br label %405

; <label>:405                                     ; preds = %404, %394
  %406 = phi float [ 0.000000e+00, %404 ], [ %396, %394 ]
  %407 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %408 = extractvalue %dx.types.CBufRet.i32 %407, 0
  %409 = mul i32 %45, 1664525
  %410 = mul i32 %46, 1664525
  %411 = mul i32 %47, 1664525
  %412 = mul i32 %408, 1664525
  %413 = add i32 %409, 1013904223
  %414 = add i32 %410, 1013904223
  %415 = add i32 %411, 1013904223
  %416 = add i32 %412, 1013904223
  %417 = mul i32 %416, %414
  %418 = add i32 %413, %417
  %419 = mul i32 %418, %415
  %420 = add i32 %419, %414
  %421 = mul i32 %420, %418
  %422 = add i32 %421, %415
  %423 = mul i32 %422, %420
  %424 = add i32 %423, %416
  %425 = lshr i32 %418, 16
  %426 = lshr i32 %420, 16
  %427 = lshr i32 %422, 16
  %428 = lshr i32 %424, 16
  %429 = xor i32 %425, %418
  %430 = xor i32 %426, %420
  %431 = xor i32 %427, %422
  %432 = xor i32 %428, %424
  %433 = mul i32 %432, %430
  %434 = add i32 %433, %429
  %435 = mul i32 %434, %431
  %436 = add i32 %435, %430
  %437 = mul i32 %436, %434
  %438 = add i32 %437, %431
  %439 = uitofp i32 %434 to float
  %440 = uitofp i32 %436 to float
  %441 = uitofp i32 %438 to float
  %442 = fmul fast float %439, 0x3E00000000000000
  %443 = fmul fast float %440, 0x3E00000000000000
  %444 = fmul fast float %441, 0x3E00000000000000
  %445 = fadd fast float %442, -1.000000e+00
  %446 = fadd fast float %443, -1.000000e+00
  %447 = fadd fast float %444, -1.000000e+00
  %448 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %449 = extractvalue %dx.types.CBufRet.f32 %448, 0
  %450 = extractvalue %dx.types.CBufRet.f32 %448, 1
  %451 = extractvalue %dx.types.CBufRet.f32 %448, 2
  %452 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %453 = extractvalue %dx.types.CBufRet.f32 %452, 3
  %454 = fmul fast float %445, %453
  %455 = fmul fast float %446, %453
  %456 = fmul fast float %447, %453
  %457 = fadd fast float %454, %449
  %458 = fadd fast float %455, %450
  %459 = fadd fast float %456, %451
  %460 = fadd fast float %457, %105
  %461 = fadd fast float %458, %106
  %462 = fdiv fast float %460, %280
  %463 = fdiv fast float %461, %281
  %464 = fmul fast float %462, 2.000000e+00
  %465 = fmul fast float %463, 2.000000e+00
  %466 = fadd fast float %464, -1.000000e+00
  %467 = fadd fast float %465, -1.000000e+00
  %468 = fsub fast float -0.000000e+00, %467
  %469 = fadd fast float %459, %109
  %470 = fdiv fast float %469, %291
  %471 = call float @dx.op.unary.f32(i32 21, float %470)  ; Exp(value)
  %472 = fsub fast float %471, %294
  %473 = fdiv fast float %472, %296
  br i1 %300, label %480, label %474, !dx.controlflow.hints !55

; <label>:474                                     ; preds = %405
  %475 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %476 = extractvalue %dx.types.CBufRet.f32 %475, 2
  %477 = fmul fast float %476, %473
  %478 = extractvalue %dx.types.CBufRet.f32 %298, 2
  %479 = fadd fast float %477, %478
  br label %487

; <label>:480                                     ; preds = %405
  %481 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %482 = extractvalue %dx.types.CBufRet.f32 %481, 3
  %483 = fadd fast float %482, %473
  %484 = extractvalue %dx.types.CBufRet.f32 %481, 2
  %485 = fmul fast float %483, %484
  %486 = fdiv fast float 1.000000e+00, %485
  br label %487

; <label>:487                                     ; preds = %480, %474
  %488 = phi float [ %479, %474 ], [ %486, %480 ]
  %489 = fmul fast float %317, %466
  %490 = call float @dx.op.tertiary.f32(i32 46, float %468, float %322, float %489)  ; FMad(a,b,c)
  %491 = call float @dx.op.tertiary.f32(i32 46, float %488, float %327, float %490)  ; FMad(a,b,c)
  %492 = fadd fast float %491, %332
  %493 = fmul fast float %318, %466
  %494 = call float @dx.op.tertiary.f32(i32 46, float %468, float %323, float %493)  ; FMad(a,b,c)
  %495 = call float @dx.op.tertiary.f32(i32 46, float %488, float %328, float %494)  ; FMad(a,b,c)
  %496 = fadd fast float %495, %333
  %497 = fmul fast float %319, %466
  %498 = call float @dx.op.tertiary.f32(i32 46, float %468, float %324, float %497)  ; FMad(a,b,c)
  %499 = call float @dx.op.tertiary.f32(i32 46, float %488, float %329, float %498)  ; FMad(a,b,c)
  %500 = fadd fast float %499, %334
  %501 = fmul fast float %320, %466
  %502 = call float @dx.op.tertiary.f32(i32 46, float %468, float %325, float %501)  ; FMad(a,b,c)
  %503 = call float @dx.op.tertiary.f32(i32 46, float %488, float %330, float %502)  ; FMad(a,b,c)
  %504 = fadd fast float %503, %335
  %505 = fdiv fast float %492, %504
  %506 = fdiv fast float %496, %504
  %507 = fdiv fast float %500, %504
  %508 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %509 = extractvalue %dx.types.CBufRet.f32 %508, 0
  %510 = extractvalue %dx.types.CBufRet.f32 %508, 1
  %511 = extractvalue %dx.types.CBufRet.f32 %508, 2
  %512 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %513 = extractvalue %dx.types.CBufRet.f32 %512, 0
  %514 = extractvalue %dx.types.CBufRet.f32 %512, 1
  %515 = extractvalue %dx.types.CBufRet.f32 %512, 2
  %516 = fmul fast float %509, 2.097152e+06
  %517 = fmul fast float %510, 2.097152e+06
  %518 = fmul fast float %511, 2.097152e+06
  %519 = fadd fast float %516, %505
  %520 = fsub fast float %519, %513
  %521 = fadd fast float %517, %506
  %522 = fsub fast float %521, %514
  %523 = fadd fast float %518, %507
  %524 = fsub fast float %523, %515
  %525 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %526 = extractvalue %dx.types.CBufRet.f32 %525, 0
  %527 = extractvalue %dx.types.CBufRet.f32 %525, 1
  %528 = extractvalue %dx.types.CBufRet.f32 %525, 2
  %529 = fsub fast float %505, %526
  %530 = fsub fast float %506, %527
  %531 = fsub fast float %507, %528
  %532 = fmul fast float %529, %529
  %533 = fmul fast float %530, %530
  %534 = fadd fast float %532, %533
  %535 = fmul fast float %531, %531
  %536 = fadd fast float %534, %535
  %537 = call float @dx.op.unary.f32(i32 24, float %536)  ; Sqrt(value)
  %538 = fdiv fast float %529, %537
  %539 = fdiv fast float %530, %537
  %540 = fdiv fast float %531, %537
  %541 = icmp eq i32 %50, 0
  br i1 %541, label %542, label %544, !dx.controlflow.hints !56

; <label>:542                                     ; preds = %487
  %543 = extractvalue %dx.types.CBufRet.f32 %452, 1
  br label %1190

; <label>:544                                     ; preds = %487
  %545 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %546 = extractvalue %dx.types.CBufRet.f32 %545, 2
  %547 = fcmp fast ogt float %546, 0.000000e+00
  br i1 %547, label %548, label %1123

; <label>:548                                     ; preds = %544
  %549 = icmp eq i32 %81, 0
  br i1 %549, label %585, label %550, !dx.controlflow.hints !57

; <label>:550                                     ; preds = %548
  %551 = fmul fast float %505, %83
  %552 = call float @dx.op.tertiary.f32(i32 46, float %506, float %88, float %551)  ; FMad(a,b,c)
  %553 = call float @dx.op.tertiary.f32(i32 46, float %507, float %93, float %552)  ; FMad(a,b,c)
  %554 = fadd fast float %553, %98
  %555 = fmul fast float %505, %84
  %556 = call float @dx.op.tertiary.f32(i32 46, float %506, float %89, float %555)  ; FMad(a,b,c)
  %557 = call float @dx.op.tertiary.f32(i32 46, float %507, float %94, float %556)  ; FMad(a,b,c)
  %558 = fadd fast float %557, %99
  %559 = fmul fast float %505, %86
  %560 = call float @dx.op.tertiary.f32(i32 46, float %506, float %91, float %559)  ; FMad(a,b,c)
  %561 = call float @dx.op.tertiary.f32(i32 46, float %507, float %96, float %560)  ; FMad(a,b,c)
  %562 = fadd fast float %561, %101
  %563 = fdiv fast float %554, %562
  %564 = fdiv fast float %558, %562
  %565 = fcmp fast ole float %563, 1.000000e+00
  %566 = fcmp fast ole float %564, 1.000000e+00
  %567 = fcmp fast oge float %563, 0.000000e+00
  %568 = fcmp fast oge float %564, 0.000000e+00
  %569 = and i1 %567, %565
  %570 = and i1 %568, %566
  %571 = and i1 %569, %570
  br i1 %571, label %572, label %585

; <label>:572                                     ; preds = %550
  %573 = fmul fast float %505, %85
  %574 = call float @dx.op.tertiary.f32(i32 46, float %506, float %90, float %573)  ; FMad(a,b,c)
  %575 = call float @dx.op.tertiary.f32(i32 46, float %507, float %95, float %574)  ; FMad(a,b,c)
  %576 = fadd fast float %575, %100
  %577 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %578 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %579 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %577, %dx.types.Handle %578, float %563, float %564, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %580 = extractvalue %dx.types.ResRet.f32 %579, 0
  %581 = fcmp fast olt float %576, %580
  %582 = fcmp fast ogt float %580, 0x3FEFAE1480000000
  %583 = or i1 %581, %582
  %584 = uitofp i1 %583 to float
  br label %585

; <label>:585                                     ; preds = %572, %550, %548
  %586 = phi float [ %584, %572 ], [ 1.000000e+00, %550 ], [ 1.000000e+00, %548 ]
  %587 = icmp eq i32 %71, 0
  br i1 %587, label %667, label %588

; <label>:588                                     ; preds = %585
  %589 = fcmp fast oge float %473, %74
  %590 = fcmp fast oge float %473, %75
  %591 = fcmp fast oge float %473, %76
  %592 = fcmp fast oge float %473, %77
  %593 = zext i1 %589 to i32
  %594 = zext i1 %590 to i32
  %595 = zext i1 %591 to i32
  %596 = zext i1 %592 to i32
  %597 = add nuw nsw i32 %593, %594
  %598 = add nuw nsw i32 %597, %595
  %599 = add nuw nsw i32 %598, %596
  %600 = icmp ult i32 %599, %71
  br i1 %600, label %601, label %667

; <label>:601                                     ; preds = %588
  %602 = shl nuw nsw i32 %599, 2
  %603 = add nuw nsw i32 %602, 9
  %604 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 %603)  ; CBufferLoadLegacy(handle,regIndex)
  %605 = extractvalue %dx.types.CBufRet.f32 %604, 0
  %606 = extractvalue %dx.types.CBufRet.f32 %604, 1
  %607 = extractvalue %dx.types.CBufRet.f32 %604, 3
  %608 = add nuw nsw i32 %602, 10
  %609 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 %608)  ; CBufferLoadLegacy(handle,regIndex)
  %610 = extractvalue %dx.types.CBufRet.f32 %609, 0
  %611 = extractvalue %dx.types.CBufRet.f32 %609, 1
  %612 = extractvalue %dx.types.CBufRet.f32 %609, 3
  %613 = add nuw nsw i32 %602, 11
  %614 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 %613)  ; CBufferLoadLegacy(handle,regIndex)
  %615 = extractvalue %dx.types.CBufRet.f32 %614, 0
  %616 = extractvalue %dx.types.CBufRet.f32 %614, 1
  %617 = extractvalue %dx.types.CBufRet.f32 %614, 3
  %618 = add nuw nsw i32 %602, 12
  %619 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 %618)  ; CBufferLoadLegacy(handle,regIndex)
  %620 = extractvalue %dx.types.CBufRet.f32 %619, 0
  %621 = extractvalue %dx.types.CBufRet.f32 %619, 1
  %622 = extractvalue %dx.types.CBufRet.f32 %619, 3
  %623 = fmul fast float %605, %505
  %624 = call float @dx.op.tertiary.f32(i32 46, float %506, float %610, float %623)  ; FMad(a,b,c)
  %625 = call float @dx.op.tertiary.f32(i32 46, float %507, float %615, float %624)  ; FMad(a,b,c)
  %626 = fadd fast float %625, %620
  %627 = fmul fast float %606, %505
  %628 = call float @dx.op.tertiary.f32(i32 46, float %506, float %611, float %627)  ; FMad(a,b,c)
  %629 = call float @dx.op.tertiary.f32(i32 46, float %507, float %616, float %628)  ; FMad(a,b,c)
  %630 = fadd fast float %629, %621
  %631 = fmul fast float %607, %505
  %632 = call float @dx.op.tertiary.f32(i32 46, float %506, float %612, float %631)  ; FMad(a,b,c)
  %633 = call float @dx.op.tertiary.f32(i32 46, float %507, float %617, float %632)  ; FMad(a,b,c)
  %634 = fadd fast float %633, %622
  %635 = fdiv fast float %626, %634
  %636 = fdiv fast float %630, %634
  %637 = add nuw nsw i32 %599, 25
  %638 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 %637)  ; CBufferLoadLegacy(handle,regIndex)
  %639 = extractvalue %dx.types.CBufRet.f32 %638, 0
  %640 = extractvalue %dx.types.CBufRet.f32 %638, 1
  %641 = extractvalue %dx.types.CBufRet.f32 %638, 2
  %642 = extractvalue %dx.types.CBufRet.f32 %638, 3
  %643 = fcmp fast ole float %635, %641
  %644 = fcmp fast ole float %636, %642
  %645 = fcmp fast oge float %635, %639
  %646 = fcmp fast oge float %636, %640
  %647 = and i1 %645, %643
  %648 = and i1 %646, %644
  %649 = and i1 %647, %648
  br i1 %649, label %650, label %667

; <label>:650                                     ; preds = %601
  %651 = extractvalue %dx.types.CBufRet.f32 %619, 2
  %652 = extractvalue %dx.types.CBufRet.f32 %614, 2
  %653 = extractvalue %dx.types.CBufRet.f32 %609, 2
  %654 = extractvalue %dx.types.CBufRet.f32 %604, 2
  %655 = fmul fast float %654, %505
  %656 = call float @dx.op.tertiary.f32(i32 46, float %506, float %653, float %655)  ; FMad(a,b,c)
  %657 = call float @dx.op.tertiary.f32(i32 46, float %507, float %652, float %656)  ; FMad(a,b,c)
  %658 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %659 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %660 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %658, %dx.types.Handle %659, float %635, float %636, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %661 = extractvalue %dx.types.ResRet.f32 %660, 0
  %662 = fsub fast float 1.000000e+00, %651
  %663 = fsub fast float %662, %657
  %664 = fsub fast float %661, %79
  %665 = fcmp fast olt float %663, %664
  %666 = uitofp i1 %665 to float
  br label %667

; <label>:667                                     ; preds = %650, %601, %588, %585
  %668 = phi float [ %666, %650 ], [ 1.000000e+00, %601 ], [ 1.000000e+00, %588 ], [ 1.000000e+00, %585 ]
  %669 = fmul fast float %668, %586
  %670 = fsub fast float %505, %513
  %671 = fsub fast float %506, %514
  %672 = fsub fast float %507, %515
  %673 = mul i32 %72, 336
  %674 = add i32 %673, 128
  %675 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %676 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %674, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %677 = add i32 %673, 144
  %678 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %677, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %679 = add i32 %673, 160
  %680 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %679, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %681 = add i32 %673, 176
  %682 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %681, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %683 = add i32 %673, 256
  %684 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %683, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %685 = extractvalue %dx.types.ResRet.i32 %684, 0
  %686 = extractvalue %dx.types.ResRet.i32 %684, 1
  %687 = extractvalue %dx.types.ResRet.i32 %684, 2
  %688 = bitcast i32 %685 to float
  %689 = bitcast i32 %686 to float
  %690 = bitcast i32 %687 to float
  %691 = add i32 %673, 268
  %692 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %691, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %693 = extractvalue %dx.types.ResRet.i32 %692, 0
  %694 = add i32 %673, 272
  %695 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %694, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %696 = add i32 %673, 288
  %697 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %696, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %698 = icmp eq i32 %693, 0
  %699 = fadd fast float %688, %509
  %700 = fadd fast float %689, %510
  %701 = fadd fast float %690, %511
  %702 = fmul fast float %699, 2.097152e+06
  %703 = fmul fast float %700, 2.097152e+06
  %704 = fmul fast float %701, 2.097152e+06
  %705 = fadd fast float %702, %670
  %706 = fadd fast float %703, %671
  %707 = fadd fast float %704, %672
  br i1 %698, label %708, label %948

; <label>:708                                     ; preds = %667
  %709 = extractvalue %dx.types.ResRet.i32 %697, 2
  %710 = bitcast i32 %709 to float
  %711 = extractvalue %dx.types.ResRet.i32 %697, 1
  %712 = bitcast i32 %711 to float
  %713 = extractvalue %dx.types.ResRet.i32 %697, 0
  %714 = bitcast i32 %713 to float
  %715 = add i32 %673, 320
  %716 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %715, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %717 = extractvalue %dx.types.ResRet.i32 %716, 0
  %718 = add i32 %673, 316
  %719 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %718, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %720 = extractvalue %dx.types.ResRet.i32 %719, 0
  %721 = add i32 %673, 300
  %722 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %721, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %723 = extractvalue %dx.types.ResRet.i32 %722, 0
  %724 = bitcast i32 %723 to float
  %725 = fadd fast float %705, %714
  %726 = fadd fast float %706, %712
  %727 = fadd fast float %707, %710
  %728 = fmul fast float %725, %725
  %729 = fmul fast float %726, %726
  %730 = fadd fast float %728, %729
  %731 = fmul fast float %727, %727
  %732 = fadd fast float %730, %731
  %733 = call float @dx.op.unary.f32(i32 24, float %732)  ; Sqrt(value)
  %734 = call float @dx.op.unary.f32(i32 23, float %733)  ; Log(value)
  %735 = fadd fast float %734, %724
  %736 = call float @dx.op.unary.f32(i32 27, float %735)  ; Round_ni(value)
  %737 = fptosi float %736 to i32
  %738 = sub nsw i32 %737, %720
  %739 = call i32 @dx.op.binary.i32(i32 37, i32 0, i32 %738)  ; IMax(a,b)
  %740 = icmp slt i32 %739, %717
  br i1 %740, label %741, label %1120

; <label>:741                                     ; preds = %708
  %742 = add nsw i32 %739, %72
  %743 = mul i32 %742, 336
  %744 = add i32 %743, 128
  %745 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %744, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %746 = extractvalue %dx.types.ResRet.i32 %745, 0
  %747 = extractvalue %dx.types.ResRet.i32 %745, 1
  %748 = extractvalue %dx.types.ResRet.i32 %745, 2
  %749 = bitcast i32 %746 to float
  %750 = bitcast i32 %747 to float
  %751 = bitcast i32 %748 to float
  %752 = add i32 %743, 144
  %753 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %752, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %754 = extractvalue %dx.types.ResRet.i32 %753, 0
  %755 = extractvalue %dx.types.ResRet.i32 %753, 1
  %756 = extractvalue %dx.types.ResRet.i32 %753, 2
  %757 = bitcast i32 %754 to float
  %758 = bitcast i32 %755 to float
  %759 = bitcast i32 %756 to float
  %760 = add i32 %743, 160
  %761 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %760, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %762 = extractvalue %dx.types.ResRet.i32 %761, 0
  %763 = extractvalue %dx.types.ResRet.i32 %761, 1
  %764 = extractvalue %dx.types.ResRet.i32 %761, 2
  %765 = bitcast i32 %762 to float
  %766 = bitcast i32 %763 to float
  %767 = bitcast i32 %764 to float
  %768 = add i32 %743, 176
  %769 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %768, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %770 = extractvalue %dx.types.ResRet.i32 %769, 0
  %771 = extractvalue %dx.types.ResRet.i32 %769, 1
  %772 = extractvalue %dx.types.ResRet.i32 %769, 2
  %773 = bitcast i32 %770 to float
  %774 = bitcast i32 %771 to float
  %775 = bitcast i32 %772 to float
  %776 = add i32 %743, 256
  %777 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %776, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %778 = extractvalue %dx.types.ResRet.i32 %777, 0
  %779 = extractvalue %dx.types.ResRet.i32 %777, 1
  %780 = extractvalue %dx.types.ResRet.i32 %777, 2
  %781 = bitcast i32 %778 to float
  %782 = bitcast i32 %779 to float
  %783 = bitcast i32 %780 to float
  %784 = add i32 %743, 272
  %785 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %784, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %786 = extractvalue %dx.types.ResRet.i32 %785, 0
  %787 = extractvalue %dx.types.ResRet.i32 %785, 1
  %788 = extractvalue %dx.types.ResRet.i32 %785, 2
  %789 = bitcast i32 %786 to float
  %790 = bitcast i32 %787 to float
  %791 = bitcast i32 %788 to float
  %792 = fadd fast float %781, %509
  %793 = fadd fast float %782, %510
  %794 = fadd fast float %783, %511
  %795 = fmul fast float %792, 2.097152e+06
  %796 = fmul fast float %793, 2.097152e+06
  %797 = fmul fast float %794, 2.097152e+06
  %798 = fadd fast float %795, %670
  %799 = fadd fast float %798, %789
  %800 = fadd fast float %796, %671
  %801 = fadd fast float %800, %790
  %802 = fadd fast float %797, %672
  %803 = fadd fast float %802, %791
  %804 = fmul fast float %799, %749
  %805 = call float @dx.op.tertiary.f32(i32 46, float %801, float %757, float %804)  ; FMad(a,b,c)
  %806 = call float @dx.op.tertiary.f32(i32 46, float %803, float %765, float %805)  ; FMad(a,b,c)
  %807 = fadd fast float %806, %773
  %808 = fmul fast float %799, %750
  %809 = call float @dx.op.tertiary.f32(i32 46, float %801, float %758, float %808)  ; FMad(a,b,c)
  %810 = call float @dx.op.tertiary.f32(i32 46, float %803, float %766, float %809)  ; FMad(a,b,c)
  %811 = fadd fast float %810, %774
  %812 = fmul fast float %799, %751
  %813 = call float @dx.op.tertiary.f32(i32 46, float %801, float %759, float %812)  ; FMad(a,b,c)
  %814 = call float @dx.op.tertiary.f32(i32 46, float %803, float %767, float %813)  ; FMad(a,b,c)
  %815 = fadd fast float %814, %775
  %816 = fmul fast float %807, 1.280000e+02
  %817 = fmul fast float %811, 1.280000e+02
  %818 = fptoui float %816 to i32
  %819 = fptoui float %817 to i32
  %820 = icmp ult i32 %742, 8192
  br i1 %820, label %827, label %821

; <label>:821                                     ; preds = %741
  %822 = mul i32 %742, 21845
  %823 = shl i32 %819, 7
  %824 = add i32 %822, -178946048
  %825 = add i32 %824, %818
  %826 = add i32 %825, %823
  br label %827

; <label>:827                                     ; preds = %821, %741
  %828 = phi i32 [ %826, %821 ], [ %742, %741 ]
  %829 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %830 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %829, i32 %828, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %831 = extractvalue %dx.types.ResRet.i32 %830, 0
  %832 = lshr i32 %831, 20
  %833 = and i32 %832, 63
  %834 = and i32 %831, 134217728
  %835 = icmp eq i32 %834, 0
  br i1 %835, label %942, label %836

; <label>:836                                     ; preds = %827
  %837 = icmp eq i32 %833, 0
  %838 = zext i1 %837 to i32
  %839 = add i32 %833, %742
  %840 = fmul fast float %807, 1.638400e+04
  %841 = fmul fast float %811, 1.638400e+04
  %842 = fptoui float %840 to i32
  %843 = fptoui float %841 to i32
  br i1 %837, label %919, label %844

; <label>:844                                     ; preds = %836
  %845 = add i32 %743, 304
  %846 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %845, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %847 = extractvalue %dx.types.ResRet.i32 %846, 0
  %848 = extractvalue %dx.types.ResRet.i32 %846, 1
  %849 = mul i32 %839, 336
  %850 = add i32 %849, 304
  %851 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %850, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %852 = extractvalue %dx.types.ResRet.i32 %851, 0
  %853 = extractvalue %dx.types.ResRet.i32 %851, 1
  %854 = shl i32 %847, 5
  %855 = shl i32 %848, 5
  %856 = shl i32 %852, 5
  %857 = shl i32 %853, 5
  %858 = sub i32 %818, %854
  %859 = sub i32 %819, %855
  %860 = and i32 %832, 31
  %861 = shl i32 %856, %860
  %862 = shl i32 %857, %860
  %863 = add i32 %858, %861
  %864 = add i32 %859, %862
  %865 = lshr i32 %863, %860
  %866 = lshr i32 %864, %860
  %867 = shl i32 %865, 7
  %868 = shl i32 %866, 7
  %869 = or i32 %867, 127
  %870 = or i32 %868, 127
  %871 = add i32 %743, 112
  %872 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %871, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %873 = extractvalue %dx.types.ResRet.i32 %872, 2
  %874 = bitcast i32 %873 to float
  %875 = add i32 %849, 112
  %876 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %875, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %877 = extractvalue %dx.types.ResRet.i32 %876, 2
  %878 = bitcast i32 %877 to float
  %879 = sitofp i32 %847 to float
  %880 = sitofp i32 %848 to float
  %881 = sitofp i32 %852 to float
  %882 = sitofp i32 %853 to float
  %883 = shl i32 1, %860
  %884 = uitofp i32 %883 to float
  %885 = fdiv fast float 1.000000e+00, %884
  %886 = fmul fast float %885, %879
  %887 = fmul fast float %885, %880
  %888 = fsub fast float %881, %886
  %889 = fsub fast float %882, %887
  %890 = fmul fast float %888, 2.500000e-01
  %891 = fmul fast float %889, 2.500000e-01
  %892 = fmul fast float %885, %874
  %893 = fsub fast float %878, %892
  %894 = fmul fast float %885, %807
  %895 = fmul fast float %885, %811
  %896 = fadd fast float %890, %894
  %897 = fadd fast float %891, %895
  %898 = fmul fast float %896, 1.638400e+04
  %899 = fmul fast float %897, 1.638400e+04
  %900 = fptoui float %898 to i32
  %901 = fptoui float %899 to i32
  %902 = call i32 @dx.op.binary.i32(i32 39, i32 %900, i32 %867)  ; UMax(a,b)
  %903 = call i32 @dx.op.binary.i32(i32 39, i32 %901, i32 %868)  ; UMax(a,b)
  %904 = call i32 @dx.op.binary.i32(i32 40, i32 %902, i32 %869)  ; UMin(a,b)
  %905 = call i32 @dx.op.binary.i32(i32 40, i32 %903, i32 %870)  ; UMin(a,b)
  %906 = icmp ult i32 %839, 8192
  br i1 %906, label %912, label %907

; <label>:907                                     ; preds = %844
  %908 = mul i32 %839, 21845
  %909 = add i32 %908, -178946048
  %910 = add i32 %909, %865
  %911 = add i32 %910, %868
  br label %912

; <label>:912                                     ; preds = %907, %844
  %913 = phi i32 [ %911, %907 ], [ %839, %844 ]
  %914 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %829, i32 %913, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %915 = extractvalue %dx.types.ResRet.i32 %914, 0
  %916 = and i32 %915, 200278016
  %917 = icmp eq i32 %916, 134217728
  %918 = zext i1 %917 to i32
  br label %919

; <label>:919                                     ; preds = %912, %836
  %920 = phi i32 [ %904, %912 ], [ %842, %836 ]
  %921 = phi i32 [ %905, %912 ], [ %843, %836 ]
  %922 = phi i32 [ %918, %912 ], [ %838, %836 ]
  %923 = phi i32 [ %915, %912 ], [ %831, %836 ]
  %924 = phi float [ %885, %912 ], [ 1.000000e+00, %836 ]
  %925 = phi float [ %893, %912 ], [ 0.000000e+00, %836 ]
  %926 = icmp eq i32 %922, 0
  br i1 %926, label %942, label %927

; <label>:927                                     ; preds = %919
  %928 = shl i32 %923, 7
  %929 = and i32 %928, 130944
  %930 = lshr i32 %923, 3
  %931 = and i32 %930, 130944
  %932 = and i32 %920, 127
  %933 = and i32 %921, 127
  %934 = or i32 %929, %932
  %935 = or i32 %931, %933
  %936 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %937 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %936, i32 0, i32 %934, i32 %935, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %938 = extractvalue %dx.types.ResRet.i32 %937, 0
  %939 = bitcast i32 %938 to float
  %940 = fsub fast float %939, %925
  %941 = fdiv fast float %940, %924
  br label %942

; <label>:942                                     ; preds = %927, %919, %827
  %943 = phi float [ %941, %927 ], [ 0.000000e+00, %919 ], [ 0.000000e+00, %827 ]
  %944 = phi i1 [ true, %927 ], [ false, %919 ], [ false, %827 ]
  %945 = fcmp fast ogt float %943, %815
  %946 = and i1 %944, %945
  %947 = select i1 %946, float 0.000000e+00, float 1.000000e+00
  br label %1120

; <label>:948                                     ; preds = %667
  %949 = extractvalue %dx.types.ResRet.i32 %682, 3
  %950 = extractvalue %dx.types.ResRet.i32 %682, 2
  %951 = extractvalue %dx.types.ResRet.i32 %682, 1
  %952 = extractvalue %dx.types.ResRet.i32 %682, 0
  %953 = extractvalue %dx.types.ResRet.i32 %680, 3
  %954 = extractvalue %dx.types.ResRet.i32 %680, 2
  %955 = extractvalue %dx.types.ResRet.i32 %680, 1
  %956 = extractvalue %dx.types.ResRet.i32 %680, 0
  %957 = extractvalue %dx.types.ResRet.i32 %678, 3
  %958 = extractvalue %dx.types.ResRet.i32 %678, 2
  %959 = extractvalue %dx.types.ResRet.i32 %678, 1
  %960 = extractvalue %dx.types.ResRet.i32 %678, 0
  %961 = extractvalue %dx.types.ResRet.i32 %676, 3
  %962 = extractvalue %dx.types.ResRet.i32 %676, 2
  %963 = extractvalue %dx.types.ResRet.i32 %676, 1
  %964 = extractvalue %dx.types.ResRet.i32 %676, 0
  %965 = extractvalue %dx.types.ResRet.i32 %695, 2
  %966 = bitcast i32 %965 to float
  %967 = extractvalue %dx.types.ResRet.i32 %695, 1
  %968 = bitcast i32 %967 to float
  %969 = extractvalue %dx.types.ResRet.i32 %695, 0
  %970 = bitcast i32 %969 to float
  %971 = fadd fast float %705, %970
  %972 = fadd fast float %706, %968
  %973 = fadd fast float %707, %966
  %974 = icmp eq i32 %693, 2
  br i1 %974, label %1021, label %975

; <label>:975                                     ; preds = %948
  %976 = call float @dx.op.unary.f32(i32 6, float %971)  ; FAbs(value)
  %977 = call float @dx.op.unary.f32(i32 6, float %972)  ; FAbs(value)
  %978 = fcmp fast ult float %976, %977
  %979 = call float @dx.op.unary.f32(i32 6, float %973)  ; FAbs(value)
  %980 = fcmp fast ult float %976, %979
  %981 = or i1 %978, %980
  br i1 %981, label %985, label %982

; <label>:982                                     ; preds = %975
  %983 = fcmp ule float %971, 0.000000e+00
  %984 = zext i1 %983 to i32
  br label %993

; <label>:985                                     ; preds = %975
  %986 = fcmp fast ogt float %977, %979
  br i1 %986, label %987, label %990

; <label>:987                                     ; preds = %985
  %988 = fcmp fast ogt float %972, 0.000000e+00
  %989 = select i1 %988, i32 2, i32 3
  br label %993

; <label>:990                                     ; preds = %985
  %991 = fcmp fast ogt float %973, 0.000000e+00
  %992 = select i1 %991, i32 4, i32 5
  br label %993

; <label>:993                                     ; preds = %990, %987, %982
  %994 = phi i32 [ %984, %982 ], [ %989, %987 ], [ %992, %990 ]
  %995 = add i32 %994, %72
  %996 = mul i32 %995, 336
  %997 = add i32 %996, 128
  %998 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %997, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %999 = extractvalue %dx.types.ResRet.i32 %998, 0
  %1000 = extractvalue %dx.types.ResRet.i32 %998, 1
  %1001 = extractvalue %dx.types.ResRet.i32 %998, 2
  %1002 = extractvalue %dx.types.ResRet.i32 %998, 3
  %1003 = add i32 %996, 144
  %1004 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %1003, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1005 = extractvalue %dx.types.ResRet.i32 %1004, 0
  %1006 = extractvalue %dx.types.ResRet.i32 %1004, 1
  %1007 = extractvalue %dx.types.ResRet.i32 %1004, 2
  %1008 = extractvalue %dx.types.ResRet.i32 %1004, 3
  %1009 = add i32 %996, 160
  %1010 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %1009, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1011 = extractvalue %dx.types.ResRet.i32 %1010, 0
  %1012 = extractvalue %dx.types.ResRet.i32 %1010, 1
  %1013 = extractvalue %dx.types.ResRet.i32 %1010, 2
  %1014 = extractvalue %dx.types.ResRet.i32 %1010, 3
  %1015 = add i32 %996, 176
  %1016 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %675, i32 %1015, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1017 = extractvalue %dx.types.ResRet.i32 %1016, 0
  %1018 = extractvalue %dx.types.ResRet.i32 %1016, 1
  %1019 = extractvalue %dx.types.ResRet.i32 %1016, 2
  %1020 = extractvalue %dx.types.ResRet.i32 %1016, 3
  br label %1021

; <label>:1021                                    ; preds = %993, %948
  %1022 = phi i32 [ %999, %993 ], [ %964, %948 ]
  %1023 = phi i32 [ %1000, %993 ], [ %963, %948 ]
  %1024 = phi i32 [ %1001, %993 ], [ %962, %948 ]
  %1025 = phi i32 [ %1002, %993 ], [ %961, %948 ]
  %1026 = phi i32 [ %1005, %993 ], [ %960, %948 ]
  %1027 = phi i32 [ %1006, %993 ], [ %959, %948 ]
  %1028 = phi i32 [ %1007, %993 ], [ %958, %948 ]
  %1029 = phi i32 [ %1008, %993 ], [ %957, %948 ]
  %1030 = phi i32 [ %1011, %993 ], [ %956, %948 ]
  %1031 = phi i32 [ %1012, %993 ], [ %955, %948 ]
  %1032 = phi i32 [ %1013, %993 ], [ %954, %948 ]
  %1033 = phi i32 [ %1014, %993 ], [ %953, %948 ]
  %1034 = phi i32 [ %1017, %993 ], [ %952, %948 ]
  %1035 = phi i32 [ %1018, %993 ], [ %951, %948 ]
  %1036 = phi i32 [ %1019, %993 ], [ %950, %948 ]
  %1037 = phi i32 [ %1020, %993 ], [ %949, %948 ]
  %1038 = phi i32 [ %995, %993 ], [ %72, %948 ]
  %1039 = bitcast i32 %1037 to float
  %1040 = bitcast i32 %1036 to float
  %1041 = bitcast i32 %1035 to float
  %1042 = bitcast i32 %1034 to float
  %1043 = bitcast i32 %1033 to float
  %1044 = bitcast i32 %1032 to float
  %1045 = bitcast i32 %1031 to float
  %1046 = bitcast i32 %1030 to float
  %1047 = bitcast i32 %1029 to float
  %1048 = bitcast i32 %1028 to float
  %1049 = bitcast i32 %1027 to float
  %1050 = bitcast i32 %1026 to float
  %1051 = bitcast i32 %1025 to float
  %1052 = bitcast i32 %1024 to float
  %1053 = bitcast i32 %1023 to float
  %1054 = bitcast i32 %1022 to float
  %1055 = fmul fast float %1054, %971
  %1056 = call float @dx.op.tertiary.f32(i32 46, float %972, float %1050, float %1055)  ; FMad(a,b,c)
  %1057 = call float @dx.op.tertiary.f32(i32 46, float %973, float %1046, float %1056)  ; FMad(a,b,c)
  %1058 = fadd fast float %1057, %1042
  %1059 = fmul fast float %1053, %971
  %1060 = call float @dx.op.tertiary.f32(i32 46, float %972, float %1049, float %1059)  ; FMad(a,b,c)
  %1061 = call float @dx.op.tertiary.f32(i32 46, float %973, float %1045, float %1060)  ; FMad(a,b,c)
  %1062 = fadd fast float %1061, %1041
  %1063 = fmul fast float %1052, %971
  %1064 = call float @dx.op.tertiary.f32(i32 46, float %972, float %1048, float %1063)  ; FMad(a,b,c)
  %1065 = call float @dx.op.tertiary.f32(i32 46, float %973, float %1044, float %1064)  ; FMad(a,b,c)
  %1066 = fadd fast float %1065, %1040
  %1067 = fmul fast float %1051, %971
  %1068 = call float @dx.op.tertiary.f32(i32 46, float %972, float %1047, float %1067)  ; FMad(a,b,c)
  %1069 = call float @dx.op.tertiary.f32(i32 46, float %973, float %1043, float %1068)  ; FMad(a,b,c)
  %1070 = fadd fast float %1069, %1039
  %1071 = fdiv fast float %1058, %1070
  %1072 = fdiv fast float %1062, %1070
  %1073 = fdiv fast float %1066, %1070
  %1074 = icmp ult i32 %1038, 8192
  br i1 %1074, label %1085, label %1075

; <label>:1075                                    ; preds = %1021
  %1076 = fmul fast float %1072, 1.280000e+02
  %1077 = fptoui float %1076 to i32
  %1078 = fmul fast float %1071, 1.280000e+02
  %1079 = fptoui float %1078 to i32
  %1080 = mul i32 %1038, 21845
  %1081 = shl i32 %1077, 7
  %1082 = add i32 %1080, -178946048
  %1083 = add i32 %1082, %1079
  %1084 = add i32 %1083, %1081
  br label %1085

; <label>:1085                                    ; preds = %1075, %1021
  %1086 = phi i32 [ %1084, %1075 ], [ %1038, %1021 ]
  %1087 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1088 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1087, i32 %1086, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1089 = extractvalue %dx.types.ResRet.i32 %1088, 0
  %1090 = lshr i32 %1089, 20
  %1091 = and i32 %1089, 134217728
  %1092 = icmp eq i32 %1091, 0
  %1093 = and i32 %1090, 31
  %1094 = lshr i32 16384, %1093
  %1095 = uitofp i32 %1094 to float
  %1096 = select i1 %1074, float 1.280000e+02, float %1095
  br i1 %1092, label %1114, label %1097

; <label>:1097                                    ; preds = %1085
  %1098 = lshr i32 %1089, 3
  %1099 = and i32 %1098, 130944
  %1100 = fmul fast float %1096, %1072
  %1101 = fptoui float %1100 to i32
  %1102 = and i32 %1101, 127
  %1103 = or i32 %1102, %1099
  %1104 = shl i32 %1089, 7
  %1105 = and i32 %1104, 130944
  %1106 = fmul fast float %1096, %1071
  %1107 = fptoui float %1106 to i32
  %1108 = and i32 %1107, 127
  %1109 = or i32 %1108, %1105
  %1110 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1111 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1110, i32 0, i32 %1109, i32 %1103, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1112 = extractvalue %dx.types.ResRet.i32 %1111, 0
  %1113 = bitcast i32 %1112 to float
  br label %1114

; <label>:1114                                    ; preds = %1097, %1085
  %1115 = phi float [ %1113, %1097 ], [ 0.000000e+00, %1085 ]
  %1116 = phi i1 [ true, %1097 ], [ false, %1085 ]
  %1117 = fcmp fast ogt float %1115, %1073
  %1118 = and i1 %1116, %1117
  %1119 = select i1 %1118, float 0.000000e+00, float 1.000000e+00
  br label %1120

; <label>:1120                                    ; preds = %1114, %942, %708
  %1121 = phi float [ 1.000000e+00, %708 ], [ %947, %942 ], [ %1119, %1114 ]
  %1122 = fmul fast float %669, %1121
  br label %1123

; <label>:1123                                    ; preds = %1120, %544
  %1124 = phi float [ %1122, %1120 ], [ 1.000000e+00, %544 ]
  %1125 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %1126 = extractvalue %dx.types.CBufRet.f32 %1125, 0
  %1127 = extractvalue %dx.types.CBufRet.f32 %1125, 1
  %1128 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 75)  ; CBufferLoadLegacy(handle,regIndex)
  %1129 = extractvalue %dx.types.CBufRet.f32 %1128, 0
  %1130 = extractvalue %dx.types.CBufRet.f32 %1128, 1
  %1131 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %1132 = extractvalue %dx.types.CBufRet.f32 %1131, 0
  %1133 = extractvalue %dx.types.CBufRet.f32 %1131, 1
  %1134 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 77)  ; CBufferLoadLegacy(handle,regIndex)
  %1135 = extractvalue %dx.types.CBufRet.f32 %1134, 0
  %1136 = extractvalue %dx.types.CBufRet.f32 %1134, 1
  %1137 = fmul fast float %1126, %505
  %1138 = call float @dx.op.tertiary.f32(i32 46, float %506, float %1129, float %1137)  ; FMad(a,b,c)
  %1139 = call float @dx.op.tertiary.f32(i32 46, float %507, float %1132, float %1138)  ; FMad(a,b,c)
  %1140 = fadd fast float %1139, %1135
  %1141 = fmul fast float %1127, %505
  %1142 = call float @dx.op.tertiary.f32(i32 46, float %506, float %1130, float %1141)  ; FMad(a,b,c)
  %1143 = call float @dx.op.tertiary.f32(i32 46, float %507, float %1133, float %1142)  ; FMad(a,b,c)
  %1144 = fadd fast float %1143, %1136
  %1145 = fmul fast float %1140, 5.000000e-01
  %1146 = fmul fast float %1144, 5.000000e-01
  %1147 = fadd fast float %1145, 5.000000e-01
  %1148 = fsub fast float 5.000000e-01, %1146
  %1149 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1150 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1151 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1149, %dx.types.Handle %1150, float %1147, float %1148, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1152 = extractvalue %dx.types.ResRet.f32 %1151, 0
  %1153 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %1154 = extractvalue %dx.types.CBufRet.f32 %1153, 2
  %1155 = fcmp fast ogt float %1154, 0.000000e+00
  br i1 %1155, label %1156, label %1165

; <label>:1156                                    ; preds = %1123
  %1157 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1158 = extractvalue %dx.types.CBufRet.f32 %1157, 0
  %1159 = extractvalue %dx.types.CBufRet.f32 %1157, 1
  %1160 = extractvalue %dx.types.CBufRet.f32 %1157, 2
  %1161 = call float @dx.op.dot3.f32(i32 55, float %66, float %67, float %68, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1162 = fmul fast float %1158, %1161
  %1163 = fmul fast float %1159, %1161
  %1164 = fmul fast float %1160, %1161
  br label %1165

; <label>:1165                                    ; preds = %1156, %1123
  %1166 = phi float [ %1162, %1156 ], [ %66, %1123 ]
  %1167 = phi float [ %1163, %1156 ], [ %67, %1123 ]
  %1168 = phi float [ %1164, %1156 ], [ %68, %1123 ]
  %1169 = fsub fast float -0.000000e+00, %538
  %1170 = fsub fast float -0.000000e+00, %539
  %1171 = fsub fast float -0.000000e+00, %540
  %1172 = call float @dx.op.dot3.f32(i32 55, float %62, float %63, float %64, float %1169, float %1170, float %1171)  ; Dot3(ax,ay,az,bx,by,bz)
  %1173 = extractvalue %dx.types.CBufRet.f32 %452, 1
  %1174 = fmul fast float %1173, %1173
  %1175 = fsub fast float 1.000000e+00, %1174
  %1176 = fmul fast float %1172, 2.000000e+00
  %1177 = fadd fast float %1176, %1173
  %1178 = fmul fast float %1177, %1173
  %1179 = fadd fast float %1178, 1.000000e+00
  %1180 = call float @dx.op.unary.f32(i32 24, float %1179)  ; Sqrt(value)
  %1181 = fmul fast float %1180, 0x402921FB60000000
  %1182 = fmul fast float %1181, %1179
  %1183 = fdiv fast float %1175, %1182
  %1184 = fmul fast float %1124, %69
  %1185 = fmul fast float %1184, %1152
  %1186 = fmul fast float %1185, %1183
  %1187 = fmul fast float %1186, %1166
  %1188 = fmul fast float %1186, %1167
  %1189 = fmul fast float %1186, %1168
  br label %1190

; <label>:1190                                    ; preds = %1165, %542
  %1191 = phi float [ %543, %542 ], [ %1173, %1165 ]
  %1192 = phi float [ 0.000000e+00, %542 ], [ %1187, %1165 ]
  %1193 = phi float [ 0.000000e+00, %542 ], [ %1188, %1165 ]
  %1194 = phi float [ 0.000000e+00, %542 ], [ %1189, %1165 ]
  %1195 = fmul fast float %1191, %539
  %1196 = fmul fast float %1191, %540
  %1197 = fmul fast float %1191, %538
  %1198 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 83)  ; CBufferLoadLegacy(handle,regIndex)
  %1199 = extractvalue %dx.types.CBufRet.f32 %1198, 3
  %1200 = fcmp fast ogt float %1199, 0.000000e+00
  %1201 = extractvalue %dx.types.CBufRet.f32 %1198, 2
  %1202 = fcmp fast ogt float %1201, 0.000000e+00
  %1203 = or i1 %1200, %1202
  br i1 %1203, label %1204, label %1272

; <label>:1204                                    ; preds = %1190
  %1205 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 233)  ; CBufferLoadLegacy(handle,regIndex)
  %1206 = extractvalue %dx.types.CBufRet.f32 %1205, 0
  %1207 = extractvalue %dx.types.CBufRet.f32 %1205, 1
  %1208 = extractvalue %dx.types.CBufRet.f32 %1205, 2
  %1209 = fmul fast float %1206, %520
  %1210 = fmul fast float %1207, %522
  %1211 = fmul fast float %1208, %524
  %1212 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 234)  ; CBufferLoadLegacy(handle,regIndex)
  %1213 = extractvalue %dx.types.CBufRet.f32 %1212, 0
  %1214 = extractvalue %dx.types.CBufRet.f32 %1212, 1
  %1215 = extractvalue %dx.types.CBufRet.f32 %1212, 2
  %1216 = fadd fast float %1209, %1213
  %1217 = fadd fast float %1210, %1214
  %1218 = fadd fast float %1211, %1215
  %1219 = call float @dx.op.binary.f32(i32 35, float %1216, float 0.000000e+00)  ; FMax(a,b)
  %1220 = call float @dx.op.binary.f32(i32 35, float %1217, float 0.000000e+00)  ; FMax(a,b)
  %1221 = call float @dx.op.binary.f32(i32 35, float %1218, float 0.000000e+00)  ; FMax(a,b)
  %1222 = call float @dx.op.binary.f32(i32 36, float %1219, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1223 = call float @dx.op.binary.f32(i32 36, float %1220, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1224 = call float @dx.op.binary.f32(i32 36, float %1221, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1225 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 235)  ; CBufferLoadLegacy(handle,regIndex)
  %1226 = extractvalue %dx.types.CBufRet.f32 %1225, 0
  %1227 = extractvalue %dx.types.CBufRet.f32 %1225, 1
  %1228 = extractvalue %dx.types.CBufRet.f32 %1225, 2
  %1229 = fmul fast float %1226, %1222
  %1230 = fmul fast float %1227, %1223
  %1231 = fmul fast float %1228, %1224
  %1232 = fptosi float %1229 to i32
  %1233 = fptosi float %1230 to i32
  %1234 = fptosi float %1231 to i32
  %1235 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 4, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xU32>
  %1236 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1235, i32 0, i32 %1232, i32 %1233, i32 %1234, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1237 = extractvalue %dx.types.ResRet.i32 %1236, 0
  %1238 = extractvalue %dx.types.ResRet.i32 %1236, 1
  %1239 = extractvalue %dx.types.ResRet.i32 %1236, 2
  %1240 = extractvalue %dx.types.ResRet.i32 %1236, 3
  %1241 = uitofp i32 %1237 to float
  %1242 = uitofp i32 %1238 to float
  %1243 = uitofp i32 %1239 to float
  %1244 = uitofp i32 %1240 to float
  %1245 = extractvalue %dx.types.CBufRet.f32 %1225, 3
  %1246 = fadd fast float %1245, 1.000000e+00
  %1247 = fmul fast float %1246, %1241
  %1248 = fmul fast float %1246, %1242
  %1249 = fmul fast float %1246, %1243
  %1250 = fdiv fast float %1229, %1244
  %1251 = fdiv fast float %1230, %1244
  %1252 = fdiv fast float %1231, %1244
  %1253 = call float @dx.op.unary.f32(i32 22, float %1250)  ; Frc(value)
  %1254 = call float @dx.op.unary.f32(i32 22, float %1251)  ; Frc(value)
  %1255 = call float @dx.op.unary.f32(i32 22, float %1252)  ; Frc(value)
  %1256 = fmul fast float %1245, %1253
  %1257 = fmul fast float %1245, %1254
  %1258 = fmul fast float %1245, %1255
  %1259 = fadd fast float %1247, 5.000000e-01
  %1260 = fadd fast float %1259, %1256
  %1261 = fadd fast float %1248, 5.000000e-01
  %1262 = fadd fast float %1261, %1257
  %1263 = fadd fast float %1249, 5.000000e-01
  %1264 = fadd fast float %1263, %1258
  %1265 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 236)  ; CBufferLoadLegacy(handle,regIndex)
  %1266 = extractvalue %dx.types.CBufRet.f32 %1265, 0
  %1267 = extractvalue %dx.types.CBufRet.f32 %1265, 1
  %1268 = extractvalue %dx.types.CBufRet.f32 %1265, 2
  %1269 = fmul fast float %1260, %1266
  %1270 = fmul fast float %1262, %1267
  %1271 = fmul fast float %1264, %1268
  br label %1272

; <label>:1272                                    ; preds = %1204, %1190
  %1273 = phi float [ %1269, %1204 ], [ 0.000000e+00, %1190 ]
  %1274 = phi float [ %1270, %1204 ], [ 0.000000e+00, %1190 ]
  %1275 = phi float [ %1271, %1204 ], [ 0.000000e+00, %1190 ]
  br i1 %1200, label %1276, label %1612

; <label>:1276                                    ; preds = %1272
  %1277 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %1278 = extractvalue %dx.types.CBufRet.f32 %1277, 3
  %1279 = fcmp fast ogt float %1278, 0.000000e+00
  br i1 %1279, label %1280, label %1358

; <label>:1280                                    ; preds = %1276
  %1281 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1282 = extractvalue %dx.types.CBufRet.f32 %1281, 0
  %1283 = extractvalue %dx.types.CBufRet.f32 %1281, 1
  %1284 = extractvalue %dx.types.CBufRet.f32 %1281, 2
  %1285 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1286 = extractvalue %dx.types.CBufRet.f32 %1285, 2
  %1287 = fcmp fast ogt float %1286, 0.000000e+00
  br i1 %1287, label %1288, label %1324, !dx.controlflow.hints !58

; <label>:1288                                    ; preds = %1280
  %1289 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1290 = extractvalue %dx.types.CBufRet.f32 %1289, 0
  %1291 = fmul fast float %1290, %537
  %1292 = extractvalue %dx.types.CBufRet.f32 %1289, 1
  %1293 = fadd fast float %1291, %1292
  %1294 = call float @dx.op.unary.f32(i32 7, float %1293)  ; Saturate(value)
  %1295 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1296 = extractvalue %dx.types.CBufRet.f32 %1295, 1
  %1297 = extractvalue %dx.types.CBufRet.f32 %1295, 0
  %1298 = fsub fast float -0.000000e+00, %1297
  %1299 = call float @dx.op.dot2.f32(i32 54, float %538, float %539, float %1296, float %1298)  ; Dot2(ax,ay,bx,by)
  %1300 = call float @dx.op.dot2.f32(i32 54, float %538, float %539, float %1297, float %1296)  ; Dot2(ax,ay,bx,by)
  %1301 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %1302 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1303 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1301, %dx.types.Handle %1302, float %1299, float %1300, float %540, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1304 = extractvalue %dx.types.ResRet.f32 %1303, 0
  %1305 = extractvalue %dx.types.ResRet.f32 %1303, 1
  %1306 = extractvalue %dx.types.ResRet.f32 %1303, 2
  %1307 = extractvalue %dx.types.CBufRet.f32 %1289, 2
  %1308 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1301, %dx.types.Handle %1302, float %1299, float %1300, float %540, float undef, i32 undef, i32 undef, i32 undef, float %1307)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1309 = extractvalue %dx.types.ResRet.f32 %1308, 0
  %1310 = extractvalue %dx.types.ResRet.f32 %1308, 1
  %1311 = extractvalue %dx.types.ResRet.f32 %1308, 2
  %1312 = fsub fast float %1304, %1309
  %1313 = fsub fast float %1305, %1310
  %1314 = fsub fast float %1306, %1311
  %1315 = fmul fast float %1312, %1294
  %1316 = fmul fast float %1313, %1294
  %1317 = fmul fast float %1314, %1294
  %1318 = fadd fast float %1315, %1309
  %1319 = fadd fast float %1316, %1310
  %1320 = fadd fast float %1317, %1311
  %1321 = fmul fast float %1318, %1282
  %1322 = fmul fast float %1319, %1283
  %1323 = fmul fast float %1320, %1284
  br label %1324

; <label>:1324                                    ; preds = %1288, %1280
  %1325 = phi float [ %1321, %1288 ], [ %1282, %1280 ]
  %1326 = phi float [ %1322, %1288 ], [ %1283, %1280 ]
  %1327 = phi float [ %1323, %1288 ], [ %1284, %1280 ]
  %1328 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1329 = extractvalue %dx.types.CBufRet.f32 %1328, 0
  %1330 = extractvalue %dx.types.CBufRet.f32 %1328, 1
  %1331 = extractvalue %dx.types.CBufRet.f32 %1328, 2
  %1332 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 179)  ; CBufferLoadLegacy(handle,regIndex)
  %1333 = extractvalue %dx.types.CBufRet.f32 %1332, 1
  %1334 = fmul fast float %1333, %1329
  %1335 = fmul fast float %1333, %1330
  %1336 = fmul fast float %1333, %1331
  %1337 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1338 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1339 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1337, %dx.types.Handle %1338, float 5.000000e-01, float 5.000000e-01, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1340 = extractvalue %dx.types.ResRet.f32 %1339, 0
  %1341 = extractvalue %dx.types.ResRet.f32 %1339, 1
  %1342 = extractvalue %dx.types.ResRet.f32 %1339, 2
  %1343 = fmul fast float %1334, %1340
  %1344 = fmul fast float %1335, %1341
  %1345 = fmul fast float %1336, %1342
  %1346 = fadd fast float %1343, %1325
  %1347 = fadd fast float %1344, %1326
  %1348 = fadd fast float %1345, %1327
  %1349 = fmul fast float %1346, 0x3FD20DD740000000
  %1350 = fmul fast float %1347, 0x3FD20DD740000000
  %1351 = fmul fast float %1348, 0x3FD20DD740000000
  %1352 = call float @dx.op.dot4.f32(i32 56, float %1349, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float %1195, float %1196, float %1197)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1353 = call float @dx.op.dot4.f32(i32 56, float %1350, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float %1195, float %1196, float %1197)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1354 = call float @dx.op.dot4.f32(i32 56, float %1351, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float %1195, float %1196, float %1197)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1355 = call float @dx.op.binary.f32(i32 35, float %1352, float 0.000000e+00)  ; FMax(a,b)
  %1356 = call float @dx.op.binary.f32(i32 35, float %1353, float 0.000000e+00)  ; FMax(a,b)
  %1357 = call float @dx.op.binary.f32(i32 35, float %1354, float 0.000000e+00)  ; FMax(a,b)
  br label %1390

; <label>:1358                                    ; preds = %1276
  %1359 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %1360 = extractvalue %dx.types.CBufRet.f32 %1359, 0
  %1361 = extractvalue %dx.types.CBufRet.f32 %1359, 1
  %1362 = extractvalue %dx.types.CBufRet.f32 %1359, 2
  %1363 = extractvalue %dx.types.CBufRet.f32 %1359, 3
  %1364 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %1365 = extractvalue %dx.types.CBufRet.f32 %1364, 0
  %1366 = extractvalue %dx.types.CBufRet.f32 %1364, 1
  %1367 = extractvalue %dx.types.CBufRet.f32 %1364, 2
  %1368 = extractvalue %dx.types.CBufRet.f32 %1364, 3
  %1369 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %1370 = extractvalue %dx.types.CBufRet.f32 %1369, 0
  %1371 = extractvalue %dx.types.CBufRet.f32 %1369, 1
  %1372 = extractvalue %dx.types.CBufRet.f32 %1369, 2
  %1373 = extractvalue %dx.types.CBufRet.f32 %1369, 3
  %1374 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 187)  ; CBufferLoadLegacy(handle,regIndex)
  %1375 = extractvalue %dx.types.CBufRet.f32 %1374, 0
  %1376 = extractvalue %dx.types.CBufRet.f32 %1374, 1
  %1377 = extractvalue %dx.types.CBufRet.f32 %1374, 2
  %1378 = call float @dx.op.dot4.f32(i32 56, float %1360, float %1361, float %1362, float %1363, float 1.000000e+00, float %1195, float %1196, float %1197)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1379 = call float @dx.op.dot4.f32(i32 56, float %1365, float %1366, float %1367, float %1368, float 1.000000e+00, float %1195, float %1196, float %1197)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1380 = call float @dx.op.dot4.f32(i32 56, float %1370, float %1371, float %1372, float %1373, float 1.000000e+00, float %1195, float %1196, float %1197)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1381 = call float @dx.op.binary.f32(i32 35, float %1378, float 0.000000e+00)  ; FMax(a,b)
  %1382 = call float @dx.op.binary.f32(i32 35, float %1379, float 0.000000e+00)  ; FMax(a,b)
  %1383 = call float @dx.op.binary.f32(i32 35, float %1380, float 0.000000e+00)  ; FMax(a,b)
  %1384 = fmul fast float %1375, 0x3FD45F3060000000
  %1385 = fmul fast float %1384, %1381
  %1386 = fmul fast float %1376, 0x3FD45F3060000000
  %1387 = fmul fast float %1386, %1382
  %1388 = fmul fast float %1377, 0x3FD45F3060000000
  %1389 = fmul fast float %1388, %1383
  br label %1390

; <label>:1390                                    ; preds = %1358, %1324
  %1391 = phi float [ %1355, %1324 ], [ %1385, %1358 ]
  %1392 = phi float [ %1356, %1324 ], [ %1387, %1358 ]
  %1393 = phi float [ %1357, %1324 ], [ %1389, %1358 ]
  %1394 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1395 = extractvalue %dx.types.CBufRet.i32 %1394, 2
  %1396 = icmp eq i32 %1395, 0
  br i1 %1396, label %1439, label %1397

; <label>:1397                                    ; preds = %1390
  br label %1398

; <label>:1398                                    ; preds = %1432, %1397
  %1399 = phi i32 [ %1433, %1432 ], [ 0, %1397 ]
  %1400 = add i32 %1399, 41
  %1401 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 %1400)  ; CBufferLoadLegacy(handle,regIndex)
  %1402 = extractvalue %dx.types.CBufRet.f32 %1401, 3
  %1403 = extractvalue %dx.types.CBufRet.f32 %1401, 0
  %1404 = extractvalue %dx.types.CBufRet.f32 %1401, 1
  %1405 = extractvalue %dx.types.CBufRet.f32 %1401, 2
  %1406 = fadd fast float %1402, %505
  %1407 = fsub fast float %1406, %1403
  %1408 = fadd fast float %1402, %506
  %1409 = fsub fast float %1408, %1404
  %1410 = fadd fast float %1402, %507
  %1411 = fsub fast float %1410, %1405
  %1412 = call float @dx.op.binary.f32(i32 35, float %1407, float 0.000000e+00)  ; FMax(a,b)
  %1413 = call float @dx.op.binary.f32(i32 35, float %1409, float 0.000000e+00)  ; FMax(a,b)
  %1414 = call float @dx.op.binary.f32(i32 35, float %1411, float 0.000000e+00)  ; FMax(a,b)
  %1415 = fsub fast float %1402, %505
  %1416 = fadd fast float %1415, %1403
  %1417 = fsub fast float %1402, %506
  %1418 = fadd fast float %1417, %1404
  %1419 = fsub fast float %1402, %507
  %1420 = fadd fast float %1419, %1405
  %1421 = call float @dx.op.binary.f32(i32 35, float %1416, float 0.000000e+00)  ; FMax(a,b)
  %1422 = call float @dx.op.binary.f32(i32 35, float %1418, float 0.000000e+00)  ; FMax(a,b)
  %1423 = call float @dx.op.binary.f32(i32 35, float %1420, float 0.000000e+00)  ; FMax(a,b)
  %1424 = call float @dx.op.binary.f32(i32 36, float %1412, float %1421)  ; FMin(a,b)
  %1425 = call float @dx.op.binary.f32(i32 36, float %1413, float %1422)  ; FMin(a,b)
  %1426 = call float @dx.op.binary.f32(i32 36, float %1414, float %1423)  ; FMin(a,b)
  %1427 = call float @dx.op.binary.f32(i32 36, float %1425, float %1426)  ; FMin(a,b)
  %1428 = call float @dx.op.binary.f32(i32 36, float %1424, float %1427)  ; FMin(a,b)
  %1429 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1430 = extractvalue %dx.types.CBufRet.f32 %1429, 0
  %1431 = fcmp fast ogt float %1428, %1430
  br i1 %1431, label %1437, label %1432

; <label>:1432                                    ; preds = %1398
  %1433 = add i32 %1399, 1
  %1434 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1435 = extractvalue %dx.types.CBufRet.i32 %1434, 2
  %1436 = icmp ult i32 %1433, %1435
  br i1 %1436, label %1398, label %1437

; <label>:1437                                    ; preds = %1432, %1398
  %1438 = phi i32 [ -1, %1432 ], [ %1399, %1398 ]
  br label %1439

; <label>:1439                                    ; preds = %1437, %1390
  %1440 = phi i32 [ -1, %1390 ], [ %1438, %1437 ]
  %1441 = icmp sgt i32 %1440, -1
  br i1 %1441, label %1442, label %1580

; <label>:1442                                    ; preds = %1439
  %1443 = add i32 %1440, 41
  %1444 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 %1443)  ; CBufferLoadLegacy(handle,regIndex)
  %1445 = extractvalue %dx.types.CBufRet.f32 %1444, 3
  %1446 = fmul fast float %1445, 0x3F947AE140000000
  %1447 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1448 = extractvalue %dx.types.CBufRet.f32 %1447, 0
  %1449 = fdiv fast float 1.000000e+00, %1448
  br label %1450

; <label>:1450                                    ; preds = %1562, %1442
  %1451 = phi float [ 1.000000e+00, %1442 ], [ %1575, %1562 ]
  %1452 = phi float [ 2.000000e+00, %1442 ], [ %1577, %1562 ]
  %1453 = phi i32 [ 0, %1442 ], [ %1578, %1562 ]
  %1454 = icmp ult i32 %1453, 10
  br i1 %1454, label %1455, label %1459

; <label>:1455                                    ; preds = %1450
  %1456 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1457 = extractvalue %dx.types.CBufRet.f32 %1456, 0
  %1458 = fcmp fast olt float %1452, %1457
  br label %1459

; <label>:1459                                    ; preds = %1455, %1450
  %1460 = phi i1 [ false, %1450 ], [ %1458, %1455 ]
  br i1 %1460, label %1461, label %1579

; <label>:1461                                    ; preds = %1459
  %1462 = fadd fast float %1452, %507
  %1463 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1464 = extractvalue %dx.types.CBufRet.f32 %1463, 0
  %1465 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1466 = extractvalue %dx.types.CBufRet.i32 %1465, 2
  %1467 = icmp ult i32 %1440, %1466
  br i1 %1467, label %1468, label %1562

; <label>:1468                                    ; preds = %1461
  br label %1469

; <label>:1469                                    ; preds = %1556, %1468
  %1470 = phi i32 [ %1557, %1556 ], [ %1440, %1468 ]
  %1471 = add i32 %1470, 47
  %1472 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 %1471)  ; CBufferLoadLegacy(handle,regIndex)
  %1473 = extractvalue %dx.types.CBufRet.f32 %1472, 0
  %1474 = extractvalue %dx.types.CBufRet.f32 %1472, 1
  %1475 = extractvalue %dx.types.CBufRet.f32 %1472, 2
  %1476 = extractvalue %dx.types.CBufRet.f32 %1472, 3
  %1477 = fmul fast float %1476, %505
  %1478 = fmul fast float %1476, %506
  %1479 = fmul fast float %1476, %1462
  %1480 = fadd fast float %1477, %1473
  %1481 = fadd fast float %1478, %1474
  %1482 = fadd fast float %1479, %1475
  %1483 = call float @dx.op.unary.f32(i32 22, float %1480)  ; Frc(value)
  %1484 = call float @dx.op.unary.f32(i32 22, float %1481)  ; Frc(value)
  %1485 = call float @dx.op.unary.f32(i32 22, float %1482)  ; Frc(value)
  %1486 = call float @dx.op.unary.f32(i32 22, float %1483)  ; Frc(value)
  %1487 = call float @dx.op.unary.f32(i32 22, float %1484)  ; Frc(value)
  %1488 = call float @dx.op.unary.f32(i32 22, float %1485)  ; Frc(value)
  %1489 = call float @dx.op.unary.f32(i32 7, float %1486)  ; Saturate(value)
  %1490 = call float @dx.op.unary.f32(i32 7, float %1487)  ; Saturate(value)
  %1491 = call float @dx.op.unary.f32(i32 7, float %1488)  ; Saturate(value)
  %1492 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 65)  ; CBufferLoadLegacy(handle,regIndex)
  %1493 = extractvalue %dx.types.CBufRet.i32 %1492, 2
  %1494 = uitofp i32 %1493 to float
  %1495 = fmul fast float %1494, %1489
  %1496 = fmul fast float %1494, %1490
  %1497 = fmul fast float %1494, %1491
  %1498 = mul i32 %1493, %1470
  %1499 = sitofp i32 %1498 to float
  %1500 = fadd fast float %1499, %1497
  %1501 = fptosi float %1495 to i32
  %1502 = fptosi float %1496 to i32
  %1503 = fptosi float %1500 to i32
  %1504 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %1505 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1504, i32 0, i32 %1501, i32 %1502, i32 %1503, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1506 = extractvalue %dx.types.ResRet.i32 %1505, 0
  %1507 = icmp eq i32 %1506, -1
  br i1 %1507, label %1556, label %1508

; <label>:1508                                    ; preds = %1469
  %1509 = fmul fast float %1494, %1486
  %1510 = fmul fast float %1494, %1487
  %1511 = fmul fast float %1494, %1488
  %1512 = call float @dx.op.unary.f32(i32 22, float %1509)  ; Frc(value)
  %1513 = call float @dx.op.unary.f32(i32 22, float %1510)  ; Frc(value)
  %1514 = call float @dx.op.unary.f32(i32 22, float %1511)  ; Frc(value)
  %1515 = shl i32 %1506, 3
  %1516 = and i32 %1515, 1016
  %1517 = lshr i32 %1506, 4
  %1518 = and i32 %1517, 1016
  %1519 = lshr i32 %1506, 11
  %1520 = and i32 %1519, 8184
  %1521 = uitofp i32 %1516 to float
  %1522 = uitofp i32 %1518 to float
  %1523 = uitofp i32 %1520 to float
  %1524 = fmul fast float %1512, 7.000000e+00
  %1525 = fmul fast float %1513, 7.000000e+00
  %1526 = fmul fast float %1514, 7.000000e+00
  %1527 = fadd fast float %1521, 5.000000e-01
  %1528 = fadd fast float %1527, %1524
  %1529 = fadd fast float %1522, 5.000000e-01
  %1530 = fadd fast float %1529, %1525
  %1531 = fadd fast float %1523, 5.000000e-01
  %1532 = fadd fast float %1531, %1526
  %1533 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 66)  ; CBufferLoadLegacy(handle,regIndex)
  %1534 = extractvalue %dx.types.CBufRet.f32 %1533, 0
  %1535 = extractvalue %dx.types.CBufRet.f32 %1533, 1
  %1536 = extractvalue %dx.types.CBufRet.f32 %1533, 2
  %1537 = fmul fast float %1534, %1528
  %1538 = fmul fast float %1530, %1535
  %1539 = fmul fast float %1532, %1536
  %1540 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1541 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1542 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1540, %dx.types.Handle %1541, float %1537, float %1538, float %1539, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1543 = extractvalue %dx.types.ResRet.f32 %1542, 0
  %1544 = fcmp fast olt float %1543, 1.000000e+00
  br i1 %1544, label %1545, label %1556

; <label>:1545                                    ; preds = %1508
  %1546 = add i32 %1470, 41
  %1547 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 %1546)  ; CBufferLoadLegacy(handle,regIndex)
  %1548 = extractvalue %dx.types.CBufRet.f32 %1547, 3
  %1549 = fmul fast float %1548, 8.000000e+00
  %1550 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1551 = extractvalue %dx.types.CBufRet.f32 %1550, 0
  %1552 = fmul fast float %1549, %1551
  %1553 = fmul fast float %1543, 2.000000e+00
  %1554 = fadd fast float %1553, -1.000000e+00
  %1555 = fmul fast float %1552, %1554
  br label %1562

; <label>:1556                                    ; preds = %1508, %1469
  %1557 = add i32 %1470, 1
  %1558 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1559 = extractvalue %dx.types.CBufRet.i32 %1558, 2
  %1560 = icmp ult i32 %1557, %1559
  br i1 %1560, label %1469, label %1561

; <label>:1561                                    ; preds = %1556
  br label %1562

; <label>:1562                                    ; preds = %1561, %1545, %1461
  %1563 = phi float [ %1555, %1545 ], [ %1464, %1461 ], [ %1464, %1561 ]
  %1564 = bitcast float %1452 to i32
  %1565 = sub nsw i32 2129859010, %1564
  %1566 = bitcast i32 %1565 to float
  %1567 = fmul fast float %1563, %1566
  %1568 = call float @dx.op.unary.f32(i32 7, float %1567)  ; Saturate(value)
  %1569 = fadd fast float %1563, %1452
  %1570 = fmul fast float %1569, %1449
  %1571 = fmul fast float %1570, %1570
  %1572 = fmul fast float %1571, 0x3FE3333340000000
  %1573 = call float @dx.op.unary.f32(i32 7, float %1572)  ; Saturate(value)
  %1574 = call float @dx.op.binary.f32(i32 35, float %1568, float %1573)  ; FMax(a,b)
  %1575 = call float @dx.op.binary.f32(i32 36, float %1451, float %1574)  ; FMin(a,b)
  %1576 = call float @dx.op.binary.f32(i32 35, float %1563, float %1446)  ; FMax(a,b)
  %1577 = fadd fast float %1576, %1452
  %1578 = add i32 %1453, 1
  br label %1450, !llvm.loop !59

; <label>:1579                                    ; preds = %1459
  br label %1580

; <label>:1580                                    ; preds = %1579, %1439
  %1581 = phi float [ 1.000000e+00, %1439 ], [ %1451, %1579 ]
  %1582 = extractvalue %dx.types.CBufRet.f32 %452, 0
  %1583 = fcmp fast ogt float %1582, 0.000000e+00
  br i1 %1583, label %1584, label %1603

; <label>:1584                                    ; preds = %1580
  %1585 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1586 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1587 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1585, %dx.types.Handle %1586, float %1273, float %1274, float %1275, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1588 = extractvalue %dx.types.ResRet.f32 %1587, 0
  %1589 = extractvalue %dx.types.ResRet.f32 %1587, 1
  %1590 = extractvalue %dx.types.ResRet.f32 %1587, 2
  %1591 = fmul fast float %1588, 2.000000e+00
  %1592 = fmul fast float %1589, 2.000000e+00
  %1593 = fmul fast float %1590, 2.000000e+00
  %1594 = fadd fast float %1591, -1.000000e+00
  %1595 = fadd fast float %1592, -1.000000e+00
  %1596 = fadd fast float %1593, -1.000000e+00
  %1597 = fmul fast float %1594, %1594
  %1598 = fmul fast float %1595, %1595
  %1599 = fadd fast float %1597, %1598
  %1600 = fmul fast float %1596, %1596
  %1601 = fadd fast float %1599, %1600
  %1602 = call float @dx.op.unary.f32(i32 24, float %1601)  ; Sqrt(value)
  br label %1603

; <label>:1603                                    ; preds = %1584, %1580
  %1604 = phi float [ %1602, %1584 ], [ %1581, %1580 ]
  %1605 = fmul fast float %1199, %1604
  %1606 = fmul fast float %1605, %1391
  %1607 = fmul fast float %1605, %1392
  %1608 = fmul fast float %1605, %1393
  %1609 = fadd fast float %1606, %1192
  %1610 = fadd fast float %1607, %1193
  %1611 = fadd fast float %1608, %1194
  br label %1612

; <label>:1612                                    ; preds = %1603, %1272
  %1613 = phi float [ %1609, %1603 ], [ %1192, %1272 ]
  %1614 = phi float [ %1610, %1603 ], [ %1193, %1272 ]
  %1615 = phi float [ %1611, %1603 ], [ %1194, %1272 ]
  %1616 = extractvalue %dx.types.CBufRet.f32 %1198, 2
  %1617 = fcmp fast ogt float %1616, 0.000000e+00
  br i1 %1617, label %1618, label %1683

; <label>:1618                                    ; preds = %1612
  %1619 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1620 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1621 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1619, %dx.types.Handle %1620, float %1273, float %1274, float %1275, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1622 = extractvalue %dx.types.ResRet.f32 %1621, 0
  %1623 = extractvalue %dx.types.ResRet.f32 %1621, 1
  %1624 = extractvalue %dx.types.ResRet.f32 %1621, 2
  %1625 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1626 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1625, %dx.types.Handle %1620, float %1273, float %1274, float %1275, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1627 = extractvalue %dx.types.ResRet.f32 %1626, 0
  %1628 = extractvalue %dx.types.ResRet.f32 %1626, 1
  %1629 = extractvalue %dx.types.ResRet.f32 %1626, 2
  %1630 = fmul fast float %1627, 2.000000e+00
  %1631 = fmul fast float %1628, 2.000000e+00
  %1632 = fmul fast float %1629, 2.000000e+00
  %1633 = fadd fast float %1630, -1.000000e+00
  %1634 = fadd fast float %1631, -1.000000e+00
  %1635 = fadd fast float %1632, -1.000000e+00
  %1636 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1637 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1636, %dx.types.Handle %1620, float %1273, float %1274, float %1275, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1638 = extractvalue %dx.types.ResRet.f32 %1637, 0
  %1639 = extractvalue %dx.types.ResRet.f32 %1637, 1
  %1640 = extractvalue %dx.types.ResRet.f32 %1637, 2
  %1641 = fmul fast float %1638, 2.000000e+00
  %1642 = fmul fast float %1639, 2.000000e+00
  %1643 = fmul fast float %1640, 2.000000e+00
  %1644 = fadd fast float %1641, -1.000000e+00
  %1645 = fadd fast float %1642, -1.000000e+00
  %1646 = fadd fast float %1643, -1.000000e+00
  %1647 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1648 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1647, %dx.types.Handle %1620, float %1273, float %1274, float %1275, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1649 = extractvalue %dx.types.ResRet.f32 %1648, 0
  %1650 = extractvalue %dx.types.ResRet.f32 %1648, 1
  %1651 = extractvalue %dx.types.ResRet.f32 %1648, 2
  %1652 = fmul fast float %1649, 2.000000e+00
  %1653 = fmul fast float %1650, 2.000000e+00
  %1654 = fmul fast float %1651, 2.000000e+00
  %1655 = fadd fast float %1652, -1.000000e+00
  %1656 = fadd fast float %1653, -1.000000e+00
  %1657 = fadd fast float %1654, -1.000000e+00
  %1658 = fmul fast float %1622, 0x3FFBB67B80000000
  %1659 = fmul fast float %1658, %1633
  %1660 = fmul fast float %1658, %1634
  %1661 = fmul fast float %1658, %1635
  %1662 = fmul fast float %1623, 0x3FFBB67B80000000
  %1663 = fmul fast float %1662, %1644
  %1664 = fmul fast float %1662, %1645
  %1665 = fmul fast float %1662, %1646
  %1666 = fmul fast float %1624, 0x3FFBB67B80000000
  %1667 = fmul fast float %1666, %1655
  %1668 = fmul fast float %1666, %1656
  %1669 = fmul fast float %1666, %1657
  %1670 = fmul fast float %1616, 0x3FD45F3060000000
  %1671 = call float @dx.op.dot4.f32(i32 56, float %1622, float %1659, float %1660, float %1661, float 1.000000e+00, float %1195, float %1196, float %1197)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1672 = call float @dx.op.dot4.f32(i32 56, float %1623, float %1663, float %1664, float %1665, float 1.000000e+00, float %1195, float %1196, float %1197)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1673 = call float @dx.op.dot4.f32(i32 56, float %1624, float %1667, float %1668, float %1669, float 1.000000e+00, float %1195, float %1196, float %1197)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1674 = call float @dx.op.binary.f32(i32 35, float %1671, float 0.000000e+00)  ; FMax(a,b)
  %1675 = call float @dx.op.binary.f32(i32 35, float %1672, float 0.000000e+00)  ; FMax(a,b)
  %1676 = call float @dx.op.binary.f32(i32 35, float %1673, float 0.000000e+00)  ; FMax(a,b)
  %1677 = fmul fast float %1674, %1670
  %1678 = fmul fast float %1675, %1670
  %1679 = fmul fast float %1676, %1670
  %1680 = fadd fast float %1677, %1613
  %1681 = fadd fast float %1678, %1614
  %1682 = fadd fast float %1679, %1615
  br label %1683

; <label>:1683                                    ; preds = %1618, %1612
  %1684 = phi float [ %1680, %1618 ], [ %1613, %1612 ]
  %1685 = phi float [ %1681, %1618 ], [ %1614, %1612 ]
  %1686 = phi float [ %1682, %1618 ], [ %1615, %1612 ]
  %1687 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %40, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1688 = extractvalue %dx.types.CBufRet.i32 %1687, 0
  %1689 = extractvalue %dx.types.CBufRet.i32 %1687, 1
  %1690 = mul i32 %1688, %45
  %1691 = mul i32 %1689, %46
  %1692 = fmul fast float %473, %58
  %1693 = fadd fast float %1692, %59
  %1694 = call float @dx.op.unary.f32(i32 23, float %1693)  ; Log(value)
  %1695 = fmul fast float %1694, %60
  %1696 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1695)  ; FMax(a,b)
  %1697 = fptoui float %1696 to i32
  %1698 = add nsw i32 %54, -1
  %1699 = call i32 @dx.op.binary.i32(i32 40, i32 %1697, i32 %1698)  ; UMin(a,b)
  %1700 = and i32 %56, 31
  %1701 = lshr i32 %1690, %1700
  %1702 = lshr i32 %1691, %1700
  %1703 = mul i32 %1699, %53
  %1704 = add i32 %1703, %1702
  %1705 = mul i32 %1704, %52
  %1706 = add i32 %1705, %1701
  %1707 = shl i32 %1706, 1
  %1708 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1709 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1708, i32 %1707, i32 undef)  ; BufferLoad(srv,index,wot)
  %1710 = extractvalue %dx.types.ResRet.i32 %1709, 0
  %1711 = call i32 @dx.op.binary.i32(i32 40, i32 %1710, i32 %49)  ; UMin(a,b)
  %1712 = or i32 %1707, 1
  %1713 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1708, i32 %1712, i32 undef)  ; BufferLoad(srv,index,wot)
  %1714 = extractvalue %dx.types.ResRet.i32 %1713, 0
  %1715 = add i32 %45, 1
  %1716 = add i32 %46, 1
  %1717 = add i32 %47, 1
  %1718 = uitofp i32 %1715 to float
  %1719 = uitofp i32 %1716 to float
  %1720 = fadd fast float %457, %1718
  %1721 = fadd fast float %458, %1719
  %1722 = fdiv fast float %1720, %280
  %1723 = fdiv fast float %1721, %281
  %1724 = fmul fast float %1722, 2.000000e+00
  %1725 = fmul fast float %1723, 2.000000e+00
  %1726 = fadd fast float %1724, -1.000000e+00
  %1727 = fadd fast float %1725, -1.000000e+00
  %1728 = fsub fast float -0.000000e+00, %1727
  %1729 = uitofp i32 %1717 to float
  %1730 = fadd fast float %459, %1729
  %1731 = fdiv fast float %1730, %291
  %1732 = call float @dx.op.unary.f32(i32 21, float %1731)  ; Exp(value)
  %1733 = fsub fast float %1732, %294
  %1734 = fdiv fast float %1733, %296
  br i1 %300, label %1741, label %1735, !dx.controlflow.hints !55

; <label>:1735                                    ; preds = %1683
  %1736 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %1737 = extractvalue %dx.types.CBufRet.f32 %1736, 2
  %1738 = fmul fast float %1737, %1734
  %1739 = extractvalue %dx.types.CBufRet.f32 %298, 2
  %1740 = fadd fast float %1738, %1739
  br label %1748

; <label>:1741                                    ; preds = %1683
  %1742 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %1743 = extractvalue %dx.types.CBufRet.f32 %1742, 3
  %1744 = fadd fast float %1743, %1734
  %1745 = extractvalue %dx.types.CBufRet.f32 %1742, 2
  %1746 = fmul fast float %1744, %1745
  %1747 = fdiv fast float 1.000000e+00, %1746
  br label %1748

; <label>:1748                                    ; preds = %1741, %1735
  %1749 = phi float [ %1740, %1735 ], [ %1747, %1741 ]
  %1750 = fmul fast float %317, %1726
  %1751 = call float @dx.op.tertiary.f32(i32 46, float %1728, float %322, float %1750)  ; FMad(a,b,c)
  %1752 = call float @dx.op.tertiary.f32(i32 46, float %1749, float %327, float %1751)  ; FMad(a,b,c)
  %1753 = fadd fast float %1752, %332
  %1754 = fmul fast float %318, %1726
  %1755 = call float @dx.op.tertiary.f32(i32 46, float %1728, float %323, float %1754)  ; FMad(a,b,c)
  %1756 = call float @dx.op.tertiary.f32(i32 46, float %1749, float %328, float %1755)  ; FMad(a,b,c)
  %1757 = fadd fast float %1756, %333
  %1758 = fmul fast float %319, %1726
  %1759 = call float @dx.op.tertiary.f32(i32 46, float %1728, float %324, float %1758)  ; FMad(a,b,c)
  %1760 = call float @dx.op.tertiary.f32(i32 46, float %1749, float %329, float %1759)  ; FMad(a,b,c)
  %1761 = fadd fast float %1760, %334
  %1762 = fmul fast float %320, %1726
  %1763 = call float @dx.op.tertiary.f32(i32 46, float %1728, float %325, float %1762)  ; FMad(a,b,c)
  %1764 = call float @dx.op.tertiary.f32(i32 46, float %1749, float %330, float %1763)  ; FMad(a,b,c)
  %1765 = fadd fast float %1764, %335
  %1766 = fdiv fast float %1753, %1765
  %1767 = fdiv fast float %1757, %1765
  %1768 = fdiv fast float %1761, %1765
  %1769 = fsub fast float %505, %1766
  %1770 = fsub fast float %506, %1767
  %1771 = fsub fast float %507, %1768
  %1772 = fmul fast float %1769, %1769
  %1773 = fmul fast float %1770, %1770
  %1774 = fadd fast float %1773, %1772
  %1775 = fmul fast float %1771, %1771
  %1776 = fadd fast float %1774, %1775
  %1777 = call float @dx.op.unary.f32(i32 24, float %1776)  ; Sqrt(value)
  %1778 = extractvalue %dx.types.CBufRet.f32 %452, 2
  %1779 = fmul fast float %1778, %1777
  %1780 = call float @dx.op.binary.f32(i32 35, float %1779, float 1.000000e+00)  ; FMax(a,b)
  %1781 = fmul fast float %1780, %1780
  %1782 = icmp eq i32 %1711, 0
  br i1 %1782, label %2192, label %1783

; <label>:1783                                    ; preds = %1748
  br label %1784

; <label>:1784                                    ; preds = %2185, %1783
  %1785 = phi float [ %2186, %2185 ], [ %1684, %1783 ]
  %1786 = phi float [ %2187, %2185 ], [ %1685, %1783 ]
  %1787 = phi float [ %2188, %2185 ], [ %1686, %1783 ]
  %1788 = phi i32 [ %2189, %2185 ], [ 0, %1783 ]
  %1789 = add i32 %1788, %1714
  %1790 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1791 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1790, i32 %1789, i32 undef)  ; BufferLoad(srv,index,wot)
  %1792 = extractvalue %dx.types.ResRet.i32 %1791, 0
  %1793 = mul i32 %1792, 6
  %1794 = add i32 %1793, 4
  %1795 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 10, i32 1033 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<4xF32>
  %1796 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1795, i32 %1794, i32 undef)  ; BufferLoad(srv,index,wot)
  %1797 = extractvalue %dx.types.ResRet.f32 %1796, 0
  %1798 = extractvalue %dx.types.ResRet.f32 %1796, 1
  %1799 = extractvalue %dx.types.ResRet.f32 %1796, 2
  %1800 = add i32 %1793, 3
  %1801 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1795, i32 %1800, i32 undef)  ; BufferLoad(srv,index,wot)
  %1802 = extractvalue %dx.types.ResRet.f32 %1801, 3
  %1803 = add i32 %1793, 2
  %1804 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1795, i32 %1803, i32 undef)  ; BufferLoad(srv,index,wot)
  %1805 = extractvalue %dx.types.ResRet.f32 %1804, 0
  %1806 = extractvalue %dx.types.ResRet.f32 %1804, 1
  %1807 = extractvalue %dx.types.ResRet.f32 %1804, 2
  %1808 = or i32 %1793, 1
  %1809 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1795, i32 %1808, i32 undef)  ; BufferLoad(srv,index,wot)
  %1810 = extractvalue %dx.types.ResRet.f32 %1809, 0
  %1811 = extractvalue %dx.types.ResRet.f32 %1809, 1
  %1812 = extractvalue %dx.types.ResRet.f32 %1809, 2
  %1813 = extractvalue %dx.types.ResRet.f32 %1809, 3
  %1814 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1795, i32 %1793, i32 undef)  ; BufferLoad(srv,index,wot)
  %1815 = extractvalue %dx.types.ResRet.f32 %1814, 3
  %1816 = bitcast float %1802 to i32
  %1817 = lshr i32 %1816, 16
  %1818 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1817)  ; LegacyF16ToF32(value)
  %1819 = fcmp fast ogt float %1818, 0.000000e+00
  br i1 %1819, label %1820, label %2185

; <label>:1820                                    ; preds = %1784
  %1821 = extractvalue %dx.types.ResRet.f32 %1814, 2
  %1822 = extractvalue %dx.types.ResRet.f32 %1814, 1
  %1823 = extractvalue %dx.types.ResRet.f32 %1814, 0
  %1824 = extractvalue %dx.types.ResRet.f32 %1804, 3
  %1825 = extractvalue %dx.types.ResRet.f32 %1801, 2
  %1826 = extractvalue %dx.types.ResRet.f32 %1801, 0
  %1827 = add i32 %1793, 5
  %1828 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1795, i32 %1827, i32 undef)  ; BufferLoad(srv,index,wot)
  %1829 = extractvalue %dx.types.ResRet.f32 %1828, 3
  %1830 = bitcast float %1824 to i32
  %1831 = lshr i32 %1830, 16
  %1832 = and i32 %1831, 3
  %1833 = bitcast float %1826 to i32
  %1834 = and i32 %1833, 65535
  %1835 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1834)  ; LegacyF16ToF32(value)
  %1836 = lshr i32 %1833, 16
  %1837 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1836)  ; LegacyF16ToF32(value)
  %1838 = bitcast float %1825 to i32
  %1839 = and i32 %1838, 65535
  %1840 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1839)  ; LegacyF16ToF32(value)
  %1841 = fsub fast float -0.000000e+00, %1840
  %1842 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1816)  ; LegacyF16ToF32(value)
  %1843 = fsub fast float -0.000000e+00, %1842
  %1844 = fcmp fast oeq float %1813, 0.000000e+00
  %1845 = icmp eq i32 %1832, 2
  %1846 = icmp eq i32 %1832, 3
  %1847 = bitcast float %1829 to i32
  %1848 = and i32 %1847, 65535
  %1849 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1848)  ; LegacyF16ToF32(value)
  %1850 = lshr i32 %1847, 16
  %1851 = and i32 %1850, 1023
  %1852 = uitofp i32 %1851 to float
  %1853 = fmul fast float %1852, 9.765625e-04
  %1854 = fsub fast float %1823, %505
  %1855 = fsub fast float %1822, %506
  %1856 = fsub fast float %1821, %507
  %1857 = call float @dx.op.dot3.f32(i32 55, float %1854, float %1855, float %1856, float %1854, float %1855, float %1856)  ; Dot3(ax,ay,az,bx,by,bz)
  %1858 = call float @dx.op.unary.f32(i32 25, float %1857)  ; Rsqrt(value)
  %1859 = fmul fast float %1858, %1854
  %1860 = fmul fast float %1858, %1855
  %1861 = fmul fast float %1858, %1856
  br i1 %1844, label %1862, label %1869

; <label>:1862                                    ; preds = %1820
  %1863 = fmul fast float %1815, %1815
  %1864 = fmul fast float %1863, %1857
  %1865 = fmul fast float %1864, %1864
  %1866 = fsub fast float 1.000000e+00, %1865
  %1867 = call float @dx.op.unary.f32(i32 7, float %1866)  ; Saturate(value)
  %1868 = fmul fast float %1867, %1867
  br label %1879

; <label>:1869                                    ; preds = %1820
  %1870 = fmul fast float %1854, %1815
  %1871 = fmul fast float %1855, %1815
  %1872 = fmul fast float %1856, %1815
  %1873 = call float @dx.op.dot3.f32(i32 55, float %1870, float %1871, float %1872, float %1870, float %1871, float %1872)  ; Dot3(ax,ay,az,bx,by,bz)
  %1874 = call float @dx.op.unary.f32(i32 7, float %1873)  ; Saturate(value)
  %1875 = fsub fast float 1.000000e+00, %1874
  %1876 = call float @dx.op.unary.f32(i32 23, float %1875)  ; Log(value)
  %1877 = fmul fast float %1876, %1813
  %1878 = call float @dx.op.unary.f32(i32 21, float %1877)  ; Exp(value)
  br label %1879

; <label>:1879                                    ; preds = %1869, %1862
  %1880 = phi float [ %1868, %1862 ], [ %1878, %1869 ]
  br i1 %1845, label %1881, label %1888

; <label>:1881                                    ; preds = %1879
  %1882 = call float @dx.op.dot3.f32(i32 55, float %1859, float %1860, float %1861, float %1805, float %1806, float %1807)  ; Dot3(ax,ay,az,bx,by,bz)
  %1883 = fsub fast float %1882, %1835
  %1884 = fmul fast float %1883, %1837
  %1885 = call float @dx.op.unary.f32(i32 7, float %1884)  ; Saturate(value)
  %1886 = fmul fast float %1885, %1885
  %1887 = fmul fast float %1886, %1880
  br label %1888

; <label>:1888                                    ; preds = %1881, %1879
  %1889 = phi float [ %1887, %1881 ], [ %1880, %1879 ]
  br i1 %1846, label %1890, label %1894

; <label>:1890                                    ; preds = %1888
  %1891 = call float @dx.op.dot3.f32(i32 55, float %1805, float %1806, float %1807, float %1859, float %1860, float %1861)  ; Dot3(ax,ay,az,bx,by,bz)
  %1892 = fcmp fast olt float %1891, 0.000000e+00
  %1893 = select i1 %1892, float 0.000000e+00, float %1889
  br label %1894

; <label>:1894                                    ; preds = %1890, %1888
  %1895 = phi float [ %1893, %1890 ], [ %1889, %1888 ]
  br i1 %1846, label %1896, label %2128

; <label>:1896                                    ; preds = %1894
  %1897 = fmul fast float %1807, %1798
  %1898 = fmul fast float %1806, %1799
  %1899 = fsub fast float %1897, %1898
  %1900 = fmul fast float %1805, %1799
  %1901 = fmul fast float %1807, %1797
  %1902 = fsub fast float %1900, %1901
  %1903 = fmul fast float %1806, %1797
  %1904 = fmul fast float %1805, %1798
  %1905 = fsub fast float %1903, %1904
  %1906 = fcmp fast ogt float %1853, 0x3FA1EB8520000000
  br i1 %1906, label %1907, label %2002

; <label>:1907                                    ; preds = %1896
  %1908 = fmul fast float %1854, %1899
  %1909 = call float @dx.op.tertiary.f32(i32 46, float %1902, float %1855, float %1908)  ; FMad(a,b,c)
  %1910 = call float @dx.op.tertiary.f32(i32 46, float %1905, float %1856, float %1909)  ; FMad(a,b,c)
  %1911 = fmul fast float %1854, %1797
  %1912 = call float @dx.op.tertiary.f32(i32 46, float %1798, float %1855, float %1911)  ; FMad(a,b,c)
  %1913 = call float @dx.op.tertiary.f32(i32 46, float %1799, float %1856, float %1912)  ; FMad(a,b,c)
  %1914 = fmul fast float %1854, %1805
  %1915 = call float @dx.op.tertiary.f32(i32 46, float %1806, float %1855, float %1914)  ; FMad(a,b,c)
  %1916 = call float @dx.op.tertiary.f32(i32 46, float %1807, float %1856, float %1915)  ; FMad(a,b,c)
  %1917 = fmul fast float %1853, %1853
  %1918 = fsub fast float 1.000000e+00, %1917
  %1919 = call float @dx.op.unary.f32(i32 24, float %1918)  ; Sqrt(value)
  %1920 = fmul fast float %1853, %1849
  %1921 = call float @dx.op.binary.f32(i32 36, float %1916, float %1920)  ; FMin(a,b)
  %1922 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %1920)  ; FMax(a,b)
  %1923 = fdiv fast float %1921, %1922
  %1924 = fmul fast float %1919, %1849
  %1925 = fmul fast float %1924, %1923
  %1926 = fcmp fast ogt float %1910, 0.000000e+00
  %1927 = fcmp fast ogt float %1913, 0.000000e+00
  %1928 = fcmp fast olt float %1910, 0.000000e+00
  %1929 = fcmp fast olt float %1913, 0.000000e+00
  %1930 = zext i1 %1926 to i32
  %1931 = zext i1 %1927 to i32
  %1932 = zext i1 %1928 to i32
  %1933 = zext i1 %1929 to i32
  %1934 = sub nsw i32 %1930, %1932
  %1935 = sub nsw i32 %1931, %1933
  %1936 = sitofp i32 %1934 to float
  %1937 = sitofp i32 %1935 to float
  %1938 = fadd fast float %1925, %1840
  %1939 = fadd fast float %1925, %1842
  %1940 = call float @dx.op.unary.f32(i32 6, float %1910)  ; FAbs(value)
  %1941 = call float @dx.op.unary.f32(i32 6, float %1913)  ; FAbs(value)
  %1942 = call float @dx.op.binary.f32(i32 35, float %1940, float %1938)  ; FMax(a,b)
  %1943 = call float @dx.op.binary.f32(i32 35, float %1941, float %1939)  ; FMax(a,b)
  %1944 = fsub fast float %1841, %1925
  %1945 = fadd fast float %1944, %1942
  %1946 = fmul fast float %1945, %1936
  %1947 = fsub fast float %1843, %1925
  %1948 = fadd fast float %1947, %1943
  %1949 = fmul fast float %1948, %1937
  %1950 = fsub fast float %1916, %1921
  %1951 = call float @dx.op.binary.f32(i32 35, float %1950, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1952 = call float @dx.op.unary.f32(i32 6, float %1946)  ; FAbs(value)
  %1953 = call float @dx.op.unary.f32(i32 6, float %1949)  ; FAbs(value)
  %1954 = fdiv fast float %1952, %1951
  %1955 = fdiv fast float %1953, %1951
  %1956 = fmul fast float %1954, %1921
  %1957 = fmul fast float %1955, %1921
  %1958 = fsub fast float %1956, %1925
  %1959 = fsub fast float %1957, %1925
  %1960 = fsub fast float -0.000000e+00, %1936
  %1961 = fsub fast float -0.000000e+00, %1937
  %1962 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1960)  ; FMax(a,b)
  %1963 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1961)  ; FMax(a,b)
  %1964 = fmul fast float %1958, %1962
  %1965 = fmul fast float %1959, %1963
  %1966 = fsub fast float %1964, %1840
  %1967 = fsub fast float %1965, %1842
  %1968 = call float @dx.op.binary.f32(i32 35, float %1966, float %1841)  ; FMax(a,b)
  %1969 = call float @dx.op.binary.f32(i32 35, float %1967, float %1843)  ; FMax(a,b)
  %1970 = call float @dx.op.binary.f32(i32 36, float %1968, float %1840)  ; FMin(a,b)
  %1971 = call float @dx.op.binary.f32(i32 36, float %1969, float %1842)  ; FMin(a,b)
  %1972 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1936)  ; FMax(a,b)
  %1973 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1937)  ; FMax(a,b)
  %1974 = fmul fast float %1972, %1958
  %1975 = fmul fast float %1973, %1959
  %1976 = fsub fast float %1840, %1974
  %1977 = fsub fast float %1842, %1975
  %1978 = call float @dx.op.binary.f32(i32 35, float %1976, float %1841)  ; FMax(a,b)
  %1979 = call float @dx.op.binary.f32(i32 35, float %1977, float %1843)  ; FMax(a,b)
  %1980 = call float @dx.op.binary.f32(i32 36, float %1978, float %1840)  ; FMin(a,b)
  %1981 = call float @dx.op.binary.f32(i32 36, float %1979, float %1842)  ; FMin(a,b)
  %1982 = fadd fast float %1980, %1970
  %1983 = fadd fast float %1981, %1971
  %1984 = fmul fast float %1982, 5.000000e-01
  %1985 = fmul fast float %1983, 5.000000e-01
  %1986 = fsub fast float %1980, %1970
  %1987 = fsub fast float %1981, %1971
  %1988 = fmul fast float %1986, 5.000000e-01
  %1989 = fmul fast float %1987, 5.000000e-01
  %1990 = fmul fast float %1984, %1899
  %1991 = fmul fast float %1984, %1902
  %1992 = fmul fast float %1984, %1905
  %1993 = fsub fast float %1854, %1990
  %1994 = fsub fast float %1855, %1991
  %1995 = fsub fast float %1856, %1992
  %1996 = fmul fast float %1985, %1797
  %1997 = fmul fast float %1985, %1798
  %1998 = fmul fast float %1985, %1799
  %1999 = fsub fast float %1993, %1996
  %2000 = fsub fast float %1994, %1997
  %2001 = fsub fast float %1995, %1998
  br label %2002

; <label>:2002                                    ; preds = %1907, %1896
  %2003 = phi float [ %1999, %1907 ], [ %1854, %1896 ]
  %2004 = phi float [ %2000, %1907 ], [ %1855, %1896 ]
  %2005 = phi float [ %2001, %1907 ], [ %1856, %1896 ]
  %2006 = phi float [ %1988, %1907 ], [ %1840, %1896 ]
  %2007 = phi float [ %1989, %1907 ], [ %1842, %1896 ]
  %2008 = fcmp fast oeq float %2006, 0.000000e+00
  %2009 = fcmp fast oeq float %2007, 0.000000e+00
  %2010 = or i1 %2008, %2009
  br i1 %2010, label %2158, label %2011

; <label>:2011                                    ; preds = %2002
  %2012 = call float @dx.op.dot3.f32(i32 55, float %1899, float %1902, float %1905, float %2003, float %2004, float %2005)  ; Dot3(ax,ay,az,bx,by,bz)
  %2013 = call float @dx.op.dot3.f32(i32 55, float %1797, float %1798, float %1799, float %2003, float %2004, float %2005)  ; Dot3(ax,ay,az,bx,by,bz)
  %2014 = call float @dx.op.dot3.f32(i32 55, float %1805, float %1806, float %1807, float %2003, float %2004, float %2005)  ; Dot3(ax,ay,az,bx,by,bz)
  %2015 = fsub fast float %2012, %2006
  %2016 = fadd fast float %2012, %2006
  %2017 = fsub fast float %2013, %2007
  %2018 = fadd fast float %2013, %2007
  %2019 = fmul fast float %2014, %2014
  %2020 = call float @dx.op.dot2.f32(i32 54, float %2015, float %2017, float %2015, float %2017)  ; Dot2(ax,ay,bx,by)
  %2021 = fadd fast float %2020, %2019
  %2022 = call float @dx.op.unary.f32(i32 25, float %2021)  ; Rsqrt(value)
  %2023 = fmul fast float %2022, %2015
  %2024 = fmul fast float %2022, %2017
  %2025 = fmul fast float %2022, %2014
  %2026 = call float @dx.op.dot2.f32(i32 54, float %2016, float %2017, float %2016, float %2017)  ; Dot2(ax,ay,bx,by)
  %2027 = fadd fast float %2026, %2019
  %2028 = call float @dx.op.unary.f32(i32 25, float %2027)  ; Rsqrt(value)
  %2029 = fmul fast float %2028, %2016
  %2030 = fmul fast float %2028, %2017
  %2031 = fmul fast float %2028, %2014
  %2032 = call float @dx.op.dot2.f32(i32 54, float %2016, float %2018, float %2016, float %2018)  ; Dot2(ax,ay,bx,by)
  %2033 = fadd fast float %2032, %2019
  %2034 = call float @dx.op.unary.f32(i32 25, float %2033)  ; Rsqrt(value)
  %2035 = fmul fast float %2034, %2016
  %2036 = fmul fast float %2034, %2018
  %2037 = fmul fast float %2034, %2014
  %2038 = call float @dx.op.dot2.f32(i32 54, float %2015, float %2018, float %2015, float %2018)  ; Dot2(ax,ay,bx,by)
  %2039 = fadd fast float %2038, %2019
  %2040 = call float @dx.op.unary.f32(i32 25, float %2039)  ; Rsqrt(value)
  %2041 = fmul fast float %2040, %2015
  %2042 = fmul fast float %2040, %2018
  %2043 = fmul fast float %2040, %2014
  %2044 = call float @dx.op.dot3.f32(i32 55, float %2023, float %2024, float %2025, float %2029, float %2030, float %2031)  ; Dot3(ax,ay,az,bx,by,bz)
  %2045 = call float @dx.op.dot3.f32(i32 55, float %2029, float %2030, float %2031, float %2035, float %2036, float %2037)  ; Dot3(ax,ay,az,bx,by,bz)
  %2046 = call float @dx.op.dot3.f32(i32 55, float %2035, float %2036, float %2037, float %2041, float %2042, float %2043)  ; Dot3(ax,ay,az,bx,by,bz)
  %2047 = call float @dx.op.dot3.f32(i32 55, float %2041, float %2042, float %2043, float %2023, float %2024, float %2025)  ; Dot3(ax,ay,az,bx,by,bz)
  %2048 = fmul fast float %2044, 0x3FC6666660000000
  %2049 = fsub fast float 0x3FF921FF20000000, %2048
  %2050 = fadd fast float %2044, 1.000000e+00
  %2051 = call float @dx.op.unary.f32(i32 25, float %2050)  ; Rsqrt(value)
  %2052 = fmul fast float %2045, 0x3FC6666660000000
  %2053 = fsub fast float 0x3FF921FF20000000, %2052
  %2054 = fadd fast float %2045, 1.000000e+00
  %2055 = call float @dx.op.unary.f32(i32 25, float %2054)  ; Rsqrt(value)
  %2056 = fmul fast float %2055, %2053
  %2057 = fmul fast float %2046, 0x3FC6666660000000
  %2058 = fsub fast float 0x3FF921FF20000000, %2057
  %2059 = fadd fast float %2046, 1.000000e+00
  %2060 = call float @dx.op.unary.f32(i32 25, float %2059)  ; Rsqrt(value)
  %2061 = fmul fast float %2047, 0x3FC6666660000000
  %2062 = fsub fast float 0x3FF921FF20000000, %2061
  %2063 = fadd fast float %2047, 1.000000e+00
  %2064 = call float @dx.op.unary.f32(i32 25, float %2063)  ; Rsqrt(value)
  %2065 = fmul fast float %2064, %2062
  %2066 = fmul fast float %2049, %2051
  %2067 = fsub fast float -0.000000e+00, %2066
  %2068 = fmul fast float %2023, %2067
  %2069 = fmul fast float %2024, %2067
  %2070 = fmul fast float %2025, %2067
  %2071 = fmul fast float %2056, %2035
  %2072 = fmul fast float %2056, %2036
  %2073 = fmul fast float %2056, %2037
  %2074 = fadd fast float %2071, %2068
  %2075 = fadd fast float %2072, %2069
  %2076 = fadd fast float %2073, %2070
  %2077 = fmul fast float %2076, %2030
  %2078 = fmul fast float %2075, %2031
  %2079 = fsub fast float %2077, %2078
  %2080 = fmul fast float %2074, %2031
  %2081 = fmul fast float %2076, %2029
  %2082 = fsub fast float %2080, %2081
  %2083 = fmul fast float %2075, %2029
  %2084 = fmul fast float %2074, %2030
  %2085 = fsub fast float %2083, %2084
  %2086 = fmul fast float %2065, %2023
  %2087 = fmul fast float %2065, %2024
  %2088 = fmul fast float %2065, %2025
  %2089 = fmul fast float %2058, %2060
  %2090 = fsub fast float -0.000000e+00, %2089
  %2091 = fmul fast float %2035, %2090
  %2092 = fmul fast float %2036, %2090
  %2093 = fmul fast float %2037, %2090
  %2094 = fadd fast float %2086, %2091
  %2095 = fadd fast float %2087, %2092
  %2096 = fadd fast float %2088, %2093
  %2097 = fmul fast float %2096, %2042
  %2098 = fmul fast float %2095, %2043
  %2099 = fsub fast float %2097, %2098
  %2100 = fmul fast float %2094, %2043
  %2101 = fmul fast float %2096, %2041
  %2102 = fsub fast float %2100, %2101
  %2103 = fmul fast float %2095, %2041
  %2104 = fmul fast float %2094, %2042
  %2105 = fsub fast float %2103, %2104
  %2106 = fadd fast float %2099, %2079
  %2107 = fadd fast float %2102, %2082
  %2108 = fadd fast float %2105, %2085
  %2109 = fmul fast float %2106, %1899
  %2110 = fmul fast float %2106, %1902
  %2111 = fmul fast float %2106, %1905
  %2112 = fmul fast float %2107, %1797
  %2113 = fmul fast float %2107, %1798
  %2114 = fmul fast float %2107, %1799
  %2115 = fadd fast float %2109, %2112
  %2116 = fadd fast float %2110, %2113
  %2117 = fadd fast float %2111, %2114
  %2118 = fmul fast float %2108, %1805
  %2119 = fmul fast float %2108, %1806
  %2120 = fmul fast float %2108, %1807
  %2121 = fadd fast float %2115, %2118
  %2122 = fadd fast float %2116, %2119
  %2123 = fadd fast float %2117, %2120
  %2124 = call float @dx.op.dot3.f32(i32 55, float %2121, float %2122, float %2123, float %2121, float %2122, float %2123)  ; Dot3(ax,ay,az,bx,by,bz)
  %2125 = call float @dx.op.unary.f32(i32 25, float %2124)  ; Rsqrt(value)
  %2126 = fmul fast float %2124, 5.000000e-01
  %2127 = fmul fast float %2126, %2125
  br label %2158

; <label>:2128                                    ; preds = %1894
  %2129 = fmul fast float %1842, 5.000000e-01
  %2130 = fmul fast float %2129, %1797
  %2131 = fmul fast float %2129, %1798
  %2132 = fmul fast float %2129, %1799
  %2133 = fsub fast float %1854, %2130
  %2134 = fsub fast float %1855, %2131
  %2135 = fsub fast float %1856, %2132
  %2136 = fadd fast float %2130, %1854
  %2137 = fadd fast float %2131, %1855
  %2138 = fadd fast float %2132, %1856
  %2139 = fcmp fast ogt float %1842, 0.000000e+00
  %2140 = call float @dx.op.dot3.f32(i32 55, float %2133, float %2134, float %2135, float %2133, float %2134, float %2135)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %2139, label %2141, label %2152, !dx.controlflow.hints !61

; <label>:2141                                    ; preds = %2128
  %2142 = call float @dx.op.dot3.f32(i32 55, float %2136, float %2137, float %2138, float %2136, float %2137, float %2138)  ; Dot3(ax,ay,az,bx,by,bz)
  %2143 = call float @dx.op.unary.f32(i32 25, float %2140)  ; Rsqrt(value)
  %2144 = call float @dx.op.unary.f32(i32 25, float %2142)  ; Rsqrt(value)
  %2145 = fmul fast float %2144, %2143
  %2146 = call float @dx.op.dot3.f32(i32 55, float %2133, float %2134, float %2135, float %2136, float %2137, float %2138)  ; Dot3(ax,ay,az,bx,by,bz)
  %2147 = fmul fast float %2146, 5.000000e-01
  %2148 = fadd fast float %2147, %1781
  %2149 = fmul fast float %2148, %2145
  %2150 = fadd fast float %2149, 5.000000e-01
  %2151 = fdiv fast float %2145, %2150
  br label %2155

; <label>:2152                                    ; preds = %2128
  %2153 = fadd fast float %2140, %1781
  %2154 = fdiv fast float 1.000000e+00, %2153
  br label %2155

; <label>:2155                                    ; preds = %2152, %2141
  %2156 = phi float [ %2151, %2141 ], [ %2154, %2152 ]
  %2157 = select i1 %1844, float %2156, float 1.000000e+00
  br label %2158

; <label>:2158                                    ; preds = %2155, %2011, %2002
  %2159 = phi float [ %2157, %2155 ], [ 0.000000e+00, %2002 ], [ %2127, %2011 ]
  %2160 = fsub fast float -0.000000e+00, %538
  %2161 = fsub fast float -0.000000e+00, %539
  %2162 = fsub fast float -0.000000e+00, %540
  %2163 = call float @dx.op.dot3.f32(i32 55, float %1859, float %1860, float %1861, float %2160, float %2161, float %2162)  ; Dot3(ax,ay,az,bx,by,bz)
  %2164 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %2165 = extractvalue %dx.types.CBufRet.f32 %2164, 1
  %2166 = fmul fast float %2165, %2165
  %2167 = fsub fast float 1.000000e+00, %2166
  %2168 = fmul fast float %2163, 2.000000e+00
  %2169 = fadd fast float %2168, %2165
  %2170 = fmul fast float %2169, %2165
  %2171 = fadd fast float %2170, 1.000000e+00
  %2172 = call float @dx.op.unary.f32(i32 24, float %2171)  ; Sqrt(value)
  %2173 = fmul fast float %2172, 0x402921FB60000000
  %2174 = fmul fast float %2173, %2171
  %2175 = fdiv fast float %2167, %2174
  %2176 = fmul fast float %1895, %1818
  %2177 = fmul fast float %2176, %2159
  %2178 = fmul fast float %2177, %2175
  %2179 = fmul fast float %2178, %1810
  %2180 = fmul fast float %2178, %1811
  %2181 = fmul fast float %2178, %1812
  %2182 = fadd fast float %2179, %1785
  %2183 = fadd fast float %2180, %1786
  %2184 = fadd fast float %2181, %1787
  br label %2185

; <label>:2185                                    ; preds = %2158, %1784
  %2186 = phi float [ %2182, %2158 ], [ %1785, %1784 ]
  %2187 = phi float [ %2183, %2158 ], [ %1786, %1784 ]
  %2188 = phi float [ %2184, %2158 ], [ %1787, %1784 ]
  %2189 = add nuw i32 %1788, 1
  %2190 = icmp eq i32 %2189, %1711
  br i1 %2190, label %2191, label %1784, !llvm.loop !62

; <label>:2191                                    ; preds = %2185
  br label %2192

; <label>:2192                                    ; preds = %2191, %1748
  %2193 = phi float [ %1684, %1748 ], [ %2186, %2191 ]
  %2194 = phi float [ %1685, %1748 ], [ %2187, %2191 ]
  %2195 = phi float [ %1686, %1748 ], [ %2188, %2191 ]
  %2196 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %2197 = extractvalue %dx.types.CBufRet.f32 %2196, 2
  %2198 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2199 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2198, i32 0, i32 %45, i32 %46, i32 %47, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2200 = extractvalue %dx.types.ResRet.f32 %2199, 0
  %2201 = extractvalue %dx.types.ResRet.f32 %2199, 1
  %2202 = extractvalue %dx.types.ResRet.f32 %2199, 2
  %2203 = fmul fast float %2200, %2197
  %2204 = fmul fast float %2201, %2197
  %2205 = fmul fast float %2202, %2197
  %2206 = fadd fast float %2203, %2193
  %2207 = fadd fast float %2204, %2194
  %2208 = fadd fast float %2205, %2195
  %2209 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2210 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2209, i32 0, i32 %45, i32 %46, i32 %47, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2211 = extractvalue %dx.types.ResRet.f32 %2210, 0
  %2212 = extractvalue %dx.types.ResRet.f32 %2210, 1
  %2213 = extractvalue %dx.types.ResRet.f32 %2210, 2
  %2214 = extractvalue %dx.types.ResRet.f32 %2210, 3
  %2215 = call float @dx.op.dot3.f32(i32 55, float %2211, float %2212, float %2213, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %2216 = fadd fast float %2214, %2215
  %2217 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 86)  ; CBufferLoadLegacy(handle,regIndex)
  %2218 = extractvalue %dx.types.CBufRet.i32 %2217, 0
  %2219 = icmp eq i32 %2218, 0
  br i1 %2219, label %2226, label %2220, !dx.controlflow.hints !63

; <label>:2220                                    ; preds = %2192
  %2221 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2222 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2221, i32 0, i32 %45, i32 %46, i32 %47, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2223 = extractvalue %dx.types.ResRet.f32 %2222, 0
  %2224 = extractvalue %dx.types.ResRet.f32 %2222, 1
  %2225 = extractvalue %dx.types.ResRet.f32 %2222, 2
  br label %2226

; <label>:2226                                    ; preds = %2220, %2192
  %2227 = phi float [ %2223, %2220 ], [ 0.000000e+00, %2192 ]
  %2228 = phi float [ %2224, %2220 ], [ 0.000000e+00, %2192 ]
  %2229 = phi float [ %2225, %2220 ], [ 0.000000e+00, %2192 ]
  %2230 = extractvalue %dx.types.CBufRet.f32 %2196, 1
  %2231 = fmul fast float %2211, %2206
  %2232 = fmul fast float %2212, %2207
  %2233 = fmul fast float %2213, %2208
  %2234 = fadd fast float %2227, %2231
  %2235 = fadd fast float %2228, %2232
  %2236 = fadd fast float %2229, %2233
  %2237 = fmul fast float %2230, %2234
  %2238 = fmul fast float %2230, %2235
  %2239 = fmul fast float %2230, %2236
  %2240 = fcmp fast ogt float %406, 0.000000e+00
  br i1 %2240, label %2241, label %2267, !dx.controlflow.hints !64

; <label>:2241                                    ; preds = %2226
  %2242 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2243 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2244 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2242, %dx.types.Handle %2243, float %387, float %388, float %383, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2245 = extractvalue %dx.types.ResRet.f32 %2244, 0
  %2246 = extractvalue %dx.types.ResRet.f32 %2244, 1
  %2247 = extractvalue %dx.types.ResRet.f32 %2244, 2
  %2248 = extractvalue %dx.types.ResRet.f32 %2244, 3
  %2249 = extractvalue %dx.types.CBufRet.f32 %1198, 1
  %2250 = fmul fast float %2230, %2249
  %2251 = fmul fast float %2250, %2245
  %2252 = fmul fast float %2250, %2246
  %2253 = fmul fast float %2250, %2247
  %2254 = fmul fast float %2250, %2248
  %2255 = fsub fast float %2251, %2237
  %2256 = fsub fast float %2252, %2238
  %2257 = fsub fast float %2253, %2239
  %2258 = fsub fast float %2254, %2216
  %2259 = fmul fast float %2255, %406
  %2260 = fmul fast float %2256, %406
  %2261 = fmul fast float %2257, %406
  %2262 = fmul fast float %2258, %406
  %2263 = fadd fast float %2259, %2237
  %2264 = fadd fast float %2260, %2238
  %2265 = fadd fast float %2261, %2239
  %2266 = fadd fast float %2262, %2216
  br label %2267

; <label>:2267                                    ; preds = %2241, %2226
  %2268 = phi float [ %2263, %2241 ], [ %2237, %2226 ]
  %2269 = phi float [ %2264, %2241 ], [ %2238, %2226 ]
  %2270 = phi float [ %2265, %2241 ], [ %2239, %2226 ]
  %2271 = phi float [ %2266, %2241 ], [ %2216, %2226 ]
  %2272 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %40, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2273 = extractvalue %dx.types.CBufRet.i32 %2272, 0
  %2274 = extractvalue %dx.types.CBufRet.i32 %2272, 1
  %2275 = extractvalue %dx.types.CBufRet.i32 %2272, 2
  %2276 = icmp slt i32 %45, %2273
  %2277 = icmp slt i32 %46, %2274
  %2278 = icmp slt i32 %47, %2275
  %2279 = and i1 %2276, %2277
  %2280 = and i1 %2278, %2279
  br i1 %2280, label %2281, label %2295

; <label>:2281                                    ; preds = %2267
  %2282 = bitcast float %2268 to i32
  %2283 = bitcast float %2269 to i32
  %2284 = bitcast float %2270 to i32
  %2285 = bitcast float %2271 to i32
  %2286 = icmp ult i32 %2282, 2139095040
  %2287 = icmp ult i32 %2283, 2139095040
  %2288 = icmp ult i32 %2284, 2139095040
  %2289 = icmp ult i32 %2285, 2139095040
  %2290 = select i1 %2286, float %2268, float 0.000000e+00
  %2291 = select i1 %2287, float %2269, float 0.000000e+00
  %2292 = select i1 %2288, float %2270, float 0.000000e+00
  %2293 = select i1 %2289, float %2271, float 0.000000e+00
  %2294 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2294, i32 %45, i32 %46, i32 %47, float %2290, float %2291, float %2292, float %2293, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %2295

; <label>:2295                                    ; preds = %2281, %2267, %212
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!51}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !34, !36, !42}
!5 = !{!6, !8, !10, !11, !12, !13, !14, !15, !16, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33}
!6 = !{i32 0, %"class.Texture3D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 5}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 4, i32 0, !9}
!11 = !{i32 3, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 4, i32 0, !9}
!12 = !{i32 4, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 4, i32 0, !9}
!13 = !{i32 5, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 4, i32 0, !9}
!14 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !9}
!15 = !{i32 7, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 7, i32 1, i32 11, i32 0, null}
!16 = !{i32 8, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 8, i32 1, i32 12, i32 0, !17}
!17 = !{i32 1, i32 4}
!18 = !{i32 9, %"class.Texture2DArray<unsigned int>"* undef, !"", i32 0, i32 9, i32 1, i32 7, i32 0, !7}
!19 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !9}
!20 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !9}
!21 = !{i32 12, %"class.Buffer<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 10, i32 0, !9}
!22 = !{i32 13, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 13, i32 1, i32 10, i32 0, !7}
!23 = !{i32 14, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 14, i32 1, i32 10, i32 0, !7}
!24 = !{i32 15, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 5, i32 0, !9}
!25 = !{i32 16, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 16, i32 1, i32 4, i32 0, !9}
!26 = !{i32 17, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 17, i32 1, i32 4, i32 0, !7}
!27 = !{i32 18, %"class.Texture2D<float>"* undef, !"", i32 0, i32 18, i32 1, i32 2, i32 0, !9}
!28 = !{i32 19, %"class.Texture2D<float>"* undef, !"", i32 0, i32 19, i32 1, i32 2, i32 0, !9}
!29 = !{i32 20, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 20, i32 1, i32 4, i32 0, !9}
!30 = !{i32 21, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 21, i32 1, i32 4, i32 0, !9}
!31 = !{i32 22, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 22, i32 1, i32 4, i32 0, !9}
!32 = !{i32 23, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 23, i32 1, i32 4, i32 0, !9}
!33 = !{i32 24, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 24, i32 1, i32 2, i32 0, !9}
!34 = !{!35}
!35 = !{i32 0, %"class.RWTexture3D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i1 false, i1 false, i1 false, !9}
!36 = !{!37, !38, !39, !40, !41}
!37 = !{i32 0, %hostlayout._RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 1380, null}
!38 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!39 = !{i32 2, %hostlayout.UniformBufferConstants_ForwardLightData* undef, !"", i32 0, i32 2, i32 1, i32 708, null}
!40 = !{i32 3, %UniformBufferConstants_FogStruct* undef, !"", i32 0, i32 3, i32 1, i32 180, null}
!41 = !{i32 4, %UniformBufferConstants_VolumetricFog* undef, !"", i32 0, i32 4, i32 1, i32 104, null}
!42 = !{!43, !44, !45, !46, !47, !48, !49, !50}
!43 = !{i32 0, %struct.SamplerState* undef, !"", i32 1000, i32 4, i32 1, i32 0, null}
!44 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!45 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!46 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!47 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!48 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!49 = !{i32 6, %struct.SamplerState* undef, !"", i32 0, i32 5, i32 1, i32 0, null}
!50 = !{i32 7, %struct.SamplerState* undef, !"", i32 0, i32 6, i32 1, i32 0, null}
!51 = !{void ()* @LightScatteringCS, !"LightScatteringCS", null, !4, !52}
!52 = !{i32 0, i64 16, i32 4, !53, i32 5, !54}
!53 = !{i32 4, i32 4, i32 4}
!54 = !{i32 0}
!55 = distinct !{!55, !"dx.controlflow.hints", i32 2}
!56 = distinct !{!56, !"dx.controlflow.hints", i32 1}
!57 = distinct !{!57, !"dx.controlflow.hints", i32 1}
!58 = distinct !{!58, !"dx.controlflow.hints", i32 1}
!59 = distinct !{!59, !60}
!60 = !{!"llvm.loop.unroll.disable"}
!61 = distinct !{!61, !"dx.controlflow.hints", i32 1}
!62 = distinct !{!62, !60}
!63 = distinct !{!63, !"dx.controlflow.hints", i32 1}
!64 = distinct !{!64, !"dx.controlflow.hints", i32 1}
