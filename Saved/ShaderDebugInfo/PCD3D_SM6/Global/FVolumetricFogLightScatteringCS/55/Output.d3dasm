;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 038798eddf2cd6efb6784c0fa8ef4549
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(4,4,4)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct hostlayout._RootShaderParameters
;   {
;
;       row_major float4x4 UnjitteredClipToTranslatedWorld;; Offset:   64
;       row_major float4x4 UnjitteredPrevTranslatedWorldToClip;; Offset:  128
;       float4 FrameJitterOffsets[16];                ; Offset:  192
;       float HistoryWeight;                          ; Offset:  448
;       uint HistoryMissSuperSampleCount;             ; Offset:  452
;       float AOObjectMaxDistance;                    ; Offset:  592
;       float AOStepScale;                            ; Offset:  596
;       float AOStepExponentScale;                    ; Offset:  600
;       float AOMaxViewDistance;                      ; Offset:  604
;       float AOGlobalMaxOcclusionDistance;           ; Offset:  608
;       float4 GlobalVolumeTranslatedCenterAndExtent[6];; Offset:  656
;       float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset:  752
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset:  848
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset:  944
;       float GlobalDistanceFieldMipFactor;           ; Offset: 1040
;       float GlobalDistanceFieldMipTransition;       ; Offset: 1044
;       uint GlobalDistanceFieldClipmapSizeInPages;   ; Offset: 1048
;       float3 GlobalDistanceFieldInvPageAtlasSize;   ; Offset: 1056
;       float3 GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 1072
;       float GlobalVolumeDimension;                  ; Offset: 1084
;       float GlobalVolumeTexelSize;                  ; Offset: 1088
;       float MaxGlobalDFAOConeDistance;              ; Offset: 1092
;       uint NumGlobalSDFClipmaps;                    ; Offset: 1096
;       float CoveredExpandSurfaceScale;              ; Offset: 1100
;       float NotCoveredExpandSurfaceScale;           ; Offset: 1104
;       float NotCoveredMinStepScale;                 ; Offset: 1108
;       float DitheredTransparencyStepThreshold;      ; Offset: 1112
;       float DitheredTransparencyTraceThreshold;     ; Offset: 1116
;       float4 SkySH[3];                              ; Offset: 1136
;       row_major float4x4 DirectionalLightFunctionTranslatedWorldToShadow;; Offset: 1184
;       float2 PrevConservativeDepthTextureSize;      ; Offset: 1312
;       float2 UseHeightFogColors;                    ; Offset: 1320
;       float2 LightScatteringHistoryPreExposureAndInv;; Offset: 1328
;       float StaticLightingScatteringIntensity;      ; Offset: 1336
;       float SkyLightVolumetricScatteringIntensity;  ; Offset: 1340
;       float SkyLightUseStaticShadowing;             ; Offset: 1344
;       float PhaseG;                                 ; Offset: 1348
;       float InverseSquaredLightDistanceBiasScale;   ; Offset: 1352
;       float LightScatteringSampleJitterMultiplier;  ; Offset: 1356
;       float UseDirectionalLightShadowing;           ; Offset: 1368
;       uint UseConservativeDepthTexture;             ; Offset: 1372
;       uint UseEmissive;                             ; Offset: 1376
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:  1380
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_ForwardLightData
; {
;
;   struct hostlayout.UniformBufferConstants_ForwardLightData
;   {
;
;       uint ForwardLightData_NumLocalLights;         ; Offset:    0
;       uint ForwardLightData_NumReflectionCaptures;  ; Offset:    4
;       uint ForwardLightData_HasDirectionalLight;    ; Offset:    8
;       uint ForwardLightData_NumGridCells;           ; Offset:   12
;       int3 ForwardLightData_CulledGridSize;         ; Offset:   16
;       uint ForwardLightData_MaxCulledLightsPerCell; ; Offset:   28
;       uint ForwardLightData_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_ForwardLightData_36;          ; Offset:   36
;       uint PrePadding_ForwardLightData_40;          ; Offset:   40
;       uint PrePadding_ForwardLightData_44;          ; Offset:   44
;       float3 ForwardLightData_LightGridZParams;     ; Offset:   48
;       float PrePadding_ForwardLightData_60;         ; Offset:   60
;       float3 ForwardLightData_DirectionalLightDirection;; Offset:   64
;       float ForwardLightData_DirectionalLightSourceRadius;; Offset:   76
;       float3 ForwardLightData_DirectionalLightColor;; Offset:   80
;       float ForwardLightData_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint ForwardLightData_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_ForwardLightData_100;         ; Offset:  100
;       float2 ForwardLightData_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint ForwardLightData_NumDirectionalLightCascades;; Offset:  112
;       int ForwardLightData_DirectionalLightVSM;     ; Offset:  116
;       int PrePadding_ForwardLightData_120;          ; Offset:  120
;       int PrePadding_ForwardLightData_124;          ; Offset:  124
;       float4 ForwardLightData_CascadeEndDepths;     ; Offset:  128
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 ForwardLightData_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float ForwardLightData_DirectionalLightDepthBias;; Offset:  480
;       uint ForwardLightData_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint ForwardLightData_SimpleLightsEndIndex;   ; Offset:  488
;       uint ForwardLightData_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint ForwardLightData_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_ForwardLightData_500;         ; Offset:  500
;       uint PrePadding_ForwardLightData_504;         ; Offset:  504
;       uint PrePadding_ForwardLightData_508;         ; Offset:  508
;       float4 ForwardLightData_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint ForwardLightData_DirectLightingShowFlag; ; Offset:  592
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_604;; Offset:  604
;       float ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_ForwardLightData_644;         ; Offset:  644
;       uint PrePadding_ForwardLightData_648;         ; Offset:  648
;       uint PrePadding_ForwardLightData_652;         ; Offset:  652
;       uint BindlessResource_ForwardLightData_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_ForwardLightData_660;         ; Offset:  660
;       uint BindlessSampler_ForwardLightData_ShadowmapSampler;; Offset:  664
;       uint PrePadding_ForwardLightData_668;         ; Offset:  668
;       uint BindlessResource_ForwardLightData_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_ForwardLightData_676;         ; Offset:  676
;       uint BindlessSampler_ForwardLightData_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_ForwardLightData_684;         ; Offset:  684
;       uint BindlessResource_ForwardLightData_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_ForwardLightData_692;         ; Offset:  692
;       uint BindlessResource_ForwardLightData_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_ForwardLightData_700;         ; Offset:  700
;       uint BindlessResource_ForwardLightData_CulledLightDataGrid;; Offset:  704
;   
;   } UniformBufferConstants_ForwardLightData;        ; Offset:    0 Size:   708
;
; }
;
; cbuffer UniformBufferConstants_LumenGIVolumeStruct
; {
;
;   struct UniformBufferConstants_LumenGIVolumeStruct
;   {
;
;       float LumenGIVolumeStruct_ReprojectionRadiusScale;; Offset:    0
;       float LumenGIVolumeStruct_ClipmapWorldExtent; ; Offset:    4
;       float LumenGIVolumeStruct_ClipmapDistributionBase;; Offset:    8
;       float LumenGIVolumeStruct_InvClipmapFadeSize; ; Offset:   12
;       int2 LumenGIVolumeStruct_ProbeAtlasResolutionInProbes;; Offset:   16
;       uint LumenGIVolumeStruct_RadianceProbeClipmapResolution;; Offset:   24
;       uint LumenGIVolumeStruct_NumRadianceProbeClipmaps;; Offset:   28
;       uint LumenGIVolumeStruct_RadianceProbeResolution;; Offset:   32
;       uint LumenGIVolumeStruct_FinalProbeResolution;; Offset:   36
;       uint LumenGIVolumeStruct_FinalRadianceAtlasMaxMip;; Offset:   40
;       uint LumenGIVolumeStruct_CalculateIrradiance; ; Offset:   44
;       uint LumenGIVolumeStruct_IrradianceProbeResolution;; Offset:   48
;       uint LumenGIVolumeStruct_OcclusionProbeResolution;; Offset:   52
;       uint LumenGIVolumeStruct_NumProbesToTraceBudget;; Offset:   56
;       uint LumenGIVolumeStruct_RadianceCacheStats;  ; Offset:   60
;       uint BindlessResource_LumenGIVolumeStruct_RadianceProbeIndirectionTexture;; Offset:   64
;       uint PrePadding_LumenGIVolumeStruct_68;       ; Offset:   68
;       uint BindlessResource_LumenGIVolumeStruct_RadianceCacheFinalRadianceAtlas;; Offset:   72
;       uint PrePadding_LumenGIVolumeStruct_76;       ; Offset:   76
;       uint BindlessResource_LumenGIVolumeStruct_RadianceCacheFinalIrradianceAtlas;; Offset:   80
;       uint PrePadding_LumenGIVolumeStruct_84;       ; Offset:   84
;       uint BindlessResource_LumenGIVolumeStruct_RadianceCacheProbeOcclusionAtlas;; Offset:   88
;       uint PrePadding_LumenGIVolumeStruct_92;       ; Offset:   92
;       uint BindlessResource_LumenGIVolumeStruct_RadianceCacheDepthAtlas;; Offset:   96
;       uint PrePadding_LumenGIVolumeStruct_100;      ; Offset:  100
;       uint BindlessResource_LumenGIVolumeStruct_ProbeWorldOffset;; Offset:  104
;       uint PrePadding_LumenGIVolumeStruct_108;      ; Offset:  108
;       float4 LumenGIVolumeStruct_RadianceProbeSettings[6];; Offset:  112
;       float4 LumenGIVolumeStruct_PaddedWorldPositionToRadianceProbeCoordBias[6];; Offset:  208
;       float4 LumenGIVolumeStruct_PaddedRadianceProbeCoordToWorldPositionBias[6];; Offset:  304
;       float2 LumenGIVolumeStruct_InvProbeFinalRadianceAtlasResolution;; Offset:  400
;       float2 LumenGIVolumeStruct_InvProbeFinalIrradianceAtlasResolution;; Offset:  408
;       float2 LumenGIVolumeStruct_InvProbeDepthAtlasResolution;; Offset:  416
;       uint LumenGIVolumeStruct_OverrideCacheOcclusionLighting;; Offset:  424
;       uint LumenGIVolumeStruct_ShowBlackRadianceCacheLighting;; Offset:  428
;       uint LumenGIVolumeStruct_ProbeAtlasResolutionModuloMask;; Offset:  432
;       uint LumenGIVolumeStruct_ProbeAtlasResolutionDivideShift;; Offset:  436
;       float PrePadding_LumenGIVolumeStruct_440;     ; Offset:  440
;       float PrePadding_LumenGIVolumeStruct_444;     ; Offset:  444
;       uint BindlessResource_LumenGIVolumeStruct_Radiance;; Offset:  448
;       uint PrePadding_LumenGIVolumeStruct_452;      ; Offset:  452
;       uint BindlessResource_LumenGIVolumeStruct_Normal;; Offset:  456
;       uint PrePadding_LumenGIVolumeStruct_460;      ; Offset:  460
;       uint BindlessResource_LumenGIVolumeStruct_SceneDepth;; Offset:  464
;       uint PrePadding_LumenGIVolumeStruct_468;      ; Offset:  468
;       uint LumenGIVolumeStruct_Enabled;             ; Offset:  472
;       float LumenGIVolumeStruct_RelativeDepthThreshold;; Offset:  476
;       float LumenGIVolumeStruct_SpecularScale;      ; Offset:  480
;       float LumenGIVolumeStruct_Contrast;           ; Offset:  484
;       float PrePadding_LumenGIVolumeStruct_488;     ; Offset:  488
;       float PrePadding_LumenGIVolumeStruct_492;     ; Offset:  492
;       uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolume0;; Offset:  496
;       uint PrePadding_LumenGIVolumeStruct_500;      ; Offset:  500
;       uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolume1;; Offset:  504
;       uint PrePadding_LumenGIVolumeStruct_508;      ; Offset:  508
;       uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolumeHistory0;; Offset:  512
;       uint PrePadding_LumenGIVolumeStruct_516;      ; Offset:  516
;       uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolumeHistory1;; Offset:  520
;       uint PrePadding_LumenGIVolumeStruct_524;      ; Offset:  524
;       uint BindlessSampler_LumenGIVolumeStruct_TranslucencyGIVolumeSampler;; Offset:  528
;       uint PrePadding_LumenGIVolumeStruct_532;      ; Offset:  532
;       uint PrePadding_LumenGIVolumeStruct_536;      ; Offset:  536
;       uint PrePadding_LumenGIVolumeStruct_540;      ; Offset:  540
;       float3 LumenGIVolumeStruct_TranslucencyGIGridZParams;; Offset:  544
;       uint LumenGIVolumeStruct_TranslucencyGIGridPixelSizeShift;; Offset:  556
;       int3 LumenGIVolumeStruct_TranslucencyGIGridSize;; Offset:  560
;   
;   } UniformBufferConstants_LumenGIVolumeStruct;     ; Offset:    0 Size:   572
;
; }
;
; cbuffer UniformBufferConstants_VolumetricFog
; {
;
;   struct UniformBufferConstants_VolumetricFog
;   {
;
;       int3 VolumetricFog_GridSizeInt;               ; Offset:    0
;       int PrePadding_VolumetricFog_12;              ; Offset:   12
;       float3 VolumetricFog_GridSize;                ; Offset:   16
;       float PrePadding_VolumetricFog_28;            ; Offset:   28
;       float3 VolumetricFog_GridZParams;             ; Offset:   32
;       float PrePadding_VolumetricFog_44;            ; Offset:   44
;       float2 VolumetricFog_SVPosToVolumeUV;         ; Offset:   48
;       float VolumetricFog_MaxDistance;              ; Offset:   56
;       float PrePadding_VolumetricFog_60;            ; Offset:   60
;       float3 VolumetricFog_HeightFogInscatteringColor;; Offset:   64
;       float PrePadding_VolumetricFog_76;            ; Offset:   76
;       float3 VolumetricFog_HeightFogDirectionalLightInscatteringColor;; Offset:   80
;       float PrePadding_VolumetricFog_92;            ; Offset:   92
;       int2 VolumetricFog_FogGridToPixelXY;          ; Offset:   96
;   
;   } UniformBufferConstants_VolumetricFog;           ; Offset:    0 Size:   104
;
; }
;
; Resource bind info for VirtualShadowMap_PageTable
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_ForwardLightData   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_LumenGIVolumeStruct   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_VolumetricFog   cbuffer      NA          NA     CB4            cb4     1
; View_SharedBilinearClampedSampler   sampler      NA          NA      S0             s0     1
; ForwardLightData_ShadowmapSampler   sampler      NA          NA      S1             s1     1
; ForwardLightData_StaticShadowmapSampler   sampler      NA          NA      S2             s2     1
; LumenGIVolumeStruct_TranslucencyGIVolumeSampler   sampler      NA          NA      S3             s3     1
; LightScatteringHistorySampler     sampler      NA          NA      S4             s4     1
; LightFunctionSampler              sampler      NA          NA      S5             s5     1
; View_VolumetricLightmapIndirectionTexture   texture     u32          3d      T0             t0     1
; View_VolumetricLightmapBrickAmbientVector   texture     f32          3d      T1             t1     1
; View_VolumetricLightmapBrickSHCoefficients0   texture     f32          3d      T2             t2     1
; View_VolumetricLightmapBrickSHCoefficients2   texture     f32          3d      T3             t3     1
; View_VolumetricLightmapBrickSHCoefficients4   texture     f32          3d      T4             t4     1
; VirtualShadowMap_ProjectionData   texture    byte         r/o      T5             t5     1
; VirtualShadowMap_PageTable        texture  struct         r/o      T6             t6     1
; VirtualShadowMap_PhysicalPagePool   texture     u32     2darray      T7             t7     1
; ForwardLightData_DirectionalLightShadowmapAtlas   texture     f32          2d      T8             t8     1
; ForwardLightData_DirectionalLightStaticShadowmap   texture     f32          2d      T9             t9     1
; ForwardLightData_ForwardLocalLightBuffer   texture     f32         buf     T10            t10     1
; ForwardLightData_NumCulledLightsGrid   texture     u32         buf     T11            t11     1
; ForwardLightData_CulledLightDataGrid   texture     u32         buf     T12            t12     1
; LumenGIVolumeStruct_TranslucencyGIVolume0   texture     f32          3d     T13            t13     1
; LumenGIVolumeStruct_TranslucencyGIVolume1   texture     f32          3d     T14            t14     1
; ConservativeDepthTexture          texture     f32          2d     T15            t15     1
; PrevConservativeDepthTexture      texture     f32          2d     T16            t16     1
; VBufferA                          texture     f32          3d     T17            t17     1
; VBufferB                          texture     f32          3d     T18            t18     1
; LightScatteringHistory            texture     f32          3d     T19            t19     1
; LocalShadowedLightScattering      texture     f32          3d     T20            t20     1
; LightFunctionTexture              texture     f32          2d     T21            t21     1
; RWLightScattering                     UAV     f32          3d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.Texture3D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture3D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture3D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Texture2DArray<unsigned int>" = type { i32, %"class.Texture2DArray<unsigned int>::mips_type" }
%"class.Texture2DArray<unsigned int>::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Buffer<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%"class.RWTexture3D<vector<float, 4> >" = type { <4 x float> }
%hostlayout._RootShaderParameters = type { [4 x <4 x float>], [4 x <4 x float>], [16 x <4 x float>], float, i32, float, float, float, float, float, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, <3 x float>, <3 x float>, float, float, float, i32, float, float, float, float, float, [3 x <4 x float>], [4 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, float, float, float, float, float, float, float, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%hostlayout.UniformBufferConstants_ForwardLightData = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_LumenGIVolumeStruct = type { float, float, float, float, <2 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, i32, <3 x i32> }
%UniformBufferConstants_VolumetricFog = type { <3 x i32>, i32, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, <3 x float>, float, <3 x float>, float, <2 x i32> }
%struct.SamplerState = type { i32 }

define void @LightScatteringCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 0 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 13, i32 104 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %36 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 13, i32 572 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %37 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 13, i32 708 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %38 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %39 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 13, i32 1380 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %40 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %41 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %42 = call i32 @dx.op.threadId.i32(i32 93, i32 2)  ; ThreadId(component)
  %43 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %37, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %44 = extractvalue %dx.types.CBufRet.i32 %43, 0
  %45 = extractvalue %dx.types.CBufRet.i32 %43, 2
  %46 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %37, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %47 = extractvalue %dx.types.CBufRet.i32 %46, 0
  %48 = extractvalue %dx.types.CBufRet.i32 %46, 1
  %49 = extractvalue %dx.types.CBufRet.i32 %46, 2
  %50 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %37, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %51 = extractvalue %dx.types.CBufRet.i32 %50, 0
  %52 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %53 = extractvalue %dx.types.CBufRet.f32 %52, 0
  %54 = extractvalue %dx.types.CBufRet.f32 %52, 1
  %55 = extractvalue %dx.types.CBufRet.f32 %52, 2
  %56 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %57 = extractvalue %dx.types.CBufRet.f32 %56, 0
  %58 = extractvalue %dx.types.CBufRet.f32 %56, 1
  %59 = extractvalue %dx.types.CBufRet.f32 %56, 2
  %60 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %61 = extractvalue %dx.types.CBufRet.f32 %60, 0
  %62 = extractvalue %dx.types.CBufRet.f32 %60, 1
  %63 = extractvalue %dx.types.CBufRet.f32 %60, 2
  %64 = extractvalue %dx.types.CBufRet.f32 %60, 3
  %65 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %37, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %66 = extractvalue %dx.types.CBufRet.i32 %65, 0
  %67 = extractvalue %dx.types.CBufRet.i32 %65, 1
  %68 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %69 = extractvalue %dx.types.CBufRet.f32 %68, 0
  %70 = extractvalue %dx.types.CBufRet.f32 %68, 1
  %71 = extractvalue %dx.types.CBufRet.f32 %68, 2
  %72 = extractvalue %dx.types.CBufRet.f32 %68, 3
  %73 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %74 = extractvalue %dx.types.CBufRet.f32 %73, 0
  %75 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %37, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %76 = extractvalue %dx.types.CBufRet.i32 %75, 1
  %77 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %78 = extractvalue %dx.types.CBufRet.f32 %77, 0
  %79 = extractvalue %dx.types.CBufRet.f32 %77, 1
  %80 = extractvalue %dx.types.CBufRet.f32 %77, 2
  %81 = extractvalue %dx.types.CBufRet.f32 %77, 3
  %82 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %83 = extractvalue %dx.types.CBufRet.f32 %82, 0
  %84 = extractvalue %dx.types.CBufRet.f32 %82, 1
  %85 = extractvalue %dx.types.CBufRet.f32 %82, 2
  %86 = extractvalue %dx.types.CBufRet.f32 %82, 3
  %87 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %88 = extractvalue %dx.types.CBufRet.f32 %87, 0
  %89 = extractvalue %dx.types.CBufRet.f32 %87, 1
  %90 = extractvalue %dx.types.CBufRet.f32 %87, 2
  %91 = extractvalue %dx.types.CBufRet.f32 %87, 3
  %92 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 36)  ; CBufferLoadLegacy(handle,regIndex)
  %93 = extractvalue %dx.types.CBufRet.f32 %92, 0
  %94 = extractvalue %dx.types.CBufRet.f32 %92, 1
  %95 = extractvalue %dx.types.CBufRet.f32 %92, 2
  %96 = extractvalue %dx.types.CBufRet.f32 %92, 3
  %97 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %98 = extractvalue %dx.types.CBufRet.i32 %97, 3
  %99 = icmp eq i32 %98, 0
  %100 = uitofp i32 %40 to float
  %101 = uitofp i32 %41 to float
  %102 = fadd fast float %100, 5.000000e-01
  %103 = fadd fast float %101, 5.000000e-01
  %104 = uitofp i32 %42 to float
  br i1 %99, label %256, label %105

; <label>:105                                     ; preds = %0
  %106 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %107 = extractvalue %dx.types.CBufRet.f32 %106, 0
  %108 = extractvalue %dx.types.CBufRet.f32 %106, 1
  %109 = fdiv fast float %102, %107
  %110 = fdiv fast float %103, %108
  %111 = fmul fast float %109, 2.000000e+00
  %112 = fmul fast float %110, 2.000000e+00
  %113 = fadd fast float %111, -1.000000e+00
  %114 = fadd fast float %112, -1.000000e+00
  %115 = fsub fast float -0.000000e+00, %114
  %116 = fadd fast float %104, -1.000000e+00
  %117 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %118 = extractvalue %dx.types.CBufRet.f32 %117, 2
  %119 = fdiv fast float %116, %118
  %120 = call float @dx.op.unary.f32(i32 21, float %119)  ; Exp(value)
  %121 = extractvalue %dx.types.CBufRet.f32 %117, 1
  %122 = fsub fast float %120, %121
  %123 = extractvalue %dx.types.CBufRet.f32 %117, 0
  %124 = fdiv fast float %122, %123
  %125 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %126 = extractvalue %dx.types.CBufRet.f32 %125, 3
  %127 = fcmp fast ult float %126, 1.000000e+00
  br i1 %127, label %134, label %128, !dx.controlflow.hints !50

; <label>:128                                     ; preds = %105
  %129 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %130 = extractvalue %dx.types.CBufRet.f32 %129, 2
  %131 = fmul fast float %130, %124
  %132 = extractvalue %dx.types.CBufRet.f32 %125, 2
  %133 = fadd fast float %131, %132
  br label %141

; <label>:134                                     ; preds = %105
  %135 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %136 = extractvalue %dx.types.CBufRet.f32 %135, 3
  %137 = fadd fast float %136, %124
  %138 = extractvalue %dx.types.CBufRet.f32 %135, 2
  %139 = fmul fast float %137, %138
  %140 = fdiv fast float 1.000000e+00, %139
  br label %141

; <label>:141                                     ; preds = %134, %128
  %142 = phi float [ %133, %128 ], [ %140, %134 ]
  %143 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %144 = extractvalue %dx.types.CBufRet.f32 %143, 0
  %145 = extractvalue %dx.types.CBufRet.f32 %143, 1
  %146 = extractvalue %dx.types.CBufRet.f32 %143, 2
  %147 = extractvalue %dx.types.CBufRet.f32 %143, 3
  %148 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %149 = extractvalue %dx.types.CBufRet.f32 %148, 0
  %150 = extractvalue %dx.types.CBufRet.f32 %148, 1
  %151 = extractvalue %dx.types.CBufRet.f32 %148, 2
  %152 = extractvalue %dx.types.CBufRet.f32 %148, 3
  %153 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %154 = extractvalue %dx.types.CBufRet.f32 %153, 0
  %155 = extractvalue %dx.types.CBufRet.f32 %153, 1
  %156 = extractvalue %dx.types.CBufRet.f32 %153, 2
  %157 = extractvalue %dx.types.CBufRet.f32 %153, 3
  %158 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %159 = extractvalue %dx.types.CBufRet.f32 %158, 0
  %160 = extractvalue %dx.types.CBufRet.f32 %158, 1
  %161 = extractvalue %dx.types.CBufRet.f32 %158, 2
  %162 = extractvalue %dx.types.CBufRet.f32 %158, 3
  %163 = fmul fast float %144, %113
  %164 = call float @dx.op.tertiary.f32(i32 46, float %115, float %149, float %163)  ; FMad(a,b,c)
  %165 = call float @dx.op.tertiary.f32(i32 46, float %142, float %154, float %164)  ; FMad(a,b,c)
  %166 = fadd fast float %165, %159
  %167 = fmul fast float %145, %113
  %168 = call float @dx.op.tertiary.f32(i32 46, float %115, float %150, float %167)  ; FMad(a,b,c)
  %169 = call float @dx.op.tertiary.f32(i32 46, float %142, float %155, float %168)  ; FMad(a,b,c)
  %170 = fadd fast float %169, %160
  %171 = fmul fast float %146, %113
  %172 = call float @dx.op.tertiary.f32(i32 46, float %115, float %151, float %171)  ; FMad(a,b,c)
  %173 = call float @dx.op.tertiary.f32(i32 46, float %142, float %156, float %172)  ; FMad(a,b,c)
  %174 = fadd fast float %173, %161
  %175 = fmul fast float %147, %113
  %176 = call float @dx.op.tertiary.f32(i32 46, float %115, float %152, float %175)  ; FMad(a,b,c)
  %177 = call float @dx.op.tertiary.f32(i32 46, float %142, float %157, float %176)  ; FMad(a,b,c)
  %178 = fadd fast float %177, %162
  %179 = fdiv fast float %166, %178
  %180 = fdiv fast float %170, %178
  %181 = fdiv fast float %174, %178
  %182 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %183 = extractvalue %dx.types.CBufRet.f32 %182, 2
  %184 = extractvalue %dx.types.CBufRet.f32 %182, 3
  %185 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %186 = extractvalue %dx.types.CBufRet.f32 %185, 2
  %187 = extractvalue %dx.types.CBufRet.f32 %185, 3
  %188 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %189 = extractvalue %dx.types.CBufRet.f32 %188, 2
  %190 = extractvalue %dx.types.CBufRet.f32 %188, 3
  %191 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %192 = extractvalue %dx.types.CBufRet.f32 %191, 2
  %193 = extractvalue %dx.types.CBufRet.f32 %191, 3
  %194 = fmul fast float %183, %179
  %195 = call float @dx.op.tertiary.f32(i32 46, float %180, float %186, float %194)  ; FMad(a,b,c)
  %196 = call float @dx.op.tertiary.f32(i32 46, float %181, float %189, float %195)  ; FMad(a,b,c)
  %197 = fadd fast float %196, %192
  %198 = fmul fast float %184, %179
  %199 = call float @dx.op.tertiary.f32(i32 46, float %180, float %187, float %198)  ; FMad(a,b,c)
  %200 = call float @dx.op.tertiary.f32(i32 46, float %181, float %190, float %199)  ; FMad(a,b,c)
  %201 = fadd fast float %200, %193
  %202 = fdiv fast float %197, %201
  %203 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %204 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %203, i32 0, i32 %40, i32 %41, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %205 = extractvalue %dx.types.ResRet.f32 %204, 0
  %206 = fcmp fast ogt float %205, %202
  br i1 %206, label %207, label %209

; <label>:207                                     ; preds = %141
  %208 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %208, i32 %40, i32 %41, i32 %42, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %2039

; <label>:209                                     ; preds = %141
  %210 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %211 = extractvalue %dx.types.CBufRet.f32 %210, 0
  %212 = extractvalue %dx.types.CBufRet.f32 %210, 1
  %213 = extractvalue %dx.types.CBufRet.f32 %210, 3
  %214 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %215 = extractvalue %dx.types.CBufRet.f32 %214, 0
  %216 = extractvalue %dx.types.CBufRet.f32 %214, 1
  %217 = extractvalue %dx.types.CBufRet.f32 %214, 3
  %218 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %219 = extractvalue %dx.types.CBufRet.f32 %218, 0
  %220 = extractvalue %dx.types.CBufRet.f32 %218, 1
  %221 = extractvalue %dx.types.CBufRet.f32 %218, 3
  %222 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %223 = extractvalue %dx.types.CBufRet.f32 %222, 0
  %224 = extractvalue %dx.types.CBufRet.f32 %222, 1
  %225 = extractvalue %dx.types.CBufRet.f32 %222, 3
  %226 = fmul fast float %211, %179
  %227 = call float @dx.op.tertiary.f32(i32 46, float %180, float %215, float %226)  ; FMad(a,b,c)
  %228 = call float @dx.op.tertiary.f32(i32 46, float %181, float %219, float %227)  ; FMad(a,b,c)
  %229 = fadd fast float %228, %223
  %230 = fmul fast float %212, %179
  %231 = call float @dx.op.tertiary.f32(i32 46, float %180, float %216, float %230)  ; FMad(a,b,c)
  %232 = call float @dx.op.tertiary.f32(i32 46, float %181, float %220, float %231)  ; FMad(a,b,c)
  %233 = fadd fast float %232, %224
  %234 = fmul fast float %213, %179
  %235 = call float @dx.op.tertiary.f32(i32 46, float %180, float %217, float %234)  ; FMad(a,b,c)
  %236 = call float @dx.op.tertiary.f32(i32 46, float %181, float %221, float %235)  ; FMad(a,b,c)
  %237 = fadd fast float %236, %225
  %238 = fdiv fast float %229, %237
  %239 = fdiv fast float %233, %237
  %240 = fmul fast float %238, 5.000000e-01
  %241 = fmul fast float %239, 5.000000e-01
  %242 = fadd fast float %240, 5.000000e-01
  %243 = fsub fast float 5.000000e-01, %241
  %244 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %245 = extractvalue %dx.types.CBufRet.f32 %244, 0
  %246 = extractvalue %dx.types.CBufRet.f32 %244, 1
  %247 = fmul fast float %245, %242
  %248 = fmul fast float %246, %243
  %249 = fptoui float %247 to i32
  %250 = fptoui float %248 to i32
  %251 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %252 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %251, i32 0, i32 %249, i32 %250, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %253 = extractvalue %dx.types.ResRet.f32 %252, 0
  %254 = fcmp fast ogt float %253, %202
  br i1 %254, label %255, label %256

; <label>:255                                     ; preds = %209
  br label %256

; <label>:256                                     ; preds = %255, %209, %0
  %257 = phi i32 [ 1, %255 ], [ 0, %209 ], [ 0, %0 ]
  %258 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %259 = extractvalue %dx.types.CBufRet.f32 %258, 0
  %260 = extractvalue %dx.types.CBufRet.f32 %258, 1
  %261 = extractvalue %dx.types.CBufRet.f32 %258, 3
  %262 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %263 = extractvalue %dx.types.CBufRet.f32 %262, 0
  %264 = extractvalue %dx.types.CBufRet.f32 %262, 1
  %265 = extractvalue %dx.types.CBufRet.f32 %262, 3
  %266 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %267 = extractvalue %dx.types.CBufRet.f32 %266, 0
  %268 = extractvalue %dx.types.CBufRet.f32 %266, 1
  %269 = extractvalue %dx.types.CBufRet.f32 %266, 3
  %270 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %271 = extractvalue %dx.types.CBufRet.f32 %270, 0
  %272 = extractvalue %dx.types.CBufRet.f32 %270, 1
  %273 = extractvalue %dx.types.CBufRet.f32 %270, 3
  %274 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %275 = extractvalue %dx.types.CBufRet.f32 %274, 0
  %276 = extractvalue %dx.types.CBufRet.f32 %274, 1
  %277 = fdiv fast float %102, %275
  %278 = fdiv fast float %103, %276
  %279 = fmul fast float %277, 2.000000e+00
  %280 = fmul fast float %278, 2.000000e+00
  %281 = fadd fast float %279, -1.000000e+00
  %282 = fadd fast float %280, -1.000000e+00
  %283 = fsub fast float -0.000000e+00, %282
  %284 = fadd fast float %104, 5.000000e-01
  %285 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %286 = extractvalue %dx.types.CBufRet.f32 %285, 2
  %287 = fdiv fast float %284, %286
  %288 = call float @dx.op.unary.f32(i32 21, float %287)  ; Exp(value)
  %289 = extractvalue %dx.types.CBufRet.f32 %285, 1
  %290 = fsub fast float %288, %289
  %291 = extractvalue %dx.types.CBufRet.f32 %285, 0
  %292 = fdiv fast float %290, %291
  %293 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %294 = extractvalue %dx.types.CBufRet.f32 %293, 3
  %295 = fcmp fast ult float %294, 1.000000e+00
  br i1 %295, label %302, label %296, !dx.controlflow.hints !50

; <label>:296                                     ; preds = %256
  %297 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %298 = extractvalue %dx.types.CBufRet.f32 %297, 2
  %299 = fmul fast float %298, %292
  %300 = extractvalue %dx.types.CBufRet.f32 %293, 2
  %301 = fadd fast float %299, %300
  br label %309

; <label>:302                                     ; preds = %256
  %303 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %304 = extractvalue %dx.types.CBufRet.f32 %303, 3
  %305 = fadd fast float %304, %292
  %306 = extractvalue %dx.types.CBufRet.f32 %303, 2
  %307 = fmul fast float %305, %306
  %308 = fdiv fast float 1.000000e+00, %307
  br label %309

; <label>:309                                     ; preds = %302, %296
  %310 = phi float [ %301, %296 ], [ %308, %302 ]
  %311 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %312 = extractvalue %dx.types.CBufRet.f32 %311, 0
  %313 = extractvalue %dx.types.CBufRet.f32 %311, 1
  %314 = extractvalue %dx.types.CBufRet.f32 %311, 2
  %315 = extractvalue %dx.types.CBufRet.f32 %311, 3
  %316 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %317 = extractvalue %dx.types.CBufRet.f32 %316, 0
  %318 = extractvalue %dx.types.CBufRet.f32 %316, 1
  %319 = extractvalue %dx.types.CBufRet.f32 %316, 2
  %320 = extractvalue %dx.types.CBufRet.f32 %316, 3
  %321 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %322 = extractvalue %dx.types.CBufRet.f32 %321, 0
  %323 = extractvalue %dx.types.CBufRet.f32 %321, 1
  %324 = extractvalue %dx.types.CBufRet.f32 %321, 2
  %325 = extractvalue %dx.types.CBufRet.f32 %321, 3
  %326 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %327 = extractvalue %dx.types.CBufRet.f32 %326, 0
  %328 = extractvalue %dx.types.CBufRet.f32 %326, 1
  %329 = extractvalue %dx.types.CBufRet.f32 %326, 2
  %330 = extractvalue %dx.types.CBufRet.f32 %326, 3
  %331 = fmul fast float %312, %281
  %332 = call float @dx.op.tertiary.f32(i32 46, float %283, float %317, float %331)  ; FMad(a,b,c)
  %333 = call float @dx.op.tertiary.f32(i32 46, float %310, float %322, float %332)  ; FMad(a,b,c)
  %334 = fadd fast float %333, %327
  %335 = fmul fast float %313, %281
  %336 = call float @dx.op.tertiary.f32(i32 46, float %283, float %318, float %335)  ; FMad(a,b,c)
  %337 = call float @dx.op.tertiary.f32(i32 46, float %310, float %323, float %336)  ; FMad(a,b,c)
  %338 = fadd fast float %337, %328
  %339 = fmul fast float %314, %281
  %340 = call float @dx.op.tertiary.f32(i32 46, float %283, float %319, float %339)  ; FMad(a,b,c)
  %341 = call float @dx.op.tertiary.f32(i32 46, float %310, float %324, float %340)  ; FMad(a,b,c)
  %342 = fadd fast float %341, %329
  %343 = fmul fast float %315, %281
  %344 = call float @dx.op.tertiary.f32(i32 46, float %283, float %320, float %343)  ; FMad(a,b,c)
  %345 = call float @dx.op.tertiary.f32(i32 46, float %310, float %325, float %344)  ; FMad(a,b,c)
  %346 = fadd fast float %345, %330
  %347 = fdiv fast float %334, %346
  %348 = fdiv fast float %338, %346
  %349 = fdiv fast float %342, %346
  %350 = fmul fast float %347, %259
  %351 = call float @dx.op.tertiary.f32(i32 46, float %348, float %263, float %350)  ; FMad(a,b,c)
  %352 = call float @dx.op.tertiary.f32(i32 46, float %349, float %267, float %351)  ; FMad(a,b,c)
  %353 = fadd fast float %352, %271
  %354 = fmul fast float %347, %260
  %355 = call float @dx.op.tertiary.f32(i32 46, float %348, float %264, float %354)  ; FMad(a,b,c)
  %356 = call float @dx.op.tertiary.f32(i32 46, float %349, float %268, float %355)  ; FMad(a,b,c)
  %357 = fadd fast float %356, %272
  %358 = fmul fast float %347, %261
  %359 = call float @dx.op.tertiary.f32(i32 46, float %348, float %265, float %358)  ; FMad(a,b,c)
  %360 = call float @dx.op.tertiary.f32(i32 46, float %349, float %269, float %359)  ; FMad(a,b,c)
  %361 = fadd fast float %360, %273
  %362 = fdiv fast float %353, %361
  %363 = fdiv fast float %357, %361
  %364 = fmul fast float %362, 5.000000e-01
  %365 = fmul fast float %363, 5.000000e-01
  %366 = fadd fast float %364, 5.000000e-01
  %367 = fsub fast float 5.000000e-01, %365
  %368 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 230)  ; CBufferLoadLegacy(handle,regIndex)
  %369 = extractvalue %dx.types.CBufRet.f32 %368, 0
  %370 = fmul fast float %369, %361
  %371 = extractvalue %dx.types.CBufRet.f32 %368, 1
  %372 = fadd fast float %370, %371
  %373 = call float @dx.op.unary.f32(i32 23, float %372)  ; Log(value)
  %374 = extractvalue %dx.types.CBufRet.f32 %368, 2
  %375 = fmul fast float %374, %373
  %376 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 229)  ; CBufferLoadLegacy(handle,regIndex)
  %377 = extractvalue %dx.types.CBufRet.f32 %376, 2
  %378 = fmul fast float %375, %377
  %379 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 231)  ; CBufferLoadLegacy(handle,regIndex)
  %380 = extractvalue %dx.types.CBufRet.f32 %379, 2
  %381 = extractvalue %dx.types.CBufRet.f32 %379, 3
  %382 = fmul fast float %380, %366
  %383 = fmul fast float %381, %367
  %384 = fcmp fast olt float %382, 0.000000e+00
  %385 = fcmp fast olt float %383, 0.000000e+00
  %386 = fcmp fast olt float %378, 0.000000e+00
  %387 = or i1 %384, %385
  %388 = or i1 %386, %387
  br i1 %388, label %399, label %389

; <label>:389                                     ; preds = %309
  %390 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %391 = extractvalue %dx.types.CBufRet.f32 %390, 0
  %392 = fcmp fast ogt float %382, 1.000000e+00
  %393 = fcmp fast ogt float %383, 1.000000e+00
  %394 = fcmp fast ogt float %378, 1.000000e+00
  %395 = or i1 %392, %393
  %396 = or i1 %394, %395
  %397 = icmp ne i32 %257, 0
  %398 = or i1 %397, %396
  br i1 %398, label %399, label %400

; <label>:399                                     ; preds = %389, %309
  br label %400

; <label>:400                                     ; preds = %399, %389
  %401 = phi float [ 0.000000e+00, %399 ], [ %391, %389 ]
  %402 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %403 = extractvalue %dx.types.CBufRet.i32 %402, 0
  %404 = mul i32 %40, 1664525
  %405 = mul i32 %41, 1664525
  %406 = mul i32 %42, 1664525
  %407 = mul i32 %403, 1664525
  %408 = add i32 %404, 1013904223
  %409 = add i32 %405, 1013904223
  %410 = add i32 %406, 1013904223
  %411 = add i32 %407, 1013904223
  %412 = mul i32 %411, %409
  %413 = add i32 %408, %412
  %414 = mul i32 %413, %410
  %415 = add i32 %414, %409
  %416 = mul i32 %415, %413
  %417 = add i32 %416, %410
  %418 = mul i32 %417, %415
  %419 = add i32 %418, %411
  %420 = lshr i32 %413, 16
  %421 = lshr i32 %415, 16
  %422 = lshr i32 %417, 16
  %423 = lshr i32 %419, 16
  %424 = xor i32 %420, %413
  %425 = xor i32 %421, %415
  %426 = xor i32 %422, %417
  %427 = xor i32 %423, %419
  %428 = mul i32 %427, %425
  %429 = add i32 %428, %424
  %430 = mul i32 %429, %426
  %431 = add i32 %430, %425
  %432 = mul i32 %431, %429
  %433 = add i32 %432, %426
  %434 = uitofp i32 %429 to float
  %435 = uitofp i32 %431 to float
  %436 = uitofp i32 %433 to float
  %437 = fmul fast float %434, 0x3E00000000000000
  %438 = fmul fast float %435, 0x3E00000000000000
  %439 = fmul fast float %436, 0x3E00000000000000
  %440 = fadd fast float %437, -1.000000e+00
  %441 = fadd fast float %438, -1.000000e+00
  %442 = fadd fast float %439, -1.000000e+00
  %443 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %444 = extractvalue %dx.types.CBufRet.f32 %443, 0
  %445 = extractvalue %dx.types.CBufRet.f32 %443, 1
  %446 = extractvalue %dx.types.CBufRet.f32 %443, 2
  %447 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %448 = extractvalue %dx.types.CBufRet.f32 %447, 3
  %449 = fmul fast float %440, %448
  %450 = fmul fast float %441, %448
  %451 = fmul fast float %442, %448
  %452 = fadd fast float %449, %444
  %453 = fadd fast float %450, %445
  %454 = fadd fast float %451, %446
  %455 = fadd fast float %452, %100
  %456 = fadd fast float %453, %101
  %457 = fdiv fast float %455, %275
  %458 = fdiv fast float %456, %276
  %459 = fmul fast float %457, 2.000000e+00
  %460 = fmul fast float %458, 2.000000e+00
  %461 = fadd fast float %459, -1.000000e+00
  %462 = fadd fast float %460, -1.000000e+00
  %463 = fsub fast float -0.000000e+00, %462
  %464 = fadd fast float %454, %104
  %465 = fdiv fast float %464, %286
  %466 = call float @dx.op.unary.f32(i32 21, float %465)  ; Exp(value)
  %467 = fsub fast float %466, %289
  %468 = fdiv fast float %467, %291
  br i1 %295, label %475, label %469, !dx.controlflow.hints !50

; <label>:469                                     ; preds = %400
  %470 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %471 = extractvalue %dx.types.CBufRet.f32 %470, 2
  %472 = fmul fast float %471, %468
  %473 = extractvalue %dx.types.CBufRet.f32 %293, 2
  %474 = fadd fast float %472, %473
  br label %482

; <label>:475                                     ; preds = %400
  %476 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %477 = extractvalue %dx.types.CBufRet.f32 %476, 3
  %478 = fadd fast float %477, %468
  %479 = extractvalue %dx.types.CBufRet.f32 %476, 2
  %480 = fmul fast float %478, %479
  %481 = fdiv fast float 1.000000e+00, %480
  br label %482

; <label>:482                                     ; preds = %475, %469
  %483 = phi float [ %474, %469 ], [ %481, %475 ]
  %484 = fmul fast float %312, %461
  %485 = call float @dx.op.tertiary.f32(i32 46, float %463, float %317, float %484)  ; FMad(a,b,c)
  %486 = call float @dx.op.tertiary.f32(i32 46, float %483, float %322, float %485)  ; FMad(a,b,c)
  %487 = fadd fast float %486, %327
  %488 = fmul fast float %313, %461
  %489 = call float @dx.op.tertiary.f32(i32 46, float %463, float %318, float %488)  ; FMad(a,b,c)
  %490 = call float @dx.op.tertiary.f32(i32 46, float %483, float %323, float %489)  ; FMad(a,b,c)
  %491 = fadd fast float %490, %328
  %492 = fmul fast float %314, %461
  %493 = call float @dx.op.tertiary.f32(i32 46, float %463, float %319, float %492)  ; FMad(a,b,c)
  %494 = call float @dx.op.tertiary.f32(i32 46, float %483, float %324, float %493)  ; FMad(a,b,c)
  %495 = fadd fast float %494, %329
  %496 = fmul fast float %315, %461
  %497 = call float @dx.op.tertiary.f32(i32 46, float %463, float %320, float %496)  ; FMad(a,b,c)
  %498 = call float @dx.op.tertiary.f32(i32 46, float %483, float %325, float %497)  ; FMad(a,b,c)
  %499 = fadd fast float %498, %330
  %500 = fdiv fast float %487, %499
  %501 = fdiv fast float %491, %499
  %502 = fdiv fast float %495, %499
  %503 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %504 = extractvalue %dx.types.CBufRet.f32 %503, 0
  %505 = extractvalue %dx.types.CBufRet.f32 %503, 1
  %506 = extractvalue %dx.types.CBufRet.f32 %503, 2
  %507 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %508 = extractvalue %dx.types.CBufRet.f32 %507, 0
  %509 = extractvalue %dx.types.CBufRet.f32 %507, 1
  %510 = extractvalue %dx.types.CBufRet.f32 %507, 2
  %511 = fmul fast float %504, 2.097152e+06
  %512 = fmul fast float %505, 2.097152e+06
  %513 = fmul fast float %506, 2.097152e+06
  %514 = fsub fast float %508, %511
  %515 = fsub fast float %509, %512
  %516 = fsub fast float %510, %513
  %517 = fsub fast float %500, %514
  %518 = fsub fast float %501, %515
  %519 = fsub fast float %502, %516
  %520 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %521 = extractvalue %dx.types.CBufRet.f32 %520, 0
  %522 = extractvalue %dx.types.CBufRet.f32 %520, 1
  %523 = extractvalue %dx.types.CBufRet.f32 %520, 2
  %524 = fsub fast float %500, %521
  %525 = fsub fast float %501, %522
  %526 = fsub fast float %502, %523
  %527 = fmul fast float %524, %524
  %528 = fmul fast float %525, %525
  %529 = fadd fast float %527, %528
  %530 = fmul fast float %526, %526
  %531 = fadd fast float %529, %530
  %532 = call float @dx.op.unary.f32(i32 24, float %531)  ; Sqrt(value)
  %533 = fdiv fast float %524, %532
  %534 = fdiv fast float %525, %532
  %535 = fdiv fast float %526, %532
  %536 = icmp eq i32 %45, 0
  br i1 %536, label %537, label %539, !dx.controlflow.hints !51

; <label>:537                                     ; preds = %482
  %538 = extractvalue %dx.types.CBufRet.f32 %447, 1
  br label %1185

; <label>:539                                     ; preds = %482
  %540 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %541 = extractvalue %dx.types.CBufRet.f32 %540, 2
  %542 = fcmp fast ogt float %541, 0.000000e+00
  br i1 %542, label %543, label %1118

; <label>:543                                     ; preds = %539
  %544 = icmp eq i32 %76, 0
  br i1 %544, label %580, label %545, !dx.controlflow.hints !52

; <label>:545                                     ; preds = %543
  %546 = fmul fast float %500, %78
  %547 = call float @dx.op.tertiary.f32(i32 46, float %501, float %83, float %546)  ; FMad(a,b,c)
  %548 = call float @dx.op.tertiary.f32(i32 46, float %502, float %88, float %547)  ; FMad(a,b,c)
  %549 = fadd fast float %548, %93
  %550 = fmul fast float %500, %79
  %551 = call float @dx.op.tertiary.f32(i32 46, float %501, float %84, float %550)  ; FMad(a,b,c)
  %552 = call float @dx.op.tertiary.f32(i32 46, float %502, float %89, float %551)  ; FMad(a,b,c)
  %553 = fadd fast float %552, %94
  %554 = fmul fast float %500, %81
  %555 = call float @dx.op.tertiary.f32(i32 46, float %501, float %86, float %554)  ; FMad(a,b,c)
  %556 = call float @dx.op.tertiary.f32(i32 46, float %502, float %91, float %555)  ; FMad(a,b,c)
  %557 = fadd fast float %556, %96
  %558 = fdiv fast float %549, %557
  %559 = fdiv fast float %553, %557
  %560 = fcmp fast ole float %558, 1.000000e+00
  %561 = fcmp fast ole float %559, 1.000000e+00
  %562 = fcmp fast oge float %558, 0.000000e+00
  %563 = fcmp fast oge float %559, 0.000000e+00
  %564 = and i1 %562, %560
  %565 = and i1 %563, %561
  %566 = and i1 %564, %565
  br i1 %566, label %567, label %580

; <label>:567                                     ; preds = %545
  %568 = fmul fast float %500, %80
  %569 = call float @dx.op.tertiary.f32(i32 46, float %501, float %85, float %568)  ; FMad(a,b,c)
  %570 = call float @dx.op.tertiary.f32(i32 46, float %502, float %90, float %569)  ; FMad(a,b,c)
  %571 = fadd fast float %570, %95
  %572 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %573 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %574 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %572, %dx.types.Handle %573, float %558, float %559, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %575 = extractvalue %dx.types.ResRet.f32 %574, 0
  %576 = fcmp fast olt float %571, %575
  %577 = fcmp fast ogt float %575, 0x3FEFAE1480000000
  %578 = or i1 %576, %577
  %579 = uitofp i1 %578 to float
  br label %580

; <label>:580                                     ; preds = %567, %545, %543
  %581 = phi float [ %579, %567 ], [ 1.000000e+00, %545 ], [ 1.000000e+00, %543 ]
  %582 = icmp eq i32 %66, 0
  br i1 %582, label %662, label %583

; <label>:583                                     ; preds = %580
  %584 = fcmp fast oge float %468, %69
  %585 = fcmp fast oge float %468, %70
  %586 = fcmp fast oge float %468, %71
  %587 = fcmp fast oge float %468, %72
  %588 = zext i1 %584 to i32
  %589 = zext i1 %585 to i32
  %590 = zext i1 %586 to i32
  %591 = zext i1 %587 to i32
  %592 = add nuw nsw i32 %588, %589
  %593 = add nuw nsw i32 %592, %590
  %594 = add nuw nsw i32 %593, %591
  %595 = icmp ult i32 %594, %66
  br i1 %595, label %596, label %662

; <label>:596                                     ; preds = %583
  %597 = shl nuw nsw i32 %594, 2
  %598 = add nuw nsw i32 %597, 9
  %599 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 %598)  ; CBufferLoadLegacy(handle,regIndex)
  %600 = extractvalue %dx.types.CBufRet.f32 %599, 0
  %601 = extractvalue %dx.types.CBufRet.f32 %599, 1
  %602 = extractvalue %dx.types.CBufRet.f32 %599, 3
  %603 = add nuw nsw i32 %597, 10
  %604 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 %603)  ; CBufferLoadLegacy(handle,regIndex)
  %605 = extractvalue %dx.types.CBufRet.f32 %604, 0
  %606 = extractvalue %dx.types.CBufRet.f32 %604, 1
  %607 = extractvalue %dx.types.CBufRet.f32 %604, 3
  %608 = add nuw nsw i32 %597, 11
  %609 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 %608)  ; CBufferLoadLegacy(handle,regIndex)
  %610 = extractvalue %dx.types.CBufRet.f32 %609, 0
  %611 = extractvalue %dx.types.CBufRet.f32 %609, 1
  %612 = extractvalue %dx.types.CBufRet.f32 %609, 3
  %613 = add nuw nsw i32 %597, 12
  %614 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 %613)  ; CBufferLoadLegacy(handle,regIndex)
  %615 = extractvalue %dx.types.CBufRet.f32 %614, 0
  %616 = extractvalue %dx.types.CBufRet.f32 %614, 1
  %617 = extractvalue %dx.types.CBufRet.f32 %614, 3
  %618 = fmul fast float %600, %500
  %619 = call float @dx.op.tertiary.f32(i32 46, float %501, float %605, float %618)  ; FMad(a,b,c)
  %620 = call float @dx.op.tertiary.f32(i32 46, float %502, float %610, float %619)  ; FMad(a,b,c)
  %621 = fadd fast float %620, %615
  %622 = fmul fast float %601, %500
  %623 = call float @dx.op.tertiary.f32(i32 46, float %501, float %606, float %622)  ; FMad(a,b,c)
  %624 = call float @dx.op.tertiary.f32(i32 46, float %502, float %611, float %623)  ; FMad(a,b,c)
  %625 = fadd fast float %624, %616
  %626 = fmul fast float %602, %500
  %627 = call float @dx.op.tertiary.f32(i32 46, float %501, float %607, float %626)  ; FMad(a,b,c)
  %628 = call float @dx.op.tertiary.f32(i32 46, float %502, float %612, float %627)  ; FMad(a,b,c)
  %629 = fadd fast float %628, %617
  %630 = fdiv fast float %621, %629
  %631 = fdiv fast float %625, %629
  %632 = add nuw nsw i32 %594, 25
  %633 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 %632)  ; CBufferLoadLegacy(handle,regIndex)
  %634 = extractvalue %dx.types.CBufRet.f32 %633, 0
  %635 = extractvalue %dx.types.CBufRet.f32 %633, 1
  %636 = extractvalue %dx.types.CBufRet.f32 %633, 2
  %637 = extractvalue %dx.types.CBufRet.f32 %633, 3
  %638 = fcmp fast ole float %630, %636
  %639 = fcmp fast ole float %631, %637
  %640 = fcmp fast oge float %630, %634
  %641 = fcmp fast oge float %631, %635
  %642 = and i1 %640, %638
  %643 = and i1 %641, %639
  %644 = and i1 %642, %643
  br i1 %644, label %645, label %662

; <label>:645                                     ; preds = %596
  %646 = extractvalue %dx.types.CBufRet.f32 %614, 2
  %647 = extractvalue %dx.types.CBufRet.f32 %609, 2
  %648 = extractvalue %dx.types.CBufRet.f32 %604, 2
  %649 = extractvalue %dx.types.CBufRet.f32 %599, 2
  %650 = fmul fast float %649, %500
  %651 = call float @dx.op.tertiary.f32(i32 46, float %501, float %648, float %650)  ; FMad(a,b,c)
  %652 = call float @dx.op.tertiary.f32(i32 46, float %502, float %647, float %651)  ; FMad(a,b,c)
  %653 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %654 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %655 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %653, %dx.types.Handle %654, float %630, float %631, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %656 = extractvalue %dx.types.ResRet.f32 %655, 0
  %657 = fsub fast float 1.000000e+00, %646
  %658 = fsub fast float %657, %652
  %659 = fsub fast float %656, %74
  %660 = fcmp fast olt float %658, %659
  %661 = uitofp i1 %660 to float
  br label %662

; <label>:662                                     ; preds = %645, %596, %583, %580
  %663 = phi float [ %661, %645 ], [ 1.000000e+00, %596 ], [ 1.000000e+00, %583 ], [ 1.000000e+00, %580 ]
  %664 = fmul fast float %663, %581
  %665 = fsub fast float %500, %508
  %666 = fsub fast float %501, %509
  %667 = fsub fast float %502, %510
  %668 = mul i32 %67, 336
  %669 = add i32 %668, 128
  %670 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %671 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %669, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %672 = add i32 %668, 144
  %673 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %672, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %674 = add i32 %668, 160
  %675 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %674, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %676 = add i32 %668, 176
  %677 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %676, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %678 = add i32 %668, 256
  %679 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %678, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %680 = extractvalue %dx.types.ResRet.i32 %679, 0
  %681 = extractvalue %dx.types.ResRet.i32 %679, 1
  %682 = extractvalue %dx.types.ResRet.i32 %679, 2
  %683 = bitcast i32 %680 to float
  %684 = bitcast i32 %681 to float
  %685 = bitcast i32 %682 to float
  %686 = add i32 %668, 268
  %687 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %686, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %688 = extractvalue %dx.types.ResRet.i32 %687, 0
  %689 = add i32 %668, 272
  %690 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %689, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %691 = add i32 %668, 288
  %692 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %691, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %693 = icmp eq i32 %688, 0
  %694 = fadd fast float %683, %504
  %695 = fadd fast float %684, %505
  %696 = fadd fast float %685, %506
  %697 = fmul fast float %694, 2.097152e+06
  %698 = fmul fast float %695, 2.097152e+06
  %699 = fmul fast float %696, 2.097152e+06
  %700 = fadd fast float %697, %665
  %701 = fadd fast float %698, %666
  %702 = fadd fast float %699, %667
  br i1 %693, label %703, label %943

; <label>:703                                     ; preds = %662
  %704 = extractvalue %dx.types.ResRet.i32 %692, 2
  %705 = bitcast i32 %704 to float
  %706 = extractvalue %dx.types.ResRet.i32 %692, 1
  %707 = bitcast i32 %706 to float
  %708 = extractvalue %dx.types.ResRet.i32 %692, 0
  %709 = bitcast i32 %708 to float
  %710 = add i32 %668, 320
  %711 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %710, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %712 = extractvalue %dx.types.ResRet.i32 %711, 0
  %713 = add i32 %668, 316
  %714 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %713, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %715 = extractvalue %dx.types.ResRet.i32 %714, 0
  %716 = add i32 %668, 300
  %717 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %716, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %718 = extractvalue %dx.types.ResRet.i32 %717, 0
  %719 = bitcast i32 %718 to float
  %720 = fadd fast float %700, %709
  %721 = fadd fast float %701, %707
  %722 = fadd fast float %702, %705
  %723 = fmul fast float %720, %720
  %724 = fmul fast float %721, %721
  %725 = fadd fast float %723, %724
  %726 = fmul fast float %722, %722
  %727 = fadd fast float %725, %726
  %728 = call float @dx.op.unary.f32(i32 24, float %727)  ; Sqrt(value)
  %729 = call float @dx.op.unary.f32(i32 23, float %728)  ; Log(value)
  %730 = fadd fast float %729, %719
  %731 = call float @dx.op.unary.f32(i32 27, float %730)  ; Round_ni(value)
  %732 = fptosi float %731 to i32
  %733 = sub nsw i32 %732, %715
  %734 = call i32 @dx.op.binary.i32(i32 37, i32 0, i32 %733)  ; IMax(a,b)
  %735 = icmp slt i32 %734, %712
  br i1 %735, label %736, label %1115

; <label>:736                                     ; preds = %703
  %737 = add nsw i32 %734, %67
  %738 = mul i32 %737, 336
  %739 = add i32 %738, 128
  %740 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %739, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %741 = extractvalue %dx.types.ResRet.i32 %740, 0
  %742 = extractvalue %dx.types.ResRet.i32 %740, 1
  %743 = extractvalue %dx.types.ResRet.i32 %740, 2
  %744 = bitcast i32 %741 to float
  %745 = bitcast i32 %742 to float
  %746 = bitcast i32 %743 to float
  %747 = add i32 %738, 144
  %748 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %747, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %749 = extractvalue %dx.types.ResRet.i32 %748, 0
  %750 = extractvalue %dx.types.ResRet.i32 %748, 1
  %751 = extractvalue %dx.types.ResRet.i32 %748, 2
  %752 = bitcast i32 %749 to float
  %753 = bitcast i32 %750 to float
  %754 = bitcast i32 %751 to float
  %755 = add i32 %738, 160
  %756 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %755, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %757 = extractvalue %dx.types.ResRet.i32 %756, 0
  %758 = extractvalue %dx.types.ResRet.i32 %756, 1
  %759 = extractvalue %dx.types.ResRet.i32 %756, 2
  %760 = bitcast i32 %757 to float
  %761 = bitcast i32 %758 to float
  %762 = bitcast i32 %759 to float
  %763 = add i32 %738, 176
  %764 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %763, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %765 = extractvalue %dx.types.ResRet.i32 %764, 0
  %766 = extractvalue %dx.types.ResRet.i32 %764, 1
  %767 = extractvalue %dx.types.ResRet.i32 %764, 2
  %768 = bitcast i32 %765 to float
  %769 = bitcast i32 %766 to float
  %770 = bitcast i32 %767 to float
  %771 = add i32 %738, 256
  %772 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %771, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %773 = extractvalue %dx.types.ResRet.i32 %772, 0
  %774 = extractvalue %dx.types.ResRet.i32 %772, 1
  %775 = extractvalue %dx.types.ResRet.i32 %772, 2
  %776 = bitcast i32 %773 to float
  %777 = bitcast i32 %774 to float
  %778 = bitcast i32 %775 to float
  %779 = add i32 %738, 272
  %780 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %779, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %781 = extractvalue %dx.types.ResRet.i32 %780, 0
  %782 = extractvalue %dx.types.ResRet.i32 %780, 1
  %783 = extractvalue %dx.types.ResRet.i32 %780, 2
  %784 = bitcast i32 %781 to float
  %785 = bitcast i32 %782 to float
  %786 = bitcast i32 %783 to float
  %787 = fadd fast float %776, %504
  %788 = fadd fast float %777, %505
  %789 = fadd fast float %778, %506
  %790 = fmul fast float %787, 2.097152e+06
  %791 = fmul fast float %788, 2.097152e+06
  %792 = fmul fast float %789, 2.097152e+06
  %793 = fadd fast float %790, %665
  %794 = fadd fast float %793, %784
  %795 = fadd fast float %791, %666
  %796 = fadd fast float %795, %785
  %797 = fadd fast float %792, %667
  %798 = fadd fast float %797, %786
  %799 = fmul fast float %794, %744
  %800 = call float @dx.op.tertiary.f32(i32 46, float %796, float %752, float %799)  ; FMad(a,b,c)
  %801 = call float @dx.op.tertiary.f32(i32 46, float %798, float %760, float %800)  ; FMad(a,b,c)
  %802 = fadd fast float %801, %768
  %803 = fmul fast float %794, %745
  %804 = call float @dx.op.tertiary.f32(i32 46, float %796, float %753, float %803)  ; FMad(a,b,c)
  %805 = call float @dx.op.tertiary.f32(i32 46, float %798, float %761, float %804)  ; FMad(a,b,c)
  %806 = fadd fast float %805, %769
  %807 = fmul fast float %794, %746
  %808 = call float @dx.op.tertiary.f32(i32 46, float %796, float %754, float %807)  ; FMad(a,b,c)
  %809 = call float @dx.op.tertiary.f32(i32 46, float %798, float %762, float %808)  ; FMad(a,b,c)
  %810 = fadd fast float %809, %770
  %811 = fmul fast float %802, 1.280000e+02
  %812 = fmul fast float %806, 1.280000e+02
  %813 = fptoui float %811 to i32
  %814 = fptoui float %812 to i32
  %815 = icmp ult i32 %737, 8192
  br i1 %815, label %822, label %816

; <label>:816                                     ; preds = %736
  %817 = mul i32 %737, 21845
  %818 = shl i32 %814, 7
  %819 = add i32 %817, -178946048
  %820 = add i32 %819, %813
  %821 = add i32 %820, %818
  br label %822

; <label>:822                                     ; preds = %816, %736
  %823 = phi i32 [ %821, %816 ], [ %737, %736 ]
  %824 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %825 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %824, i32 %823, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %826 = extractvalue %dx.types.ResRet.i32 %825, 0
  %827 = lshr i32 %826, 20
  %828 = and i32 %827, 63
  %829 = and i32 %826, 134217728
  %830 = icmp eq i32 %829, 0
  br i1 %830, label %937, label %831

; <label>:831                                     ; preds = %822
  %832 = icmp eq i32 %828, 0
  %833 = zext i1 %832 to i32
  %834 = add i32 %828, %737
  %835 = fmul fast float %802, 1.638400e+04
  %836 = fmul fast float %806, 1.638400e+04
  %837 = fptoui float %835 to i32
  %838 = fptoui float %836 to i32
  br i1 %832, label %914, label %839

; <label>:839                                     ; preds = %831
  %840 = add i32 %738, 304
  %841 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %840, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %842 = extractvalue %dx.types.ResRet.i32 %841, 0
  %843 = extractvalue %dx.types.ResRet.i32 %841, 1
  %844 = mul i32 %834, 336
  %845 = add i32 %844, 304
  %846 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %845, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %847 = extractvalue %dx.types.ResRet.i32 %846, 0
  %848 = extractvalue %dx.types.ResRet.i32 %846, 1
  %849 = shl i32 %842, 5
  %850 = shl i32 %843, 5
  %851 = shl i32 %847, 5
  %852 = shl i32 %848, 5
  %853 = sub i32 %813, %849
  %854 = sub i32 %814, %850
  %855 = and i32 %827, 31
  %856 = shl i32 %851, %855
  %857 = shl i32 %852, %855
  %858 = add i32 %853, %856
  %859 = add i32 %854, %857
  %860 = lshr i32 %858, %855
  %861 = lshr i32 %859, %855
  %862 = shl i32 %860, 7
  %863 = shl i32 %861, 7
  %864 = or i32 %862, 127
  %865 = or i32 %863, 127
  %866 = add i32 %738, 112
  %867 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %866, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %868 = extractvalue %dx.types.ResRet.i32 %867, 2
  %869 = bitcast i32 %868 to float
  %870 = add i32 %844, 112
  %871 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %870, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %872 = extractvalue %dx.types.ResRet.i32 %871, 2
  %873 = bitcast i32 %872 to float
  %874 = sitofp i32 %842 to float
  %875 = sitofp i32 %843 to float
  %876 = sitofp i32 %847 to float
  %877 = sitofp i32 %848 to float
  %878 = shl i32 1, %855
  %879 = uitofp i32 %878 to float
  %880 = fdiv fast float 1.000000e+00, %879
  %881 = fmul fast float %880, %874
  %882 = fmul fast float %880, %875
  %883 = fsub fast float %876, %881
  %884 = fsub fast float %877, %882
  %885 = fmul fast float %883, 2.500000e-01
  %886 = fmul fast float %884, 2.500000e-01
  %887 = fmul fast float %880, %869
  %888 = fsub fast float %873, %887
  %889 = fmul fast float %880, %802
  %890 = fmul fast float %880, %806
  %891 = fadd fast float %885, %889
  %892 = fadd fast float %886, %890
  %893 = fmul fast float %891, 1.638400e+04
  %894 = fmul fast float %892, 1.638400e+04
  %895 = fptoui float %893 to i32
  %896 = fptoui float %894 to i32
  %897 = call i32 @dx.op.binary.i32(i32 39, i32 %895, i32 %862)  ; UMax(a,b)
  %898 = call i32 @dx.op.binary.i32(i32 39, i32 %896, i32 %863)  ; UMax(a,b)
  %899 = call i32 @dx.op.binary.i32(i32 40, i32 %897, i32 %864)  ; UMin(a,b)
  %900 = call i32 @dx.op.binary.i32(i32 40, i32 %898, i32 %865)  ; UMin(a,b)
  %901 = icmp ult i32 %834, 8192
  br i1 %901, label %907, label %902

; <label>:902                                     ; preds = %839
  %903 = mul i32 %834, 21845
  %904 = add i32 %903, -178946048
  %905 = add i32 %904, %860
  %906 = add i32 %905, %863
  br label %907

; <label>:907                                     ; preds = %902, %839
  %908 = phi i32 [ %906, %902 ], [ %834, %839 ]
  %909 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %824, i32 %908, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %910 = extractvalue %dx.types.ResRet.i32 %909, 0
  %911 = and i32 %910, 200278016
  %912 = icmp eq i32 %911, 134217728
  %913 = zext i1 %912 to i32
  br label %914

; <label>:914                                     ; preds = %907, %831
  %915 = phi i32 [ %899, %907 ], [ %837, %831 ]
  %916 = phi i32 [ %900, %907 ], [ %838, %831 ]
  %917 = phi i32 [ %913, %907 ], [ %833, %831 ]
  %918 = phi i32 [ %910, %907 ], [ %826, %831 ]
  %919 = phi float [ %880, %907 ], [ 1.000000e+00, %831 ]
  %920 = phi float [ %888, %907 ], [ 0.000000e+00, %831 ]
  %921 = icmp eq i32 %917, 0
  br i1 %921, label %937, label %922

; <label>:922                                     ; preds = %914
  %923 = shl i32 %918, 7
  %924 = and i32 %923, 130944
  %925 = lshr i32 %918, 3
  %926 = and i32 %925, 130944
  %927 = and i32 %915, 127
  %928 = and i32 %916, 127
  %929 = or i32 %924, %927
  %930 = or i32 %926, %928
  %931 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %932 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %931, i32 0, i32 %929, i32 %930, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %933 = extractvalue %dx.types.ResRet.i32 %932, 0
  %934 = bitcast i32 %933 to float
  %935 = fsub fast float %934, %920
  %936 = fdiv fast float %935, %919
  br label %937

; <label>:937                                     ; preds = %922, %914, %822
  %938 = phi float [ %936, %922 ], [ 0.000000e+00, %914 ], [ 0.000000e+00, %822 ]
  %939 = phi i1 [ true, %922 ], [ false, %914 ], [ false, %822 ]
  %940 = fcmp fast ogt float %938, %810
  %941 = and i1 %939, %940
  %942 = select i1 %941, float 0.000000e+00, float 1.000000e+00
  br label %1115

; <label>:943                                     ; preds = %662
  %944 = extractvalue %dx.types.ResRet.i32 %677, 3
  %945 = extractvalue %dx.types.ResRet.i32 %677, 2
  %946 = extractvalue %dx.types.ResRet.i32 %677, 1
  %947 = extractvalue %dx.types.ResRet.i32 %677, 0
  %948 = extractvalue %dx.types.ResRet.i32 %675, 3
  %949 = extractvalue %dx.types.ResRet.i32 %675, 2
  %950 = extractvalue %dx.types.ResRet.i32 %675, 1
  %951 = extractvalue %dx.types.ResRet.i32 %675, 0
  %952 = extractvalue %dx.types.ResRet.i32 %673, 3
  %953 = extractvalue %dx.types.ResRet.i32 %673, 2
  %954 = extractvalue %dx.types.ResRet.i32 %673, 1
  %955 = extractvalue %dx.types.ResRet.i32 %673, 0
  %956 = extractvalue %dx.types.ResRet.i32 %671, 3
  %957 = extractvalue %dx.types.ResRet.i32 %671, 2
  %958 = extractvalue %dx.types.ResRet.i32 %671, 1
  %959 = extractvalue %dx.types.ResRet.i32 %671, 0
  %960 = extractvalue %dx.types.ResRet.i32 %690, 2
  %961 = bitcast i32 %960 to float
  %962 = extractvalue %dx.types.ResRet.i32 %690, 1
  %963 = bitcast i32 %962 to float
  %964 = extractvalue %dx.types.ResRet.i32 %690, 0
  %965 = bitcast i32 %964 to float
  %966 = fadd fast float %700, %965
  %967 = fadd fast float %701, %963
  %968 = fadd fast float %702, %961
  %969 = icmp eq i32 %688, 2
  br i1 %969, label %1016, label %970

; <label>:970                                     ; preds = %943
  %971 = call float @dx.op.unary.f32(i32 6, float %966)  ; FAbs(value)
  %972 = call float @dx.op.unary.f32(i32 6, float %967)  ; FAbs(value)
  %973 = fcmp fast ult float %971, %972
  %974 = call float @dx.op.unary.f32(i32 6, float %968)  ; FAbs(value)
  %975 = fcmp fast ult float %971, %974
  %976 = or i1 %973, %975
  br i1 %976, label %980, label %977

; <label>:977                                     ; preds = %970
  %978 = fcmp ule float %966, 0.000000e+00
  %979 = zext i1 %978 to i32
  br label %988

; <label>:980                                     ; preds = %970
  %981 = fcmp fast ogt float %972, %974
  br i1 %981, label %982, label %985

; <label>:982                                     ; preds = %980
  %983 = fcmp fast ogt float %967, 0.000000e+00
  %984 = select i1 %983, i32 2, i32 3
  br label %988

; <label>:985                                     ; preds = %980
  %986 = fcmp fast ogt float %968, 0.000000e+00
  %987 = select i1 %986, i32 4, i32 5
  br label %988

; <label>:988                                     ; preds = %985, %982, %977
  %989 = phi i32 [ %979, %977 ], [ %984, %982 ], [ %987, %985 ]
  %990 = add i32 %989, %67
  %991 = mul i32 %990, 336
  %992 = add i32 %991, 128
  %993 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %992, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %994 = extractvalue %dx.types.ResRet.i32 %993, 0
  %995 = extractvalue %dx.types.ResRet.i32 %993, 1
  %996 = extractvalue %dx.types.ResRet.i32 %993, 2
  %997 = extractvalue %dx.types.ResRet.i32 %993, 3
  %998 = add i32 %991, 144
  %999 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %998, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1000 = extractvalue %dx.types.ResRet.i32 %999, 0
  %1001 = extractvalue %dx.types.ResRet.i32 %999, 1
  %1002 = extractvalue %dx.types.ResRet.i32 %999, 2
  %1003 = extractvalue %dx.types.ResRet.i32 %999, 3
  %1004 = add i32 %991, 160
  %1005 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %1004, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1006 = extractvalue %dx.types.ResRet.i32 %1005, 0
  %1007 = extractvalue %dx.types.ResRet.i32 %1005, 1
  %1008 = extractvalue %dx.types.ResRet.i32 %1005, 2
  %1009 = extractvalue %dx.types.ResRet.i32 %1005, 3
  %1010 = add i32 %991, 176
  %1011 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %670, i32 %1010, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1012 = extractvalue %dx.types.ResRet.i32 %1011, 0
  %1013 = extractvalue %dx.types.ResRet.i32 %1011, 1
  %1014 = extractvalue %dx.types.ResRet.i32 %1011, 2
  %1015 = extractvalue %dx.types.ResRet.i32 %1011, 3
  br label %1016

; <label>:1016                                    ; preds = %988, %943
  %1017 = phi i32 [ %994, %988 ], [ %959, %943 ]
  %1018 = phi i32 [ %995, %988 ], [ %958, %943 ]
  %1019 = phi i32 [ %996, %988 ], [ %957, %943 ]
  %1020 = phi i32 [ %997, %988 ], [ %956, %943 ]
  %1021 = phi i32 [ %1000, %988 ], [ %955, %943 ]
  %1022 = phi i32 [ %1001, %988 ], [ %954, %943 ]
  %1023 = phi i32 [ %1002, %988 ], [ %953, %943 ]
  %1024 = phi i32 [ %1003, %988 ], [ %952, %943 ]
  %1025 = phi i32 [ %1006, %988 ], [ %951, %943 ]
  %1026 = phi i32 [ %1007, %988 ], [ %950, %943 ]
  %1027 = phi i32 [ %1008, %988 ], [ %949, %943 ]
  %1028 = phi i32 [ %1009, %988 ], [ %948, %943 ]
  %1029 = phi i32 [ %1012, %988 ], [ %947, %943 ]
  %1030 = phi i32 [ %1013, %988 ], [ %946, %943 ]
  %1031 = phi i32 [ %1014, %988 ], [ %945, %943 ]
  %1032 = phi i32 [ %1015, %988 ], [ %944, %943 ]
  %1033 = phi i32 [ %990, %988 ], [ %67, %943 ]
  %1034 = bitcast i32 %1032 to float
  %1035 = bitcast i32 %1031 to float
  %1036 = bitcast i32 %1030 to float
  %1037 = bitcast i32 %1029 to float
  %1038 = bitcast i32 %1028 to float
  %1039 = bitcast i32 %1027 to float
  %1040 = bitcast i32 %1026 to float
  %1041 = bitcast i32 %1025 to float
  %1042 = bitcast i32 %1024 to float
  %1043 = bitcast i32 %1023 to float
  %1044 = bitcast i32 %1022 to float
  %1045 = bitcast i32 %1021 to float
  %1046 = bitcast i32 %1020 to float
  %1047 = bitcast i32 %1019 to float
  %1048 = bitcast i32 %1018 to float
  %1049 = bitcast i32 %1017 to float
  %1050 = fmul fast float %1049, %966
  %1051 = call float @dx.op.tertiary.f32(i32 46, float %967, float %1045, float %1050)  ; FMad(a,b,c)
  %1052 = call float @dx.op.tertiary.f32(i32 46, float %968, float %1041, float %1051)  ; FMad(a,b,c)
  %1053 = fadd fast float %1052, %1037
  %1054 = fmul fast float %1048, %966
  %1055 = call float @dx.op.tertiary.f32(i32 46, float %967, float %1044, float %1054)  ; FMad(a,b,c)
  %1056 = call float @dx.op.tertiary.f32(i32 46, float %968, float %1040, float %1055)  ; FMad(a,b,c)
  %1057 = fadd fast float %1056, %1036
  %1058 = fmul fast float %1047, %966
  %1059 = call float @dx.op.tertiary.f32(i32 46, float %967, float %1043, float %1058)  ; FMad(a,b,c)
  %1060 = call float @dx.op.tertiary.f32(i32 46, float %968, float %1039, float %1059)  ; FMad(a,b,c)
  %1061 = fadd fast float %1060, %1035
  %1062 = fmul fast float %1046, %966
  %1063 = call float @dx.op.tertiary.f32(i32 46, float %967, float %1042, float %1062)  ; FMad(a,b,c)
  %1064 = call float @dx.op.tertiary.f32(i32 46, float %968, float %1038, float %1063)  ; FMad(a,b,c)
  %1065 = fadd fast float %1064, %1034
  %1066 = fdiv fast float %1053, %1065
  %1067 = fdiv fast float %1057, %1065
  %1068 = fdiv fast float %1061, %1065
  %1069 = icmp ult i32 %1033, 8192
  br i1 %1069, label %1080, label %1070

; <label>:1070                                    ; preds = %1016
  %1071 = fmul fast float %1067, 1.280000e+02
  %1072 = fptoui float %1071 to i32
  %1073 = fmul fast float %1066, 1.280000e+02
  %1074 = fptoui float %1073 to i32
  %1075 = mul i32 %1033, 21845
  %1076 = shl i32 %1072, 7
  %1077 = add i32 %1075, -178946048
  %1078 = add i32 %1077, %1074
  %1079 = add i32 %1078, %1076
  br label %1080

; <label>:1080                                    ; preds = %1070, %1016
  %1081 = phi i32 [ %1079, %1070 ], [ %1033, %1016 ]
  %1082 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1083 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1082, i32 %1081, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1084 = extractvalue %dx.types.ResRet.i32 %1083, 0
  %1085 = lshr i32 %1084, 20
  %1086 = and i32 %1084, 134217728
  %1087 = icmp eq i32 %1086, 0
  %1088 = and i32 %1085, 31
  %1089 = lshr i32 16384, %1088
  %1090 = uitofp i32 %1089 to float
  %1091 = select i1 %1069, float 1.280000e+02, float %1090
  br i1 %1087, label %1109, label %1092

; <label>:1092                                    ; preds = %1080
  %1093 = lshr i32 %1084, 3
  %1094 = and i32 %1093, 130944
  %1095 = fmul fast float %1091, %1067
  %1096 = fptoui float %1095 to i32
  %1097 = and i32 %1096, 127
  %1098 = or i32 %1097, %1094
  %1099 = shl i32 %1084, 7
  %1100 = and i32 %1099, 130944
  %1101 = fmul fast float %1091, %1066
  %1102 = fptoui float %1101 to i32
  %1103 = and i32 %1102, 127
  %1104 = or i32 %1103, %1100
  %1105 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1106 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1105, i32 0, i32 %1104, i32 %1098, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1107 = extractvalue %dx.types.ResRet.i32 %1106, 0
  %1108 = bitcast i32 %1107 to float
  br label %1109

; <label>:1109                                    ; preds = %1092, %1080
  %1110 = phi float [ %1108, %1092 ], [ 0.000000e+00, %1080 ]
  %1111 = phi i1 [ true, %1092 ], [ false, %1080 ]
  %1112 = fcmp fast ogt float %1110, %1068
  %1113 = and i1 %1111, %1112
  %1114 = select i1 %1113, float 0.000000e+00, float 1.000000e+00
  br label %1115

; <label>:1115                                    ; preds = %1109, %937, %703
  %1116 = phi float [ 1.000000e+00, %703 ], [ %942, %937 ], [ %1114, %1109 ]
  %1117 = fmul fast float %664, %1116
  br label %1118

; <label>:1118                                    ; preds = %1115, %539
  %1119 = phi float [ %1117, %1115 ], [ 1.000000e+00, %539 ]
  %1120 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %1121 = extractvalue %dx.types.CBufRet.f32 %1120, 0
  %1122 = extractvalue %dx.types.CBufRet.f32 %1120, 1
  %1123 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 75)  ; CBufferLoadLegacy(handle,regIndex)
  %1124 = extractvalue %dx.types.CBufRet.f32 %1123, 0
  %1125 = extractvalue %dx.types.CBufRet.f32 %1123, 1
  %1126 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %1127 = extractvalue %dx.types.CBufRet.f32 %1126, 0
  %1128 = extractvalue %dx.types.CBufRet.f32 %1126, 1
  %1129 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 77)  ; CBufferLoadLegacy(handle,regIndex)
  %1130 = extractvalue %dx.types.CBufRet.f32 %1129, 0
  %1131 = extractvalue %dx.types.CBufRet.f32 %1129, 1
  %1132 = fmul fast float %1121, %500
  %1133 = call float @dx.op.tertiary.f32(i32 46, float %501, float %1124, float %1132)  ; FMad(a,b,c)
  %1134 = call float @dx.op.tertiary.f32(i32 46, float %502, float %1127, float %1133)  ; FMad(a,b,c)
  %1135 = fadd fast float %1134, %1130
  %1136 = fmul fast float %1122, %500
  %1137 = call float @dx.op.tertiary.f32(i32 46, float %501, float %1125, float %1136)  ; FMad(a,b,c)
  %1138 = call float @dx.op.tertiary.f32(i32 46, float %502, float %1128, float %1137)  ; FMad(a,b,c)
  %1139 = fadd fast float %1138, %1131
  %1140 = fmul fast float %1135, 5.000000e-01
  %1141 = fmul fast float %1139, 5.000000e-01
  %1142 = fadd fast float %1140, 5.000000e-01
  %1143 = fsub fast float 5.000000e-01, %1141
  %1144 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1145 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1146 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1144, %dx.types.Handle %1145, float %1142, float %1143, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1147 = extractvalue %dx.types.ResRet.f32 %1146, 0
  %1148 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %1149 = extractvalue %dx.types.CBufRet.f32 %1148, 2
  %1150 = fcmp fast ogt float %1149, 0.000000e+00
  br i1 %1150, label %1151, label %1160

; <label>:1151                                    ; preds = %1118
  %1152 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1153 = extractvalue %dx.types.CBufRet.f32 %1152, 0
  %1154 = extractvalue %dx.types.CBufRet.f32 %1152, 1
  %1155 = extractvalue %dx.types.CBufRet.f32 %1152, 2
  %1156 = call float @dx.op.dot3.f32(i32 55, float %61, float %62, float %63, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1157 = fmul fast float %1153, %1156
  %1158 = fmul fast float %1154, %1156
  %1159 = fmul fast float %1155, %1156
  br label %1160

; <label>:1160                                    ; preds = %1151, %1118
  %1161 = phi float [ %1157, %1151 ], [ %61, %1118 ]
  %1162 = phi float [ %1158, %1151 ], [ %62, %1118 ]
  %1163 = phi float [ %1159, %1151 ], [ %63, %1118 ]
  %1164 = fsub fast float -0.000000e+00, %533
  %1165 = fsub fast float -0.000000e+00, %534
  %1166 = fsub fast float -0.000000e+00, %535
  %1167 = call float @dx.op.dot3.f32(i32 55, float %57, float %58, float %59, float %1164, float %1165, float %1166)  ; Dot3(ax,ay,az,bx,by,bz)
  %1168 = extractvalue %dx.types.CBufRet.f32 %447, 1
  %1169 = fmul fast float %1168, %1168
  %1170 = fsub fast float 1.000000e+00, %1169
  %1171 = fmul fast float %1167, 2.000000e+00
  %1172 = fadd fast float %1171, %1168
  %1173 = fmul fast float %1172, %1168
  %1174 = fadd fast float %1173, 1.000000e+00
  %1175 = call float @dx.op.unary.f32(i32 24, float %1174)  ; Sqrt(value)
  %1176 = fmul fast float %1175, 0x402921FB60000000
  %1177 = fmul fast float %1176, %1174
  %1178 = fdiv fast float %1170, %1177
  %1179 = fmul fast float %1119, %64
  %1180 = fmul fast float %1179, %1147
  %1181 = fmul fast float %1180, %1178
  %1182 = fmul fast float %1181, %1161
  %1183 = fmul fast float %1181, %1162
  %1184 = fmul fast float %1181, %1163
  br label %1185

; <label>:1185                                    ; preds = %1160, %537
  %1186 = phi float [ %538, %537 ], [ %1168, %1160 ]
  %1187 = phi float [ 0.000000e+00, %537 ], [ %1182, %1160 ]
  %1188 = phi float [ 0.000000e+00, %537 ], [ %1183, %1160 ]
  %1189 = phi float [ 0.000000e+00, %537 ], [ %1184, %1160 ]
  %1190 = fmul fast float %1186, %534
  %1191 = fmul fast float %1186, %535
  %1192 = fmul fast float %1186, %533
  %1193 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 83)  ; CBufferLoadLegacy(handle,regIndex)
  %1194 = extractvalue %dx.types.CBufRet.f32 %1193, 3
  %1195 = fcmp fast ogt float %1194, 0.000000e+00
  %1196 = extractvalue %dx.types.CBufRet.f32 %1193, 2
  %1197 = fcmp fast ogt float %1196, 0.000000e+00
  %1198 = or i1 %1195, %1197
  br i1 %1198, label %1199, label %1267

; <label>:1199                                    ; preds = %1185
  %1200 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 233)  ; CBufferLoadLegacy(handle,regIndex)
  %1201 = extractvalue %dx.types.CBufRet.f32 %1200, 0
  %1202 = extractvalue %dx.types.CBufRet.f32 %1200, 1
  %1203 = extractvalue %dx.types.CBufRet.f32 %1200, 2
  %1204 = fmul fast float %1201, %517
  %1205 = fmul fast float %1202, %518
  %1206 = fmul fast float %1203, %519
  %1207 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 234)  ; CBufferLoadLegacy(handle,regIndex)
  %1208 = extractvalue %dx.types.CBufRet.f32 %1207, 0
  %1209 = extractvalue %dx.types.CBufRet.f32 %1207, 1
  %1210 = extractvalue %dx.types.CBufRet.f32 %1207, 2
  %1211 = fadd fast float %1204, %1208
  %1212 = fadd fast float %1205, %1209
  %1213 = fadd fast float %1206, %1210
  %1214 = call float @dx.op.binary.f32(i32 35, float %1211, float 0.000000e+00)  ; FMax(a,b)
  %1215 = call float @dx.op.binary.f32(i32 35, float %1212, float 0.000000e+00)  ; FMax(a,b)
  %1216 = call float @dx.op.binary.f32(i32 35, float %1213, float 0.000000e+00)  ; FMax(a,b)
  %1217 = call float @dx.op.binary.f32(i32 36, float %1214, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1218 = call float @dx.op.binary.f32(i32 36, float %1215, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1219 = call float @dx.op.binary.f32(i32 36, float %1216, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1220 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 235)  ; CBufferLoadLegacy(handle,regIndex)
  %1221 = extractvalue %dx.types.CBufRet.f32 %1220, 0
  %1222 = extractvalue %dx.types.CBufRet.f32 %1220, 1
  %1223 = extractvalue %dx.types.CBufRet.f32 %1220, 2
  %1224 = fmul fast float %1221, %1217
  %1225 = fmul fast float %1222, %1218
  %1226 = fmul fast float %1223, %1219
  %1227 = fptosi float %1224 to i32
  %1228 = fptosi float %1225 to i32
  %1229 = fptosi float %1226 to i32
  %1230 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 4, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xU32>
  %1231 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1230, i32 0, i32 %1227, i32 %1228, i32 %1229, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1232 = extractvalue %dx.types.ResRet.i32 %1231, 0
  %1233 = extractvalue %dx.types.ResRet.i32 %1231, 1
  %1234 = extractvalue %dx.types.ResRet.i32 %1231, 2
  %1235 = extractvalue %dx.types.ResRet.i32 %1231, 3
  %1236 = uitofp i32 %1232 to float
  %1237 = uitofp i32 %1233 to float
  %1238 = uitofp i32 %1234 to float
  %1239 = uitofp i32 %1235 to float
  %1240 = extractvalue %dx.types.CBufRet.f32 %1220, 3
  %1241 = fadd fast float %1240, 1.000000e+00
  %1242 = fmul fast float %1241, %1236
  %1243 = fmul fast float %1241, %1237
  %1244 = fmul fast float %1241, %1238
  %1245 = fdiv fast float %1224, %1239
  %1246 = fdiv fast float %1225, %1239
  %1247 = fdiv fast float %1226, %1239
  %1248 = call float @dx.op.unary.f32(i32 22, float %1245)  ; Frc(value)
  %1249 = call float @dx.op.unary.f32(i32 22, float %1246)  ; Frc(value)
  %1250 = call float @dx.op.unary.f32(i32 22, float %1247)  ; Frc(value)
  %1251 = fmul fast float %1240, %1248
  %1252 = fmul fast float %1240, %1249
  %1253 = fmul fast float %1240, %1250
  %1254 = fadd fast float %1242, 5.000000e-01
  %1255 = fadd fast float %1254, %1251
  %1256 = fadd fast float %1243, 5.000000e-01
  %1257 = fadd fast float %1256, %1252
  %1258 = fadd fast float %1244, 5.000000e-01
  %1259 = fadd fast float %1258, %1253
  %1260 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 236)  ; CBufferLoadLegacy(handle,regIndex)
  %1261 = extractvalue %dx.types.CBufRet.f32 %1260, 0
  %1262 = extractvalue %dx.types.CBufRet.f32 %1260, 1
  %1263 = extractvalue %dx.types.CBufRet.f32 %1260, 2
  %1264 = fmul fast float %1255, %1261
  %1265 = fmul fast float %1257, %1262
  %1266 = fmul fast float %1259, %1263
  br label %1267

; <label>:1267                                    ; preds = %1199, %1185
  %1268 = phi float [ %1264, %1199 ], [ 0.000000e+00, %1185 ]
  %1269 = phi float [ %1265, %1199 ], [ 0.000000e+00, %1185 ]
  %1270 = phi float [ %1266, %1199 ], [ 0.000000e+00, %1185 ]
  %1271 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1272 = extractvalue %dx.types.CBufRet.f32 %1271, 0
  %1273 = extractvalue %dx.types.CBufRet.f32 %1271, 1
  %1274 = extractvalue %dx.types.CBufRet.f32 %1271, 3
  %1275 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1276 = extractvalue %dx.types.CBufRet.f32 %1275, 0
  %1277 = extractvalue %dx.types.CBufRet.f32 %1275, 1
  %1278 = extractvalue %dx.types.CBufRet.f32 %1275, 3
  %1279 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1280 = extractvalue %dx.types.CBufRet.f32 %1279, 0
  %1281 = extractvalue %dx.types.CBufRet.f32 %1279, 1
  %1282 = extractvalue %dx.types.CBufRet.f32 %1279, 3
  %1283 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %1284 = extractvalue %dx.types.CBufRet.f32 %1283, 0
  %1285 = extractvalue %dx.types.CBufRet.f32 %1283, 1
  %1286 = extractvalue %dx.types.CBufRet.f32 %1283, 3
  %1287 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 65)  ; CBufferLoadLegacy(handle,regIndex)
  %1288 = extractvalue %dx.types.CBufRet.f32 %1287, 0
  %1289 = extractvalue %dx.types.CBufRet.f32 %1287, 1
  %1290 = extractvalue %dx.types.CBufRet.f32 %1287, 2
  %1291 = fmul fast float %1288, 2.097152e+06
  %1292 = fmul fast float %1289, 2.097152e+06
  %1293 = fmul fast float %1290, 2.097152e+06
  %1294 = fsub fast float %517, %1291
  %1295 = fsub fast float %518, %1292
  %1296 = fsub fast float %519, %1293
  %1297 = fmul fast float %1294, %1272
  %1298 = call float @dx.op.tertiary.f32(i32 46, float %1295, float %1276, float %1297)  ; FMad(a,b,c)
  %1299 = call float @dx.op.tertiary.f32(i32 46, float %1296, float %1280, float %1298)  ; FMad(a,b,c)
  %1300 = fadd fast float %1299, %1284
  %1301 = fmul fast float %1294, %1273
  %1302 = call float @dx.op.tertiary.f32(i32 46, float %1295, float %1277, float %1301)  ; FMad(a,b,c)
  %1303 = call float @dx.op.tertiary.f32(i32 46, float %1296, float %1281, float %1302)  ; FMad(a,b,c)
  %1304 = fadd fast float %1303, %1285
  %1305 = fmul fast float %1294, %1274
  %1306 = call float @dx.op.tertiary.f32(i32 46, float %1295, float %1278, float %1305)  ; FMad(a,b,c)
  %1307 = call float @dx.op.tertiary.f32(i32 46, float %1296, float %1282, float %1306)  ; FMad(a,b,c)
  %1308 = fadd fast float %1307, %1286
  %1309 = fdiv fast float %1300, %1308
  %1310 = fdiv fast float %1304, %1308
  %1311 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %1312 = extractvalue %dx.types.CBufRet.f32 %1311, 0
  %1313 = fmul fast float %1312, %1308
  %1314 = extractvalue %dx.types.CBufRet.f32 %1311, 1
  %1315 = fadd fast float %1313, %1314
  %1316 = call float @dx.op.unary.f32(i32 23, float %1315)  ; Log(value)
  %1317 = extractvalue %dx.types.CBufRet.f32 %1311, 2
  %1318 = fmul fast float %1317, %1316
  %1319 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %36, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %1320 = extractvalue %dx.types.CBufRet.i32 %1319, 2
  %1321 = sitofp i32 %1320 to float
  %1322 = fdiv fast float %1318, %1321
  %1323 = fmul fast float %1309, 5.000000e-01
  %1324 = fmul fast float %1310, 5.000000e-01
  %1325 = fadd fast float %1323, 5.000000e-01
  %1326 = fsub fast float 5.000000e-01, %1324
  %1327 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1328 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1329 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1327, %dx.types.Handle %1328, float %1325, float %1326, float %1322, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1330 = extractvalue %dx.types.ResRet.f32 %1329, 0
  %1331 = extractvalue %dx.types.ResRet.f32 %1329, 1
  %1332 = extractvalue %dx.types.ResRet.f32 %1329, 2
  %1333 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1334 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1333, %dx.types.Handle %1328, float %1325, float %1326, float %1322, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1335 = extractvalue %dx.types.ResRet.f32 %1334, 0
  %1336 = extractvalue %dx.types.ResRet.f32 %1334, 1
  %1337 = extractvalue %dx.types.ResRet.f32 %1334, 2
  %1338 = call float @dx.op.dot3.f32(i32 55, float %1330, float %1331, float %1332, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1339 = fadd fast float %1338, 0x3EE4F8B580000000
  %1340 = fdiv fast float %1330, %1339
  %1341 = fdiv fast float %1331, %1339
  %1342 = fdiv fast float %1332, %1339
  %1343 = fmul fast float %1340, %1335
  %1344 = fmul fast float %1340, %1336
  %1345 = fmul fast float %1340, %1337
  %1346 = fmul fast float %1341, %1335
  %1347 = fmul fast float %1341, %1336
  %1348 = fmul fast float %1341, %1337
  %1349 = fmul fast float %1342, %1335
  %1350 = fmul fast float %1342, %1336
  %1351 = fmul fast float %1342, %1337
  %1352 = call float @dx.op.dot4.f32(i32 56, float %1330, float %1343, float %1344, float %1345, float 1.000000e+00, float %1190, float %1191, float %1192)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1353 = call float @dx.op.dot4.f32(i32 56, float %1331, float %1346, float %1347, float %1348, float 1.000000e+00, float %1190, float %1191, float %1192)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1354 = call float @dx.op.dot4.f32(i32 56, float %1332, float %1349, float %1350, float %1351, float 1.000000e+00, float %1190, float %1191, float %1192)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1355 = call float @dx.op.binary.f32(i32 35, float %1352, float 0.000000e+00)  ; FMax(a,b)
  %1356 = call float @dx.op.binary.f32(i32 35, float %1353, float 0.000000e+00)  ; FMax(a,b)
  %1357 = call float @dx.op.binary.f32(i32 35, float %1354, float 0.000000e+00)  ; FMax(a,b)
  %1358 = fadd fast float %1355, %1187
  %1359 = fadd fast float %1356, %1188
  %1360 = fadd fast float %1357, %1189
  %1361 = fcmp fast ogt float %1196, 0.000000e+00
  br i1 %1361, label %1362, label %1427

; <label>:1362                                    ; preds = %1267
  %1363 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1364 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1365 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1363, %dx.types.Handle %1364, float %1268, float %1269, float %1270, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1366 = extractvalue %dx.types.ResRet.f32 %1365, 0
  %1367 = extractvalue %dx.types.ResRet.f32 %1365, 1
  %1368 = extractvalue %dx.types.ResRet.f32 %1365, 2
  %1369 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1370 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1369, %dx.types.Handle %1364, float %1268, float %1269, float %1270, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1371 = extractvalue %dx.types.ResRet.f32 %1370, 0
  %1372 = extractvalue %dx.types.ResRet.f32 %1370, 1
  %1373 = extractvalue %dx.types.ResRet.f32 %1370, 2
  %1374 = fmul fast float %1371, 2.000000e+00
  %1375 = fmul fast float %1372, 2.000000e+00
  %1376 = fmul fast float %1373, 2.000000e+00
  %1377 = fadd fast float %1374, -1.000000e+00
  %1378 = fadd fast float %1375, -1.000000e+00
  %1379 = fadd fast float %1376, -1.000000e+00
  %1380 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1381 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1380, %dx.types.Handle %1364, float %1268, float %1269, float %1270, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1382 = extractvalue %dx.types.ResRet.f32 %1381, 0
  %1383 = extractvalue %dx.types.ResRet.f32 %1381, 1
  %1384 = extractvalue %dx.types.ResRet.f32 %1381, 2
  %1385 = fmul fast float %1382, 2.000000e+00
  %1386 = fmul fast float %1383, 2.000000e+00
  %1387 = fmul fast float %1384, 2.000000e+00
  %1388 = fadd fast float %1385, -1.000000e+00
  %1389 = fadd fast float %1386, -1.000000e+00
  %1390 = fadd fast float %1387, -1.000000e+00
  %1391 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1392 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1391, %dx.types.Handle %1364, float %1268, float %1269, float %1270, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1393 = extractvalue %dx.types.ResRet.f32 %1392, 0
  %1394 = extractvalue %dx.types.ResRet.f32 %1392, 1
  %1395 = extractvalue %dx.types.ResRet.f32 %1392, 2
  %1396 = fmul fast float %1393, 2.000000e+00
  %1397 = fmul fast float %1394, 2.000000e+00
  %1398 = fmul fast float %1395, 2.000000e+00
  %1399 = fadd fast float %1396, -1.000000e+00
  %1400 = fadd fast float %1397, -1.000000e+00
  %1401 = fadd fast float %1398, -1.000000e+00
  %1402 = fmul fast float %1366, 0x3FFBB67B80000000
  %1403 = fmul fast float %1402, %1377
  %1404 = fmul fast float %1402, %1378
  %1405 = fmul fast float %1402, %1379
  %1406 = fmul fast float %1367, 0x3FFBB67B80000000
  %1407 = fmul fast float %1406, %1388
  %1408 = fmul fast float %1406, %1389
  %1409 = fmul fast float %1406, %1390
  %1410 = fmul fast float %1368, 0x3FFBB67B80000000
  %1411 = fmul fast float %1410, %1399
  %1412 = fmul fast float %1410, %1400
  %1413 = fmul fast float %1410, %1401
  %1414 = fmul fast float %1196, 0x3FD45F3060000000
  %1415 = call float @dx.op.dot4.f32(i32 56, float %1366, float %1403, float %1404, float %1405, float 1.000000e+00, float %1190, float %1191, float %1192)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1416 = call float @dx.op.dot4.f32(i32 56, float %1367, float %1407, float %1408, float %1409, float 1.000000e+00, float %1190, float %1191, float %1192)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1417 = call float @dx.op.dot4.f32(i32 56, float %1368, float %1411, float %1412, float %1413, float 1.000000e+00, float %1190, float %1191, float %1192)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1418 = call float @dx.op.binary.f32(i32 35, float %1415, float 0.000000e+00)  ; FMax(a,b)
  %1419 = call float @dx.op.binary.f32(i32 35, float %1416, float 0.000000e+00)  ; FMax(a,b)
  %1420 = call float @dx.op.binary.f32(i32 35, float %1417, float 0.000000e+00)  ; FMax(a,b)
  %1421 = fmul fast float %1418, %1414
  %1422 = fmul fast float %1419, %1414
  %1423 = fmul fast float %1420, %1414
  %1424 = fadd fast float %1421, %1358
  %1425 = fadd fast float %1422, %1359
  %1426 = fadd fast float %1423, %1360
  br label %1427

; <label>:1427                                    ; preds = %1362, %1267
  %1428 = phi float [ %1424, %1362 ], [ %1358, %1267 ]
  %1429 = phi float [ %1425, %1362 ], [ %1359, %1267 ]
  %1430 = phi float [ %1426, %1362 ], [ %1360, %1267 ]
  %1431 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %35, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1432 = extractvalue %dx.types.CBufRet.i32 %1431, 0
  %1433 = extractvalue %dx.types.CBufRet.i32 %1431, 1
  %1434 = mul i32 %1432, %40
  %1435 = mul i32 %1433, %41
  %1436 = fmul fast float %468, %53
  %1437 = fadd fast float %1436, %54
  %1438 = call float @dx.op.unary.f32(i32 23, float %1437)  ; Log(value)
  %1439 = fmul fast float %1438, %55
  %1440 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1439)  ; FMax(a,b)
  %1441 = fptoui float %1440 to i32
  %1442 = add nsw i32 %49, -1
  %1443 = call i32 @dx.op.binary.i32(i32 40, i32 %1441, i32 %1442)  ; UMin(a,b)
  %1444 = and i32 %51, 31
  %1445 = lshr i32 %1434, %1444
  %1446 = lshr i32 %1435, %1444
  %1447 = mul i32 %1443, %48
  %1448 = add i32 %1447, %1446
  %1449 = mul i32 %1448, %47
  %1450 = add i32 %1449, %1445
  %1451 = shl i32 %1450, 1
  %1452 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1453 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1452, i32 %1451, i32 undef)  ; BufferLoad(srv,index,wot)
  %1454 = extractvalue %dx.types.ResRet.i32 %1453, 0
  %1455 = call i32 @dx.op.binary.i32(i32 40, i32 %1454, i32 %44)  ; UMin(a,b)
  %1456 = or i32 %1451, 1
  %1457 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1452, i32 %1456, i32 undef)  ; BufferLoad(srv,index,wot)
  %1458 = extractvalue %dx.types.ResRet.i32 %1457, 0
  %1459 = add i32 %40, 1
  %1460 = add i32 %41, 1
  %1461 = add i32 %42, 1
  %1462 = uitofp i32 %1459 to float
  %1463 = uitofp i32 %1460 to float
  %1464 = fadd fast float %452, %1462
  %1465 = fadd fast float %453, %1463
  %1466 = fdiv fast float %1464, %275
  %1467 = fdiv fast float %1465, %276
  %1468 = fmul fast float %1466, 2.000000e+00
  %1469 = fmul fast float %1467, 2.000000e+00
  %1470 = fadd fast float %1468, -1.000000e+00
  %1471 = fadd fast float %1469, -1.000000e+00
  %1472 = fsub fast float -0.000000e+00, %1471
  %1473 = uitofp i32 %1461 to float
  %1474 = fadd fast float %454, %1473
  %1475 = fdiv fast float %1474, %286
  %1476 = call float @dx.op.unary.f32(i32 21, float %1475)  ; Exp(value)
  %1477 = fsub fast float %1476, %289
  %1478 = fdiv fast float %1477, %291
  br i1 %295, label %1485, label %1479, !dx.controlflow.hints !50

; <label>:1479                                    ; preds = %1427
  %1480 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %1481 = extractvalue %dx.types.CBufRet.f32 %1480, 2
  %1482 = fmul fast float %1481, %1478
  %1483 = extractvalue %dx.types.CBufRet.f32 %293, 2
  %1484 = fadd fast float %1482, %1483
  br label %1492

; <label>:1485                                    ; preds = %1427
  %1486 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %1487 = extractvalue %dx.types.CBufRet.f32 %1486, 3
  %1488 = fadd fast float %1487, %1478
  %1489 = extractvalue %dx.types.CBufRet.f32 %1486, 2
  %1490 = fmul fast float %1488, %1489
  %1491 = fdiv fast float 1.000000e+00, %1490
  br label %1492

; <label>:1492                                    ; preds = %1485, %1479
  %1493 = phi float [ %1484, %1479 ], [ %1491, %1485 ]
  %1494 = fmul fast float %312, %1470
  %1495 = call float @dx.op.tertiary.f32(i32 46, float %1472, float %317, float %1494)  ; FMad(a,b,c)
  %1496 = call float @dx.op.tertiary.f32(i32 46, float %1493, float %322, float %1495)  ; FMad(a,b,c)
  %1497 = fadd fast float %1496, %327
  %1498 = fmul fast float %313, %1470
  %1499 = call float @dx.op.tertiary.f32(i32 46, float %1472, float %318, float %1498)  ; FMad(a,b,c)
  %1500 = call float @dx.op.tertiary.f32(i32 46, float %1493, float %323, float %1499)  ; FMad(a,b,c)
  %1501 = fadd fast float %1500, %328
  %1502 = fmul fast float %314, %1470
  %1503 = call float @dx.op.tertiary.f32(i32 46, float %1472, float %319, float %1502)  ; FMad(a,b,c)
  %1504 = call float @dx.op.tertiary.f32(i32 46, float %1493, float %324, float %1503)  ; FMad(a,b,c)
  %1505 = fadd fast float %1504, %329
  %1506 = fmul fast float %315, %1470
  %1507 = call float @dx.op.tertiary.f32(i32 46, float %1472, float %320, float %1506)  ; FMad(a,b,c)
  %1508 = call float @dx.op.tertiary.f32(i32 46, float %1493, float %325, float %1507)  ; FMad(a,b,c)
  %1509 = fadd fast float %1508, %330
  %1510 = fdiv fast float %1497, %1509
  %1511 = fdiv fast float %1501, %1509
  %1512 = fdiv fast float %1505, %1509
  %1513 = fsub fast float %500, %1510
  %1514 = fsub fast float %501, %1511
  %1515 = fsub fast float %502, %1512
  %1516 = fmul fast float %1513, %1513
  %1517 = fmul fast float %1514, %1514
  %1518 = fadd fast float %1517, %1516
  %1519 = fmul fast float %1515, %1515
  %1520 = fadd fast float %1518, %1519
  %1521 = call float @dx.op.unary.f32(i32 24, float %1520)  ; Sqrt(value)
  %1522 = extractvalue %dx.types.CBufRet.f32 %447, 2
  %1523 = fmul fast float %1522, %1521
  %1524 = call float @dx.op.binary.f32(i32 35, float %1523, float 1.000000e+00)  ; FMax(a,b)
  %1525 = fmul fast float %1524, %1524
  %1526 = icmp eq i32 %1455, 0
  br i1 %1526, label %1936, label %1527

; <label>:1527                                    ; preds = %1492
  br label %1528

; <label>:1528                                    ; preds = %1929, %1527
  %1529 = phi float [ %1930, %1929 ], [ %1428, %1527 ]
  %1530 = phi float [ %1931, %1929 ], [ %1429, %1527 ]
  %1531 = phi float [ %1932, %1929 ], [ %1430, %1527 ]
  %1532 = phi i32 [ %1933, %1929 ], [ 0, %1527 ]
  %1533 = add i32 %1532, %1458
  %1534 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1535 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1534, i32 %1533, i32 undef)  ; BufferLoad(srv,index,wot)
  %1536 = extractvalue %dx.types.ResRet.i32 %1535, 0
  %1537 = mul i32 %1536, 6
  %1538 = add i32 %1537, 4
  %1539 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 10, i32 1033 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<4xF32>
  %1540 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1539, i32 %1538, i32 undef)  ; BufferLoad(srv,index,wot)
  %1541 = extractvalue %dx.types.ResRet.f32 %1540, 0
  %1542 = extractvalue %dx.types.ResRet.f32 %1540, 1
  %1543 = extractvalue %dx.types.ResRet.f32 %1540, 2
  %1544 = add i32 %1537, 3
  %1545 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1539, i32 %1544, i32 undef)  ; BufferLoad(srv,index,wot)
  %1546 = extractvalue %dx.types.ResRet.f32 %1545, 3
  %1547 = add i32 %1537, 2
  %1548 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1539, i32 %1547, i32 undef)  ; BufferLoad(srv,index,wot)
  %1549 = extractvalue %dx.types.ResRet.f32 %1548, 0
  %1550 = extractvalue %dx.types.ResRet.f32 %1548, 1
  %1551 = extractvalue %dx.types.ResRet.f32 %1548, 2
  %1552 = or i32 %1537, 1
  %1553 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1539, i32 %1552, i32 undef)  ; BufferLoad(srv,index,wot)
  %1554 = extractvalue %dx.types.ResRet.f32 %1553, 0
  %1555 = extractvalue %dx.types.ResRet.f32 %1553, 1
  %1556 = extractvalue %dx.types.ResRet.f32 %1553, 2
  %1557 = extractvalue %dx.types.ResRet.f32 %1553, 3
  %1558 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1539, i32 %1537, i32 undef)  ; BufferLoad(srv,index,wot)
  %1559 = extractvalue %dx.types.ResRet.f32 %1558, 3
  %1560 = bitcast float %1546 to i32
  %1561 = lshr i32 %1560, 16
  %1562 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1561)  ; LegacyF16ToF32(value)
  %1563 = fcmp fast ogt float %1562, 0.000000e+00
  br i1 %1563, label %1564, label %1929

; <label>:1564                                    ; preds = %1528
  %1565 = extractvalue %dx.types.ResRet.f32 %1558, 2
  %1566 = extractvalue %dx.types.ResRet.f32 %1558, 1
  %1567 = extractvalue %dx.types.ResRet.f32 %1558, 0
  %1568 = extractvalue %dx.types.ResRet.f32 %1548, 3
  %1569 = extractvalue %dx.types.ResRet.f32 %1545, 2
  %1570 = extractvalue %dx.types.ResRet.f32 %1545, 0
  %1571 = add i32 %1537, 5
  %1572 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1539, i32 %1571, i32 undef)  ; BufferLoad(srv,index,wot)
  %1573 = extractvalue %dx.types.ResRet.f32 %1572, 3
  %1574 = bitcast float %1568 to i32
  %1575 = lshr i32 %1574, 16
  %1576 = and i32 %1575, 3
  %1577 = bitcast float %1570 to i32
  %1578 = and i32 %1577, 65535
  %1579 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1578)  ; LegacyF16ToF32(value)
  %1580 = lshr i32 %1577, 16
  %1581 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1580)  ; LegacyF16ToF32(value)
  %1582 = bitcast float %1569 to i32
  %1583 = and i32 %1582, 65535
  %1584 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1583)  ; LegacyF16ToF32(value)
  %1585 = fsub fast float -0.000000e+00, %1584
  %1586 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1560)  ; LegacyF16ToF32(value)
  %1587 = fsub fast float -0.000000e+00, %1586
  %1588 = fcmp fast oeq float %1557, 0.000000e+00
  %1589 = icmp eq i32 %1576, 2
  %1590 = icmp eq i32 %1576, 3
  %1591 = bitcast float %1573 to i32
  %1592 = and i32 %1591, 65535
  %1593 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1592)  ; LegacyF16ToF32(value)
  %1594 = lshr i32 %1591, 16
  %1595 = and i32 %1594, 1023
  %1596 = uitofp i32 %1595 to float
  %1597 = fmul fast float %1596, 9.765625e-04
  %1598 = fsub fast float %1567, %500
  %1599 = fsub fast float %1566, %501
  %1600 = fsub fast float %1565, %502
  %1601 = call float @dx.op.dot3.f32(i32 55, float %1598, float %1599, float %1600, float %1598, float %1599, float %1600)  ; Dot3(ax,ay,az,bx,by,bz)
  %1602 = call float @dx.op.unary.f32(i32 25, float %1601)  ; Rsqrt(value)
  %1603 = fmul fast float %1602, %1598
  %1604 = fmul fast float %1602, %1599
  %1605 = fmul fast float %1602, %1600
  br i1 %1588, label %1606, label %1613

; <label>:1606                                    ; preds = %1564
  %1607 = fmul fast float %1559, %1559
  %1608 = fmul fast float %1607, %1601
  %1609 = fmul fast float %1608, %1608
  %1610 = fsub fast float 1.000000e+00, %1609
  %1611 = call float @dx.op.unary.f32(i32 7, float %1610)  ; Saturate(value)
  %1612 = fmul fast float %1611, %1611
  br label %1623

; <label>:1613                                    ; preds = %1564
  %1614 = fmul fast float %1598, %1559
  %1615 = fmul fast float %1599, %1559
  %1616 = fmul fast float %1600, %1559
  %1617 = call float @dx.op.dot3.f32(i32 55, float %1614, float %1615, float %1616, float %1614, float %1615, float %1616)  ; Dot3(ax,ay,az,bx,by,bz)
  %1618 = call float @dx.op.unary.f32(i32 7, float %1617)  ; Saturate(value)
  %1619 = fsub fast float 1.000000e+00, %1618
  %1620 = call float @dx.op.unary.f32(i32 23, float %1619)  ; Log(value)
  %1621 = fmul fast float %1620, %1557
  %1622 = call float @dx.op.unary.f32(i32 21, float %1621)  ; Exp(value)
  br label %1623

; <label>:1623                                    ; preds = %1613, %1606
  %1624 = phi float [ %1612, %1606 ], [ %1622, %1613 ]
  br i1 %1589, label %1625, label %1632

; <label>:1625                                    ; preds = %1623
  %1626 = call float @dx.op.dot3.f32(i32 55, float %1603, float %1604, float %1605, float %1549, float %1550, float %1551)  ; Dot3(ax,ay,az,bx,by,bz)
  %1627 = fsub fast float %1626, %1579
  %1628 = fmul fast float %1627, %1581
  %1629 = call float @dx.op.unary.f32(i32 7, float %1628)  ; Saturate(value)
  %1630 = fmul fast float %1629, %1629
  %1631 = fmul fast float %1630, %1624
  br label %1632

; <label>:1632                                    ; preds = %1625, %1623
  %1633 = phi float [ %1631, %1625 ], [ %1624, %1623 ]
  br i1 %1590, label %1634, label %1638

; <label>:1634                                    ; preds = %1632
  %1635 = call float @dx.op.dot3.f32(i32 55, float %1549, float %1550, float %1551, float %1603, float %1604, float %1605)  ; Dot3(ax,ay,az,bx,by,bz)
  %1636 = fcmp fast olt float %1635, 0.000000e+00
  %1637 = select i1 %1636, float 0.000000e+00, float %1633
  br label %1638

; <label>:1638                                    ; preds = %1634, %1632
  %1639 = phi float [ %1637, %1634 ], [ %1633, %1632 ]
  br i1 %1590, label %1640, label %1872

; <label>:1640                                    ; preds = %1638
  %1641 = fmul fast float %1551, %1542
  %1642 = fmul fast float %1550, %1543
  %1643 = fsub fast float %1641, %1642
  %1644 = fmul fast float %1549, %1543
  %1645 = fmul fast float %1551, %1541
  %1646 = fsub fast float %1644, %1645
  %1647 = fmul fast float %1550, %1541
  %1648 = fmul fast float %1549, %1542
  %1649 = fsub fast float %1647, %1648
  %1650 = fcmp fast ogt float %1597, 0x3FA1EB8520000000
  br i1 %1650, label %1651, label %1746

; <label>:1651                                    ; preds = %1640
  %1652 = fmul fast float %1598, %1643
  %1653 = call float @dx.op.tertiary.f32(i32 46, float %1646, float %1599, float %1652)  ; FMad(a,b,c)
  %1654 = call float @dx.op.tertiary.f32(i32 46, float %1649, float %1600, float %1653)  ; FMad(a,b,c)
  %1655 = fmul fast float %1598, %1541
  %1656 = call float @dx.op.tertiary.f32(i32 46, float %1542, float %1599, float %1655)  ; FMad(a,b,c)
  %1657 = call float @dx.op.tertiary.f32(i32 46, float %1543, float %1600, float %1656)  ; FMad(a,b,c)
  %1658 = fmul fast float %1598, %1549
  %1659 = call float @dx.op.tertiary.f32(i32 46, float %1550, float %1599, float %1658)  ; FMad(a,b,c)
  %1660 = call float @dx.op.tertiary.f32(i32 46, float %1551, float %1600, float %1659)  ; FMad(a,b,c)
  %1661 = fmul fast float %1597, %1597
  %1662 = fsub fast float 1.000000e+00, %1661
  %1663 = call float @dx.op.unary.f32(i32 24, float %1662)  ; Sqrt(value)
  %1664 = fmul fast float %1597, %1593
  %1665 = call float @dx.op.binary.f32(i32 36, float %1660, float %1664)  ; FMin(a,b)
  %1666 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %1664)  ; FMax(a,b)
  %1667 = fdiv fast float %1665, %1666
  %1668 = fmul fast float %1663, %1593
  %1669 = fmul fast float %1668, %1667
  %1670 = fcmp fast ogt float %1654, 0.000000e+00
  %1671 = fcmp fast ogt float %1657, 0.000000e+00
  %1672 = fcmp fast olt float %1654, 0.000000e+00
  %1673 = fcmp fast olt float %1657, 0.000000e+00
  %1674 = zext i1 %1670 to i32
  %1675 = zext i1 %1671 to i32
  %1676 = zext i1 %1672 to i32
  %1677 = zext i1 %1673 to i32
  %1678 = sub nsw i32 %1674, %1676
  %1679 = sub nsw i32 %1675, %1677
  %1680 = sitofp i32 %1678 to float
  %1681 = sitofp i32 %1679 to float
  %1682 = fadd fast float %1669, %1584
  %1683 = fadd fast float %1669, %1586
  %1684 = call float @dx.op.unary.f32(i32 6, float %1654)  ; FAbs(value)
  %1685 = call float @dx.op.unary.f32(i32 6, float %1657)  ; FAbs(value)
  %1686 = call float @dx.op.binary.f32(i32 35, float %1684, float %1682)  ; FMax(a,b)
  %1687 = call float @dx.op.binary.f32(i32 35, float %1685, float %1683)  ; FMax(a,b)
  %1688 = fsub fast float %1585, %1669
  %1689 = fadd fast float %1688, %1686
  %1690 = fmul fast float %1689, %1680
  %1691 = fsub fast float %1587, %1669
  %1692 = fadd fast float %1691, %1687
  %1693 = fmul fast float %1692, %1681
  %1694 = fsub fast float %1660, %1665
  %1695 = call float @dx.op.binary.f32(i32 35, float %1694, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1696 = call float @dx.op.unary.f32(i32 6, float %1690)  ; FAbs(value)
  %1697 = call float @dx.op.unary.f32(i32 6, float %1693)  ; FAbs(value)
  %1698 = fdiv fast float %1696, %1695
  %1699 = fdiv fast float %1697, %1695
  %1700 = fmul fast float %1698, %1665
  %1701 = fmul fast float %1699, %1665
  %1702 = fsub fast float %1700, %1669
  %1703 = fsub fast float %1701, %1669
  %1704 = fsub fast float -0.000000e+00, %1680
  %1705 = fsub fast float -0.000000e+00, %1681
  %1706 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1704)  ; FMax(a,b)
  %1707 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1705)  ; FMax(a,b)
  %1708 = fmul fast float %1702, %1706
  %1709 = fmul fast float %1703, %1707
  %1710 = fsub fast float %1708, %1584
  %1711 = fsub fast float %1709, %1586
  %1712 = call float @dx.op.binary.f32(i32 35, float %1710, float %1585)  ; FMax(a,b)
  %1713 = call float @dx.op.binary.f32(i32 35, float %1711, float %1587)  ; FMax(a,b)
  %1714 = call float @dx.op.binary.f32(i32 36, float %1712, float %1584)  ; FMin(a,b)
  %1715 = call float @dx.op.binary.f32(i32 36, float %1713, float %1586)  ; FMin(a,b)
  %1716 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1680)  ; FMax(a,b)
  %1717 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1681)  ; FMax(a,b)
  %1718 = fmul fast float %1716, %1702
  %1719 = fmul fast float %1717, %1703
  %1720 = fsub fast float %1584, %1718
  %1721 = fsub fast float %1586, %1719
  %1722 = call float @dx.op.binary.f32(i32 35, float %1720, float %1585)  ; FMax(a,b)
  %1723 = call float @dx.op.binary.f32(i32 35, float %1721, float %1587)  ; FMax(a,b)
  %1724 = call float @dx.op.binary.f32(i32 36, float %1722, float %1584)  ; FMin(a,b)
  %1725 = call float @dx.op.binary.f32(i32 36, float %1723, float %1586)  ; FMin(a,b)
  %1726 = fadd fast float %1724, %1714
  %1727 = fadd fast float %1725, %1715
  %1728 = fmul fast float %1726, 5.000000e-01
  %1729 = fmul fast float %1727, 5.000000e-01
  %1730 = fsub fast float %1724, %1714
  %1731 = fsub fast float %1725, %1715
  %1732 = fmul fast float %1730, 5.000000e-01
  %1733 = fmul fast float %1731, 5.000000e-01
  %1734 = fmul fast float %1728, %1643
  %1735 = fmul fast float %1728, %1646
  %1736 = fmul fast float %1728, %1649
  %1737 = fsub fast float %1598, %1734
  %1738 = fsub fast float %1599, %1735
  %1739 = fsub fast float %1600, %1736
  %1740 = fmul fast float %1729, %1541
  %1741 = fmul fast float %1729, %1542
  %1742 = fmul fast float %1729, %1543
  %1743 = fsub fast float %1737, %1740
  %1744 = fsub fast float %1738, %1741
  %1745 = fsub fast float %1739, %1742
  br label %1746

; <label>:1746                                    ; preds = %1651, %1640
  %1747 = phi float [ %1743, %1651 ], [ %1598, %1640 ]
  %1748 = phi float [ %1744, %1651 ], [ %1599, %1640 ]
  %1749 = phi float [ %1745, %1651 ], [ %1600, %1640 ]
  %1750 = phi float [ %1732, %1651 ], [ %1584, %1640 ]
  %1751 = phi float [ %1733, %1651 ], [ %1586, %1640 ]
  %1752 = fcmp fast oeq float %1750, 0.000000e+00
  %1753 = fcmp fast oeq float %1751, 0.000000e+00
  %1754 = or i1 %1752, %1753
  br i1 %1754, label %1902, label %1755

; <label>:1755                                    ; preds = %1746
  %1756 = call float @dx.op.dot3.f32(i32 55, float %1643, float %1646, float %1649, float %1747, float %1748, float %1749)  ; Dot3(ax,ay,az,bx,by,bz)
  %1757 = call float @dx.op.dot3.f32(i32 55, float %1541, float %1542, float %1543, float %1747, float %1748, float %1749)  ; Dot3(ax,ay,az,bx,by,bz)
  %1758 = call float @dx.op.dot3.f32(i32 55, float %1549, float %1550, float %1551, float %1747, float %1748, float %1749)  ; Dot3(ax,ay,az,bx,by,bz)
  %1759 = fsub fast float %1756, %1750
  %1760 = fadd fast float %1756, %1750
  %1761 = fsub fast float %1757, %1751
  %1762 = fadd fast float %1757, %1751
  %1763 = fmul fast float %1758, %1758
  %1764 = call float @dx.op.dot2.f32(i32 54, float %1759, float %1761, float %1759, float %1761)  ; Dot2(ax,ay,bx,by)
  %1765 = fadd fast float %1764, %1763
  %1766 = call float @dx.op.unary.f32(i32 25, float %1765)  ; Rsqrt(value)
  %1767 = fmul fast float %1766, %1759
  %1768 = fmul fast float %1766, %1761
  %1769 = fmul fast float %1766, %1758
  %1770 = call float @dx.op.dot2.f32(i32 54, float %1760, float %1761, float %1760, float %1761)  ; Dot2(ax,ay,bx,by)
  %1771 = fadd fast float %1770, %1763
  %1772 = call float @dx.op.unary.f32(i32 25, float %1771)  ; Rsqrt(value)
  %1773 = fmul fast float %1772, %1760
  %1774 = fmul fast float %1772, %1761
  %1775 = fmul fast float %1772, %1758
  %1776 = call float @dx.op.dot2.f32(i32 54, float %1760, float %1762, float %1760, float %1762)  ; Dot2(ax,ay,bx,by)
  %1777 = fadd fast float %1776, %1763
  %1778 = call float @dx.op.unary.f32(i32 25, float %1777)  ; Rsqrt(value)
  %1779 = fmul fast float %1778, %1760
  %1780 = fmul fast float %1778, %1762
  %1781 = fmul fast float %1778, %1758
  %1782 = call float @dx.op.dot2.f32(i32 54, float %1759, float %1762, float %1759, float %1762)  ; Dot2(ax,ay,bx,by)
  %1783 = fadd fast float %1782, %1763
  %1784 = call float @dx.op.unary.f32(i32 25, float %1783)  ; Rsqrt(value)
  %1785 = fmul fast float %1784, %1759
  %1786 = fmul fast float %1784, %1762
  %1787 = fmul fast float %1784, %1758
  %1788 = call float @dx.op.dot3.f32(i32 55, float %1767, float %1768, float %1769, float %1773, float %1774, float %1775)  ; Dot3(ax,ay,az,bx,by,bz)
  %1789 = call float @dx.op.dot3.f32(i32 55, float %1773, float %1774, float %1775, float %1779, float %1780, float %1781)  ; Dot3(ax,ay,az,bx,by,bz)
  %1790 = call float @dx.op.dot3.f32(i32 55, float %1779, float %1780, float %1781, float %1785, float %1786, float %1787)  ; Dot3(ax,ay,az,bx,by,bz)
  %1791 = call float @dx.op.dot3.f32(i32 55, float %1785, float %1786, float %1787, float %1767, float %1768, float %1769)  ; Dot3(ax,ay,az,bx,by,bz)
  %1792 = fmul fast float %1788, 0x3FC6666660000000
  %1793 = fsub fast float 0x3FF921FF20000000, %1792
  %1794 = fadd fast float %1788, 1.000000e+00
  %1795 = call float @dx.op.unary.f32(i32 25, float %1794)  ; Rsqrt(value)
  %1796 = fmul fast float %1789, 0x3FC6666660000000
  %1797 = fsub fast float 0x3FF921FF20000000, %1796
  %1798 = fadd fast float %1789, 1.000000e+00
  %1799 = call float @dx.op.unary.f32(i32 25, float %1798)  ; Rsqrt(value)
  %1800 = fmul fast float %1799, %1797
  %1801 = fmul fast float %1790, 0x3FC6666660000000
  %1802 = fsub fast float 0x3FF921FF20000000, %1801
  %1803 = fadd fast float %1790, 1.000000e+00
  %1804 = call float @dx.op.unary.f32(i32 25, float %1803)  ; Rsqrt(value)
  %1805 = fmul fast float %1791, 0x3FC6666660000000
  %1806 = fsub fast float 0x3FF921FF20000000, %1805
  %1807 = fadd fast float %1791, 1.000000e+00
  %1808 = call float @dx.op.unary.f32(i32 25, float %1807)  ; Rsqrt(value)
  %1809 = fmul fast float %1808, %1806
  %1810 = fmul fast float %1793, %1795
  %1811 = fsub fast float -0.000000e+00, %1810
  %1812 = fmul fast float %1767, %1811
  %1813 = fmul fast float %1768, %1811
  %1814 = fmul fast float %1769, %1811
  %1815 = fmul fast float %1800, %1779
  %1816 = fmul fast float %1800, %1780
  %1817 = fmul fast float %1800, %1781
  %1818 = fadd fast float %1815, %1812
  %1819 = fadd fast float %1816, %1813
  %1820 = fadd fast float %1817, %1814
  %1821 = fmul fast float %1820, %1774
  %1822 = fmul fast float %1819, %1775
  %1823 = fsub fast float %1821, %1822
  %1824 = fmul fast float %1818, %1775
  %1825 = fmul fast float %1820, %1773
  %1826 = fsub fast float %1824, %1825
  %1827 = fmul fast float %1819, %1773
  %1828 = fmul fast float %1818, %1774
  %1829 = fsub fast float %1827, %1828
  %1830 = fmul fast float %1809, %1767
  %1831 = fmul fast float %1809, %1768
  %1832 = fmul fast float %1809, %1769
  %1833 = fmul fast float %1802, %1804
  %1834 = fsub fast float -0.000000e+00, %1833
  %1835 = fmul fast float %1779, %1834
  %1836 = fmul fast float %1780, %1834
  %1837 = fmul fast float %1781, %1834
  %1838 = fadd fast float %1830, %1835
  %1839 = fadd fast float %1831, %1836
  %1840 = fadd fast float %1832, %1837
  %1841 = fmul fast float %1840, %1786
  %1842 = fmul fast float %1839, %1787
  %1843 = fsub fast float %1841, %1842
  %1844 = fmul fast float %1838, %1787
  %1845 = fmul fast float %1840, %1785
  %1846 = fsub fast float %1844, %1845
  %1847 = fmul fast float %1839, %1785
  %1848 = fmul fast float %1838, %1786
  %1849 = fsub fast float %1847, %1848
  %1850 = fadd fast float %1843, %1823
  %1851 = fadd fast float %1846, %1826
  %1852 = fadd fast float %1849, %1829
  %1853 = fmul fast float %1850, %1643
  %1854 = fmul fast float %1850, %1646
  %1855 = fmul fast float %1850, %1649
  %1856 = fmul fast float %1851, %1541
  %1857 = fmul fast float %1851, %1542
  %1858 = fmul fast float %1851, %1543
  %1859 = fadd fast float %1853, %1856
  %1860 = fadd fast float %1854, %1857
  %1861 = fadd fast float %1855, %1858
  %1862 = fmul fast float %1852, %1549
  %1863 = fmul fast float %1852, %1550
  %1864 = fmul fast float %1852, %1551
  %1865 = fadd fast float %1859, %1862
  %1866 = fadd fast float %1860, %1863
  %1867 = fadd fast float %1861, %1864
  %1868 = call float @dx.op.dot3.f32(i32 55, float %1865, float %1866, float %1867, float %1865, float %1866, float %1867)  ; Dot3(ax,ay,az,bx,by,bz)
  %1869 = call float @dx.op.unary.f32(i32 25, float %1868)  ; Rsqrt(value)
  %1870 = fmul fast float %1868, 5.000000e-01
  %1871 = fmul fast float %1870, %1869
  br label %1902

; <label>:1872                                    ; preds = %1638
  %1873 = fmul fast float %1586, 5.000000e-01
  %1874 = fmul fast float %1873, %1541
  %1875 = fmul fast float %1873, %1542
  %1876 = fmul fast float %1873, %1543
  %1877 = fsub fast float %1598, %1874
  %1878 = fsub fast float %1599, %1875
  %1879 = fsub fast float %1600, %1876
  %1880 = fadd fast float %1874, %1598
  %1881 = fadd fast float %1875, %1599
  %1882 = fadd fast float %1876, %1600
  %1883 = fcmp fast ogt float %1586, 0.000000e+00
  %1884 = call float @dx.op.dot3.f32(i32 55, float %1877, float %1878, float %1879, float %1877, float %1878, float %1879)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %1883, label %1885, label %1896, !dx.controlflow.hints !53

; <label>:1885                                    ; preds = %1872
  %1886 = call float @dx.op.dot3.f32(i32 55, float %1880, float %1881, float %1882, float %1880, float %1881, float %1882)  ; Dot3(ax,ay,az,bx,by,bz)
  %1887 = call float @dx.op.unary.f32(i32 25, float %1884)  ; Rsqrt(value)
  %1888 = call float @dx.op.unary.f32(i32 25, float %1886)  ; Rsqrt(value)
  %1889 = fmul fast float %1888, %1887
  %1890 = call float @dx.op.dot3.f32(i32 55, float %1877, float %1878, float %1879, float %1880, float %1881, float %1882)  ; Dot3(ax,ay,az,bx,by,bz)
  %1891 = fmul fast float %1890, 5.000000e-01
  %1892 = fadd fast float %1891, %1525
  %1893 = fmul fast float %1892, %1889
  %1894 = fadd fast float %1893, 5.000000e-01
  %1895 = fdiv fast float %1889, %1894
  br label %1899

; <label>:1896                                    ; preds = %1872
  %1897 = fadd fast float %1884, %1525
  %1898 = fdiv fast float 1.000000e+00, %1897
  br label %1899

; <label>:1899                                    ; preds = %1896, %1885
  %1900 = phi float [ %1895, %1885 ], [ %1898, %1896 ]
  %1901 = select i1 %1588, float %1900, float 1.000000e+00
  br label %1902

; <label>:1902                                    ; preds = %1899, %1755, %1746
  %1903 = phi float [ %1901, %1899 ], [ 0.000000e+00, %1746 ], [ %1871, %1755 ]
  %1904 = fsub fast float -0.000000e+00, %533
  %1905 = fsub fast float -0.000000e+00, %534
  %1906 = fsub fast float -0.000000e+00, %535
  %1907 = call float @dx.op.dot3.f32(i32 55, float %1603, float %1604, float %1605, float %1904, float %1905, float %1906)  ; Dot3(ax,ay,az,bx,by,bz)
  %1908 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %1909 = extractvalue %dx.types.CBufRet.f32 %1908, 1
  %1910 = fmul fast float %1909, %1909
  %1911 = fsub fast float 1.000000e+00, %1910
  %1912 = fmul fast float %1907, 2.000000e+00
  %1913 = fadd fast float %1912, %1909
  %1914 = fmul fast float %1913, %1909
  %1915 = fadd fast float %1914, 1.000000e+00
  %1916 = call float @dx.op.unary.f32(i32 24, float %1915)  ; Sqrt(value)
  %1917 = fmul fast float %1916, 0x402921FB60000000
  %1918 = fmul fast float %1917, %1915
  %1919 = fdiv fast float %1911, %1918
  %1920 = fmul fast float %1639, %1562
  %1921 = fmul fast float %1920, %1903
  %1922 = fmul fast float %1921, %1919
  %1923 = fmul fast float %1922, %1554
  %1924 = fmul fast float %1922, %1555
  %1925 = fmul fast float %1922, %1556
  %1926 = fadd fast float %1923, %1529
  %1927 = fadd fast float %1924, %1530
  %1928 = fadd fast float %1925, %1531
  br label %1929

; <label>:1929                                    ; preds = %1902, %1528
  %1930 = phi float [ %1926, %1902 ], [ %1529, %1528 ]
  %1931 = phi float [ %1927, %1902 ], [ %1530, %1528 ]
  %1932 = phi float [ %1928, %1902 ], [ %1531, %1528 ]
  %1933 = add nuw i32 %1532, 1
  %1934 = icmp eq i32 %1933, %1455
  br i1 %1934, label %1935, label %1528, !llvm.loop !54

; <label>:1935                                    ; preds = %1929
  br label %1936

; <label>:1936                                    ; preds = %1935, %1492
  %1937 = phi float [ %1428, %1492 ], [ %1930, %1935 ]
  %1938 = phi float [ %1429, %1492 ], [ %1931, %1935 ]
  %1939 = phi float [ %1430, %1492 ], [ %1932, %1935 ]
  %1940 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1941 = extractvalue %dx.types.CBufRet.f32 %1940, 2
  %1942 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1943 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1942, i32 0, i32 %40, i32 %41, i32 %42, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1944 = extractvalue %dx.types.ResRet.f32 %1943, 0
  %1945 = extractvalue %dx.types.ResRet.f32 %1943, 1
  %1946 = extractvalue %dx.types.ResRet.f32 %1943, 2
  %1947 = fmul fast float %1944, %1941
  %1948 = fmul fast float %1945, %1941
  %1949 = fmul fast float %1946, %1941
  %1950 = fadd fast float %1947, %1937
  %1951 = fadd fast float %1948, %1938
  %1952 = fadd fast float %1949, %1939
  %1953 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1954 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1953, i32 0, i32 %40, i32 %41, i32 %42, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1955 = extractvalue %dx.types.ResRet.f32 %1954, 0
  %1956 = extractvalue %dx.types.ResRet.f32 %1954, 1
  %1957 = extractvalue %dx.types.ResRet.f32 %1954, 2
  %1958 = extractvalue %dx.types.ResRet.f32 %1954, 3
  %1959 = call float @dx.op.dot3.f32(i32 55, float %1955, float %1956, float %1957, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1960 = fadd fast float %1958, %1959
  %1961 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 86)  ; CBufferLoadLegacy(handle,regIndex)
  %1962 = extractvalue %dx.types.CBufRet.i32 %1961, 0
  %1963 = icmp eq i32 %1962, 0
  br i1 %1963, label %1970, label %1964, !dx.controlflow.hints !56

; <label>:1964                                    ; preds = %1936
  %1965 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1966 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1965, i32 0, i32 %40, i32 %41, i32 %42, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1967 = extractvalue %dx.types.ResRet.f32 %1966, 0
  %1968 = extractvalue %dx.types.ResRet.f32 %1966, 1
  %1969 = extractvalue %dx.types.ResRet.f32 %1966, 2
  br label %1970

; <label>:1970                                    ; preds = %1964, %1936
  %1971 = phi float [ %1967, %1964 ], [ 0.000000e+00, %1936 ]
  %1972 = phi float [ %1968, %1964 ], [ 0.000000e+00, %1936 ]
  %1973 = phi float [ %1969, %1964 ], [ 0.000000e+00, %1936 ]
  %1974 = extractvalue %dx.types.CBufRet.f32 %1940, 1
  %1975 = fmul fast float %1955, %1950
  %1976 = fmul fast float %1956, %1951
  %1977 = fmul fast float %1957, %1952
  %1978 = fadd fast float %1971, %1975
  %1979 = fadd fast float %1972, %1976
  %1980 = fadd fast float %1973, %1977
  %1981 = fmul fast float %1974, %1978
  %1982 = fmul fast float %1974, %1979
  %1983 = fmul fast float %1974, %1980
  %1984 = fcmp fast ogt float %401, 0.000000e+00
  br i1 %1984, label %1985, label %2011, !dx.controlflow.hints !57

; <label>:1985                                    ; preds = %1970
  %1986 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1987 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1988 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1986, %dx.types.Handle %1987, float %382, float %383, float %378, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1989 = extractvalue %dx.types.ResRet.f32 %1988, 0
  %1990 = extractvalue %dx.types.ResRet.f32 %1988, 1
  %1991 = extractvalue %dx.types.ResRet.f32 %1988, 2
  %1992 = extractvalue %dx.types.ResRet.f32 %1988, 3
  %1993 = extractvalue %dx.types.CBufRet.f32 %1193, 1
  %1994 = fmul fast float %1974, %1993
  %1995 = fmul fast float %1994, %1989
  %1996 = fmul fast float %1994, %1990
  %1997 = fmul fast float %1994, %1991
  %1998 = fmul fast float %1994, %1992
  %1999 = fsub fast float %1995, %1981
  %2000 = fsub fast float %1996, %1982
  %2001 = fsub fast float %1997, %1983
  %2002 = fsub fast float %1998, %1960
  %2003 = fmul fast float %1999, %401
  %2004 = fmul fast float %2000, %401
  %2005 = fmul fast float %2001, %401
  %2006 = fmul fast float %2002, %401
  %2007 = fadd fast float %2003, %1981
  %2008 = fadd fast float %2004, %1982
  %2009 = fadd fast float %2005, %1983
  %2010 = fadd fast float %2006, %1960
  br label %2011

; <label>:2011                                    ; preds = %1985, %1970
  %2012 = phi float [ %2007, %1985 ], [ %1981, %1970 ]
  %2013 = phi float [ %2008, %1985 ], [ %1982, %1970 ]
  %2014 = phi float [ %2009, %1985 ], [ %1983, %1970 ]
  %2015 = phi float [ %2010, %1985 ], [ %1960, %1970 ]
  %2016 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %35, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2017 = extractvalue %dx.types.CBufRet.i32 %2016, 0
  %2018 = extractvalue %dx.types.CBufRet.i32 %2016, 1
  %2019 = extractvalue %dx.types.CBufRet.i32 %2016, 2
  %2020 = icmp slt i32 %40, %2017
  %2021 = icmp slt i32 %41, %2018
  %2022 = icmp slt i32 %42, %2019
  %2023 = and i1 %2020, %2021
  %2024 = and i1 %2022, %2023
  br i1 %2024, label %2025, label %2039

; <label>:2025                                    ; preds = %2011
  %2026 = bitcast float %2012 to i32
  %2027 = bitcast float %2013 to i32
  %2028 = bitcast float %2014 to i32
  %2029 = bitcast float %2015 to i32
  %2030 = icmp ult i32 %2026, 2139095040
  %2031 = icmp ult i32 %2027, 2139095040
  %2032 = icmp ult i32 %2028, 2139095040
  %2033 = icmp ult i32 %2029, 2139095040
  %2034 = select i1 %2030, float %2012, float 0.000000e+00
  %2035 = select i1 %2031, float %2013, float 0.000000e+00
  %2036 = select i1 %2032, float %2014, float 0.000000e+00
  %2037 = select i1 %2033, float %2015, float 0.000000e+00
  %2038 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2038, i32 %40, i32 %41, i32 %42, float %2034, float %2035, float %2036, float %2037, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %2039

; <label>:2039                                    ; preds = %2025, %2011, %207
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!46}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !31, !33, !39}
!5 = !{!6, !8, !10, !11, !12, !13, !14, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30}
!6 = !{i32 0, %"class.Texture3D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 5}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 4, i32 0, !9}
!11 = !{i32 3, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 4, i32 0, !9}
!12 = !{i32 4, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 4, i32 0, !9}
!13 = !{i32 5, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 5, i32 1, i32 11, i32 0, null}
!14 = !{i32 6, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 6, i32 1, i32 12, i32 0, !15}
!15 = !{i32 1, i32 4}
!16 = !{i32 7, %"class.Texture2DArray<unsigned int>"* undef, !"", i32 0, i32 7, i32 1, i32 7, i32 0, !7}
!17 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 2, i32 0, !9}
!18 = !{i32 9, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 2, i32 0, !9}
!19 = !{i32 10, %"class.Buffer<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 10, i32 0, !9}
!20 = !{i32 11, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 11, i32 1, i32 10, i32 0, !7}
!21 = !{i32 12, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 12, i32 1, i32 10, i32 0, !7}
!22 = !{i32 13, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 4, i32 0, !9}
!23 = !{i32 14, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 4, i32 0, !9}
!24 = !{i32 15, %"class.Texture2D<float>"* undef, !"", i32 0, i32 15, i32 1, i32 2, i32 0, !9}
!25 = !{i32 16, %"class.Texture2D<float>"* undef, !"", i32 0, i32 16, i32 1, i32 2, i32 0, !9}
!26 = !{i32 17, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 17, i32 1, i32 4, i32 0, !9}
!27 = !{i32 18, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 18, i32 1, i32 4, i32 0, !9}
!28 = !{i32 19, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 19, i32 1, i32 4, i32 0, !9}
!29 = !{i32 20, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 20, i32 1, i32 4, i32 0, !9}
!30 = !{i32 21, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 21, i32 1, i32 2, i32 0, !9}
!31 = !{!32}
!32 = !{i32 0, %"class.RWTexture3D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i1 false, i1 false, i1 false, !9}
!33 = !{!34, !35, !36, !37, !38}
!34 = !{i32 0, %hostlayout._RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 1380, null}
!35 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!36 = !{i32 2, %hostlayout.UniformBufferConstants_ForwardLightData* undef, !"", i32 0, i32 2, i32 1, i32 708, null}
!37 = !{i32 3, %UniformBufferConstants_LumenGIVolumeStruct* undef, !"", i32 0, i32 3, i32 1, i32 572, null}
!38 = !{i32 4, %UniformBufferConstants_VolumetricFog* undef, !"", i32 0, i32 4, i32 1, i32 104, null}
!39 = !{!40, !41, !42, !43, !44, !45}
!40 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!41 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!42 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!43 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!44 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!45 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 5, i32 1, i32 0, null}
!46 = !{void ()* @LightScatteringCS, !"LightScatteringCS", null, !4, !47}
!47 = !{i32 0, i64 16, i32 4, !48, i32 5, !49}
!48 = !{i32 4, i32 4, i32 4}
!49 = !{i32 0}
!50 = distinct !{!50, !"dx.controlflow.hints", i32 2}
!51 = distinct !{!51, !"dx.controlflow.hints", i32 1}
!52 = distinct !{!52, !"dx.controlflow.hints", i32 1}
!53 = distinct !{!53, !"dx.controlflow.hints", i32 1}
!54 = distinct !{!54, !55}
!55 = !{!"llvm.loop.unroll.disable"}
!56 = distinct !{!56, !"dx.controlflow.hints", i32 1}
!57 = distinct !{!57, !"dx.controlflow.hints", i32 1}
