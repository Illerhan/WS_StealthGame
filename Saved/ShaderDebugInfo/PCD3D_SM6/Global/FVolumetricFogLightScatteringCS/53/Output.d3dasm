;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 89d066afd30b86a0667207765e9e2054
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(4,4,4)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct hostlayout._RootShaderParameters
;   {
;
;       row_major float4x4 UnjitteredClipToTranslatedWorld;; Offset:   64
;       row_major float4x4 UnjitteredPrevTranslatedWorldToClip;; Offset:  128
;       float4 FrameJitterOffsets[16];                ; Offset:  192
;       float HistoryWeight;                          ; Offset:  448
;       uint HistoryMissSuperSampleCount;             ; Offset:  452
;       float AOObjectMaxDistance;                    ; Offset:  592
;       float AOStepScale;                            ; Offset:  596
;       float AOStepExponentScale;                    ; Offset:  600
;       float AOMaxViewDistance;                      ; Offset:  604
;       float AOGlobalMaxOcclusionDistance;           ; Offset:  608
;       float4 GlobalVolumeTranslatedCenterAndExtent[6];; Offset:  656
;       float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset:  752
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset:  848
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset:  944
;       float GlobalDistanceFieldMipFactor;           ; Offset: 1040
;       float GlobalDistanceFieldMipTransition;       ; Offset: 1044
;       uint GlobalDistanceFieldClipmapSizeInPages;   ; Offset: 1048
;       float3 GlobalDistanceFieldInvPageAtlasSize;   ; Offset: 1056
;       float3 GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 1072
;       float GlobalVolumeDimension;                  ; Offset: 1084
;       float GlobalVolumeTexelSize;                  ; Offset: 1088
;       float MaxGlobalDFAOConeDistance;              ; Offset: 1092
;       uint NumGlobalSDFClipmaps;                    ; Offset: 1096
;       float CoveredExpandSurfaceScale;              ; Offset: 1100
;       float NotCoveredExpandSurfaceScale;           ; Offset: 1104
;       float NotCoveredMinStepScale;                 ; Offset: 1108
;       float DitheredTransparencyStepThreshold;      ; Offset: 1112
;       float DitheredTransparencyTraceThreshold;     ; Offset: 1116
;       float4 SkySH[3];                              ; Offset: 1136
;       row_major float4x4 DirectionalLightFunctionTranslatedWorldToShadow;; Offset: 1184
;       float2 PrevConservativeDepthTextureSize;      ; Offset: 1312
;       float2 UseHeightFogColors;                    ; Offset: 1320
;       float2 LightScatteringHistoryPreExposureAndInv;; Offset: 1328
;       float StaticLightingScatteringIntensity;      ; Offset: 1336
;       float SkyLightVolumetricScatteringIntensity;  ; Offset: 1340
;       float SkyLightUseStaticShadowing;             ; Offset: 1344
;       float PhaseG;                                 ; Offset: 1348
;       float InverseSquaredLightDistanceBiasScale;   ; Offset: 1352
;       float LightScatteringSampleJitterMultiplier;  ; Offset: 1356
;       float UseDirectionalLightShadowing;           ; Offset: 1368
;       uint UseConservativeDepthTexture;             ; Offset: 1372
;       uint UseEmissive;                             ; Offset: 1376
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:  1380
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_ForwardLightData
; {
;
;   struct hostlayout.UniformBufferConstants_ForwardLightData
;   {
;
;       uint ForwardLightData_NumLocalLights;         ; Offset:    0
;       uint ForwardLightData_NumReflectionCaptures;  ; Offset:    4
;       uint ForwardLightData_HasDirectionalLight;    ; Offset:    8
;       uint ForwardLightData_NumGridCells;           ; Offset:   12
;       int3 ForwardLightData_CulledGridSize;         ; Offset:   16
;       uint ForwardLightData_MaxCulledLightsPerCell; ; Offset:   28
;       uint ForwardLightData_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_ForwardLightData_36;          ; Offset:   36
;       uint PrePadding_ForwardLightData_40;          ; Offset:   40
;       uint PrePadding_ForwardLightData_44;          ; Offset:   44
;       float3 ForwardLightData_LightGridZParams;     ; Offset:   48
;       float PrePadding_ForwardLightData_60;         ; Offset:   60
;       float3 ForwardLightData_DirectionalLightDirection;; Offset:   64
;       float ForwardLightData_DirectionalLightSourceRadius;; Offset:   76
;       float3 ForwardLightData_DirectionalLightColor;; Offset:   80
;       float ForwardLightData_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint ForwardLightData_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_ForwardLightData_100;         ; Offset:  100
;       float2 ForwardLightData_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint ForwardLightData_NumDirectionalLightCascades;; Offset:  112
;       int ForwardLightData_DirectionalLightVSM;     ; Offset:  116
;       int PrePadding_ForwardLightData_120;          ; Offset:  120
;       int PrePadding_ForwardLightData_124;          ; Offset:  124
;       float4 ForwardLightData_CascadeEndDepths;     ; Offset:  128
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 ForwardLightData_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float ForwardLightData_DirectionalLightDepthBias;; Offset:  480
;       uint ForwardLightData_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint ForwardLightData_SimpleLightsEndIndex;   ; Offset:  488
;       uint ForwardLightData_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint ForwardLightData_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_ForwardLightData_500;         ; Offset:  500
;       uint PrePadding_ForwardLightData_504;         ; Offset:  504
;       uint PrePadding_ForwardLightData_508;         ; Offset:  508
;       float4 ForwardLightData_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint ForwardLightData_DirectLightingShowFlag; ; Offset:  592
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_604;; Offset:  604
;       float ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_ForwardLightData_644;         ; Offset:  644
;       uint PrePadding_ForwardLightData_648;         ; Offset:  648
;       uint PrePadding_ForwardLightData_652;         ; Offset:  652
;       uint BindlessResource_ForwardLightData_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_ForwardLightData_660;         ; Offset:  660
;       uint BindlessSampler_ForwardLightData_ShadowmapSampler;; Offset:  664
;       uint PrePadding_ForwardLightData_668;         ; Offset:  668
;       uint BindlessResource_ForwardLightData_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_ForwardLightData_676;         ; Offset:  676
;       uint BindlessSampler_ForwardLightData_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_ForwardLightData_684;         ; Offset:  684
;       uint BindlessResource_ForwardLightData_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_ForwardLightData_692;         ; Offset:  692
;       uint BindlessResource_ForwardLightData_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_ForwardLightData_700;         ; Offset:  700
;       uint BindlessResource_ForwardLightData_CulledLightDataGrid;; Offset:  704
;   
;   } UniformBufferConstants_ForwardLightData;        ; Offset:    0 Size:   708
;
; }
;
; cbuffer UniformBufferConstants_LumenGIVolumeStruct
; {
;
;   struct UniformBufferConstants_LumenGIVolumeStruct
;   {
;
;       float LumenGIVolumeStruct_ReprojectionRadiusScale;; Offset:    0
;       float LumenGIVolumeStruct_ClipmapWorldExtent; ; Offset:    4
;       float LumenGIVolumeStruct_ClipmapDistributionBase;; Offset:    8
;       float LumenGIVolumeStruct_InvClipmapFadeSize; ; Offset:   12
;       int2 LumenGIVolumeStruct_ProbeAtlasResolutionInProbes;; Offset:   16
;       uint LumenGIVolumeStruct_RadianceProbeClipmapResolution;; Offset:   24
;       uint LumenGIVolumeStruct_NumRadianceProbeClipmaps;; Offset:   28
;       uint LumenGIVolumeStruct_RadianceProbeResolution;; Offset:   32
;       uint LumenGIVolumeStruct_FinalProbeResolution;; Offset:   36
;       uint LumenGIVolumeStruct_FinalRadianceAtlasMaxMip;; Offset:   40
;       uint LumenGIVolumeStruct_CalculateIrradiance; ; Offset:   44
;       uint LumenGIVolumeStruct_IrradianceProbeResolution;; Offset:   48
;       uint LumenGIVolumeStruct_OcclusionProbeResolution;; Offset:   52
;       uint LumenGIVolumeStruct_NumProbesToTraceBudget;; Offset:   56
;       uint LumenGIVolumeStruct_RadianceCacheStats;  ; Offset:   60
;       uint BindlessResource_LumenGIVolumeStruct_RadianceProbeIndirectionTexture;; Offset:   64
;       uint PrePadding_LumenGIVolumeStruct_68;       ; Offset:   68
;       uint BindlessResource_LumenGIVolumeStruct_RadianceCacheFinalRadianceAtlas;; Offset:   72
;       uint PrePadding_LumenGIVolumeStruct_76;       ; Offset:   76
;       uint BindlessResource_LumenGIVolumeStruct_RadianceCacheFinalIrradianceAtlas;; Offset:   80
;       uint PrePadding_LumenGIVolumeStruct_84;       ; Offset:   84
;       uint BindlessResource_LumenGIVolumeStruct_RadianceCacheProbeOcclusionAtlas;; Offset:   88
;       uint PrePadding_LumenGIVolumeStruct_92;       ; Offset:   92
;       uint BindlessResource_LumenGIVolumeStruct_RadianceCacheDepthAtlas;; Offset:   96
;       uint PrePadding_LumenGIVolumeStruct_100;      ; Offset:  100
;       uint BindlessResource_LumenGIVolumeStruct_ProbeWorldOffset;; Offset:  104
;       uint PrePadding_LumenGIVolumeStruct_108;      ; Offset:  108
;       float4 LumenGIVolumeStruct_RadianceProbeSettings[6];; Offset:  112
;       float4 LumenGIVolumeStruct_PaddedWorldPositionToRadianceProbeCoordBias[6];; Offset:  208
;       float4 LumenGIVolumeStruct_PaddedRadianceProbeCoordToWorldPositionBias[6];; Offset:  304
;       float2 LumenGIVolumeStruct_InvProbeFinalRadianceAtlasResolution;; Offset:  400
;       float2 LumenGIVolumeStruct_InvProbeFinalIrradianceAtlasResolution;; Offset:  408
;       float2 LumenGIVolumeStruct_InvProbeDepthAtlasResolution;; Offset:  416
;       uint LumenGIVolumeStruct_OverrideCacheOcclusionLighting;; Offset:  424
;       uint LumenGIVolumeStruct_ShowBlackRadianceCacheLighting;; Offset:  428
;       uint LumenGIVolumeStruct_ProbeAtlasResolutionModuloMask;; Offset:  432
;       uint LumenGIVolumeStruct_ProbeAtlasResolutionDivideShift;; Offset:  436
;       float PrePadding_LumenGIVolumeStruct_440;     ; Offset:  440
;       float PrePadding_LumenGIVolumeStruct_444;     ; Offset:  444
;       uint BindlessResource_LumenGIVolumeStruct_Radiance;; Offset:  448
;       uint PrePadding_LumenGIVolumeStruct_452;      ; Offset:  452
;       uint BindlessResource_LumenGIVolumeStruct_Normal;; Offset:  456
;       uint PrePadding_LumenGIVolumeStruct_460;      ; Offset:  460
;       uint BindlessResource_LumenGIVolumeStruct_SceneDepth;; Offset:  464
;       uint PrePadding_LumenGIVolumeStruct_468;      ; Offset:  468
;       uint LumenGIVolumeStruct_Enabled;             ; Offset:  472
;       float LumenGIVolumeStruct_RelativeDepthThreshold;; Offset:  476
;       float LumenGIVolumeStruct_SpecularScale;      ; Offset:  480
;       float LumenGIVolumeStruct_Contrast;           ; Offset:  484
;       float PrePadding_LumenGIVolumeStruct_488;     ; Offset:  488
;       float PrePadding_LumenGIVolumeStruct_492;     ; Offset:  492
;       uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolume0;; Offset:  496
;       uint PrePadding_LumenGIVolumeStruct_500;      ; Offset:  500
;       uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolume1;; Offset:  504
;       uint PrePadding_LumenGIVolumeStruct_508;      ; Offset:  508
;       uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolumeHistory0;; Offset:  512
;       uint PrePadding_LumenGIVolumeStruct_516;      ; Offset:  516
;       uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolumeHistory1;; Offset:  520
;       uint PrePadding_LumenGIVolumeStruct_524;      ; Offset:  524
;       uint BindlessSampler_LumenGIVolumeStruct_TranslucencyGIVolumeSampler;; Offset:  528
;       uint PrePadding_LumenGIVolumeStruct_532;      ; Offset:  532
;       uint PrePadding_LumenGIVolumeStruct_536;      ; Offset:  536
;       uint PrePadding_LumenGIVolumeStruct_540;      ; Offset:  540
;       float3 LumenGIVolumeStruct_TranslucencyGIGridZParams;; Offset:  544
;       uint LumenGIVolumeStruct_TranslucencyGIGridPixelSizeShift;; Offset:  556
;       int3 LumenGIVolumeStruct_TranslucencyGIGridSize;; Offset:  560
;   
;   } UniformBufferConstants_LumenGIVolumeStruct;     ; Offset:    0 Size:   572
;
; }
;
; cbuffer UniformBufferConstants_VolumetricFog
; {
;
;   struct UniformBufferConstants_VolumetricFog
;   {
;
;       int3 VolumetricFog_GridSizeInt;               ; Offset:    0
;       int PrePadding_VolumetricFog_12;              ; Offset:   12
;       float3 VolumetricFog_GridSize;                ; Offset:   16
;       float PrePadding_VolumetricFog_28;            ; Offset:   28
;       float3 VolumetricFog_GridZParams;             ; Offset:   32
;       float PrePadding_VolumetricFog_44;            ; Offset:   44
;       float2 VolumetricFog_SVPosToVolumeUV;         ; Offset:   48
;       float VolumetricFog_MaxDistance;              ; Offset:   56
;       float PrePadding_VolumetricFog_60;            ; Offset:   60
;       float3 VolumetricFog_HeightFogInscatteringColor;; Offset:   64
;       float PrePadding_VolumetricFog_76;            ; Offset:   76
;       float3 VolumetricFog_HeightFogDirectionalLightInscatteringColor;; Offset:   80
;       float PrePadding_VolumetricFog_92;            ; Offset:   92
;       int2 VolumetricFog_FogGridToPixelXY;          ; Offset:   96
;   
;   } UniformBufferConstants_VolumetricFog;           ; Offset:    0 Size:   104
;
; }
;
; Resource bind info for VirtualShadowMap_PageTable
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_ForwardLightData   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_LumenGIVolumeStruct   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_VolumetricFog   cbuffer      NA          NA     CB4            cb4     1
; View_SharedBilinearClampedSampler   sampler      NA          NA      S0             s0     1
; ForwardLightData_ShadowmapSampler   sampler      NA          NA      S1             s1     1
; ForwardLightData_StaticShadowmapSampler   sampler      NA          NA      S2             s2     1
; LumenGIVolumeStruct_TranslucencyGIVolumeSampler   sampler      NA          NA      S3             s3     1
; LightScatteringHistorySampler     sampler      NA          NA      S4             s4     1
; LightFunctionSampler              sampler      NA          NA      S5             s5     1
; View_VolumetricLightmapIndirectionTexture   texture     u32          3d      T0             t0     1
; View_VolumetricLightmapBrickAmbientVector   texture     f32          3d      T1             t1     1
; View_VolumetricLightmapBrickSHCoefficients0   texture     f32          3d      T2             t2     1
; View_VolumetricLightmapBrickSHCoefficients2   texture     f32          3d      T3             t3     1
; View_VolumetricLightmapBrickSHCoefficients4   texture     f32          3d      T4             t4     1
; VirtualShadowMap_ProjectionData   texture    byte         r/o      T5             t5     1
; VirtualShadowMap_PageTable        texture  struct         r/o      T6             t6     1
; VirtualShadowMap_PhysicalPagePool   texture     u32     2darray      T7             t7     1
; ForwardLightData_DirectionalLightShadowmapAtlas   texture     f32          2d      T8             t8     1
; ForwardLightData_DirectionalLightStaticShadowmap   texture     f32          2d      T9             t9     1
; ForwardLightData_ForwardLocalLightBuffer   texture     f32         buf     T10            t10     1
; ForwardLightData_NumCulledLightsGrid   texture     u32         buf     T11            t11     1
; ForwardLightData_CulledLightDataGrid   texture     u32         buf     T12            t12     1
; LumenGIVolumeStruct_TranslucencyGIVolume0   texture     f32          3d     T13            t13     1
; LumenGIVolumeStruct_TranslucencyGIVolume1   texture     f32          3d     T14            t14     1
; ConservativeDepthTexture          texture     f32          2d     T15            t15     1
; PrevConservativeDepthTexture      texture     f32          2d     T16            t16     1
; VBufferA                          texture     f32          3d     T17            t17     1
; VBufferB                          texture     f32          3d     T18            t18     1
; LightScatteringHistory            texture     f32          3d     T19            t19     1
; LocalShadowedLightScattering      texture     f32          3d     T20            t20     1
; LightFunctionTexture              texture     f32          2d     T21            t21     1
; RWLightScattering                     UAV     f32          3d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.Texture3D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture3D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture3D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Texture2DArray<unsigned int>" = type { i32, %"class.Texture2DArray<unsigned int>::mips_type" }
%"class.Texture2DArray<unsigned int>::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Buffer<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%"class.RWTexture3D<vector<float, 4> >" = type { <4 x float> }
%hostlayout._RootShaderParameters = type { [4 x <4 x float>], [4 x <4 x float>], [16 x <4 x float>], float, i32, float, float, float, float, float, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, <3 x float>, <3 x float>, float, float, float, i32, float, float, float, float, float, [3 x <4 x float>], [4 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, float, float, float, float, float, float, float, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%hostlayout.UniformBufferConstants_ForwardLightData = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_LumenGIVolumeStruct = type { float, float, float, float, <2 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, i32, <3 x i32> }
%UniformBufferConstants_VolumetricFog = type { <3 x i32>, i32, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, <3 x float>, float, <3 x float>, float, <2 x i32> }
%struct.SamplerState = type { i32 }

define void @LightScatteringCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 0 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 13, i32 104 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %36 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 13, i32 572 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %37 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 13, i32 708 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %38 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %39 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 13, i32 1380 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %40 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %41 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %42 = call i32 @dx.op.threadId.i32(i32 93, i32 2)  ; ThreadId(component)
  %43 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %37, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %44 = extractvalue %dx.types.CBufRet.i32 %43, 0
  %45 = extractvalue %dx.types.CBufRet.i32 %43, 2
  %46 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %37, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %47 = extractvalue %dx.types.CBufRet.i32 %46, 0
  %48 = extractvalue %dx.types.CBufRet.i32 %46, 1
  %49 = extractvalue %dx.types.CBufRet.i32 %46, 2
  %50 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %37, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %51 = extractvalue %dx.types.CBufRet.i32 %50, 0
  %52 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %53 = extractvalue %dx.types.CBufRet.f32 %52, 0
  %54 = extractvalue %dx.types.CBufRet.f32 %52, 1
  %55 = extractvalue %dx.types.CBufRet.f32 %52, 2
  %56 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %57 = extractvalue %dx.types.CBufRet.f32 %56, 0
  %58 = extractvalue %dx.types.CBufRet.f32 %56, 1
  %59 = extractvalue %dx.types.CBufRet.f32 %56, 2
  %60 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %61 = extractvalue %dx.types.CBufRet.f32 %60, 0
  %62 = extractvalue %dx.types.CBufRet.f32 %60, 1
  %63 = extractvalue %dx.types.CBufRet.f32 %60, 2
  %64 = extractvalue %dx.types.CBufRet.f32 %60, 3
  %65 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %37, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %66 = extractvalue %dx.types.CBufRet.i32 %65, 0
  %67 = extractvalue %dx.types.CBufRet.i32 %65, 1
  %68 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %69 = extractvalue %dx.types.CBufRet.f32 %68, 0
  %70 = extractvalue %dx.types.CBufRet.f32 %68, 1
  %71 = extractvalue %dx.types.CBufRet.f32 %68, 2
  %72 = extractvalue %dx.types.CBufRet.f32 %68, 3
  %73 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %74 = extractvalue %dx.types.CBufRet.f32 %73, 0
  %75 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %37, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %76 = extractvalue %dx.types.CBufRet.i32 %75, 1
  %77 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %78 = extractvalue %dx.types.CBufRet.f32 %77, 0
  %79 = extractvalue %dx.types.CBufRet.f32 %77, 1
  %80 = extractvalue %dx.types.CBufRet.f32 %77, 2
  %81 = extractvalue %dx.types.CBufRet.f32 %77, 3
  %82 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %83 = extractvalue %dx.types.CBufRet.f32 %82, 0
  %84 = extractvalue %dx.types.CBufRet.f32 %82, 1
  %85 = extractvalue %dx.types.CBufRet.f32 %82, 2
  %86 = extractvalue %dx.types.CBufRet.f32 %82, 3
  %87 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %88 = extractvalue %dx.types.CBufRet.f32 %87, 0
  %89 = extractvalue %dx.types.CBufRet.f32 %87, 1
  %90 = extractvalue %dx.types.CBufRet.f32 %87, 2
  %91 = extractvalue %dx.types.CBufRet.f32 %87, 3
  %92 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 36)  ; CBufferLoadLegacy(handle,regIndex)
  %93 = extractvalue %dx.types.CBufRet.f32 %92, 0
  %94 = extractvalue %dx.types.CBufRet.f32 %92, 1
  %95 = extractvalue %dx.types.CBufRet.f32 %92, 2
  %96 = extractvalue %dx.types.CBufRet.f32 %92, 3
  %97 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %98 = extractvalue %dx.types.CBufRet.i32 %97, 3
  %99 = icmp eq i32 %98, 0
  %100 = uitofp i32 %40 to float
  %101 = uitofp i32 %41 to float
  %102 = fadd fast float %100, 5.000000e-01
  %103 = fadd fast float %101, 5.000000e-01
  %104 = uitofp i32 %42 to float
  br i1 %99, label %256, label %105

; <label>:105                                     ; preds = %0
  %106 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %107 = extractvalue %dx.types.CBufRet.f32 %106, 0
  %108 = extractvalue %dx.types.CBufRet.f32 %106, 1
  %109 = fdiv fast float %102, %107
  %110 = fdiv fast float %103, %108
  %111 = fmul fast float %109, 2.000000e+00
  %112 = fmul fast float %110, 2.000000e+00
  %113 = fadd fast float %111, -1.000000e+00
  %114 = fadd fast float %112, -1.000000e+00
  %115 = fsub fast float -0.000000e+00, %114
  %116 = fadd fast float %104, -1.000000e+00
  %117 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %118 = extractvalue %dx.types.CBufRet.f32 %117, 2
  %119 = fdiv fast float %116, %118
  %120 = call float @dx.op.unary.f32(i32 21, float %119)  ; Exp(value)
  %121 = extractvalue %dx.types.CBufRet.f32 %117, 1
  %122 = fsub fast float %120, %121
  %123 = extractvalue %dx.types.CBufRet.f32 %117, 0
  %124 = fdiv fast float %122, %123
  %125 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %126 = extractvalue %dx.types.CBufRet.f32 %125, 3
  %127 = fcmp fast ult float %126, 1.000000e+00
  br i1 %127, label %134, label %128, !dx.controlflow.hints !50

; <label>:128                                     ; preds = %105
  %129 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %130 = extractvalue %dx.types.CBufRet.f32 %129, 2
  %131 = fmul fast float %130, %124
  %132 = extractvalue %dx.types.CBufRet.f32 %125, 2
  %133 = fadd fast float %131, %132
  br label %141

; <label>:134                                     ; preds = %105
  %135 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %136 = extractvalue %dx.types.CBufRet.f32 %135, 3
  %137 = fadd fast float %136, %124
  %138 = extractvalue %dx.types.CBufRet.f32 %135, 2
  %139 = fmul fast float %137, %138
  %140 = fdiv fast float 1.000000e+00, %139
  br label %141

; <label>:141                                     ; preds = %134, %128
  %142 = phi float [ %133, %128 ], [ %140, %134 ]
  %143 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %144 = extractvalue %dx.types.CBufRet.f32 %143, 0
  %145 = extractvalue %dx.types.CBufRet.f32 %143, 1
  %146 = extractvalue %dx.types.CBufRet.f32 %143, 2
  %147 = extractvalue %dx.types.CBufRet.f32 %143, 3
  %148 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %149 = extractvalue %dx.types.CBufRet.f32 %148, 0
  %150 = extractvalue %dx.types.CBufRet.f32 %148, 1
  %151 = extractvalue %dx.types.CBufRet.f32 %148, 2
  %152 = extractvalue %dx.types.CBufRet.f32 %148, 3
  %153 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %154 = extractvalue %dx.types.CBufRet.f32 %153, 0
  %155 = extractvalue %dx.types.CBufRet.f32 %153, 1
  %156 = extractvalue %dx.types.CBufRet.f32 %153, 2
  %157 = extractvalue %dx.types.CBufRet.f32 %153, 3
  %158 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %159 = extractvalue %dx.types.CBufRet.f32 %158, 0
  %160 = extractvalue %dx.types.CBufRet.f32 %158, 1
  %161 = extractvalue %dx.types.CBufRet.f32 %158, 2
  %162 = extractvalue %dx.types.CBufRet.f32 %158, 3
  %163 = fmul fast float %144, %113
  %164 = call float @dx.op.tertiary.f32(i32 46, float %115, float %149, float %163)  ; FMad(a,b,c)
  %165 = call float @dx.op.tertiary.f32(i32 46, float %142, float %154, float %164)  ; FMad(a,b,c)
  %166 = fadd fast float %165, %159
  %167 = fmul fast float %145, %113
  %168 = call float @dx.op.tertiary.f32(i32 46, float %115, float %150, float %167)  ; FMad(a,b,c)
  %169 = call float @dx.op.tertiary.f32(i32 46, float %142, float %155, float %168)  ; FMad(a,b,c)
  %170 = fadd fast float %169, %160
  %171 = fmul fast float %146, %113
  %172 = call float @dx.op.tertiary.f32(i32 46, float %115, float %151, float %171)  ; FMad(a,b,c)
  %173 = call float @dx.op.tertiary.f32(i32 46, float %142, float %156, float %172)  ; FMad(a,b,c)
  %174 = fadd fast float %173, %161
  %175 = fmul fast float %147, %113
  %176 = call float @dx.op.tertiary.f32(i32 46, float %115, float %152, float %175)  ; FMad(a,b,c)
  %177 = call float @dx.op.tertiary.f32(i32 46, float %142, float %157, float %176)  ; FMad(a,b,c)
  %178 = fadd fast float %177, %162
  %179 = fdiv fast float %166, %178
  %180 = fdiv fast float %170, %178
  %181 = fdiv fast float %174, %178
  %182 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %183 = extractvalue %dx.types.CBufRet.f32 %182, 2
  %184 = extractvalue %dx.types.CBufRet.f32 %182, 3
  %185 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %186 = extractvalue %dx.types.CBufRet.f32 %185, 2
  %187 = extractvalue %dx.types.CBufRet.f32 %185, 3
  %188 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %189 = extractvalue %dx.types.CBufRet.f32 %188, 2
  %190 = extractvalue %dx.types.CBufRet.f32 %188, 3
  %191 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %192 = extractvalue %dx.types.CBufRet.f32 %191, 2
  %193 = extractvalue %dx.types.CBufRet.f32 %191, 3
  %194 = fmul fast float %183, %179
  %195 = call float @dx.op.tertiary.f32(i32 46, float %180, float %186, float %194)  ; FMad(a,b,c)
  %196 = call float @dx.op.tertiary.f32(i32 46, float %181, float %189, float %195)  ; FMad(a,b,c)
  %197 = fadd fast float %196, %192
  %198 = fmul fast float %184, %179
  %199 = call float @dx.op.tertiary.f32(i32 46, float %180, float %187, float %198)  ; FMad(a,b,c)
  %200 = call float @dx.op.tertiary.f32(i32 46, float %181, float %190, float %199)  ; FMad(a,b,c)
  %201 = fadd fast float %200, %193
  %202 = fdiv fast float %197, %201
  %203 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %204 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %203, i32 0, i32 %40, i32 %41, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %205 = extractvalue %dx.types.ResRet.f32 %204, 0
  %206 = fcmp fast ogt float %205, %202
  br i1 %206, label %207, label %209

; <label>:207                                     ; preds = %141
  %208 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %208, i32 %40, i32 %41, i32 %42, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %2101

; <label>:209                                     ; preds = %141
  %210 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %211 = extractvalue %dx.types.CBufRet.f32 %210, 0
  %212 = extractvalue %dx.types.CBufRet.f32 %210, 1
  %213 = extractvalue %dx.types.CBufRet.f32 %210, 3
  %214 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %215 = extractvalue %dx.types.CBufRet.f32 %214, 0
  %216 = extractvalue %dx.types.CBufRet.f32 %214, 1
  %217 = extractvalue %dx.types.CBufRet.f32 %214, 3
  %218 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %219 = extractvalue %dx.types.CBufRet.f32 %218, 0
  %220 = extractvalue %dx.types.CBufRet.f32 %218, 1
  %221 = extractvalue %dx.types.CBufRet.f32 %218, 3
  %222 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %223 = extractvalue %dx.types.CBufRet.f32 %222, 0
  %224 = extractvalue %dx.types.CBufRet.f32 %222, 1
  %225 = extractvalue %dx.types.CBufRet.f32 %222, 3
  %226 = fmul fast float %211, %179
  %227 = call float @dx.op.tertiary.f32(i32 46, float %180, float %215, float %226)  ; FMad(a,b,c)
  %228 = call float @dx.op.tertiary.f32(i32 46, float %181, float %219, float %227)  ; FMad(a,b,c)
  %229 = fadd fast float %228, %223
  %230 = fmul fast float %212, %179
  %231 = call float @dx.op.tertiary.f32(i32 46, float %180, float %216, float %230)  ; FMad(a,b,c)
  %232 = call float @dx.op.tertiary.f32(i32 46, float %181, float %220, float %231)  ; FMad(a,b,c)
  %233 = fadd fast float %232, %224
  %234 = fmul fast float %213, %179
  %235 = call float @dx.op.tertiary.f32(i32 46, float %180, float %217, float %234)  ; FMad(a,b,c)
  %236 = call float @dx.op.tertiary.f32(i32 46, float %181, float %221, float %235)  ; FMad(a,b,c)
  %237 = fadd fast float %236, %225
  %238 = fdiv fast float %229, %237
  %239 = fdiv fast float %233, %237
  %240 = fmul fast float %238, 5.000000e-01
  %241 = fmul fast float %239, 5.000000e-01
  %242 = fadd fast float %240, 5.000000e-01
  %243 = fsub fast float 5.000000e-01, %241
  %244 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %245 = extractvalue %dx.types.CBufRet.f32 %244, 0
  %246 = extractvalue %dx.types.CBufRet.f32 %244, 1
  %247 = fmul fast float %245, %242
  %248 = fmul fast float %246, %243
  %249 = fptoui float %247 to i32
  %250 = fptoui float %248 to i32
  %251 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %252 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %251, i32 0, i32 %249, i32 %250, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %253 = extractvalue %dx.types.ResRet.f32 %252, 0
  %254 = fcmp fast ogt float %253, %202
  br i1 %254, label %255, label %256

; <label>:255                                     ; preds = %209
  br label %256

; <label>:256                                     ; preds = %255, %209, %0
  %257 = phi i32 [ 1, %255 ], [ 0, %209 ], [ 0, %0 ]
  %258 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %259 = extractvalue %dx.types.CBufRet.f32 %258, 0
  %260 = extractvalue %dx.types.CBufRet.f32 %258, 1
  %261 = extractvalue %dx.types.CBufRet.f32 %258, 3
  %262 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %263 = extractvalue %dx.types.CBufRet.f32 %262, 0
  %264 = extractvalue %dx.types.CBufRet.f32 %262, 1
  %265 = extractvalue %dx.types.CBufRet.f32 %262, 3
  %266 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %267 = extractvalue %dx.types.CBufRet.f32 %266, 0
  %268 = extractvalue %dx.types.CBufRet.f32 %266, 1
  %269 = extractvalue %dx.types.CBufRet.f32 %266, 3
  %270 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %271 = extractvalue %dx.types.CBufRet.f32 %270, 0
  %272 = extractvalue %dx.types.CBufRet.f32 %270, 1
  %273 = extractvalue %dx.types.CBufRet.f32 %270, 3
  %274 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %275 = extractvalue %dx.types.CBufRet.f32 %274, 0
  %276 = extractvalue %dx.types.CBufRet.f32 %274, 1
  %277 = fdiv fast float %102, %275
  %278 = fdiv fast float %103, %276
  %279 = fmul fast float %277, 2.000000e+00
  %280 = fmul fast float %278, 2.000000e+00
  %281 = fadd fast float %279, -1.000000e+00
  %282 = fadd fast float %280, -1.000000e+00
  %283 = fsub fast float -0.000000e+00, %282
  %284 = fadd fast float %104, 5.000000e-01
  %285 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %286 = extractvalue %dx.types.CBufRet.f32 %285, 2
  %287 = fdiv fast float %284, %286
  %288 = call float @dx.op.unary.f32(i32 21, float %287)  ; Exp(value)
  %289 = extractvalue %dx.types.CBufRet.f32 %285, 1
  %290 = fsub fast float %288, %289
  %291 = extractvalue %dx.types.CBufRet.f32 %285, 0
  %292 = fdiv fast float %290, %291
  %293 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %294 = extractvalue %dx.types.CBufRet.f32 %293, 3
  %295 = fcmp fast ult float %294, 1.000000e+00
  br i1 %295, label %302, label %296, !dx.controlflow.hints !50

; <label>:296                                     ; preds = %256
  %297 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %298 = extractvalue %dx.types.CBufRet.f32 %297, 2
  %299 = fmul fast float %298, %292
  %300 = extractvalue %dx.types.CBufRet.f32 %293, 2
  %301 = fadd fast float %299, %300
  br label %309

; <label>:302                                     ; preds = %256
  %303 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %304 = extractvalue %dx.types.CBufRet.f32 %303, 3
  %305 = fadd fast float %304, %292
  %306 = extractvalue %dx.types.CBufRet.f32 %303, 2
  %307 = fmul fast float %305, %306
  %308 = fdiv fast float 1.000000e+00, %307
  br label %309

; <label>:309                                     ; preds = %302, %296
  %310 = phi float [ %301, %296 ], [ %308, %302 ]
  %311 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %312 = extractvalue %dx.types.CBufRet.f32 %311, 0
  %313 = extractvalue %dx.types.CBufRet.f32 %311, 1
  %314 = extractvalue %dx.types.CBufRet.f32 %311, 2
  %315 = extractvalue %dx.types.CBufRet.f32 %311, 3
  %316 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %317 = extractvalue %dx.types.CBufRet.f32 %316, 0
  %318 = extractvalue %dx.types.CBufRet.f32 %316, 1
  %319 = extractvalue %dx.types.CBufRet.f32 %316, 2
  %320 = extractvalue %dx.types.CBufRet.f32 %316, 3
  %321 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %322 = extractvalue %dx.types.CBufRet.f32 %321, 0
  %323 = extractvalue %dx.types.CBufRet.f32 %321, 1
  %324 = extractvalue %dx.types.CBufRet.f32 %321, 2
  %325 = extractvalue %dx.types.CBufRet.f32 %321, 3
  %326 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %327 = extractvalue %dx.types.CBufRet.f32 %326, 0
  %328 = extractvalue %dx.types.CBufRet.f32 %326, 1
  %329 = extractvalue %dx.types.CBufRet.f32 %326, 2
  %330 = extractvalue %dx.types.CBufRet.f32 %326, 3
  %331 = fmul fast float %312, %281
  %332 = call float @dx.op.tertiary.f32(i32 46, float %283, float %317, float %331)  ; FMad(a,b,c)
  %333 = call float @dx.op.tertiary.f32(i32 46, float %310, float %322, float %332)  ; FMad(a,b,c)
  %334 = fadd fast float %333, %327
  %335 = fmul fast float %313, %281
  %336 = call float @dx.op.tertiary.f32(i32 46, float %283, float %318, float %335)  ; FMad(a,b,c)
  %337 = call float @dx.op.tertiary.f32(i32 46, float %310, float %323, float %336)  ; FMad(a,b,c)
  %338 = fadd fast float %337, %328
  %339 = fmul fast float %314, %281
  %340 = call float @dx.op.tertiary.f32(i32 46, float %283, float %319, float %339)  ; FMad(a,b,c)
  %341 = call float @dx.op.tertiary.f32(i32 46, float %310, float %324, float %340)  ; FMad(a,b,c)
  %342 = fadd fast float %341, %329
  %343 = fmul fast float %315, %281
  %344 = call float @dx.op.tertiary.f32(i32 46, float %283, float %320, float %343)  ; FMad(a,b,c)
  %345 = call float @dx.op.tertiary.f32(i32 46, float %310, float %325, float %344)  ; FMad(a,b,c)
  %346 = fadd fast float %345, %330
  %347 = fdiv fast float %334, %346
  %348 = fdiv fast float %338, %346
  %349 = fdiv fast float %342, %346
  %350 = fmul fast float %347, %259
  %351 = call float @dx.op.tertiary.f32(i32 46, float %348, float %263, float %350)  ; FMad(a,b,c)
  %352 = call float @dx.op.tertiary.f32(i32 46, float %349, float %267, float %351)  ; FMad(a,b,c)
  %353 = fadd fast float %352, %271
  %354 = fmul fast float %347, %260
  %355 = call float @dx.op.tertiary.f32(i32 46, float %348, float %264, float %354)  ; FMad(a,b,c)
  %356 = call float @dx.op.tertiary.f32(i32 46, float %349, float %268, float %355)  ; FMad(a,b,c)
  %357 = fadd fast float %356, %272
  %358 = fmul fast float %347, %261
  %359 = call float @dx.op.tertiary.f32(i32 46, float %348, float %265, float %358)  ; FMad(a,b,c)
  %360 = call float @dx.op.tertiary.f32(i32 46, float %349, float %269, float %359)  ; FMad(a,b,c)
  %361 = fadd fast float %360, %273
  %362 = fdiv fast float %353, %361
  %363 = fdiv fast float %357, %361
  %364 = fmul fast float %362, 5.000000e-01
  %365 = fmul fast float %363, 5.000000e-01
  %366 = fadd fast float %364, 5.000000e-01
  %367 = fsub fast float 5.000000e-01, %365
  %368 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 230)  ; CBufferLoadLegacy(handle,regIndex)
  %369 = extractvalue %dx.types.CBufRet.f32 %368, 0
  %370 = fmul fast float %369, %361
  %371 = extractvalue %dx.types.CBufRet.f32 %368, 1
  %372 = fadd fast float %370, %371
  %373 = call float @dx.op.unary.f32(i32 23, float %372)  ; Log(value)
  %374 = extractvalue %dx.types.CBufRet.f32 %368, 2
  %375 = fmul fast float %374, %373
  %376 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 229)  ; CBufferLoadLegacy(handle,regIndex)
  %377 = extractvalue %dx.types.CBufRet.f32 %376, 2
  %378 = fmul fast float %375, %377
  %379 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 231)  ; CBufferLoadLegacy(handle,regIndex)
  %380 = extractvalue %dx.types.CBufRet.f32 %379, 2
  %381 = extractvalue %dx.types.CBufRet.f32 %379, 3
  %382 = fmul fast float %380, %366
  %383 = fmul fast float %381, %367
  %384 = fcmp fast olt float %382, 0.000000e+00
  %385 = fcmp fast olt float %383, 0.000000e+00
  %386 = fcmp fast olt float %378, 0.000000e+00
  %387 = or i1 %384, %385
  %388 = or i1 %386, %387
  br i1 %388, label %399, label %389

; <label>:389                                     ; preds = %309
  %390 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %391 = extractvalue %dx.types.CBufRet.f32 %390, 0
  %392 = fcmp fast ogt float %382, 1.000000e+00
  %393 = fcmp fast ogt float %383, 1.000000e+00
  %394 = fcmp fast ogt float %378, 1.000000e+00
  %395 = or i1 %392, %393
  %396 = or i1 %394, %395
  %397 = icmp ne i32 %257, 0
  %398 = or i1 %397, %396
  br i1 %398, label %399, label %400

; <label>:399                                     ; preds = %389, %309
  br label %400

; <label>:400                                     ; preds = %399, %389
  %401 = phi float [ 0.000000e+00, %399 ], [ %391, %389 ]
  %402 = fcmp fast olt float %401, 0x3F50624DE0000000
  br i1 %402, label %403, label %414

; <label>:403                                     ; preds = %400
  %404 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %35, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %405 = extractvalue %dx.types.CBufRet.i32 %404, 0
  %406 = extractvalue %dx.types.CBufRet.i32 %404, 1
  %407 = extractvalue %dx.types.CBufRet.i32 %404, 2
  %408 = icmp slt i32 %40, %405
  %409 = icmp slt i32 %41, %406
  %410 = icmp slt i32 %42, %407
  %411 = and i1 %408, %409
  %412 = and i1 %410, %411
  %413 = select i1 %412, i32 8, i32 1
  br label %414

; <label>:414                                     ; preds = %403, %400
  %415 = phi i32 [ 1, %400 ], [ %413, %403 ]
  br label %416

; <label>:416                                     ; preds = %1991, %414
  %417 = phi float [ 0.000000e+00, %414 ], [ %1992, %1991 ]
  %418 = phi float [ 0.000000e+00, %414 ], [ %1993, %1991 ]
  %419 = phi float [ 0.000000e+00, %414 ], [ %1994, %1991 ]
  %420 = phi i32 [ 0, %414 ], [ %1995, %1991 ]
  %421 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %422 = extractvalue %dx.types.CBufRet.i32 %421, 0
  %423 = shl i32 %420, 3
  %424 = add i32 %422, %423
  %425 = mul i32 %40, 1664525
  %426 = mul i32 %41, 1664525
  %427 = mul i32 %42, 1664525
  %428 = mul i32 %424, 1664525
  %429 = add i32 %425, 1013904223
  %430 = add i32 %426, 1013904223
  %431 = add i32 %427, 1013904223
  %432 = add i32 %428, 1013904223
  %433 = mul i32 %432, %430
  %434 = add i32 %429, %433
  %435 = mul i32 %434, %431
  %436 = add i32 %435, %430
  %437 = mul i32 %436, %434
  %438 = add i32 %437, %431
  %439 = mul i32 %438, %436
  %440 = add i32 %439, %432
  %441 = lshr i32 %434, 16
  %442 = lshr i32 %436, 16
  %443 = lshr i32 %438, 16
  %444 = lshr i32 %440, 16
  %445 = xor i32 %441, %434
  %446 = xor i32 %442, %436
  %447 = xor i32 %443, %438
  %448 = xor i32 %444, %440
  %449 = mul i32 %448, %446
  %450 = add i32 %449, %445
  %451 = mul i32 %450, %447
  %452 = add i32 %451, %446
  %453 = mul i32 %452, %450
  %454 = add i32 %453, %447
  %455 = uitofp i32 %450 to float
  %456 = uitofp i32 %452 to float
  %457 = uitofp i32 %454 to float
  %458 = fmul fast float %455, 0x3E00000000000000
  %459 = fmul fast float %456, 0x3E00000000000000
  %460 = fmul fast float %457, 0x3E00000000000000
  %461 = fadd fast float %458, -1.000000e+00
  %462 = fadd fast float %459, -1.000000e+00
  %463 = fadd fast float %460, -1.000000e+00
  %464 = add nuw nsw i32 %420, 12
  %465 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 %464)  ; CBufferLoadLegacy(handle,regIndex)
  %466 = extractvalue %dx.types.CBufRet.f32 %465, 0
  %467 = extractvalue %dx.types.CBufRet.f32 %465, 1
  %468 = extractvalue %dx.types.CBufRet.f32 %465, 2
  %469 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %470 = extractvalue %dx.types.CBufRet.f32 %469, 3
  %471 = fmul fast float %461, %470
  %472 = fmul fast float %462, %470
  %473 = fmul fast float %463, %470
  %474 = fadd fast float %471, %466
  %475 = fadd fast float %472, %467
  %476 = fadd fast float %473, %468
  %477 = fadd fast float %474, %100
  %478 = fadd fast float %475, %101
  %479 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %480 = extractvalue %dx.types.CBufRet.f32 %479, 0
  %481 = extractvalue %dx.types.CBufRet.f32 %479, 1
  %482 = fdiv fast float %477, %480
  %483 = fdiv fast float %478, %481
  %484 = fmul fast float %482, 2.000000e+00
  %485 = fmul fast float %483, 2.000000e+00
  %486 = fadd fast float %484, -1.000000e+00
  %487 = fadd fast float %485, -1.000000e+00
  %488 = fsub fast float -0.000000e+00, %487
  %489 = fadd fast float %476, %104
  %490 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %491 = extractvalue %dx.types.CBufRet.f32 %490, 2
  %492 = fdiv fast float %489, %491
  %493 = call float @dx.op.unary.f32(i32 21, float %492)  ; Exp(value)
  %494 = extractvalue %dx.types.CBufRet.f32 %490, 1
  %495 = fsub fast float %493, %494
  %496 = extractvalue %dx.types.CBufRet.f32 %490, 0
  %497 = fdiv fast float %495, %496
  %498 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %499 = extractvalue %dx.types.CBufRet.f32 %498, 3
  %500 = fcmp fast ult float %499, 1.000000e+00
  br i1 %500, label %507, label %501, !dx.controlflow.hints !50

; <label>:501                                     ; preds = %416
  %502 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %503 = extractvalue %dx.types.CBufRet.f32 %502, 2
  %504 = fmul fast float %503, %497
  %505 = extractvalue %dx.types.CBufRet.f32 %498, 2
  %506 = fadd fast float %504, %505
  br label %514

; <label>:507                                     ; preds = %416
  %508 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %509 = extractvalue %dx.types.CBufRet.f32 %508, 3
  %510 = fadd fast float %509, %497
  %511 = extractvalue %dx.types.CBufRet.f32 %508, 2
  %512 = fmul fast float %510, %511
  %513 = fdiv fast float 1.000000e+00, %512
  br label %514

; <label>:514                                     ; preds = %507, %501
  %515 = phi float [ %506, %501 ], [ %513, %507 ]
  %516 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %517 = extractvalue %dx.types.CBufRet.f32 %516, 0
  %518 = extractvalue %dx.types.CBufRet.f32 %516, 1
  %519 = extractvalue %dx.types.CBufRet.f32 %516, 2
  %520 = extractvalue %dx.types.CBufRet.f32 %516, 3
  %521 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %522 = extractvalue %dx.types.CBufRet.f32 %521, 0
  %523 = extractvalue %dx.types.CBufRet.f32 %521, 1
  %524 = extractvalue %dx.types.CBufRet.f32 %521, 2
  %525 = extractvalue %dx.types.CBufRet.f32 %521, 3
  %526 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %527 = extractvalue %dx.types.CBufRet.f32 %526, 0
  %528 = extractvalue %dx.types.CBufRet.f32 %526, 1
  %529 = extractvalue %dx.types.CBufRet.f32 %526, 2
  %530 = extractvalue %dx.types.CBufRet.f32 %526, 3
  %531 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %532 = extractvalue %dx.types.CBufRet.f32 %531, 0
  %533 = extractvalue %dx.types.CBufRet.f32 %531, 1
  %534 = extractvalue %dx.types.CBufRet.f32 %531, 2
  %535 = extractvalue %dx.types.CBufRet.f32 %531, 3
  %536 = fmul fast float %517, %486
  %537 = call float @dx.op.tertiary.f32(i32 46, float %488, float %522, float %536)  ; FMad(a,b,c)
  %538 = call float @dx.op.tertiary.f32(i32 46, float %515, float %527, float %537)  ; FMad(a,b,c)
  %539 = fadd fast float %538, %532
  %540 = fmul fast float %518, %486
  %541 = call float @dx.op.tertiary.f32(i32 46, float %488, float %523, float %540)  ; FMad(a,b,c)
  %542 = call float @dx.op.tertiary.f32(i32 46, float %515, float %528, float %541)  ; FMad(a,b,c)
  %543 = fadd fast float %542, %533
  %544 = fmul fast float %519, %486
  %545 = call float @dx.op.tertiary.f32(i32 46, float %488, float %524, float %544)  ; FMad(a,b,c)
  %546 = call float @dx.op.tertiary.f32(i32 46, float %515, float %529, float %545)  ; FMad(a,b,c)
  %547 = fadd fast float %546, %534
  %548 = fmul fast float %520, %486
  %549 = call float @dx.op.tertiary.f32(i32 46, float %488, float %525, float %548)  ; FMad(a,b,c)
  %550 = call float @dx.op.tertiary.f32(i32 46, float %515, float %530, float %549)  ; FMad(a,b,c)
  %551 = fadd fast float %550, %535
  %552 = fdiv fast float %539, %551
  %553 = fdiv fast float %543, %551
  %554 = fdiv fast float %547, %551
  %555 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %556 = extractvalue %dx.types.CBufRet.f32 %555, 0
  %557 = extractvalue %dx.types.CBufRet.f32 %555, 1
  %558 = extractvalue %dx.types.CBufRet.f32 %555, 2
  %559 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %560 = extractvalue %dx.types.CBufRet.f32 %559, 0
  %561 = extractvalue %dx.types.CBufRet.f32 %559, 1
  %562 = extractvalue %dx.types.CBufRet.f32 %559, 2
  %563 = fmul fast float %556, 2.097152e+06
  %564 = fmul fast float %557, 2.097152e+06
  %565 = fmul fast float %558, 2.097152e+06
  %566 = fsub fast float %560, %563
  %567 = fsub fast float %561, %564
  %568 = fsub fast float %562, %565
  %569 = fsub fast float %552, %566
  %570 = fsub fast float %553, %567
  %571 = fsub fast float %554, %568
  %572 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %573 = extractvalue %dx.types.CBufRet.f32 %572, 0
  %574 = extractvalue %dx.types.CBufRet.f32 %572, 1
  %575 = extractvalue %dx.types.CBufRet.f32 %572, 2
  %576 = fsub fast float %552, %573
  %577 = fsub fast float %553, %574
  %578 = fsub fast float %554, %575
  %579 = fmul fast float %576, %576
  %580 = fmul fast float %577, %577
  %581 = fadd fast float %579, %580
  %582 = fmul fast float %578, %578
  %583 = fadd fast float %581, %582
  %584 = call float @dx.op.unary.f32(i32 24, float %583)  ; Sqrt(value)
  %585 = fdiv fast float %576, %584
  %586 = fdiv fast float %577, %584
  %587 = fdiv fast float %578, %584
  %588 = icmp eq i32 %45, 0
  br i1 %588, label %589, label %591, !dx.controlflow.hints !51

; <label>:589                                     ; preds = %514
  %590 = extractvalue %dx.types.CBufRet.f32 %469, 1
  br label %1240

; <label>:591                                     ; preds = %514
  %592 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %593 = extractvalue %dx.types.CBufRet.f32 %592, 2
  %594 = fcmp fast ogt float %593, 0.000000e+00
  br i1 %594, label %595, label %1170

; <label>:595                                     ; preds = %591
  %596 = icmp eq i32 %76, 0
  br i1 %596, label %632, label %597, !dx.controlflow.hints !52

; <label>:597                                     ; preds = %595
  %598 = fmul fast float %552, %78
  %599 = call float @dx.op.tertiary.f32(i32 46, float %553, float %83, float %598)  ; FMad(a,b,c)
  %600 = call float @dx.op.tertiary.f32(i32 46, float %554, float %88, float %599)  ; FMad(a,b,c)
  %601 = fadd fast float %600, %93
  %602 = fmul fast float %552, %79
  %603 = call float @dx.op.tertiary.f32(i32 46, float %553, float %84, float %602)  ; FMad(a,b,c)
  %604 = call float @dx.op.tertiary.f32(i32 46, float %554, float %89, float %603)  ; FMad(a,b,c)
  %605 = fadd fast float %604, %94
  %606 = fmul fast float %552, %81
  %607 = call float @dx.op.tertiary.f32(i32 46, float %553, float %86, float %606)  ; FMad(a,b,c)
  %608 = call float @dx.op.tertiary.f32(i32 46, float %554, float %91, float %607)  ; FMad(a,b,c)
  %609 = fadd fast float %608, %96
  %610 = fdiv fast float %601, %609
  %611 = fdiv fast float %605, %609
  %612 = fcmp fast ole float %610, 1.000000e+00
  %613 = fcmp fast ole float %611, 1.000000e+00
  %614 = fcmp fast oge float %610, 0.000000e+00
  %615 = fcmp fast oge float %611, 0.000000e+00
  %616 = and i1 %614, %612
  %617 = and i1 %615, %613
  %618 = and i1 %616, %617
  br i1 %618, label %619, label %632

; <label>:619                                     ; preds = %597
  %620 = fmul fast float %552, %80
  %621 = call float @dx.op.tertiary.f32(i32 46, float %553, float %85, float %620)  ; FMad(a,b,c)
  %622 = call float @dx.op.tertiary.f32(i32 46, float %554, float %90, float %621)  ; FMad(a,b,c)
  %623 = fadd fast float %622, %95
  %624 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %625 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %626 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %624, %dx.types.Handle %625, float %610, float %611, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %627 = extractvalue %dx.types.ResRet.f32 %626, 0
  %628 = fcmp fast olt float %623, %627
  %629 = fcmp fast ogt float %627, 0x3FEFAE1480000000
  %630 = or i1 %628, %629
  %631 = uitofp i1 %630 to float
  br label %632

; <label>:632                                     ; preds = %619, %597, %595
  %633 = phi float [ %631, %619 ], [ 1.000000e+00, %597 ], [ 1.000000e+00, %595 ]
  %634 = icmp eq i32 %66, 0
  br i1 %634, label %714, label %635

; <label>:635                                     ; preds = %632
  %636 = fcmp fast oge float %497, %69
  %637 = fcmp fast oge float %497, %70
  %638 = fcmp fast oge float %497, %71
  %639 = fcmp fast oge float %497, %72
  %640 = zext i1 %636 to i32
  %641 = zext i1 %637 to i32
  %642 = zext i1 %638 to i32
  %643 = zext i1 %639 to i32
  %644 = add nuw nsw i32 %640, %641
  %645 = add nuw nsw i32 %644, %642
  %646 = add nuw nsw i32 %645, %643
  %647 = icmp ult i32 %646, %66
  br i1 %647, label %648, label %714

; <label>:648                                     ; preds = %635
  %649 = shl nuw nsw i32 %646, 2
  %650 = add nuw nsw i32 %649, 9
  %651 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 %650)  ; CBufferLoadLegacy(handle,regIndex)
  %652 = extractvalue %dx.types.CBufRet.f32 %651, 0
  %653 = extractvalue %dx.types.CBufRet.f32 %651, 1
  %654 = extractvalue %dx.types.CBufRet.f32 %651, 3
  %655 = add nuw nsw i32 %649, 10
  %656 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 %655)  ; CBufferLoadLegacy(handle,regIndex)
  %657 = extractvalue %dx.types.CBufRet.f32 %656, 0
  %658 = extractvalue %dx.types.CBufRet.f32 %656, 1
  %659 = extractvalue %dx.types.CBufRet.f32 %656, 3
  %660 = add nuw nsw i32 %649, 11
  %661 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 %660)  ; CBufferLoadLegacy(handle,regIndex)
  %662 = extractvalue %dx.types.CBufRet.f32 %661, 0
  %663 = extractvalue %dx.types.CBufRet.f32 %661, 1
  %664 = extractvalue %dx.types.CBufRet.f32 %661, 3
  %665 = add nuw nsw i32 %649, 12
  %666 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 %665)  ; CBufferLoadLegacy(handle,regIndex)
  %667 = extractvalue %dx.types.CBufRet.f32 %666, 0
  %668 = extractvalue %dx.types.CBufRet.f32 %666, 1
  %669 = extractvalue %dx.types.CBufRet.f32 %666, 3
  %670 = fmul fast float %652, %552
  %671 = call float @dx.op.tertiary.f32(i32 46, float %553, float %657, float %670)  ; FMad(a,b,c)
  %672 = call float @dx.op.tertiary.f32(i32 46, float %554, float %662, float %671)  ; FMad(a,b,c)
  %673 = fadd fast float %672, %667
  %674 = fmul fast float %653, %552
  %675 = call float @dx.op.tertiary.f32(i32 46, float %553, float %658, float %674)  ; FMad(a,b,c)
  %676 = call float @dx.op.tertiary.f32(i32 46, float %554, float %663, float %675)  ; FMad(a,b,c)
  %677 = fadd fast float %676, %668
  %678 = fmul fast float %654, %552
  %679 = call float @dx.op.tertiary.f32(i32 46, float %553, float %659, float %678)  ; FMad(a,b,c)
  %680 = call float @dx.op.tertiary.f32(i32 46, float %554, float %664, float %679)  ; FMad(a,b,c)
  %681 = fadd fast float %680, %669
  %682 = fdiv fast float %673, %681
  %683 = fdiv fast float %677, %681
  %684 = add nuw nsw i32 %646, 25
  %685 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 %684)  ; CBufferLoadLegacy(handle,regIndex)
  %686 = extractvalue %dx.types.CBufRet.f32 %685, 0
  %687 = extractvalue %dx.types.CBufRet.f32 %685, 1
  %688 = extractvalue %dx.types.CBufRet.f32 %685, 2
  %689 = extractvalue %dx.types.CBufRet.f32 %685, 3
  %690 = fcmp fast ole float %682, %688
  %691 = fcmp fast ole float %683, %689
  %692 = fcmp fast oge float %682, %686
  %693 = fcmp fast oge float %683, %687
  %694 = and i1 %692, %690
  %695 = and i1 %693, %691
  %696 = and i1 %694, %695
  br i1 %696, label %697, label %714

; <label>:697                                     ; preds = %648
  %698 = extractvalue %dx.types.CBufRet.f32 %666, 2
  %699 = extractvalue %dx.types.CBufRet.f32 %661, 2
  %700 = extractvalue %dx.types.CBufRet.f32 %656, 2
  %701 = extractvalue %dx.types.CBufRet.f32 %651, 2
  %702 = fmul fast float %701, %552
  %703 = call float @dx.op.tertiary.f32(i32 46, float %553, float %700, float %702)  ; FMad(a,b,c)
  %704 = call float @dx.op.tertiary.f32(i32 46, float %554, float %699, float %703)  ; FMad(a,b,c)
  %705 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %706 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %707 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %705, %dx.types.Handle %706, float %682, float %683, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %708 = extractvalue %dx.types.ResRet.f32 %707, 0
  %709 = fsub fast float 1.000000e+00, %698
  %710 = fsub fast float %709, %704
  %711 = fsub fast float %708, %74
  %712 = fcmp fast olt float %710, %711
  %713 = uitofp i1 %712 to float
  br label %714

; <label>:714                                     ; preds = %697, %648, %635, %632
  %715 = phi float [ %713, %697 ], [ 1.000000e+00, %648 ], [ 1.000000e+00, %635 ], [ 1.000000e+00, %632 ]
  %716 = fmul fast float %715, %633
  %717 = fsub fast float %552, %560
  %718 = fsub fast float %553, %561
  %719 = fsub fast float %554, %562
  %720 = mul i32 %67, 336
  %721 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %722 = add i32 %720, 128
  %723 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %722, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %724 = add i32 %720, 144
  %725 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %724, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %726 = add i32 %720, 160
  %727 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %726, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %728 = add i32 %720, 176
  %729 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %728, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %730 = add i32 %720, 256
  %731 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %730, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %732 = extractvalue %dx.types.ResRet.i32 %731, 0
  %733 = extractvalue %dx.types.ResRet.i32 %731, 1
  %734 = extractvalue %dx.types.ResRet.i32 %731, 2
  %735 = bitcast i32 %732 to float
  %736 = bitcast i32 %733 to float
  %737 = bitcast i32 %734 to float
  %738 = add i32 %720, 268
  %739 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %738, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %740 = extractvalue %dx.types.ResRet.i32 %739, 0
  %741 = add i32 %720, 272
  %742 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %741, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %743 = add i32 %720, 288
  %744 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %743, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %745 = icmp eq i32 %740, 0
  %746 = fadd fast float %735, %556
  %747 = fadd fast float %736, %557
  %748 = fadd fast float %737, %558
  %749 = fmul fast float %746, 2.097152e+06
  %750 = fmul fast float %747, 2.097152e+06
  %751 = fmul fast float %748, 2.097152e+06
  %752 = fadd fast float %749, %717
  %753 = fadd fast float %750, %718
  %754 = fadd fast float %751, %719
  br i1 %745, label %755, label %995

; <label>:755                                     ; preds = %714
  %756 = extractvalue %dx.types.ResRet.i32 %744, 2
  %757 = bitcast i32 %756 to float
  %758 = extractvalue %dx.types.ResRet.i32 %744, 1
  %759 = bitcast i32 %758 to float
  %760 = extractvalue %dx.types.ResRet.i32 %744, 0
  %761 = bitcast i32 %760 to float
  %762 = add i32 %720, 320
  %763 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %762, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %764 = extractvalue %dx.types.ResRet.i32 %763, 0
  %765 = add i32 %720, 316
  %766 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %765, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %767 = extractvalue %dx.types.ResRet.i32 %766, 0
  %768 = add i32 %720, 300
  %769 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %768, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %770 = extractvalue %dx.types.ResRet.i32 %769, 0
  %771 = bitcast i32 %770 to float
  %772 = fadd fast float %752, %761
  %773 = fadd fast float %753, %759
  %774 = fadd fast float %754, %757
  %775 = fmul fast float %772, %772
  %776 = fmul fast float %773, %773
  %777 = fadd fast float %775, %776
  %778 = fmul fast float %774, %774
  %779 = fadd fast float %777, %778
  %780 = call float @dx.op.unary.f32(i32 24, float %779)  ; Sqrt(value)
  %781 = call float @dx.op.unary.f32(i32 23, float %780)  ; Log(value)
  %782 = fadd fast float %781, %771
  %783 = call float @dx.op.unary.f32(i32 27, float %782)  ; Round_ni(value)
  %784 = fptosi float %783 to i32
  %785 = sub nsw i32 %784, %767
  %786 = call i32 @dx.op.binary.i32(i32 37, i32 0, i32 %785)  ; IMax(a,b)
  %787 = icmp slt i32 %786, %764
  br i1 %787, label %788, label %1167

; <label>:788                                     ; preds = %755
  %789 = add nsw i32 %786, %67
  %790 = mul i32 %789, 336
  %791 = add i32 %790, 112
  %792 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %791, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %793 = extractvalue %dx.types.ResRet.i32 %792, 2
  %794 = bitcast i32 %793 to float
  %795 = add i32 %790, 128
  %796 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %795, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %797 = extractvalue %dx.types.ResRet.i32 %796, 0
  %798 = extractvalue %dx.types.ResRet.i32 %796, 1
  %799 = extractvalue %dx.types.ResRet.i32 %796, 2
  %800 = bitcast i32 %797 to float
  %801 = bitcast i32 %798 to float
  %802 = bitcast i32 %799 to float
  %803 = add i32 %790, 144
  %804 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %803, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %805 = extractvalue %dx.types.ResRet.i32 %804, 0
  %806 = extractvalue %dx.types.ResRet.i32 %804, 1
  %807 = extractvalue %dx.types.ResRet.i32 %804, 2
  %808 = bitcast i32 %805 to float
  %809 = bitcast i32 %806 to float
  %810 = bitcast i32 %807 to float
  %811 = add i32 %790, 160
  %812 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %811, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %813 = extractvalue %dx.types.ResRet.i32 %812, 0
  %814 = extractvalue %dx.types.ResRet.i32 %812, 1
  %815 = extractvalue %dx.types.ResRet.i32 %812, 2
  %816 = bitcast i32 %813 to float
  %817 = bitcast i32 %814 to float
  %818 = bitcast i32 %815 to float
  %819 = add i32 %790, 176
  %820 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %819, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %821 = extractvalue %dx.types.ResRet.i32 %820, 0
  %822 = extractvalue %dx.types.ResRet.i32 %820, 1
  %823 = extractvalue %dx.types.ResRet.i32 %820, 2
  %824 = bitcast i32 %821 to float
  %825 = bitcast i32 %822 to float
  %826 = bitcast i32 %823 to float
  %827 = add i32 %790, 256
  %828 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %827, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %829 = extractvalue %dx.types.ResRet.i32 %828, 0
  %830 = extractvalue %dx.types.ResRet.i32 %828, 1
  %831 = extractvalue %dx.types.ResRet.i32 %828, 2
  %832 = bitcast i32 %829 to float
  %833 = bitcast i32 %830 to float
  %834 = bitcast i32 %831 to float
  %835 = add i32 %790, 272
  %836 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %835, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %837 = extractvalue %dx.types.ResRet.i32 %836, 0
  %838 = extractvalue %dx.types.ResRet.i32 %836, 1
  %839 = extractvalue %dx.types.ResRet.i32 %836, 2
  %840 = bitcast i32 %837 to float
  %841 = bitcast i32 %838 to float
  %842 = bitcast i32 %839 to float
  %843 = fadd fast float %832, %556
  %844 = fadd fast float %833, %557
  %845 = fadd fast float %834, %558
  %846 = fmul fast float %843, 2.097152e+06
  %847 = fmul fast float %844, 2.097152e+06
  %848 = fmul fast float %845, 2.097152e+06
  %849 = fadd fast float %846, %717
  %850 = fadd fast float %849, %840
  %851 = fadd fast float %847, %718
  %852 = fadd fast float %851, %841
  %853 = fadd fast float %848, %719
  %854 = fadd fast float %853, %842
  %855 = fmul fast float %850, %800
  %856 = call float @dx.op.tertiary.f32(i32 46, float %852, float %808, float %855)  ; FMad(a,b,c)
  %857 = call float @dx.op.tertiary.f32(i32 46, float %854, float %816, float %856)  ; FMad(a,b,c)
  %858 = fadd fast float %857, %824
  %859 = fmul fast float %850, %801
  %860 = call float @dx.op.tertiary.f32(i32 46, float %852, float %809, float %859)  ; FMad(a,b,c)
  %861 = call float @dx.op.tertiary.f32(i32 46, float %854, float %817, float %860)  ; FMad(a,b,c)
  %862 = fadd fast float %861, %825
  %863 = fmul fast float %850, %802
  %864 = call float @dx.op.tertiary.f32(i32 46, float %852, float %810, float %863)  ; FMad(a,b,c)
  %865 = call float @dx.op.tertiary.f32(i32 46, float %854, float %818, float %864)  ; FMad(a,b,c)
  %866 = fadd fast float %865, %826
  %867 = fmul fast float %858, 1.280000e+02
  %868 = fmul fast float %862, 1.280000e+02
  %869 = fptoui float %867 to i32
  %870 = fptoui float %868 to i32
  %871 = icmp ult i32 %789, 8192
  br i1 %871, label %878, label %872

; <label>:872                                     ; preds = %788
  %873 = mul i32 %789, 21845
  %874 = shl i32 %870, 7
  %875 = add i32 %873, -178946048
  %876 = add i32 %875, %869
  %877 = add i32 %876, %874
  br label %878

; <label>:878                                     ; preds = %872, %788
  %879 = phi i32 [ %877, %872 ], [ %789, %788 ]
  %880 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %881 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %880, i32 %879, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %882 = extractvalue %dx.types.ResRet.i32 %881, 0
  %883 = lshr i32 %882, 20
  %884 = and i32 %883, 63
  %885 = and i32 %882, 134217728
  %886 = icmp eq i32 %885, 0
  br i1 %886, label %989, label %887

; <label>:887                                     ; preds = %878
  %888 = icmp eq i32 %884, 0
  %889 = zext i1 %888 to i32
  %890 = add i32 %884, %789
  %891 = fmul fast float %858, 1.638400e+04
  %892 = fmul fast float %862, 1.638400e+04
  %893 = fptoui float %891 to i32
  %894 = fptoui float %892 to i32
  br i1 %888, label %966, label %895

; <label>:895                                     ; preds = %887
  %896 = add i32 %790, 304
  %897 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %896, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %898 = extractvalue %dx.types.ResRet.i32 %897, 0
  %899 = extractvalue %dx.types.ResRet.i32 %897, 1
  %900 = mul i32 %890, 336
  %901 = add i32 %900, 112
  %902 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %901, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %903 = extractvalue %dx.types.ResRet.i32 %902, 2
  %904 = bitcast i32 %903 to float
  %905 = add i32 %900, 304
  %906 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %905, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %907 = extractvalue %dx.types.ResRet.i32 %906, 0
  %908 = extractvalue %dx.types.ResRet.i32 %906, 1
  %909 = shl i32 %898, 5
  %910 = shl i32 %899, 5
  %911 = shl i32 %907, 5
  %912 = shl i32 %908, 5
  %913 = sub i32 %869, %909
  %914 = sub i32 %870, %910
  %915 = and i32 %883, 31
  %916 = shl i32 %911, %915
  %917 = shl i32 %912, %915
  %918 = add i32 %913, %916
  %919 = add i32 %914, %917
  %920 = lshr i32 %918, %915
  %921 = lshr i32 %919, %915
  %922 = shl i32 %920, 7
  %923 = shl i32 %921, 7
  %924 = or i32 %922, 127
  %925 = or i32 %923, 127
  %926 = sitofp i32 %898 to float
  %927 = sitofp i32 %899 to float
  %928 = sitofp i32 %907 to float
  %929 = sitofp i32 %908 to float
  %930 = shl i32 1, %915
  %931 = uitofp i32 %930 to float
  %932 = fdiv fast float 1.000000e+00, %931
  %933 = fmul fast float %932, %926
  %934 = fmul fast float %932, %927
  %935 = fsub fast float %928, %933
  %936 = fsub fast float %929, %934
  %937 = fmul fast float %935, 2.500000e-01
  %938 = fmul fast float %936, 2.500000e-01
  %939 = fmul fast float %932, %794
  %940 = fsub fast float %904, %939
  %941 = fmul fast float %932, %858
  %942 = fmul fast float %932, %862
  %943 = fadd fast float %937, %941
  %944 = fadd fast float %938, %942
  %945 = fmul fast float %943, 1.638400e+04
  %946 = fmul fast float %944, 1.638400e+04
  %947 = fptoui float %945 to i32
  %948 = fptoui float %946 to i32
  %949 = call i32 @dx.op.binary.i32(i32 39, i32 %947, i32 %922)  ; UMax(a,b)
  %950 = call i32 @dx.op.binary.i32(i32 39, i32 %948, i32 %923)  ; UMax(a,b)
  %951 = call i32 @dx.op.binary.i32(i32 40, i32 %949, i32 %924)  ; UMin(a,b)
  %952 = call i32 @dx.op.binary.i32(i32 40, i32 %950, i32 %925)  ; UMin(a,b)
  %953 = icmp ult i32 %890, 8192
  br i1 %953, label %959, label %954

; <label>:954                                     ; preds = %895
  %955 = mul i32 %890, 21845
  %956 = add i32 %955, -178946048
  %957 = add i32 %956, %920
  %958 = add i32 %957, %923
  br label %959

; <label>:959                                     ; preds = %954, %895
  %960 = phi i32 [ %958, %954 ], [ %890, %895 ]
  %961 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %880, i32 %960, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %962 = extractvalue %dx.types.ResRet.i32 %961, 0
  %963 = and i32 %962, 200278016
  %964 = icmp eq i32 %963, 134217728
  %965 = zext i1 %964 to i32
  br label %966

; <label>:966                                     ; preds = %959, %887
  %967 = phi i32 [ %951, %959 ], [ %893, %887 ]
  %968 = phi i32 [ %952, %959 ], [ %894, %887 ]
  %969 = phi i32 [ %965, %959 ], [ %889, %887 ]
  %970 = phi i32 [ %962, %959 ], [ %882, %887 ]
  %971 = phi float [ %932, %959 ], [ 1.000000e+00, %887 ]
  %972 = phi float [ %940, %959 ], [ 0.000000e+00, %887 ]
  %973 = icmp eq i32 %969, 0
  br i1 %973, label %989, label %974

; <label>:974                                     ; preds = %966
  %975 = shl i32 %970, 7
  %976 = and i32 %975, 130944
  %977 = lshr i32 %970, 3
  %978 = and i32 %977, 130944
  %979 = and i32 %967, 127
  %980 = and i32 %968, 127
  %981 = or i32 %976, %979
  %982 = or i32 %978, %980
  %983 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %984 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %983, i32 0, i32 %981, i32 %982, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %985 = extractvalue %dx.types.ResRet.i32 %984, 0
  %986 = bitcast i32 %985 to float
  %987 = fsub fast float %986, %972
  %988 = fdiv fast float %987, %971
  br label %989

; <label>:989                                     ; preds = %974, %966, %878
  %990 = phi float [ %988, %974 ], [ 0.000000e+00, %966 ], [ 0.000000e+00, %878 ]
  %991 = phi i1 [ true, %974 ], [ false, %966 ], [ false, %878 ]
  %992 = fcmp fast ogt float %990, %866
  %993 = and i1 %991, %992
  %994 = select i1 %993, float 0.000000e+00, float 1.000000e+00
  br label %1167

; <label>:995                                     ; preds = %714
  %996 = extractvalue %dx.types.ResRet.i32 %729, 3
  %997 = extractvalue %dx.types.ResRet.i32 %729, 2
  %998 = extractvalue %dx.types.ResRet.i32 %729, 1
  %999 = extractvalue %dx.types.ResRet.i32 %729, 0
  %1000 = extractvalue %dx.types.ResRet.i32 %727, 3
  %1001 = extractvalue %dx.types.ResRet.i32 %727, 2
  %1002 = extractvalue %dx.types.ResRet.i32 %727, 1
  %1003 = extractvalue %dx.types.ResRet.i32 %727, 0
  %1004 = extractvalue %dx.types.ResRet.i32 %725, 3
  %1005 = extractvalue %dx.types.ResRet.i32 %725, 2
  %1006 = extractvalue %dx.types.ResRet.i32 %725, 1
  %1007 = extractvalue %dx.types.ResRet.i32 %725, 0
  %1008 = extractvalue %dx.types.ResRet.i32 %723, 3
  %1009 = extractvalue %dx.types.ResRet.i32 %723, 2
  %1010 = extractvalue %dx.types.ResRet.i32 %723, 1
  %1011 = extractvalue %dx.types.ResRet.i32 %723, 0
  %1012 = extractvalue %dx.types.ResRet.i32 %742, 2
  %1013 = bitcast i32 %1012 to float
  %1014 = extractvalue %dx.types.ResRet.i32 %742, 1
  %1015 = bitcast i32 %1014 to float
  %1016 = extractvalue %dx.types.ResRet.i32 %742, 0
  %1017 = bitcast i32 %1016 to float
  %1018 = fadd fast float %752, %1017
  %1019 = fadd fast float %753, %1015
  %1020 = fadd fast float %754, %1013
  %1021 = icmp eq i32 %740, 2
  br i1 %1021, label %1068, label %1022

; <label>:1022                                    ; preds = %995
  %1023 = call float @dx.op.unary.f32(i32 6, float %1018)  ; FAbs(value)
  %1024 = call float @dx.op.unary.f32(i32 6, float %1019)  ; FAbs(value)
  %1025 = fcmp fast ult float %1023, %1024
  %1026 = call float @dx.op.unary.f32(i32 6, float %1020)  ; FAbs(value)
  %1027 = fcmp fast ult float %1023, %1026
  %1028 = or i1 %1025, %1027
  br i1 %1028, label %1032, label %1029

; <label>:1029                                    ; preds = %1022
  %1030 = fcmp ule float %1018, 0.000000e+00
  %1031 = zext i1 %1030 to i32
  br label %1040

; <label>:1032                                    ; preds = %1022
  %1033 = fcmp fast ogt float %1024, %1026
  br i1 %1033, label %1034, label %1037

; <label>:1034                                    ; preds = %1032
  %1035 = fcmp fast ogt float %1019, 0.000000e+00
  %1036 = select i1 %1035, i32 2, i32 3
  br label %1040

; <label>:1037                                    ; preds = %1032
  %1038 = fcmp fast ogt float %1020, 0.000000e+00
  %1039 = select i1 %1038, i32 4, i32 5
  br label %1040

; <label>:1040                                    ; preds = %1037, %1034, %1029
  %1041 = phi i32 [ %1031, %1029 ], [ %1036, %1034 ], [ %1039, %1037 ]
  %1042 = add i32 %1041, %67
  %1043 = mul i32 %1042, 336
  %1044 = add i32 %1043, 128
  %1045 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %1044, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1046 = extractvalue %dx.types.ResRet.i32 %1045, 0
  %1047 = extractvalue %dx.types.ResRet.i32 %1045, 1
  %1048 = extractvalue %dx.types.ResRet.i32 %1045, 2
  %1049 = extractvalue %dx.types.ResRet.i32 %1045, 3
  %1050 = add i32 %1043, 144
  %1051 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %1050, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1052 = extractvalue %dx.types.ResRet.i32 %1051, 0
  %1053 = extractvalue %dx.types.ResRet.i32 %1051, 1
  %1054 = extractvalue %dx.types.ResRet.i32 %1051, 2
  %1055 = extractvalue %dx.types.ResRet.i32 %1051, 3
  %1056 = add i32 %1043, 160
  %1057 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %1056, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1058 = extractvalue %dx.types.ResRet.i32 %1057, 0
  %1059 = extractvalue %dx.types.ResRet.i32 %1057, 1
  %1060 = extractvalue %dx.types.ResRet.i32 %1057, 2
  %1061 = extractvalue %dx.types.ResRet.i32 %1057, 3
  %1062 = add i32 %1043, 176
  %1063 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %1062, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1064 = extractvalue %dx.types.ResRet.i32 %1063, 0
  %1065 = extractvalue %dx.types.ResRet.i32 %1063, 1
  %1066 = extractvalue %dx.types.ResRet.i32 %1063, 2
  %1067 = extractvalue %dx.types.ResRet.i32 %1063, 3
  br label %1068

; <label>:1068                                    ; preds = %1040, %995
  %1069 = phi i32 [ %1046, %1040 ], [ %1011, %995 ]
  %1070 = phi i32 [ %1047, %1040 ], [ %1010, %995 ]
  %1071 = phi i32 [ %1048, %1040 ], [ %1009, %995 ]
  %1072 = phi i32 [ %1049, %1040 ], [ %1008, %995 ]
  %1073 = phi i32 [ %1052, %1040 ], [ %1007, %995 ]
  %1074 = phi i32 [ %1053, %1040 ], [ %1006, %995 ]
  %1075 = phi i32 [ %1054, %1040 ], [ %1005, %995 ]
  %1076 = phi i32 [ %1055, %1040 ], [ %1004, %995 ]
  %1077 = phi i32 [ %1058, %1040 ], [ %1003, %995 ]
  %1078 = phi i32 [ %1059, %1040 ], [ %1002, %995 ]
  %1079 = phi i32 [ %1060, %1040 ], [ %1001, %995 ]
  %1080 = phi i32 [ %1061, %1040 ], [ %1000, %995 ]
  %1081 = phi i32 [ %1064, %1040 ], [ %999, %995 ]
  %1082 = phi i32 [ %1065, %1040 ], [ %998, %995 ]
  %1083 = phi i32 [ %1066, %1040 ], [ %997, %995 ]
  %1084 = phi i32 [ %1067, %1040 ], [ %996, %995 ]
  %1085 = phi i32 [ %1042, %1040 ], [ %67, %995 ]
  %1086 = bitcast i32 %1084 to float
  %1087 = bitcast i32 %1083 to float
  %1088 = bitcast i32 %1082 to float
  %1089 = bitcast i32 %1081 to float
  %1090 = bitcast i32 %1080 to float
  %1091 = bitcast i32 %1079 to float
  %1092 = bitcast i32 %1078 to float
  %1093 = bitcast i32 %1077 to float
  %1094 = bitcast i32 %1076 to float
  %1095 = bitcast i32 %1075 to float
  %1096 = bitcast i32 %1074 to float
  %1097 = bitcast i32 %1073 to float
  %1098 = bitcast i32 %1072 to float
  %1099 = bitcast i32 %1071 to float
  %1100 = bitcast i32 %1070 to float
  %1101 = bitcast i32 %1069 to float
  %1102 = fmul fast float %1101, %1018
  %1103 = call float @dx.op.tertiary.f32(i32 46, float %1019, float %1097, float %1102)  ; FMad(a,b,c)
  %1104 = call float @dx.op.tertiary.f32(i32 46, float %1020, float %1093, float %1103)  ; FMad(a,b,c)
  %1105 = fadd fast float %1104, %1089
  %1106 = fmul fast float %1100, %1018
  %1107 = call float @dx.op.tertiary.f32(i32 46, float %1019, float %1096, float %1106)  ; FMad(a,b,c)
  %1108 = call float @dx.op.tertiary.f32(i32 46, float %1020, float %1092, float %1107)  ; FMad(a,b,c)
  %1109 = fadd fast float %1108, %1088
  %1110 = fmul fast float %1099, %1018
  %1111 = call float @dx.op.tertiary.f32(i32 46, float %1019, float %1095, float %1110)  ; FMad(a,b,c)
  %1112 = call float @dx.op.tertiary.f32(i32 46, float %1020, float %1091, float %1111)  ; FMad(a,b,c)
  %1113 = fadd fast float %1112, %1087
  %1114 = fmul fast float %1098, %1018
  %1115 = call float @dx.op.tertiary.f32(i32 46, float %1019, float %1094, float %1114)  ; FMad(a,b,c)
  %1116 = call float @dx.op.tertiary.f32(i32 46, float %1020, float %1090, float %1115)  ; FMad(a,b,c)
  %1117 = fadd fast float %1116, %1086
  %1118 = fdiv fast float %1105, %1117
  %1119 = fdiv fast float %1109, %1117
  %1120 = fdiv fast float %1113, %1117
  %1121 = icmp ult i32 %1085, 8192
  br i1 %1121, label %1132, label %1122

; <label>:1122                                    ; preds = %1068
  %1123 = fmul fast float %1119, 1.280000e+02
  %1124 = fptoui float %1123 to i32
  %1125 = fmul fast float %1118, 1.280000e+02
  %1126 = fptoui float %1125 to i32
  %1127 = mul i32 %1085, 21845
  %1128 = shl i32 %1124, 7
  %1129 = add i32 %1127, -178946048
  %1130 = add i32 %1129, %1126
  %1131 = add i32 %1130, %1128
  br label %1132

; <label>:1132                                    ; preds = %1122, %1068
  %1133 = phi i32 [ %1131, %1122 ], [ %1085, %1068 ]
  %1134 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1135 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1134, i32 %1133, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1136 = extractvalue %dx.types.ResRet.i32 %1135, 0
  %1137 = lshr i32 %1136, 20
  %1138 = and i32 %1136, 134217728
  %1139 = icmp eq i32 %1138, 0
  %1140 = and i32 %1137, 31
  %1141 = lshr i32 16384, %1140
  %1142 = uitofp i32 %1141 to float
  %1143 = select i1 %1121, float 1.280000e+02, float %1142
  br i1 %1139, label %1161, label %1144

; <label>:1144                                    ; preds = %1132
  %1145 = lshr i32 %1136, 3
  %1146 = and i32 %1145, 130944
  %1147 = fmul fast float %1143, %1119
  %1148 = fptoui float %1147 to i32
  %1149 = and i32 %1148, 127
  %1150 = or i32 %1149, %1146
  %1151 = shl i32 %1136, 7
  %1152 = and i32 %1151, 130944
  %1153 = fmul fast float %1143, %1118
  %1154 = fptoui float %1153 to i32
  %1155 = and i32 %1154, 127
  %1156 = or i32 %1155, %1152
  %1157 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1158 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1157, i32 0, i32 %1156, i32 %1150, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1159 = extractvalue %dx.types.ResRet.i32 %1158, 0
  %1160 = bitcast i32 %1159 to float
  br label %1161

; <label>:1161                                    ; preds = %1144, %1132
  %1162 = phi float [ %1160, %1144 ], [ 0.000000e+00, %1132 ]
  %1163 = phi i1 [ true, %1144 ], [ false, %1132 ]
  %1164 = fcmp fast ogt float %1162, %1120
  %1165 = and i1 %1163, %1164
  %1166 = select i1 %1165, float 0.000000e+00, float 1.000000e+00
  br label %1167

; <label>:1167                                    ; preds = %1161, %989, %755
  %1168 = phi float [ 1.000000e+00, %755 ], [ %994, %989 ], [ %1166, %1161 ]
  %1169 = fmul fast float %716, %1168
  br label %1170

; <label>:1170                                    ; preds = %1167, %591
  %1171 = phi float [ %1169, %1167 ], [ 1.000000e+00, %591 ]
  %1172 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %1173 = extractvalue %dx.types.CBufRet.f32 %1172, 0
  %1174 = extractvalue %dx.types.CBufRet.f32 %1172, 1
  %1175 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 75)  ; CBufferLoadLegacy(handle,regIndex)
  %1176 = extractvalue %dx.types.CBufRet.f32 %1175, 0
  %1177 = extractvalue %dx.types.CBufRet.f32 %1175, 1
  %1178 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %1179 = extractvalue %dx.types.CBufRet.f32 %1178, 0
  %1180 = extractvalue %dx.types.CBufRet.f32 %1178, 1
  %1181 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 77)  ; CBufferLoadLegacy(handle,regIndex)
  %1182 = extractvalue %dx.types.CBufRet.f32 %1181, 0
  %1183 = extractvalue %dx.types.CBufRet.f32 %1181, 1
  %1184 = fmul fast float %1173, %552
  %1185 = call float @dx.op.tertiary.f32(i32 46, float %553, float %1176, float %1184)  ; FMad(a,b,c)
  %1186 = call float @dx.op.tertiary.f32(i32 46, float %554, float %1179, float %1185)  ; FMad(a,b,c)
  %1187 = fadd fast float %1186, %1182
  %1188 = fmul fast float %1174, %552
  %1189 = call float @dx.op.tertiary.f32(i32 46, float %553, float %1177, float %1188)  ; FMad(a,b,c)
  %1190 = call float @dx.op.tertiary.f32(i32 46, float %554, float %1180, float %1189)  ; FMad(a,b,c)
  %1191 = fadd fast float %1190, %1183
  %1192 = fmul fast float %1187, 5.000000e-01
  %1193 = fmul fast float %1191, 5.000000e-01
  %1194 = fadd fast float %1192, 5.000000e-01
  %1195 = fsub fast float 5.000000e-01, %1193
  %1196 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1197 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1198 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1196, %dx.types.Handle %1197, float %1194, float %1195, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1199 = extractvalue %dx.types.ResRet.f32 %1198, 0
  %1200 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %1201 = extractvalue %dx.types.CBufRet.f32 %1200, 2
  %1202 = fcmp fast ogt float %1201, 0.000000e+00
  br i1 %1202, label %1203, label %1212

; <label>:1203                                    ; preds = %1170
  %1204 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1205 = extractvalue %dx.types.CBufRet.f32 %1204, 0
  %1206 = extractvalue %dx.types.CBufRet.f32 %1204, 1
  %1207 = extractvalue %dx.types.CBufRet.f32 %1204, 2
  %1208 = call float @dx.op.dot3.f32(i32 55, float %61, float %62, float %63, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1209 = fmul fast float %1205, %1208
  %1210 = fmul fast float %1206, %1208
  %1211 = fmul fast float %1207, %1208
  br label %1212

; <label>:1212                                    ; preds = %1203, %1170
  %1213 = phi float [ %1209, %1203 ], [ %61, %1170 ]
  %1214 = phi float [ %1210, %1203 ], [ %62, %1170 ]
  %1215 = phi float [ %1211, %1203 ], [ %63, %1170 ]
  %1216 = fsub fast float -0.000000e+00, %585
  %1217 = fsub fast float -0.000000e+00, %586
  %1218 = fsub fast float -0.000000e+00, %587
  %1219 = call float @dx.op.dot3.f32(i32 55, float %57, float %58, float %59, float %1216, float %1217, float %1218)  ; Dot3(ax,ay,az,bx,by,bz)
  %1220 = extractvalue %dx.types.CBufRet.f32 %469, 1
  %1221 = fmul fast float %1220, %1220
  %1222 = fsub fast float 1.000000e+00, %1221
  %1223 = fmul fast float %1219, 2.000000e+00
  %1224 = fadd fast float %1223, %1220
  %1225 = fmul fast float %1224, %1220
  %1226 = fadd fast float %1225, 1.000000e+00
  %1227 = call float @dx.op.unary.f32(i32 24, float %1226)  ; Sqrt(value)
  %1228 = fmul fast float %1227, 0x402921FB60000000
  %1229 = fmul fast float %1228, %1226
  %1230 = fdiv fast float %1222, %1229
  %1231 = fmul fast float %1171, %64
  %1232 = fmul fast float %1231, %1199
  %1233 = fmul fast float %1232, %1230
  %1234 = fmul fast float %1233, %1213
  %1235 = fmul fast float %1233, %1214
  %1236 = fmul fast float %1233, %1215
  %1237 = fadd fast float %1234, %417
  %1238 = fadd fast float %1235, %418
  %1239 = fadd fast float %1236, %419
  br label %1240

; <label>:1240                                    ; preds = %1212, %589
  %1241 = phi float [ %590, %589 ], [ %1220, %1212 ]
  %1242 = phi float [ %417, %589 ], [ %1237, %1212 ]
  %1243 = phi float [ %418, %589 ], [ %1238, %1212 ]
  %1244 = phi float [ %419, %589 ], [ %1239, %1212 ]
  %1245 = fmul fast float %1241, %586
  %1246 = fmul fast float %1241, %587
  %1247 = fmul fast float %1241, %585
  %1248 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 83)  ; CBufferLoadLegacy(handle,regIndex)
  %1249 = extractvalue %dx.types.CBufRet.f32 %1248, 3
  %1250 = fcmp fast ogt float %1249, 0.000000e+00
  %1251 = extractvalue %dx.types.CBufRet.f32 %1248, 2
  %1252 = fcmp fast ogt float %1251, 0.000000e+00
  %1253 = or i1 %1250, %1252
  br i1 %1253, label %1254, label %1322

; <label>:1254                                    ; preds = %1240
  %1255 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 233)  ; CBufferLoadLegacy(handle,regIndex)
  %1256 = extractvalue %dx.types.CBufRet.f32 %1255, 0
  %1257 = extractvalue %dx.types.CBufRet.f32 %1255, 1
  %1258 = extractvalue %dx.types.CBufRet.f32 %1255, 2
  %1259 = fmul fast float %1256, %569
  %1260 = fmul fast float %1257, %570
  %1261 = fmul fast float %1258, %571
  %1262 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 234)  ; CBufferLoadLegacy(handle,regIndex)
  %1263 = extractvalue %dx.types.CBufRet.f32 %1262, 0
  %1264 = extractvalue %dx.types.CBufRet.f32 %1262, 1
  %1265 = extractvalue %dx.types.CBufRet.f32 %1262, 2
  %1266 = fadd fast float %1259, %1263
  %1267 = fadd fast float %1260, %1264
  %1268 = fadd fast float %1261, %1265
  %1269 = call float @dx.op.binary.f32(i32 35, float %1266, float 0.000000e+00)  ; FMax(a,b)
  %1270 = call float @dx.op.binary.f32(i32 35, float %1267, float 0.000000e+00)  ; FMax(a,b)
  %1271 = call float @dx.op.binary.f32(i32 35, float %1268, float 0.000000e+00)  ; FMax(a,b)
  %1272 = call float @dx.op.binary.f32(i32 36, float %1269, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1273 = call float @dx.op.binary.f32(i32 36, float %1270, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1274 = call float @dx.op.binary.f32(i32 36, float %1271, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1275 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 235)  ; CBufferLoadLegacy(handle,regIndex)
  %1276 = extractvalue %dx.types.CBufRet.f32 %1275, 0
  %1277 = extractvalue %dx.types.CBufRet.f32 %1275, 1
  %1278 = extractvalue %dx.types.CBufRet.f32 %1275, 2
  %1279 = fmul fast float %1276, %1272
  %1280 = fmul fast float %1277, %1273
  %1281 = fmul fast float %1278, %1274
  %1282 = fptosi float %1279 to i32
  %1283 = fptosi float %1280 to i32
  %1284 = fptosi float %1281 to i32
  %1285 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 4, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xU32>
  %1286 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1285, i32 0, i32 %1282, i32 %1283, i32 %1284, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1287 = extractvalue %dx.types.ResRet.i32 %1286, 0
  %1288 = extractvalue %dx.types.ResRet.i32 %1286, 1
  %1289 = extractvalue %dx.types.ResRet.i32 %1286, 2
  %1290 = extractvalue %dx.types.ResRet.i32 %1286, 3
  %1291 = uitofp i32 %1287 to float
  %1292 = uitofp i32 %1288 to float
  %1293 = uitofp i32 %1289 to float
  %1294 = uitofp i32 %1290 to float
  %1295 = extractvalue %dx.types.CBufRet.f32 %1275, 3
  %1296 = fadd fast float %1295, 1.000000e+00
  %1297 = fmul fast float %1296, %1291
  %1298 = fmul fast float %1296, %1292
  %1299 = fmul fast float %1296, %1293
  %1300 = fdiv fast float %1279, %1294
  %1301 = fdiv fast float %1280, %1294
  %1302 = fdiv fast float %1281, %1294
  %1303 = call float @dx.op.unary.f32(i32 22, float %1300)  ; Frc(value)
  %1304 = call float @dx.op.unary.f32(i32 22, float %1301)  ; Frc(value)
  %1305 = call float @dx.op.unary.f32(i32 22, float %1302)  ; Frc(value)
  %1306 = fmul fast float %1295, %1303
  %1307 = fmul fast float %1295, %1304
  %1308 = fmul fast float %1295, %1305
  %1309 = fadd fast float %1297, 5.000000e-01
  %1310 = fadd fast float %1309, %1306
  %1311 = fadd fast float %1298, 5.000000e-01
  %1312 = fadd fast float %1311, %1307
  %1313 = fadd fast float %1299, 5.000000e-01
  %1314 = fadd fast float %1313, %1308
  %1315 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 236)  ; CBufferLoadLegacy(handle,regIndex)
  %1316 = extractvalue %dx.types.CBufRet.f32 %1315, 0
  %1317 = extractvalue %dx.types.CBufRet.f32 %1315, 1
  %1318 = extractvalue %dx.types.CBufRet.f32 %1315, 2
  %1319 = fmul fast float %1310, %1316
  %1320 = fmul fast float %1312, %1317
  %1321 = fmul fast float %1314, %1318
  br label %1322

; <label>:1322                                    ; preds = %1254, %1240
  %1323 = phi float [ %1319, %1254 ], [ 0.000000e+00, %1240 ]
  %1324 = phi float [ %1320, %1254 ], [ 0.000000e+00, %1240 ]
  %1325 = phi float [ %1321, %1254 ], [ 0.000000e+00, %1240 ]
  %1326 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1327 = extractvalue %dx.types.CBufRet.f32 %1326, 0
  %1328 = extractvalue %dx.types.CBufRet.f32 %1326, 1
  %1329 = extractvalue %dx.types.CBufRet.f32 %1326, 3
  %1330 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1331 = extractvalue %dx.types.CBufRet.f32 %1330, 0
  %1332 = extractvalue %dx.types.CBufRet.f32 %1330, 1
  %1333 = extractvalue %dx.types.CBufRet.f32 %1330, 3
  %1334 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1335 = extractvalue %dx.types.CBufRet.f32 %1334, 0
  %1336 = extractvalue %dx.types.CBufRet.f32 %1334, 1
  %1337 = extractvalue %dx.types.CBufRet.f32 %1334, 3
  %1338 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %1339 = extractvalue %dx.types.CBufRet.f32 %1338, 0
  %1340 = extractvalue %dx.types.CBufRet.f32 %1338, 1
  %1341 = extractvalue %dx.types.CBufRet.f32 %1338, 3
  %1342 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 65)  ; CBufferLoadLegacy(handle,regIndex)
  %1343 = extractvalue %dx.types.CBufRet.f32 %1342, 0
  %1344 = extractvalue %dx.types.CBufRet.f32 %1342, 1
  %1345 = extractvalue %dx.types.CBufRet.f32 %1342, 2
  %1346 = fmul fast float %1343, 2.097152e+06
  %1347 = fmul fast float %1344, 2.097152e+06
  %1348 = fmul fast float %1345, 2.097152e+06
  %1349 = fsub fast float %569, %1346
  %1350 = fsub fast float %570, %1347
  %1351 = fsub fast float %571, %1348
  %1352 = fmul fast float %1349, %1327
  %1353 = call float @dx.op.tertiary.f32(i32 46, float %1350, float %1331, float %1352)  ; FMad(a,b,c)
  %1354 = call float @dx.op.tertiary.f32(i32 46, float %1351, float %1335, float %1353)  ; FMad(a,b,c)
  %1355 = fadd fast float %1354, %1339
  %1356 = fmul fast float %1349, %1328
  %1357 = call float @dx.op.tertiary.f32(i32 46, float %1350, float %1332, float %1356)  ; FMad(a,b,c)
  %1358 = call float @dx.op.tertiary.f32(i32 46, float %1351, float %1336, float %1357)  ; FMad(a,b,c)
  %1359 = fadd fast float %1358, %1340
  %1360 = fmul fast float %1349, %1329
  %1361 = call float @dx.op.tertiary.f32(i32 46, float %1350, float %1333, float %1360)  ; FMad(a,b,c)
  %1362 = call float @dx.op.tertiary.f32(i32 46, float %1351, float %1337, float %1361)  ; FMad(a,b,c)
  %1363 = fadd fast float %1362, %1341
  %1364 = fdiv fast float %1355, %1363
  %1365 = fdiv fast float %1359, %1363
  %1366 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %1367 = extractvalue %dx.types.CBufRet.f32 %1366, 0
  %1368 = fmul fast float %1367, %1363
  %1369 = extractvalue %dx.types.CBufRet.f32 %1366, 1
  %1370 = fadd fast float %1368, %1369
  %1371 = call float @dx.op.unary.f32(i32 23, float %1370)  ; Log(value)
  %1372 = extractvalue %dx.types.CBufRet.f32 %1366, 2
  %1373 = fmul fast float %1372, %1371
  %1374 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %36, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %1375 = extractvalue %dx.types.CBufRet.i32 %1374, 2
  %1376 = sitofp i32 %1375 to float
  %1377 = fdiv fast float %1373, %1376
  %1378 = fmul fast float %1364, 5.000000e-01
  %1379 = fmul fast float %1365, 5.000000e-01
  %1380 = fadd fast float %1378, 5.000000e-01
  %1381 = fsub fast float 5.000000e-01, %1379
  %1382 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1383 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1384 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1382, %dx.types.Handle %1383, float %1380, float %1381, float %1377, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1385 = extractvalue %dx.types.ResRet.f32 %1384, 0
  %1386 = extractvalue %dx.types.ResRet.f32 %1384, 1
  %1387 = extractvalue %dx.types.ResRet.f32 %1384, 2
  %1388 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1389 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1388, %dx.types.Handle %1383, float %1380, float %1381, float %1377, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1390 = extractvalue %dx.types.ResRet.f32 %1389, 0
  %1391 = extractvalue %dx.types.ResRet.f32 %1389, 1
  %1392 = extractvalue %dx.types.ResRet.f32 %1389, 2
  %1393 = call float @dx.op.dot3.f32(i32 55, float %1385, float %1386, float %1387, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1394 = fadd fast float %1393, 0x3EE4F8B580000000
  %1395 = fdiv fast float %1385, %1394
  %1396 = fdiv fast float %1386, %1394
  %1397 = fdiv fast float %1387, %1394
  %1398 = fmul fast float %1395, %1390
  %1399 = fmul fast float %1395, %1391
  %1400 = fmul fast float %1395, %1392
  %1401 = fmul fast float %1396, %1390
  %1402 = fmul fast float %1396, %1391
  %1403 = fmul fast float %1396, %1392
  %1404 = fmul fast float %1397, %1390
  %1405 = fmul fast float %1397, %1391
  %1406 = fmul fast float %1397, %1392
  %1407 = call float @dx.op.dot4.f32(i32 56, float %1385, float %1398, float %1399, float %1400, float 1.000000e+00, float %1245, float %1246, float %1247)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1408 = call float @dx.op.dot4.f32(i32 56, float %1386, float %1401, float %1402, float %1403, float 1.000000e+00, float %1245, float %1246, float %1247)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1409 = call float @dx.op.dot4.f32(i32 56, float %1387, float %1404, float %1405, float %1406, float 1.000000e+00, float %1245, float %1246, float %1247)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1410 = call float @dx.op.binary.f32(i32 35, float %1407, float 0.000000e+00)  ; FMax(a,b)
  %1411 = call float @dx.op.binary.f32(i32 35, float %1408, float 0.000000e+00)  ; FMax(a,b)
  %1412 = call float @dx.op.binary.f32(i32 35, float %1409, float 0.000000e+00)  ; FMax(a,b)
  %1413 = fadd fast float %1410, %1242
  %1414 = fadd fast float %1411, %1243
  %1415 = fadd fast float %1412, %1244
  %1416 = fcmp fast ogt float %1251, 0.000000e+00
  br i1 %1416, label %1417, label %1482

; <label>:1417                                    ; preds = %1322
  %1418 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1419 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1420 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1418, %dx.types.Handle %1419, float %1323, float %1324, float %1325, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1421 = extractvalue %dx.types.ResRet.f32 %1420, 0
  %1422 = extractvalue %dx.types.ResRet.f32 %1420, 1
  %1423 = extractvalue %dx.types.ResRet.f32 %1420, 2
  %1424 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1425 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1424, %dx.types.Handle %1419, float %1323, float %1324, float %1325, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1426 = extractvalue %dx.types.ResRet.f32 %1425, 0
  %1427 = extractvalue %dx.types.ResRet.f32 %1425, 1
  %1428 = extractvalue %dx.types.ResRet.f32 %1425, 2
  %1429 = fmul fast float %1426, 2.000000e+00
  %1430 = fmul fast float %1427, 2.000000e+00
  %1431 = fmul fast float %1428, 2.000000e+00
  %1432 = fadd fast float %1429, -1.000000e+00
  %1433 = fadd fast float %1430, -1.000000e+00
  %1434 = fadd fast float %1431, -1.000000e+00
  %1435 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1436 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1435, %dx.types.Handle %1419, float %1323, float %1324, float %1325, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1437 = extractvalue %dx.types.ResRet.f32 %1436, 0
  %1438 = extractvalue %dx.types.ResRet.f32 %1436, 1
  %1439 = extractvalue %dx.types.ResRet.f32 %1436, 2
  %1440 = fmul fast float %1437, 2.000000e+00
  %1441 = fmul fast float %1438, 2.000000e+00
  %1442 = fmul fast float %1439, 2.000000e+00
  %1443 = fadd fast float %1440, -1.000000e+00
  %1444 = fadd fast float %1441, -1.000000e+00
  %1445 = fadd fast float %1442, -1.000000e+00
  %1446 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1447 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1446, %dx.types.Handle %1419, float %1323, float %1324, float %1325, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1448 = extractvalue %dx.types.ResRet.f32 %1447, 0
  %1449 = extractvalue %dx.types.ResRet.f32 %1447, 1
  %1450 = extractvalue %dx.types.ResRet.f32 %1447, 2
  %1451 = fmul fast float %1448, 2.000000e+00
  %1452 = fmul fast float %1449, 2.000000e+00
  %1453 = fmul fast float %1450, 2.000000e+00
  %1454 = fadd fast float %1451, -1.000000e+00
  %1455 = fadd fast float %1452, -1.000000e+00
  %1456 = fadd fast float %1453, -1.000000e+00
  %1457 = fmul fast float %1421, 0x3FFBB67B80000000
  %1458 = fmul fast float %1457, %1432
  %1459 = fmul fast float %1457, %1433
  %1460 = fmul fast float %1457, %1434
  %1461 = fmul fast float %1422, 0x3FFBB67B80000000
  %1462 = fmul fast float %1461, %1443
  %1463 = fmul fast float %1461, %1444
  %1464 = fmul fast float %1461, %1445
  %1465 = fmul fast float %1423, 0x3FFBB67B80000000
  %1466 = fmul fast float %1465, %1454
  %1467 = fmul fast float %1465, %1455
  %1468 = fmul fast float %1465, %1456
  %1469 = fmul fast float %1251, 0x3FD45F3060000000
  %1470 = call float @dx.op.dot4.f32(i32 56, float %1421, float %1458, float %1459, float %1460, float 1.000000e+00, float %1245, float %1246, float %1247)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1471 = call float @dx.op.dot4.f32(i32 56, float %1422, float %1462, float %1463, float %1464, float 1.000000e+00, float %1245, float %1246, float %1247)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1472 = call float @dx.op.dot4.f32(i32 56, float %1423, float %1466, float %1467, float %1468, float 1.000000e+00, float %1245, float %1246, float %1247)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1473 = call float @dx.op.binary.f32(i32 35, float %1470, float 0.000000e+00)  ; FMax(a,b)
  %1474 = call float @dx.op.binary.f32(i32 35, float %1471, float 0.000000e+00)  ; FMax(a,b)
  %1475 = call float @dx.op.binary.f32(i32 35, float %1472, float 0.000000e+00)  ; FMax(a,b)
  %1476 = fmul fast float %1473, %1469
  %1477 = fmul fast float %1474, %1469
  %1478 = fmul fast float %1475, %1469
  %1479 = fadd fast float %1476, %1413
  %1480 = fadd fast float %1477, %1414
  %1481 = fadd fast float %1478, %1415
  br label %1482

; <label>:1482                                    ; preds = %1417, %1322
  %1483 = phi float [ %1479, %1417 ], [ %1413, %1322 ]
  %1484 = phi float [ %1480, %1417 ], [ %1414, %1322 ]
  %1485 = phi float [ %1481, %1417 ], [ %1415, %1322 ]
  %1486 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %35, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1487 = extractvalue %dx.types.CBufRet.i32 %1486, 0
  %1488 = extractvalue %dx.types.CBufRet.i32 %1486, 1
  %1489 = mul i32 %1487, %40
  %1490 = mul i32 %1488, %41
  %1491 = fmul fast float %497, %53
  %1492 = fadd fast float %1491, %54
  %1493 = call float @dx.op.unary.f32(i32 23, float %1492)  ; Log(value)
  %1494 = fmul fast float %1493, %55
  %1495 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1494)  ; FMax(a,b)
  %1496 = fptoui float %1495 to i32
  %1497 = add nsw i32 %49, -1
  %1498 = call i32 @dx.op.binary.i32(i32 40, i32 %1496, i32 %1497)  ; UMin(a,b)
  %1499 = and i32 %51, 31
  %1500 = lshr i32 %1489, %1499
  %1501 = lshr i32 %1490, %1499
  %1502 = mul i32 %1498, %48
  %1503 = add i32 %1502, %1501
  %1504 = mul i32 %1503, %47
  %1505 = add i32 %1504, %1500
  %1506 = shl i32 %1505, 1
  %1507 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1508 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1507, i32 %1506, i32 undef)  ; BufferLoad(srv,index,wot)
  %1509 = extractvalue %dx.types.ResRet.i32 %1508, 0
  %1510 = call i32 @dx.op.binary.i32(i32 40, i32 %1509, i32 %44)  ; UMin(a,b)
  %1511 = or i32 %1506, 1
  %1512 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1507, i32 %1511, i32 undef)  ; BufferLoad(srv,index,wot)
  %1513 = extractvalue %dx.types.ResRet.i32 %1512, 0
  %1514 = add i32 %40, 1
  %1515 = add i32 %41, 1
  %1516 = add i32 %42, 1
  %1517 = uitofp i32 %1514 to float
  %1518 = uitofp i32 %1515 to float
  %1519 = fadd fast float %474, %1517
  %1520 = fadd fast float %475, %1518
  %1521 = fdiv fast float %1519, %480
  %1522 = fdiv fast float %1520, %481
  %1523 = fmul fast float %1521, 2.000000e+00
  %1524 = fmul fast float %1522, 2.000000e+00
  %1525 = fadd fast float %1523, -1.000000e+00
  %1526 = fadd fast float %1524, -1.000000e+00
  %1527 = fsub fast float -0.000000e+00, %1526
  %1528 = uitofp i32 %1516 to float
  %1529 = fadd fast float %476, %1528
  %1530 = fdiv fast float %1529, %491
  %1531 = call float @dx.op.unary.f32(i32 21, float %1530)  ; Exp(value)
  %1532 = fsub fast float %1531, %494
  %1533 = fdiv fast float %1532, %496
  br i1 %500, label %1540, label %1534, !dx.controlflow.hints !50

; <label>:1534                                    ; preds = %1482
  %1535 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %1536 = extractvalue %dx.types.CBufRet.f32 %1535, 2
  %1537 = fmul fast float %1536, %1533
  %1538 = extractvalue %dx.types.CBufRet.f32 %498, 2
  %1539 = fadd fast float %1537, %1538
  br label %1547

; <label>:1540                                    ; preds = %1482
  %1541 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %1542 = extractvalue %dx.types.CBufRet.f32 %1541, 3
  %1543 = fadd fast float %1542, %1533
  %1544 = extractvalue %dx.types.CBufRet.f32 %1541, 2
  %1545 = fmul fast float %1543, %1544
  %1546 = fdiv fast float 1.000000e+00, %1545
  br label %1547

; <label>:1547                                    ; preds = %1540, %1534
  %1548 = phi float [ %1539, %1534 ], [ %1546, %1540 ]
  %1549 = fmul fast float %517, %1525
  %1550 = call float @dx.op.tertiary.f32(i32 46, float %1527, float %522, float %1549)  ; FMad(a,b,c)
  %1551 = call float @dx.op.tertiary.f32(i32 46, float %1548, float %527, float %1550)  ; FMad(a,b,c)
  %1552 = fadd fast float %1551, %532
  %1553 = fmul fast float %518, %1525
  %1554 = call float @dx.op.tertiary.f32(i32 46, float %1527, float %523, float %1553)  ; FMad(a,b,c)
  %1555 = call float @dx.op.tertiary.f32(i32 46, float %1548, float %528, float %1554)  ; FMad(a,b,c)
  %1556 = fadd fast float %1555, %533
  %1557 = fmul fast float %519, %1525
  %1558 = call float @dx.op.tertiary.f32(i32 46, float %1527, float %524, float %1557)  ; FMad(a,b,c)
  %1559 = call float @dx.op.tertiary.f32(i32 46, float %1548, float %529, float %1558)  ; FMad(a,b,c)
  %1560 = fadd fast float %1559, %534
  %1561 = fmul fast float %520, %1525
  %1562 = call float @dx.op.tertiary.f32(i32 46, float %1527, float %525, float %1561)  ; FMad(a,b,c)
  %1563 = call float @dx.op.tertiary.f32(i32 46, float %1548, float %530, float %1562)  ; FMad(a,b,c)
  %1564 = fadd fast float %1563, %535
  %1565 = fdiv fast float %1552, %1564
  %1566 = fdiv fast float %1556, %1564
  %1567 = fdiv fast float %1560, %1564
  %1568 = fsub fast float %552, %1565
  %1569 = fsub fast float %553, %1566
  %1570 = fsub fast float %554, %1567
  %1571 = fmul fast float %1568, %1568
  %1572 = fmul fast float %1569, %1569
  %1573 = fadd fast float %1572, %1571
  %1574 = fmul fast float %1570, %1570
  %1575 = fadd fast float %1573, %1574
  %1576 = call float @dx.op.unary.f32(i32 24, float %1575)  ; Sqrt(value)
  %1577 = extractvalue %dx.types.CBufRet.f32 %469, 2
  %1578 = fmul fast float %1577, %1576
  %1579 = call float @dx.op.binary.f32(i32 35, float %1578, float 1.000000e+00)  ; FMax(a,b)
  %1580 = fmul fast float %1579, %1579
  %1581 = icmp eq i32 %1510, 0
  br i1 %1581, label %1991, label %1582

; <label>:1582                                    ; preds = %1547
  br label %1583

; <label>:1583                                    ; preds = %1984, %1582
  %1584 = phi float [ %1985, %1984 ], [ %1483, %1582 ]
  %1585 = phi float [ %1986, %1984 ], [ %1484, %1582 ]
  %1586 = phi float [ %1987, %1984 ], [ %1485, %1582 ]
  %1587 = phi i32 [ %1988, %1984 ], [ 0, %1582 ]
  %1588 = add i32 %1587, %1513
  %1589 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1590 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1589, i32 %1588, i32 undef)  ; BufferLoad(srv,index,wot)
  %1591 = extractvalue %dx.types.ResRet.i32 %1590, 0
  %1592 = mul i32 %1591, 6
  %1593 = add i32 %1592, 4
  %1594 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 10, i32 1033 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<4xF32>
  %1595 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1594, i32 %1593, i32 undef)  ; BufferLoad(srv,index,wot)
  %1596 = extractvalue %dx.types.ResRet.f32 %1595, 0
  %1597 = extractvalue %dx.types.ResRet.f32 %1595, 1
  %1598 = extractvalue %dx.types.ResRet.f32 %1595, 2
  %1599 = add i32 %1592, 3
  %1600 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1594, i32 %1599, i32 undef)  ; BufferLoad(srv,index,wot)
  %1601 = extractvalue %dx.types.ResRet.f32 %1600, 3
  %1602 = add i32 %1592, 2
  %1603 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1594, i32 %1602, i32 undef)  ; BufferLoad(srv,index,wot)
  %1604 = extractvalue %dx.types.ResRet.f32 %1603, 0
  %1605 = extractvalue %dx.types.ResRet.f32 %1603, 1
  %1606 = extractvalue %dx.types.ResRet.f32 %1603, 2
  %1607 = or i32 %1592, 1
  %1608 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1594, i32 %1607, i32 undef)  ; BufferLoad(srv,index,wot)
  %1609 = extractvalue %dx.types.ResRet.f32 %1608, 0
  %1610 = extractvalue %dx.types.ResRet.f32 %1608, 1
  %1611 = extractvalue %dx.types.ResRet.f32 %1608, 2
  %1612 = extractvalue %dx.types.ResRet.f32 %1608, 3
  %1613 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1594, i32 %1592, i32 undef)  ; BufferLoad(srv,index,wot)
  %1614 = extractvalue %dx.types.ResRet.f32 %1613, 3
  %1615 = bitcast float %1601 to i32
  %1616 = lshr i32 %1615, 16
  %1617 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1616)  ; LegacyF16ToF32(value)
  %1618 = fcmp fast ogt float %1617, 0.000000e+00
  br i1 %1618, label %1619, label %1984

; <label>:1619                                    ; preds = %1583
  %1620 = extractvalue %dx.types.ResRet.f32 %1613, 2
  %1621 = extractvalue %dx.types.ResRet.f32 %1613, 1
  %1622 = extractvalue %dx.types.ResRet.f32 %1613, 0
  %1623 = extractvalue %dx.types.ResRet.f32 %1603, 3
  %1624 = extractvalue %dx.types.ResRet.f32 %1600, 2
  %1625 = extractvalue %dx.types.ResRet.f32 %1600, 0
  %1626 = add i32 %1592, 5
  %1627 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1594, i32 %1626, i32 undef)  ; BufferLoad(srv,index,wot)
  %1628 = extractvalue %dx.types.ResRet.f32 %1627, 3
  %1629 = bitcast float %1623 to i32
  %1630 = lshr i32 %1629, 16
  %1631 = and i32 %1630, 3
  %1632 = bitcast float %1625 to i32
  %1633 = and i32 %1632, 65535
  %1634 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1633)  ; LegacyF16ToF32(value)
  %1635 = lshr i32 %1632, 16
  %1636 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1635)  ; LegacyF16ToF32(value)
  %1637 = bitcast float %1624 to i32
  %1638 = and i32 %1637, 65535
  %1639 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1638)  ; LegacyF16ToF32(value)
  %1640 = fsub fast float -0.000000e+00, %1639
  %1641 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1615)  ; LegacyF16ToF32(value)
  %1642 = fsub fast float -0.000000e+00, %1641
  %1643 = fcmp fast oeq float %1612, 0.000000e+00
  %1644 = icmp eq i32 %1631, 2
  %1645 = icmp eq i32 %1631, 3
  %1646 = bitcast float %1628 to i32
  %1647 = and i32 %1646, 65535
  %1648 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1647)  ; LegacyF16ToF32(value)
  %1649 = lshr i32 %1646, 16
  %1650 = and i32 %1649, 1023
  %1651 = uitofp i32 %1650 to float
  %1652 = fmul fast float %1651, 9.765625e-04
  %1653 = fsub fast float %1622, %552
  %1654 = fsub fast float %1621, %553
  %1655 = fsub fast float %1620, %554
  %1656 = call float @dx.op.dot3.f32(i32 55, float %1653, float %1654, float %1655, float %1653, float %1654, float %1655)  ; Dot3(ax,ay,az,bx,by,bz)
  %1657 = call float @dx.op.unary.f32(i32 25, float %1656)  ; Rsqrt(value)
  %1658 = fmul fast float %1657, %1653
  %1659 = fmul fast float %1657, %1654
  %1660 = fmul fast float %1657, %1655
  br i1 %1643, label %1661, label %1668

; <label>:1661                                    ; preds = %1619
  %1662 = fmul fast float %1614, %1614
  %1663 = fmul fast float %1662, %1656
  %1664 = fmul fast float %1663, %1663
  %1665 = fsub fast float 1.000000e+00, %1664
  %1666 = call float @dx.op.unary.f32(i32 7, float %1665)  ; Saturate(value)
  %1667 = fmul fast float %1666, %1666
  br label %1678

; <label>:1668                                    ; preds = %1619
  %1669 = fmul fast float %1653, %1614
  %1670 = fmul fast float %1654, %1614
  %1671 = fmul fast float %1655, %1614
  %1672 = call float @dx.op.dot3.f32(i32 55, float %1669, float %1670, float %1671, float %1669, float %1670, float %1671)  ; Dot3(ax,ay,az,bx,by,bz)
  %1673 = call float @dx.op.unary.f32(i32 7, float %1672)  ; Saturate(value)
  %1674 = fsub fast float 1.000000e+00, %1673
  %1675 = call float @dx.op.unary.f32(i32 23, float %1674)  ; Log(value)
  %1676 = fmul fast float %1675, %1612
  %1677 = call float @dx.op.unary.f32(i32 21, float %1676)  ; Exp(value)
  br label %1678

; <label>:1678                                    ; preds = %1668, %1661
  %1679 = phi float [ %1667, %1661 ], [ %1677, %1668 ]
  br i1 %1644, label %1680, label %1687

; <label>:1680                                    ; preds = %1678
  %1681 = call float @dx.op.dot3.f32(i32 55, float %1658, float %1659, float %1660, float %1604, float %1605, float %1606)  ; Dot3(ax,ay,az,bx,by,bz)
  %1682 = fsub fast float %1681, %1634
  %1683 = fmul fast float %1682, %1636
  %1684 = call float @dx.op.unary.f32(i32 7, float %1683)  ; Saturate(value)
  %1685 = fmul fast float %1684, %1684
  %1686 = fmul fast float %1685, %1679
  br label %1687

; <label>:1687                                    ; preds = %1680, %1678
  %1688 = phi float [ %1686, %1680 ], [ %1679, %1678 ]
  br i1 %1645, label %1689, label %1693

; <label>:1689                                    ; preds = %1687
  %1690 = call float @dx.op.dot3.f32(i32 55, float %1604, float %1605, float %1606, float %1658, float %1659, float %1660)  ; Dot3(ax,ay,az,bx,by,bz)
  %1691 = fcmp fast olt float %1690, 0.000000e+00
  %1692 = select i1 %1691, float 0.000000e+00, float %1688
  br label %1693

; <label>:1693                                    ; preds = %1689, %1687
  %1694 = phi float [ %1692, %1689 ], [ %1688, %1687 ]
  br i1 %1645, label %1695, label %1927

; <label>:1695                                    ; preds = %1693
  %1696 = fmul fast float %1606, %1597
  %1697 = fmul fast float %1605, %1598
  %1698 = fsub fast float %1696, %1697
  %1699 = fmul fast float %1604, %1598
  %1700 = fmul fast float %1606, %1596
  %1701 = fsub fast float %1699, %1700
  %1702 = fmul fast float %1605, %1596
  %1703 = fmul fast float %1604, %1597
  %1704 = fsub fast float %1702, %1703
  %1705 = fcmp fast ogt float %1652, 0x3FA1EB8520000000
  br i1 %1705, label %1706, label %1801

; <label>:1706                                    ; preds = %1695
  %1707 = fmul fast float %1653, %1698
  %1708 = call float @dx.op.tertiary.f32(i32 46, float %1701, float %1654, float %1707)  ; FMad(a,b,c)
  %1709 = call float @dx.op.tertiary.f32(i32 46, float %1704, float %1655, float %1708)  ; FMad(a,b,c)
  %1710 = fmul fast float %1653, %1596
  %1711 = call float @dx.op.tertiary.f32(i32 46, float %1597, float %1654, float %1710)  ; FMad(a,b,c)
  %1712 = call float @dx.op.tertiary.f32(i32 46, float %1598, float %1655, float %1711)  ; FMad(a,b,c)
  %1713 = fmul fast float %1653, %1604
  %1714 = call float @dx.op.tertiary.f32(i32 46, float %1605, float %1654, float %1713)  ; FMad(a,b,c)
  %1715 = call float @dx.op.tertiary.f32(i32 46, float %1606, float %1655, float %1714)  ; FMad(a,b,c)
  %1716 = fmul fast float %1652, %1652
  %1717 = fsub fast float 1.000000e+00, %1716
  %1718 = call float @dx.op.unary.f32(i32 24, float %1717)  ; Sqrt(value)
  %1719 = fmul fast float %1652, %1648
  %1720 = call float @dx.op.binary.f32(i32 36, float %1715, float %1719)  ; FMin(a,b)
  %1721 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %1719)  ; FMax(a,b)
  %1722 = fdiv fast float %1720, %1721
  %1723 = fmul fast float %1718, %1648
  %1724 = fmul fast float %1723, %1722
  %1725 = fcmp fast ogt float %1709, 0.000000e+00
  %1726 = fcmp fast ogt float %1712, 0.000000e+00
  %1727 = fcmp fast olt float %1709, 0.000000e+00
  %1728 = fcmp fast olt float %1712, 0.000000e+00
  %1729 = zext i1 %1725 to i32
  %1730 = zext i1 %1726 to i32
  %1731 = zext i1 %1727 to i32
  %1732 = zext i1 %1728 to i32
  %1733 = sub nsw i32 %1729, %1731
  %1734 = sub nsw i32 %1730, %1732
  %1735 = sitofp i32 %1733 to float
  %1736 = sitofp i32 %1734 to float
  %1737 = fadd fast float %1724, %1639
  %1738 = fadd fast float %1724, %1641
  %1739 = call float @dx.op.unary.f32(i32 6, float %1709)  ; FAbs(value)
  %1740 = call float @dx.op.unary.f32(i32 6, float %1712)  ; FAbs(value)
  %1741 = call float @dx.op.binary.f32(i32 35, float %1739, float %1737)  ; FMax(a,b)
  %1742 = call float @dx.op.binary.f32(i32 35, float %1740, float %1738)  ; FMax(a,b)
  %1743 = fsub fast float %1640, %1724
  %1744 = fadd fast float %1743, %1741
  %1745 = fmul fast float %1744, %1735
  %1746 = fsub fast float %1642, %1724
  %1747 = fadd fast float %1746, %1742
  %1748 = fmul fast float %1747, %1736
  %1749 = fsub fast float %1715, %1720
  %1750 = call float @dx.op.binary.f32(i32 35, float %1749, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1751 = call float @dx.op.unary.f32(i32 6, float %1745)  ; FAbs(value)
  %1752 = call float @dx.op.unary.f32(i32 6, float %1748)  ; FAbs(value)
  %1753 = fdiv fast float %1751, %1750
  %1754 = fdiv fast float %1752, %1750
  %1755 = fmul fast float %1753, %1720
  %1756 = fmul fast float %1754, %1720
  %1757 = fsub fast float %1755, %1724
  %1758 = fsub fast float %1756, %1724
  %1759 = fsub fast float -0.000000e+00, %1735
  %1760 = fsub fast float -0.000000e+00, %1736
  %1761 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1759)  ; FMax(a,b)
  %1762 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1760)  ; FMax(a,b)
  %1763 = fmul fast float %1757, %1761
  %1764 = fmul fast float %1758, %1762
  %1765 = fsub fast float %1763, %1639
  %1766 = fsub fast float %1764, %1641
  %1767 = call float @dx.op.binary.f32(i32 35, float %1765, float %1640)  ; FMax(a,b)
  %1768 = call float @dx.op.binary.f32(i32 35, float %1766, float %1642)  ; FMax(a,b)
  %1769 = call float @dx.op.binary.f32(i32 36, float %1767, float %1639)  ; FMin(a,b)
  %1770 = call float @dx.op.binary.f32(i32 36, float %1768, float %1641)  ; FMin(a,b)
  %1771 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1735)  ; FMax(a,b)
  %1772 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1736)  ; FMax(a,b)
  %1773 = fmul fast float %1771, %1757
  %1774 = fmul fast float %1772, %1758
  %1775 = fsub fast float %1639, %1773
  %1776 = fsub fast float %1641, %1774
  %1777 = call float @dx.op.binary.f32(i32 35, float %1775, float %1640)  ; FMax(a,b)
  %1778 = call float @dx.op.binary.f32(i32 35, float %1776, float %1642)  ; FMax(a,b)
  %1779 = call float @dx.op.binary.f32(i32 36, float %1777, float %1639)  ; FMin(a,b)
  %1780 = call float @dx.op.binary.f32(i32 36, float %1778, float %1641)  ; FMin(a,b)
  %1781 = fadd fast float %1779, %1769
  %1782 = fadd fast float %1780, %1770
  %1783 = fmul fast float %1781, 5.000000e-01
  %1784 = fmul fast float %1782, 5.000000e-01
  %1785 = fsub fast float %1779, %1769
  %1786 = fsub fast float %1780, %1770
  %1787 = fmul fast float %1785, 5.000000e-01
  %1788 = fmul fast float %1786, 5.000000e-01
  %1789 = fmul fast float %1783, %1698
  %1790 = fmul fast float %1783, %1701
  %1791 = fmul fast float %1783, %1704
  %1792 = fsub fast float %1653, %1789
  %1793 = fsub fast float %1654, %1790
  %1794 = fsub fast float %1655, %1791
  %1795 = fmul fast float %1784, %1596
  %1796 = fmul fast float %1784, %1597
  %1797 = fmul fast float %1784, %1598
  %1798 = fsub fast float %1792, %1795
  %1799 = fsub fast float %1793, %1796
  %1800 = fsub fast float %1794, %1797
  br label %1801

; <label>:1801                                    ; preds = %1706, %1695
  %1802 = phi float [ %1798, %1706 ], [ %1653, %1695 ]
  %1803 = phi float [ %1799, %1706 ], [ %1654, %1695 ]
  %1804 = phi float [ %1800, %1706 ], [ %1655, %1695 ]
  %1805 = phi float [ %1787, %1706 ], [ %1639, %1695 ]
  %1806 = phi float [ %1788, %1706 ], [ %1641, %1695 ]
  %1807 = fcmp fast oeq float %1805, 0.000000e+00
  %1808 = fcmp fast oeq float %1806, 0.000000e+00
  %1809 = or i1 %1807, %1808
  br i1 %1809, label %1957, label %1810

; <label>:1810                                    ; preds = %1801
  %1811 = call float @dx.op.dot3.f32(i32 55, float %1698, float %1701, float %1704, float %1802, float %1803, float %1804)  ; Dot3(ax,ay,az,bx,by,bz)
  %1812 = call float @dx.op.dot3.f32(i32 55, float %1596, float %1597, float %1598, float %1802, float %1803, float %1804)  ; Dot3(ax,ay,az,bx,by,bz)
  %1813 = call float @dx.op.dot3.f32(i32 55, float %1604, float %1605, float %1606, float %1802, float %1803, float %1804)  ; Dot3(ax,ay,az,bx,by,bz)
  %1814 = fsub fast float %1811, %1805
  %1815 = fadd fast float %1811, %1805
  %1816 = fsub fast float %1812, %1806
  %1817 = fadd fast float %1812, %1806
  %1818 = fmul fast float %1813, %1813
  %1819 = call float @dx.op.dot2.f32(i32 54, float %1814, float %1816, float %1814, float %1816)  ; Dot2(ax,ay,bx,by)
  %1820 = fadd fast float %1819, %1818
  %1821 = call float @dx.op.unary.f32(i32 25, float %1820)  ; Rsqrt(value)
  %1822 = fmul fast float %1821, %1814
  %1823 = fmul fast float %1821, %1816
  %1824 = fmul fast float %1821, %1813
  %1825 = call float @dx.op.dot2.f32(i32 54, float %1815, float %1816, float %1815, float %1816)  ; Dot2(ax,ay,bx,by)
  %1826 = fadd fast float %1825, %1818
  %1827 = call float @dx.op.unary.f32(i32 25, float %1826)  ; Rsqrt(value)
  %1828 = fmul fast float %1827, %1815
  %1829 = fmul fast float %1827, %1816
  %1830 = fmul fast float %1827, %1813
  %1831 = call float @dx.op.dot2.f32(i32 54, float %1815, float %1817, float %1815, float %1817)  ; Dot2(ax,ay,bx,by)
  %1832 = fadd fast float %1831, %1818
  %1833 = call float @dx.op.unary.f32(i32 25, float %1832)  ; Rsqrt(value)
  %1834 = fmul fast float %1833, %1815
  %1835 = fmul fast float %1833, %1817
  %1836 = fmul fast float %1833, %1813
  %1837 = call float @dx.op.dot2.f32(i32 54, float %1814, float %1817, float %1814, float %1817)  ; Dot2(ax,ay,bx,by)
  %1838 = fadd fast float %1837, %1818
  %1839 = call float @dx.op.unary.f32(i32 25, float %1838)  ; Rsqrt(value)
  %1840 = fmul fast float %1839, %1814
  %1841 = fmul fast float %1839, %1817
  %1842 = fmul fast float %1839, %1813
  %1843 = call float @dx.op.dot3.f32(i32 55, float %1822, float %1823, float %1824, float %1828, float %1829, float %1830)  ; Dot3(ax,ay,az,bx,by,bz)
  %1844 = call float @dx.op.dot3.f32(i32 55, float %1828, float %1829, float %1830, float %1834, float %1835, float %1836)  ; Dot3(ax,ay,az,bx,by,bz)
  %1845 = call float @dx.op.dot3.f32(i32 55, float %1834, float %1835, float %1836, float %1840, float %1841, float %1842)  ; Dot3(ax,ay,az,bx,by,bz)
  %1846 = call float @dx.op.dot3.f32(i32 55, float %1840, float %1841, float %1842, float %1822, float %1823, float %1824)  ; Dot3(ax,ay,az,bx,by,bz)
  %1847 = fmul fast float %1843, 0x3FC6666660000000
  %1848 = fsub fast float 0x3FF921FF20000000, %1847
  %1849 = fadd fast float %1843, 1.000000e+00
  %1850 = call float @dx.op.unary.f32(i32 25, float %1849)  ; Rsqrt(value)
  %1851 = fmul fast float %1844, 0x3FC6666660000000
  %1852 = fsub fast float 0x3FF921FF20000000, %1851
  %1853 = fadd fast float %1844, 1.000000e+00
  %1854 = call float @dx.op.unary.f32(i32 25, float %1853)  ; Rsqrt(value)
  %1855 = fmul fast float %1854, %1852
  %1856 = fmul fast float %1845, 0x3FC6666660000000
  %1857 = fsub fast float 0x3FF921FF20000000, %1856
  %1858 = fadd fast float %1845, 1.000000e+00
  %1859 = call float @dx.op.unary.f32(i32 25, float %1858)  ; Rsqrt(value)
  %1860 = fmul fast float %1846, 0x3FC6666660000000
  %1861 = fsub fast float 0x3FF921FF20000000, %1860
  %1862 = fadd fast float %1846, 1.000000e+00
  %1863 = call float @dx.op.unary.f32(i32 25, float %1862)  ; Rsqrt(value)
  %1864 = fmul fast float %1863, %1861
  %1865 = fmul fast float %1848, %1850
  %1866 = fsub fast float -0.000000e+00, %1865
  %1867 = fmul fast float %1822, %1866
  %1868 = fmul fast float %1823, %1866
  %1869 = fmul fast float %1824, %1866
  %1870 = fmul fast float %1855, %1834
  %1871 = fmul fast float %1855, %1835
  %1872 = fmul fast float %1855, %1836
  %1873 = fadd fast float %1870, %1867
  %1874 = fadd fast float %1871, %1868
  %1875 = fadd fast float %1872, %1869
  %1876 = fmul fast float %1875, %1829
  %1877 = fmul fast float %1874, %1830
  %1878 = fsub fast float %1876, %1877
  %1879 = fmul fast float %1873, %1830
  %1880 = fmul fast float %1875, %1828
  %1881 = fsub fast float %1879, %1880
  %1882 = fmul fast float %1874, %1828
  %1883 = fmul fast float %1873, %1829
  %1884 = fsub fast float %1882, %1883
  %1885 = fmul fast float %1864, %1822
  %1886 = fmul fast float %1864, %1823
  %1887 = fmul fast float %1864, %1824
  %1888 = fmul fast float %1857, %1859
  %1889 = fsub fast float -0.000000e+00, %1888
  %1890 = fmul fast float %1834, %1889
  %1891 = fmul fast float %1835, %1889
  %1892 = fmul fast float %1836, %1889
  %1893 = fadd fast float %1885, %1890
  %1894 = fadd fast float %1886, %1891
  %1895 = fadd fast float %1887, %1892
  %1896 = fmul fast float %1895, %1841
  %1897 = fmul fast float %1894, %1842
  %1898 = fsub fast float %1896, %1897
  %1899 = fmul fast float %1893, %1842
  %1900 = fmul fast float %1895, %1840
  %1901 = fsub fast float %1899, %1900
  %1902 = fmul fast float %1894, %1840
  %1903 = fmul fast float %1893, %1841
  %1904 = fsub fast float %1902, %1903
  %1905 = fadd fast float %1898, %1878
  %1906 = fadd fast float %1901, %1881
  %1907 = fadd fast float %1904, %1884
  %1908 = fmul fast float %1905, %1698
  %1909 = fmul fast float %1905, %1701
  %1910 = fmul fast float %1905, %1704
  %1911 = fmul fast float %1906, %1596
  %1912 = fmul fast float %1906, %1597
  %1913 = fmul fast float %1906, %1598
  %1914 = fadd fast float %1908, %1911
  %1915 = fadd fast float %1909, %1912
  %1916 = fadd fast float %1910, %1913
  %1917 = fmul fast float %1907, %1604
  %1918 = fmul fast float %1907, %1605
  %1919 = fmul fast float %1907, %1606
  %1920 = fadd fast float %1914, %1917
  %1921 = fadd fast float %1915, %1918
  %1922 = fadd fast float %1916, %1919
  %1923 = call float @dx.op.dot3.f32(i32 55, float %1920, float %1921, float %1922, float %1920, float %1921, float %1922)  ; Dot3(ax,ay,az,bx,by,bz)
  %1924 = call float @dx.op.unary.f32(i32 25, float %1923)  ; Rsqrt(value)
  %1925 = fmul fast float %1923, 5.000000e-01
  %1926 = fmul fast float %1925, %1924
  br label %1957

; <label>:1927                                    ; preds = %1693
  %1928 = fmul fast float %1641, 5.000000e-01
  %1929 = fmul fast float %1928, %1596
  %1930 = fmul fast float %1928, %1597
  %1931 = fmul fast float %1928, %1598
  %1932 = fsub fast float %1653, %1929
  %1933 = fsub fast float %1654, %1930
  %1934 = fsub fast float %1655, %1931
  %1935 = fadd fast float %1929, %1653
  %1936 = fadd fast float %1930, %1654
  %1937 = fadd fast float %1931, %1655
  %1938 = fcmp fast ogt float %1641, 0.000000e+00
  %1939 = call float @dx.op.dot3.f32(i32 55, float %1932, float %1933, float %1934, float %1932, float %1933, float %1934)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %1938, label %1940, label %1951, !dx.controlflow.hints !53

; <label>:1940                                    ; preds = %1927
  %1941 = call float @dx.op.dot3.f32(i32 55, float %1935, float %1936, float %1937, float %1935, float %1936, float %1937)  ; Dot3(ax,ay,az,bx,by,bz)
  %1942 = call float @dx.op.unary.f32(i32 25, float %1939)  ; Rsqrt(value)
  %1943 = call float @dx.op.unary.f32(i32 25, float %1941)  ; Rsqrt(value)
  %1944 = fmul fast float %1943, %1942
  %1945 = call float @dx.op.dot3.f32(i32 55, float %1932, float %1933, float %1934, float %1935, float %1936, float %1937)  ; Dot3(ax,ay,az,bx,by,bz)
  %1946 = fmul fast float %1945, 5.000000e-01
  %1947 = fadd fast float %1946, %1580
  %1948 = fmul fast float %1947, %1944
  %1949 = fadd fast float %1948, 5.000000e-01
  %1950 = fdiv fast float %1944, %1949
  br label %1954

; <label>:1951                                    ; preds = %1927
  %1952 = fadd fast float %1939, %1580
  %1953 = fdiv fast float 1.000000e+00, %1952
  br label %1954

; <label>:1954                                    ; preds = %1951, %1940
  %1955 = phi float [ %1950, %1940 ], [ %1953, %1951 ]
  %1956 = select i1 %1643, float %1955, float 1.000000e+00
  br label %1957

; <label>:1957                                    ; preds = %1954, %1810, %1801
  %1958 = phi float [ %1956, %1954 ], [ 0.000000e+00, %1801 ], [ %1926, %1810 ]
  %1959 = fsub fast float -0.000000e+00, %585
  %1960 = fsub fast float -0.000000e+00, %586
  %1961 = fsub fast float -0.000000e+00, %587
  %1962 = call float @dx.op.dot3.f32(i32 55, float %1658, float %1659, float %1660, float %1959, float %1960, float %1961)  ; Dot3(ax,ay,az,bx,by,bz)
  %1963 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %1964 = extractvalue %dx.types.CBufRet.f32 %1963, 1
  %1965 = fmul fast float %1964, %1964
  %1966 = fsub fast float 1.000000e+00, %1965
  %1967 = fmul fast float %1962, 2.000000e+00
  %1968 = fadd fast float %1967, %1964
  %1969 = fmul fast float %1968, %1964
  %1970 = fadd fast float %1969, 1.000000e+00
  %1971 = call float @dx.op.unary.f32(i32 24, float %1970)  ; Sqrt(value)
  %1972 = fmul fast float %1971, 0x402921FB60000000
  %1973 = fmul fast float %1972, %1970
  %1974 = fdiv fast float %1966, %1973
  %1975 = fmul fast float %1694, %1617
  %1976 = fmul fast float %1975, %1958
  %1977 = fmul fast float %1976, %1974
  %1978 = fmul fast float %1977, %1609
  %1979 = fmul fast float %1977, %1610
  %1980 = fmul fast float %1977, %1611
  %1981 = fadd fast float %1978, %1584
  %1982 = fadd fast float %1979, %1585
  %1983 = fadd fast float %1980, %1586
  br label %1984

; <label>:1984                                    ; preds = %1957, %1583
  %1985 = phi float [ %1981, %1957 ], [ %1584, %1583 ]
  %1986 = phi float [ %1982, %1957 ], [ %1585, %1583 ]
  %1987 = phi float [ %1983, %1957 ], [ %1586, %1583 ]
  %1988 = add nuw i32 %1587, 1
  %1989 = icmp eq i32 %1988, %1510
  br i1 %1989, label %1990, label %1583, !llvm.loop !54

; <label>:1990                                    ; preds = %1984
  br label %1991

; <label>:1991                                    ; preds = %1990, %1547
  %1992 = phi float [ %1483, %1547 ], [ %1985, %1990 ]
  %1993 = phi float [ %1484, %1547 ], [ %1986, %1990 ]
  %1994 = phi float [ %1485, %1547 ], [ %1987, %1990 ]
  %1995 = add nuw nsw i32 %420, 1
  %1996 = icmp ult i32 %1995, %415
  br i1 %1996, label %416, label %1997

; <label>:1997                                    ; preds = %1991
  %1998 = uitofp i32 %415 to float
  %1999 = fdiv fast float %1992, %1998
  %2000 = fdiv fast float %1993, %1998
  %2001 = fdiv fast float %1994, %1998
  %2002 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %2003 = extractvalue %dx.types.CBufRet.f32 %2002, 2
  %2004 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2005 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2004, i32 0, i32 %40, i32 %41, i32 %42, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2006 = extractvalue %dx.types.ResRet.f32 %2005, 0
  %2007 = extractvalue %dx.types.ResRet.f32 %2005, 1
  %2008 = extractvalue %dx.types.ResRet.f32 %2005, 2
  %2009 = fmul fast float %2006, %2003
  %2010 = fmul fast float %2007, %2003
  %2011 = fmul fast float %2008, %2003
  %2012 = fadd fast float %2009, %1999
  %2013 = fadd fast float %2010, %2000
  %2014 = fadd fast float %2011, %2001
  %2015 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2016 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2015, i32 0, i32 %40, i32 %41, i32 %42, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2017 = extractvalue %dx.types.ResRet.f32 %2016, 0
  %2018 = extractvalue %dx.types.ResRet.f32 %2016, 1
  %2019 = extractvalue %dx.types.ResRet.f32 %2016, 2
  %2020 = extractvalue %dx.types.ResRet.f32 %2016, 3
  %2021 = call float @dx.op.dot3.f32(i32 55, float %2017, float %2018, float %2019, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %2022 = fadd fast float %2020, %2021
  %2023 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 86)  ; CBufferLoadLegacy(handle,regIndex)
  %2024 = extractvalue %dx.types.CBufRet.i32 %2023, 0
  %2025 = icmp eq i32 %2024, 0
  br i1 %2025, label %2032, label %2026, !dx.controlflow.hints !56

; <label>:2026                                    ; preds = %1997
  %2027 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2028 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2027, i32 0, i32 %40, i32 %41, i32 %42, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2029 = extractvalue %dx.types.ResRet.f32 %2028, 0
  %2030 = extractvalue %dx.types.ResRet.f32 %2028, 1
  %2031 = extractvalue %dx.types.ResRet.f32 %2028, 2
  br label %2032

; <label>:2032                                    ; preds = %2026, %1997
  %2033 = phi float [ %2029, %2026 ], [ 0.000000e+00, %1997 ]
  %2034 = phi float [ %2030, %2026 ], [ 0.000000e+00, %1997 ]
  %2035 = phi float [ %2031, %2026 ], [ 0.000000e+00, %1997 ]
  %2036 = extractvalue %dx.types.CBufRet.f32 %2002, 1
  %2037 = fmul fast float %2017, %2012
  %2038 = fmul fast float %2018, %2013
  %2039 = fmul fast float %2019, %2014
  %2040 = fadd fast float %2033, %2037
  %2041 = fadd fast float %2034, %2038
  %2042 = fadd fast float %2035, %2039
  %2043 = fmul fast float %2036, %2040
  %2044 = fmul fast float %2036, %2041
  %2045 = fmul fast float %2036, %2042
  %2046 = fcmp fast ogt float %401, 0.000000e+00
  br i1 %2046, label %2047, label %2073, !dx.controlflow.hints !57

; <label>:2047                                    ; preds = %2032
  %2048 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2049 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2050 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2048, %dx.types.Handle %2049, float %382, float %383, float %378, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2051 = extractvalue %dx.types.ResRet.f32 %2050, 0
  %2052 = extractvalue %dx.types.ResRet.f32 %2050, 1
  %2053 = extractvalue %dx.types.ResRet.f32 %2050, 2
  %2054 = extractvalue %dx.types.ResRet.f32 %2050, 3
  %2055 = extractvalue %dx.types.CBufRet.f32 %1248, 1
  %2056 = fmul fast float %2036, %2055
  %2057 = fmul fast float %2056, %2051
  %2058 = fmul fast float %2056, %2052
  %2059 = fmul fast float %2056, %2053
  %2060 = fmul fast float %2056, %2054
  %2061 = fsub fast float %2057, %2043
  %2062 = fsub fast float %2058, %2044
  %2063 = fsub fast float %2059, %2045
  %2064 = fsub fast float %2060, %2022
  %2065 = fmul fast float %2061, %401
  %2066 = fmul fast float %2062, %401
  %2067 = fmul fast float %2063, %401
  %2068 = fmul fast float %2064, %401
  %2069 = fadd fast float %2065, %2043
  %2070 = fadd fast float %2066, %2044
  %2071 = fadd fast float %2067, %2045
  %2072 = fadd fast float %2068, %2022
  br label %2073

; <label>:2073                                    ; preds = %2047, %2032
  %2074 = phi float [ %2069, %2047 ], [ %2043, %2032 ]
  %2075 = phi float [ %2070, %2047 ], [ %2044, %2032 ]
  %2076 = phi float [ %2071, %2047 ], [ %2045, %2032 ]
  %2077 = phi float [ %2072, %2047 ], [ %2022, %2032 ]
  %2078 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %35, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2079 = extractvalue %dx.types.CBufRet.i32 %2078, 0
  %2080 = extractvalue %dx.types.CBufRet.i32 %2078, 1
  %2081 = extractvalue %dx.types.CBufRet.i32 %2078, 2
  %2082 = icmp slt i32 %40, %2079
  %2083 = icmp slt i32 %41, %2080
  %2084 = icmp slt i32 %42, %2081
  %2085 = and i1 %2082, %2083
  %2086 = and i1 %2084, %2085
  br i1 %2086, label %2087, label %2101

; <label>:2087                                    ; preds = %2073
  %2088 = bitcast float %2074 to i32
  %2089 = bitcast float %2075 to i32
  %2090 = bitcast float %2076 to i32
  %2091 = bitcast float %2077 to i32
  %2092 = icmp ult i32 %2088, 2139095040
  %2093 = icmp ult i32 %2089, 2139095040
  %2094 = icmp ult i32 %2090, 2139095040
  %2095 = icmp ult i32 %2091, 2139095040
  %2096 = select i1 %2092, float %2074, float 0.000000e+00
  %2097 = select i1 %2093, float %2075, float 0.000000e+00
  %2098 = select i1 %2094, float %2076, float 0.000000e+00
  %2099 = select i1 %2095, float %2077, float 0.000000e+00
  %2100 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2100, i32 %40, i32 %41, i32 %42, float %2096, float %2097, float %2098, float %2099, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %2101

; <label>:2101                                    ; preds = %2087, %2073, %207
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!46}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !31, !33, !39}
!5 = !{!6, !8, !10, !11, !12, !13, !14, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30}
!6 = !{i32 0, %"class.Texture3D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 5}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 4, i32 0, !9}
!11 = !{i32 3, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 4, i32 0, !9}
!12 = !{i32 4, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 4, i32 0, !9}
!13 = !{i32 5, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 5, i32 1, i32 11, i32 0, null}
!14 = !{i32 6, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 6, i32 1, i32 12, i32 0, !15}
!15 = !{i32 1, i32 4}
!16 = !{i32 7, %"class.Texture2DArray<unsigned int>"* undef, !"", i32 0, i32 7, i32 1, i32 7, i32 0, !7}
!17 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 2, i32 0, !9}
!18 = !{i32 9, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 2, i32 0, !9}
!19 = !{i32 10, %"class.Buffer<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 10, i32 0, !9}
!20 = !{i32 11, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 11, i32 1, i32 10, i32 0, !7}
!21 = !{i32 12, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 12, i32 1, i32 10, i32 0, !7}
!22 = !{i32 13, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 4, i32 0, !9}
!23 = !{i32 14, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 4, i32 0, !9}
!24 = !{i32 15, %"class.Texture2D<float>"* undef, !"", i32 0, i32 15, i32 1, i32 2, i32 0, !9}
!25 = !{i32 16, %"class.Texture2D<float>"* undef, !"", i32 0, i32 16, i32 1, i32 2, i32 0, !9}
!26 = !{i32 17, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 17, i32 1, i32 4, i32 0, !9}
!27 = !{i32 18, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 18, i32 1, i32 4, i32 0, !9}
!28 = !{i32 19, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 19, i32 1, i32 4, i32 0, !9}
!29 = !{i32 20, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 20, i32 1, i32 4, i32 0, !9}
!30 = !{i32 21, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 21, i32 1, i32 2, i32 0, !9}
!31 = !{!32}
!32 = !{i32 0, %"class.RWTexture3D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i1 false, i1 false, i1 false, !9}
!33 = !{!34, !35, !36, !37, !38}
!34 = !{i32 0, %hostlayout._RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 1380, null}
!35 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!36 = !{i32 2, %hostlayout.UniformBufferConstants_ForwardLightData* undef, !"", i32 0, i32 2, i32 1, i32 708, null}
!37 = !{i32 3, %UniformBufferConstants_LumenGIVolumeStruct* undef, !"", i32 0, i32 3, i32 1, i32 572, null}
!38 = !{i32 4, %UniformBufferConstants_VolumetricFog* undef, !"", i32 0, i32 4, i32 1, i32 104, null}
!39 = !{!40, !41, !42, !43, !44, !45}
!40 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!41 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!42 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!43 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!44 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!45 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 5, i32 1, i32 0, null}
!46 = !{void ()* @LightScatteringCS, !"LightScatteringCS", null, !4, !47}
!47 = !{i32 0, i64 16, i32 4, !48, i32 5, !49}
!48 = !{i32 4, i32 4, i32 4}
!49 = !{i32 0}
!50 = distinct !{!50, !"dx.controlflow.hints", i32 2}
!51 = distinct !{!51, !"dx.controlflow.hints", i32 1}
!52 = distinct !{!52, !"dx.controlflow.hints", i32 1}
!53 = distinct !{!53, !"dx.controlflow.hints", i32 1}
!54 = distinct !{!54, !55}
!55 = !{!"llvm.loop.unroll.disable"}
!56 = distinct !{!56, !"dx.controlflow.hints", i32 1}
!57 = distinct !{!57, !"dx.controlflow.hints", i32 1}
