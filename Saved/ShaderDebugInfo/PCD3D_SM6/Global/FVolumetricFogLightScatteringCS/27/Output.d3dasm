;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 093806008d307372b1de64c97588bc00
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(4,4,4)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct hostlayout._RootShaderParameters
;   {
;
;       row_major float4x4 UnjitteredClipToTranslatedWorld;; Offset:   64
;       row_major float4x4 UnjitteredPrevTranslatedWorldToClip;; Offset:  128
;       float4 FrameJitterOffsets[16];                ; Offset:  192
;       float HistoryWeight;                          ; Offset:  448
;       uint HistoryMissSuperSampleCount;             ; Offset:  452
;       float AOObjectMaxDistance;                    ; Offset:  592
;       float AOStepScale;                            ; Offset:  596
;       float AOStepExponentScale;                    ; Offset:  600
;       float AOMaxViewDistance;                      ; Offset:  604
;       float AOGlobalMaxOcclusionDistance;           ; Offset:  608
;       float4 GlobalVolumeTranslatedCenterAndExtent[6];; Offset:  656
;       float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset:  752
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset:  848
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset:  944
;       float GlobalDistanceFieldMipFactor;           ; Offset: 1040
;       float GlobalDistanceFieldMipTransition;       ; Offset: 1044
;       uint GlobalDistanceFieldClipmapSizeInPages;   ; Offset: 1048
;       float3 GlobalDistanceFieldInvPageAtlasSize;   ; Offset: 1056
;       float3 GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 1072
;       float GlobalVolumeDimension;                  ; Offset: 1084
;       float GlobalVolumeTexelSize;                  ; Offset: 1088
;       float MaxGlobalDFAOConeDistance;              ; Offset: 1092
;       uint NumGlobalSDFClipmaps;                    ; Offset: 1096
;       float CoveredExpandSurfaceScale;              ; Offset: 1100
;       float NotCoveredExpandSurfaceScale;           ; Offset: 1104
;       float NotCoveredMinStepScale;                 ; Offset: 1108
;       float DitheredTransparencyStepThreshold;      ; Offset: 1112
;       float DitheredTransparencyTraceThreshold;     ; Offset: 1116
;       float4 SkySH[3];                              ; Offset: 1136
;       row_major float4x4 DirectionalLightFunctionTranslatedWorldToShadow;; Offset: 1184
;       float2 PrevConservativeDepthTextureSize;      ; Offset: 1312
;       float2 UseHeightFogColors;                    ; Offset: 1320
;       float2 LightScatteringHistoryPreExposureAndInv;; Offset: 1328
;       float StaticLightingScatteringIntensity;      ; Offset: 1336
;       float SkyLightVolumetricScatteringIntensity;  ; Offset: 1340
;       float SkyLightUseStaticShadowing;             ; Offset: 1344
;       float PhaseG;                                 ; Offset: 1348
;       float InverseSquaredLightDistanceBiasScale;   ; Offset: 1352
;       float LightScatteringSampleJitterMultiplier;  ; Offset: 1356
;       float UseDirectionalLightShadowing;           ; Offset: 1368
;       uint UseConservativeDepthTexture;             ; Offset: 1372
;       uint UseEmissive;                             ; Offset: 1376
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:  1380
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_ForwardLightData
; {
;
;   struct hostlayout.UniformBufferConstants_ForwardLightData
;   {
;
;       uint ForwardLightData_NumLocalLights;         ; Offset:    0
;       uint ForwardLightData_NumReflectionCaptures;  ; Offset:    4
;       uint ForwardLightData_HasDirectionalLight;    ; Offset:    8
;       uint ForwardLightData_NumGridCells;           ; Offset:   12
;       int3 ForwardLightData_CulledGridSize;         ; Offset:   16
;       uint ForwardLightData_MaxCulledLightsPerCell; ; Offset:   28
;       uint ForwardLightData_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_ForwardLightData_36;          ; Offset:   36
;       uint PrePadding_ForwardLightData_40;          ; Offset:   40
;       uint PrePadding_ForwardLightData_44;          ; Offset:   44
;       float3 ForwardLightData_LightGridZParams;     ; Offset:   48
;       float PrePadding_ForwardLightData_60;         ; Offset:   60
;       float3 ForwardLightData_DirectionalLightDirection;; Offset:   64
;       float ForwardLightData_DirectionalLightSourceRadius;; Offset:   76
;       float3 ForwardLightData_DirectionalLightColor;; Offset:   80
;       float ForwardLightData_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint ForwardLightData_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_ForwardLightData_100;         ; Offset:  100
;       float2 ForwardLightData_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint ForwardLightData_NumDirectionalLightCascades;; Offset:  112
;       int ForwardLightData_DirectionalLightVSM;     ; Offset:  116
;       int PrePadding_ForwardLightData_120;          ; Offset:  120
;       int PrePadding_ForwardLightData_124;          ; Offset:  124
;       float4 ForwardLightData_CascadeEndDepths;     ; Offset:  128
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 ForwardLightData_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float ForwardLightData_DirectionalLightDepthBias;; Offset:  480
;       uint ForwardLightData_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint ForwardLightData_SimpleLightsEndIndex;   ; Offset:  488
;       uint ForwardLightData_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint ForwardLightData_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_ForwardLightData_500;         ; Offset:  500
;       uint PrePadding_ForwardLightData_504;         ; Offset:  504
;       uint PrePadding_ForwardLightData_508;         ; Offset:  508
;       float4 ForwardLightData_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint ForwardLightData_DirectLightingShowFlag; ; Offset:  592
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_604;; Offset:  604
;       float ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_ForwardLightData_644;         ; Offset:  644
;       uint PrePadding_ForwardLightData_648;         ; Offset:  648
;       uint PrePadding_ForwardLightData_652;         ; Offset:  652
;       uint BindlessResource_ForwardLightData_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_ForwardLightData_660;         ; Offset:  660
;       uint BindlessSampler_ForwardLightData_ShadowmapSampler;; Offset:  664
;       uint PrePadding_ForwardLightData_668;         ; Offset:  668
;       uint BindlessResource_ForwardLightData_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_ForwardLightData_676;         ; Offset:  676
;       uint BindlessSampler_ForwardLightData_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_ForwardLightData_684;         ; Offset:  684
;       uint BindlessResource_ForwardLightData_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_ForwardLightData_692;         ; Offset:  692
;       uint BindlessResource_ForwardLightData_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_ForwardLightData_700;         ; Offset:  700
;       uint BindlessResource_ForwardLightData_CulledLightDataGrid;; Offset:  704
;   
;   } UniformBufferConstants_ForwardLightData;        ; Offset:    0 Size:   708
;
; }
;
; cbuffer UniformBufferConstants_LumenGIVolumeStruct
; {
;
;   struct UniformBufferConstants_LumenGIVolumeStruct
;   {
;
;       float LumenGIVolumeStruct_ReprojectionRadiusScale;; Offset:    0
;       float LumenGIVolumeStruct_ClipmapWorldExtent; ; Offset:    4
;       float LumenGIVolumeStruct_ClipmapDistributionBase;; Offset:    8
;       float LumenGIVolumeStruct_InvClipmapFadeSize; ; Offset:   12
;       int2 LumenGIVolumeStruct_ProbeAtlasResolutionInProbes;; Offset:   16
;       uint LumenGIVolumeStruct_RadianceProbeClipmapResolution;; Offset:   24
;       uint LumenGIVolumeStruct_NumRadianceProbeClipmaps;; Offset:   28
;       uint LumenGIVolumeStruct_RadianceProbeResolution;; Offset:   32
;       uint LumenGIVolumeStruct_FinalProbeResolution;; Offset:   36
;       uint LumenGIVolumeStruct_FinalRadianceAtlasMaxMip;; Offset:   40
;       uint LumenGIVolumeStruct_CalculateIrradiance; ; Offset:   44
;       uint LumenGIVolumeStruct_IrradianceProbeResolution;; Offset:   48
;       uint LumenGIVolumeStruct_OcclusionProbeResolution;; Offset:   52
;       uint LumenGIVolumeStruct_NumProbesToTraceBudget;; Offset:   56
;       uint LumenGIVolumeStruct_RadianceCacheStats;  ; Offset:   60
;       uint BindlessResource_LumenGIVolumeStruct_RadianceProbeIndirectionTexture;; Offset:   64
;       uint PrePadding_LumenGIVolumeStruct_68;       ; Offset:   68
;       uint BindlessResource_LumenGIVolumeStruct_RadianceCacheFinalRadianceAtlas;; Offset:   72
;       uint PrePadding_LumenGIVolumeStruct_76;       ; Offset:   76
;       uint BindlessResource_LumenGIVolumeStruct_RadianceCacheFinalIrradianceAtlas;; Offset:   80
;       uint PrePadding_LumenGIVolumeStruct_84;       ; Offset:   84
;       uint BindlessResource_LumenGIVolumeStruct_RadianceCacheProbeOcclusionAtlas;; Offset:   88
;       uint PrePadding_LumenGIVolumeStruct_92;       ; Offset:   92
;       uint BindlessResource_LumenGIVolumeStruct_RadianceCacheDepthAtlas;; Offset:   96
;       uint PrePadding_LumenGIVolumeStruct_100;      ; Offset:  100
;       uint BindlessResource_LumenGIVolumeStruct_ProbeWorldOffset;; Offset:  104
;       uint PrePadding_LumenGIVolumeStruct_108;      ; Offset:  108
;       float4 LumenGIVolumeStruct_RadianceProbeSettings[6];; Offset:  112
;       float4 LumenGIVolumeStruct_PaddedWorldPositionToRadianceProbeCoordBias[6];; Offset:  208
;       float4 LumenGIVolumeStruct_PaddedRadianceProbeCoordToWorldPositionBias[6];; Offset:  304
;       float2 LumenGIVolumeStruct_InvProbeFinalRadianceAtlasResolution;; Offset:  400
;       float2 LumenGIVolumeStruct_InvProbeFinalIrradianceAtlasResolution;; Offset:  408
;       float2 LumenGIVolumeStruct_InvProbeDepthAtlasResolution;; Offset:  416
;       uint LumenGIVolumeStruct_OverrideCacheOcclusionLighting;; Offset:  424
;       uint LumenGIVolumeStruct_ShowBlackRadianceCacheLighting;; Offset:  428
;       uint LumenGIVolumeStruct_ProbeAtlasResolutionModuloMask;; Offset:  432
;       uint LumenGIVolumeStruct_ProbeAtlasResolutionDivideShift;; Offset:  436
;       float PrePadding_LumenGIVolumeStruct_440;     ; Offset:  440
;       float PrePadding_LumenGIVolumeStruct_444;     ; Offset:  444
;       uint BindlessResource_LumenGIVolumeStruct_Radiance;; Offset:  448
;       uint PrePadding_LumenGIVolumeStruct_452;      ; Offset:  452
;       uint BindlessResource_LumenGIVolumeStruct_Normal;; Offset:  456
;       uint PrePadding_LumenGIVolumeStruct_460;      ; Offset:  460
;       uint BindlessResource_LumenGIVolumeStruct_SceneDepth;; Offset:  464
;       uint PrePadding_LumenGIVolumeStruct_468;      ; Offset:  468
;       uint LumenGIVolumeStruct_Enabled;             ; Offset:  472
;       float LumenGIVolumeStruct_RelativeDepthThreshold;; Offset:  476
;       float LumenGIVolumeStruct_SpecularScale;      ; Offset:  480
;       float LumenGIVolumeStruct_Contrast;           ; Offset:  484
;       float PrePadding_LumenGIVolumeStruct_488;     ; Offset:  488
;       float PrePadding_LumenGIVolumeStruct_492;     ; Offset:  492
;       uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolume0;; Offset:  496
;       uint PrePadding_LumenGIVolumeStruct_500;      ; Offset:  500
;       uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolume1;; Offset:  504
;       uint PrePadding_LumenGIVolumeStruct_508;      ; Offset:  508
;       uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolumeHistory0;; Offset:  512
;       uint PrePadding_LumenGIVolumeStruct_516;      ; Offset:  516
;       uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolumeHistory1;; Offset:  520
;       uint PrePadding_LumenGIVolumeStruct_524;      ; Offset:  524
;       uint BindlessSampler_LumenGIVolumeStruct_TranslucencyGIVolumeSampler;; Offset:  528
;       uint PrePadding_LumenGIVolumeStruct_532;      ; Offset:  532
;       uint PrePadding_LumenGIVolumeStruct_536;      ; Offset:  536
;       uint PrePadding_LumenGIVolumeStruct_540;      ; Offset:  540
;       float3 LumenGIVolumeStruct_TranslucencyGIGridZParams;; Offset:  544
;       uint LumenGIVolumeStruct_TranslucencyGIGridPixelSizeShift;; Offset:  556
;       int3 LumenGIVolumeStruct_TranslucencyGIGridSize;; Offset:  560
;   
;   } UniformBufferConstants_LumenGIVolumeStruct;     ; Offset:    0 Size:   572
;
; }
;
; cbuffer UniformBufferConstants_VolumetricFog
; {
;
;   struct UniformBufferConstants_VolumetricFog
;   {
;
;       int3 VolumetricFog_GridSizeInt;               ; Offset:    0
;       int PrePadding_VolumetricFog_12;              ; Offset:   12
;       float3 VolumetricFog_GridSize;                ; Offset:   16
;       float PrePadding_VolumetricFog_28;            ; Offset:   28
;       float3 VolumetricFog_GridZParams;             ; Offset:   32
;       float PrePadding_VolumetricFog_44;            ; Offset:   44
;       float2 VolumetricFog_SVPosToVolumeUV;         ; Offset:   48
;       float VolumetricFog_MaxDistance;              ; Offset:   56
;       float PrePadding_VolumetricFog_60;            ; Offset:   60
;       float3 VolumetricFog_HeightFogInscatteringColor;; Offset:   64
;       float PrePadding_VolumetricFog_76;            ; Offset:   76
;       float3 VolumetricFog_HeightFogDirectionalLightInscatteringColor;; Offset:   80
;       float PrePadding_VolumetricFog_92;            ; Offset:   92
;       int2 VolumetricFog_FogGridToPixelXY;          ; Offset:   96
;   
;   } UniformBufferConstants_VolumetricFog;           ; Offset:    0 Size:   104
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_ForwardLightData   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_LumenGIVolumeStruct   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_VolumetricFog   cbuffer      NA          NA     CB4            cb4     1
; View_SharedBilinearClampedSampler   sampler      NA          NA      S0             s0     1
; ForwardLightData_ShadowmapSampler   sampler      NA          NA      S1             s1     1
; ForwardLightData_StaticShadowmapSampler   sampler      NA          NA      S2             s2     1
; LumenGIVolumeStruct_TranslucencyGIVolumeSampler   sampler      NA          NA      S3             s3     1
; LightFunctionSampler              sampler      NA          NA      S4             s4     1
; View_VolumetricLightmapIndirectionTexture   texture     u32          3d      T0             t0     1
; View_VolumetricLightmapBrickAmbientVector   texture     f32          3d      T1             t1     1
; View_VolumetricLightmapBrickSHCoefficients0   texture     f32          3d      T2             t2     1
; View_VolumetricLightmapBrickSHCoefficients2   texture     f32          3d      T3             t3     1
; View_VolumetricLightmapBrickSHCoefficients4   texture     f32          3d      T4             t4     1
; ForwardLightData_DirectionalLightShadowmapAtlas   texture     f32          2d      T5             t5     1
; ForwardLightData_DirectionalLightStaticShadowmap   texture     f32          2d      T6             t6     1
; ForwardLightData_ForwardLocalLightBuffer   texture     f32         buf      T7             t7     1
; ForwardLightData_NumCulledLightsGrid   texture     u32         buf      T8             t8     1
; ForwardLightData_CulledLightDataGrid   texture     u32         buf      T9             t9     1
; LumenGIVolumeStruct_TranslucencyGIVolume0   texture     f32          3d     T10            t10     1
; LumenGIVolumeStruct_TranslucencyGIVolume1   texture     f32          3d     T11            t11     1
; ConservativeDepthTexture          texture     f32          2d     T12            t12     1
; VBufferA                          texture     f32          3d     T13            t13     1
; VBufferB                          texture     f32          3d     T14            t14     1
; LocalShadowedLightScattering      texture     f32          3d     T15            t15     1
; LightFunctionTexture              texture     f32          2d     T16            t16     1
; RWLightScattering                     UAV     f32          3d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.Texture3D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture3D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture3D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Buffer<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%"class.RWTexture3D<vector<float, 4> >" = type { <4 x float> }
%hostlayout._RootShaderParameters = type { [4 x <4 x float>], [4 x <4 x float>], [16 x <4 x float>], float, i32, float, float, float, float, float, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, <3 x float>, <3 x float>, float, float, float, i32, float, float, float, float, float, [3 x <4 x float>], [4 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, float, float, float, float, float, float, float, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%hostlayout.UniformBufferConstants_ForwardLightData = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_LumenGIVolumeStruct = type { float, float, float, float, <2 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, i32, <3 x i32> }
%UniformBufferConstants_VolumetricFog = type { <3 x i32>, i32, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, <3 x float>, float, <3 x float>, float, <2 x i32> }
%struct.SamplerState = type { i32 }

define void @LightScatteringCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 13, i32 104 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %30 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 13, i32 572 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %31 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 708 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %32 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %33 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 13, i32 1380 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %34 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %35 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %36 = call i32 @dx.op.threadId.i32(i32 93, i32 2)  ; ThreadId(component)
  %37 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %31, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %38 = extractvalue %dx.types.CBufRet.i32 %37, 0
  %39 = extractvalue %dx.types.CBufRet.i32 %37, 2
  %40 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %31, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %41 = extractvalue %dx.types.CBufRet.i32 %40, 0
  %42 = extractvalue %dx.types.CBufRet.i32 %40, 1
  %43 = extractvalue %dx.types.CBufRet.i32 %40, 2
  %44 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %31, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %45 = extractvalue %dx.types.CBufRet.i32 %44, 0
  %46 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %47 = extractvalue %dx.types.CBufRet.f32 %46, 0
  %48 = extractvalue %dx.types.CBufRet.f32 %46, 1
  %49 = extractvalue %dx.types.CBufRet.f32 %46, 2
  %50 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %51 = extractvalue %dx.types.CBufRet.f32 %50, 0
  %52 = extractvalue %dx.types.CBufRet.f32 %50, 1
  %53 = extractvalue %dx.types.CBufRet.f32 %50, 2
  %54 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %55 = extractvalue %dx.types.CBufRet.f32 %54, 0
  %56 = extractvalue %dx.types.CBufRet.f32 %54, 1
  %57 = extractvalue %dx.types.CBufRet.f32 %54, 2
  %58 = extractvalue %dx.types.CBufRet.f32 %54, 3
  %59 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %31, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %60 = extractvalue %dx.types.CBufRet.i32 %59, 0
  %61 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %62 = extractvalue %dx.types.CBufRet.f32 %61, 0
  %63 = extractvalue %dx.types.CBufRet.f32 %61, 1
  %64 = extractvalue %dx.types.CBufRet.f32 %61, 2
  %65 = extractvalue %dx.types.CBufRet.f32 %61, 3
  %66 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %67 = extractvalue %dx.types.CBufRet.f32 %66, 0
  %68 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %31, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %69 = extractvalue %dx.types.CBufRet.i32 %68, 1
  %70 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %71 = extractvalue %dx.types.CBufRet.f32 %70, 0
  %72 = extractvalue %dx.types.CBufRet.f32 %70, 1
  %73 = extractvalue %dx.types.CBufRet.f32 %70, 2
  %74 = extractvalue %dx.types.CBufRet.f32 %70, 3
  %75 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %76 = extractvalue %dx.types.CBufRet.f32 %75, 0
  %77 = extractvalue %dx.types.CBufRet.f32 %75, 1
  %78 = extractvalue %dx.types.CBufRet.f32 %75, 2
  %79 = extractvalue %dx.types.CBufRet.f32 %75, 3
  %80 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %81 = extractvalue %dx.types.CBufRet.f32 %80, 0
  %82 = extractvalue %dx.types.CBufRet.f32 %80, 1
  %83 = extractvalue %dx.types.CBufRet.f32 %80, 2
  %84 = extractvalue %dx.types.CBufRet.f32 %80, 3
  %85 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 36)  ; CBufferLoadLegacy(handle,regIndex)
  %86 = extractvalue %dx.types.CBufRet.f32 %85, 0
  %87 = extractvalue %dx.types.CBufRet.f32 %85, 1
  %88 = extractvalue %dx.types.CBufRet.f32 %85, 2
  %89 = extractvalue %dx.types.CBufRet.f32 %85, 3
  %90 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %33, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %91 = extractvalue %dx.types.CBufRet.i32 %90, 3
  %92 = icmp eq i32 %91, 0
  %93 = uitofp i32 %34 to float
  %94 = uitofp i32 %35 to float
  %95 = uitofp i32 %36 to float
  br i1 %92, label %202, label %96

; <label>:96                                      ; preds = %0
  %97 = fadd fast float %93, 5.000000e-01
  %98 = fadd fast float %94, 5.000000e-01
  %99 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %100 = extractvalue %dx.types.CBufRet.f32 %99, 0
  %101 = extractvalue %dx.types.CBufRet.f32 %99, 1
  %102 = fdiv fast float %97, %100
  %103 = fdiv fast float %98, %101
  %104 = fmul fast float %102, 2.000000e+00
  %105 = fmul fast float %103, 2.000000e+00
  %106 = fadd fast float %104, -1.000000e+00
  %107 = fadd fast float %105, -1.000000e+00
  %108 = fsub fast float -0.000000e+00, %107
  %109 = fadd fast float %95, -1.000000e+00
  %110 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %111 = extractvalue %dx.types.CBufRet.f32 %110, 2
  %112 = fdiv fast float %109, %111
  %113 = call float @dx.op.unary.f32(i32 21, float %112)  ; Exp(value)
  %114 = extractvalue %dx.types.CBufRet.f32 %110, 1
  %115 = fsub fast float %113, %114
  %116 = extractvalue %dx.types.CBufRet.f32 %110, 0
  %117 = fdiv fast float %115, %116
  %118 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %119 = extractvalue %dx.types.CBufRet.f32 %118, 3
  %120 = fcmp fast ult float %119, 1.000000e+00
  br i1 %120, label %127, label %121, !dx.controlflow.hints !43

; <label>:121                                     ; preds = %96
  %122 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %123 = extractvalue %dx.types.CBufRet.f32 %122, 2
  %124 = fmul fast float %123, %117
  %125 = extractvalue %dx.types.CBufRet.f32 %118, 2
  %126 = fadd fast float %124, %125
  br label %134

; <label>:127                                     ; preds = %96
  %128 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %129 = extractvalue %dx.types.CBufRet.f32 %128, 3
  %130 = fadd fast float %129, %117
  %131 = extractvalue %dx.types.CBufRet.f32 %128, 2
  %132 = fmul fast float %130, %131
  %133 = fdiv fast float 1.000000e+00, %132
  br label %134

; <label>:134                                     ; preds = %127, %121
  %135 = phi float [ %126, %121 ], [ %133, %127 ]
  %136 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %137 = extractvalue %dx.types.CBufRet.f32 %136, 0
  %138 = extractvalue %dx.types.CBufRet.f32 %136, 1
  %139 = extractvalue %dx.types.CBufRet.f32 %136, 2
  %140 = extractvalue %dx.types.CBufRet.f32 %136, 3
  %141 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %142 = extractvalue %dx.types.CBufRet.f32 %141, 0
  %143 = extractvalue %dx.types.CBufRet.f32 %141, 1
  %144 = extractvalue %dx.types.CBufRet.f32 %141, 2
  %145 = extractvalue %dx.types.CBufRet.f32 %141, 3
  %146 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %147 = extractvalue %dx.types.CBufRet.f32 %146, 0
  %148 = extractvalue %dx.types.CBufRet.f32 %146, 1
  %149 = extractvalue %dx.types.CBufRet.f32 %146, 2
  %150 = extractvalue %dx.types.CBufRet.f32 %146, 3
  %151 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %152 = extractvalue %dx.types.CBufRet.f32 %151, 0
  %153 = extractvalue %dx.types.CBufRet.f32 %151, 1
  %154 = extractvalue %dx.types.CBufRet.f32 %151, 2
  %155 = extractvalue %dx.types.CBufRet.f32 %151, 3
  %156 = fmul fast float %137, %106
  %157 = call float @dx.op.tertiary.f32(i32 46, float %108, float %142, float %156)  ; FMad(a,b,c)
  %158 = call float @dx.op.tertiary.f32(i32 46, float %135, float %147, float %157)  ; FMad(a,b,c)
  %159 = fadd fast float %158, %152
  %160 = fmul fast float %138, %106
  %161 = call float @dx.op.tertiary.f32(i32 46, float %108, float %143, float %160)  ; FMad(a,b,c)
  %162 = call float @dx.op.tertiary.f32(i32 46, float %135, float %148, float %161)  ; FMad(a,b,c)
  %163 = fadd fast float %162, %153
  %164 = fmul fast float %139, %106
  %165 = call float @dx.op.tertiary.f32(i32 46, float %108, float %144, float %164)  ; FMad(a,b,c)
  %166 = call float @dx.op.tertiary.f32(i32 46, float %135, float %149, float %165)  ; FMad(a,b,c)
  %167 = fadd fast float %166, %154
  %168 = fmul fast float %140, %106
  %169 = call float @dx.op.tertiary.f32(i32 46, float %108, float %145, float %168)  ; FMad(a,b,c)
  %170 = call float @dx.op.tertiary.f32(i32 46, float %135, float %150, float %169)  ; FMad(a,b,c)
  %171 = fadd fast float %170, %155
  %172 = fdiv fast float %159, %171
  %173 = fdiv fast float %163, %171
  %174 = fdiv fast float %167, %171
  %175 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %176 = extractvalue %dx.types.CBufRet.f32 %175, 2
  %177 = extractvalue %dx.types.CBufRet.f32 %175, 3
  %178 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %179 = extractvalue %dx.types.CBufRet.f32 %178, 2
  %180 = extractvalue %dx.types.CBufRet.f32 %178, 3
  %181 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %182 = extractvalue %dx.types.CBufRet.f32 %181, 2
  %183 = extractvalue %dx.types.CBufRet.f32 %181, 3
  %184 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %185 = extractvalue %dx.types.CBufRet.f32 %184, 2
  %186 = extractvalue %dx.types.CBufRet.f32 %184, 3
  %187 = fmul fast float %176, %172
  %188 = call float @dx.op.tertiary.f32(i32 46, float %173, float %179, float %187)  ; FMad(a,b,c)
  %189 = call float @dx.op.tertiary.f32(i32 46, float %174, float %182, float %188)  ; FMad(a,b,c)
  %190 = fadd fast float %189, %185
  %191 = fmul fast float %177, %172
  %192 = call float @dx.op.tertiary.f32(i32 46, float %173, float %180, float %191)  ; FMad(a,b,c)
  %193 = call float @dx.op.tertiary.f32(i32 46, float %174, float %183, float %192)  ; FMad(a,b,c)
  %194 = fadd fast float %193, %186
  %195 = fdiv fast float %190, %194
  %196 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %197 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %196, i32 0, i32 %34, i32 %35, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %198 = extractvalue %dx.types.ResRet.f32 %197, 0
  %199 = fcmp fast ogt float %198, %195
  br i1 %199, label %200, label %202

; <label>:200                                     ; preds = %134
  %201 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %201, i32 %34, i32 %35, i32 %36, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %1385

; <label>:202                                     ; preds = %134, %0
  %203 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %32, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %204 = extractvalue %dx.types.CBufRet.i32 %203, 0
  %205 = mul i32 %34, 1664525
  %206 = mul i32 %35, 1664525
  %207 = mul i32 %36, 1664525
  %208 = mul i32 %204, 1664525
  %209 = add i32 %205, 1013904223
  %210 = add i32 %206, 1013904223
  %211 = add i32 %207, 1013904223
  %212 = add i32 %208, 1013904223
  %213 = mul i32 %212, %210
  %214 = add i32 %209, %213
  %215 = mul i32 %214, %211
  %216 = add i32 %215, %210
  %217 = mul i32 %216, %214
  %218 = add i32 %217, %211
  %219 = mul i32 %218, %216
  %220 = add i32 %219, %212
  %221 = lshr i32 %214, 16
  %222 = lshr i32 %216, 16
  %223 = lshr i32 %218, 16
  %224 = lshr i32 %220, 16
  %225 = xor i32 %221, %214
  %226 = xor i32 %222, %216
  %227 = xor i32 %223, %218
  %228 = xor i32 %224, %220
  %229 = mul i32 %228, %226
  %230 = add i32 %229, %225
  %231 = mul i32 %230, %227
  %232 = add i32 %231, %226
  %233 = mul i32 %232, %230
  %234 = add i32 %233, %227
  %235 = uitofp i32 %230 to float
  %236 = uitofp i32 %232 to float
  %237 = uitofp i32 %234 to float
  %238 = fmul fast float %235, 0x3E00000000000000
  %239 = fmul fast float %236, 0x3E00000000000000
  %240 = fmul fast float %237, 0x3E00000000000000
  %241 = fadd fast float %238, -1.000000e+00
  %242 = fadd fast float %239, -1.000000e+00
  %243 = fadd fast float %240, -1.000000e+00
  %244 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %245 = extractvalue %dx.types.CBufRet.f32 %244, 0
  %246 = extractvalue %dx.types.CBufRet.f32 %244, 1
  %247 = extractvalue %dx.types.CBufRet.f32 %244, 2
  %248 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %249 = extractvalue %dx.types.CBufRet.f32 %248, 3
  %250 = fmul fast float %241, %249
  %251 = fmul fast float %242, %249
  %252 = fmul fast float %243, %249
  %253 = fadd fast float %250, %245
  %254 = fadd fast float %251, %246
  %255 = fadd fast float %252, %247
  %256 = fadd fast float %253, %93
  %257 = fadd fast float %254, %94
  %258 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %259 = extractvalue %dx.types.CBufRet.f32 %258, 0
  %260 = extractvalue %dx.types.CBufRet.f32 %258, 1
  %261 = fdiv fast float %256, %259
  %262 = fdiv fast float %257, %260
  %263 = fmul fast float %261, 2.000000e+00
  %264 = fmul fast float %262, 2.000000e+00
  %265 = fadd fast float %263, -1.000000e+00
  %266 = fadd fast float %264, -1.000000e+00
  %267 = fsub fast float -0.000000e+00, %266
  %268 = fadd fast float %255, %95
  %269 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %270 = extractvalue %dx.types.CBufRet.f32 %269, 2
  %271 = fdiv fast float %268, %270
  %272 = call float @dx.op.unary.f32(i32 21, float %271)  ; Exp(value)
  %273 = extractvalue %dx.types.CBufRet.f32 %269, 1
  %274 = fsub fast float %272, %273
  %275 = extractvalue %dx.types.CBufRet.f32 %269, 0
  %276 = fdiv fast float %274, %275
  %277 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %278 = extractvalue %dx.types.CBufRet.f32 %277, 3
  %279 = fcmp fast ult float %278, 1.000000e+00
  br i1 %279, label %286, label %280, !dx.controlflow.hints !43

; <label>:280                                     ; preds = %202
  %281 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %282 = extractvalue %dx.types.CBufRet.f32 %281, 2
  %283 = fmul fast float %282, %276
  %284 = extractvalue %dx.types.CBufRet.f32 %277, 2
  %285 = fadd fast float %283, %284
  br label %293

; <label>:286                                     ; preds = %202
  %287 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %288 = extractvalue %dx.types.CBufRet.f32 %287, 3
  %289 = fadd fast float %288, %276
  %290 = extractvalue %dx.types.CBufRet.f32 %287, 2
  %291 = fmul fast float %289, %290
  %292 = fdiv fast float 1.000000e+00, %291
  br label %293

; <label>:293                                     ; preds = %286, %280
  %294 = phi float [ %285, %280 ], [ %292, %286 ]
  %295 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %296 = extractvalue %dx.types.CBufRet.f32 %295, 0
  %297 = extractvalue %dx.types.CBufRet.f32 %295, 1
  %298 = extractvalue %dx.types.CBufRet.f32 %295, 2
  %299 = extractvalue %dx.types.CBufRet.f32 %295, 3
  %300 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %301 = extractvalue %dx.types.CBufRet.f32 %300, 0
  %302 = extractvalue %dx.types.CBufRet.f32 %300, 1
  %303 = extractvalue %dx.types.CBufRet.f32 %300, 2
  %304 = extractvalue %dx.types.CBufRet.f32 %300, 3
  %305 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %306 = extractvalue %dx.types.CBufRet.f32 %305, 0
  %307 = extractvalue %dx.types.CBufRet.f32 %305, 1
  %308 = extractvalue %dx.types.CBufRet.f32 %305, 2
  %309 = extractvalue %dx.types.CBufRet.f32 %305, 3
  %310 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %311 = extractvalue %dx.types.CBufRet.f32 %310, 0
  %312 = extractvalue %dx.types.CBufRet.f32 %310, 1
  %313 = extractvalue %dx.types.CBufRet.f32 %310, 2
  %314 = extractvalue %dx.types.CBufRet.f32 %310, 3
  %315 = fmul fast float %296, %265
  %316 = call float @dx.op.tertiary.f32(i32 46, float %267, float %301, float %315)  ; FMad(a,b,c)
  %317 = call float @dx.op.tertiary.f32(i32 46, float %294, float %306, float %316)  ; FMad(a,b,c)
  %318 = fadd fast float %317, %311
  %319 = fmul fast float %297, %265
  %320 = call float @dx.op.tertiary.f32(i32 46, float %267, float %302, float %319)  ; FMad(a,b,c)
  %321 = call float @dx.op.tertiary.f32(i32 46, float %294, float %307, float %320)  ; FMad(a,b,c)
  %322 = fadd fast float %321, %312
  %323 = fmul fast float %298, %265
  %324 = call float @dx.op.tertiary.f32(i32 46, float %267, float %303, float %323)  ; FMad(a,b,c)
  %325 = call float @dx.op.tertiary.f32(i32 46, float %294, float %308, float %324)  ; FMad(a,b,c)
  %326 = fadd fast float %325, %313
  %327 = fmul fast float %299, %265
  %328 = call float @dx.op.tertiary.f32(i32 46, float %267, float %304, float %327)  ; FMad(a,b,c)
  %329 = call float @dx.op.tertiary.f32(i32 46, float %294, float %309, float %328)  ; FMad(a,b,c)
  %330 = fadd fast float %329, %314
  %331 = fdiv fast float %318, %330
  %332 = fdiv fast float %322, %330
  %333 = fdiv fast float %326, %330
  %334 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %335 = extractvalue %dx.types.CBufRet.f32 %334, 0
  %336 = extractvalue %dx.types.CBufRet.f32 %334, 1
  %337 = extractvalue %dx.types.CBufRet.f32 %334, 2
  %338 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %339 = extractvalue %dx.types.CBufRet.f32 %338, 0
  %340 = extractvalue %dx.types.CBufRet.f32 %338, 1
  %341 = extractvalue %dx.types.CBufRet.f32 %338, 2
  %342 = fmul fast float %335, 2.097152e+06
  %343 = fmul fast float %336, 2.097152e+06
  %344 = fmul fast float %337, 2.097152e+06
  %345 = fsub fast float %339, %342
  %346 = fsub fast float %340, %343
  %347 = fsub fast float %341, %344
  %348 = fsub fast float %331, %345
  %349 = fsub fast float %332, %346
  %350 = fsub fast float %333, %347
  %351 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %352 = extractvalue %dx.types.CBufRet.f32 %351, 0
  %353 = extractvalue %dx.types.CBufRet.f32 %351, 1
  %354 = extractvalue %dx.types.CBufRet.f32 %351, 2
  %355 = fsub fast float %331, %352
  %356 = fsub fast float %332, %353
  %357 = fsub fast float %333, %354
  %358 = fmul fast float %355, %355
  %359 = fmul fast float %356, %356
  %360 = fadd fast float %358, %359
  %361 = fmul fast float %357, %357
  %362 = fadd fast float %360, %361
  %363 = call float @dx.op.unary.f32(i32 24, float %362)  ; Sqrt(value)
  %364 = fdiv fast float %355, %363
  %365 = fdiv fast float %356, %363
  %366 = fdiv fast float %357, %363
  %367 = icmp eq i32 %39, 0
  br i1 %367, label %368, label %370, !dx.controlflow.hints !44

; <label>:368                                     ; preds = %293
  %369 = extractvalue %dx.types.CBufRet.f32 %248, 1
  br label %563

; <label>:370                                     ; preds = %293
  %371 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %372 = extractvalue %dx.types.CBufRet.f32 %371, 2
  %373 = fcmp fast ogt float %372, 0.000000e+00
  br i1 %373, label %374, label %496

; <label>:374                                     ; preds = %370
  %375 = icmp eq i32 %69, 0
  br i1 %375, label %411, label %376, !dx.controlflow.hints !45

; <label>:376                                     ; preds = %374
  %377 = fmul fast float %331, %71
  %378 = call float @dx.op.tertiary.f32(i32 46, float %332, float %76, float %377)  ; FMad(a,b,c)
  %379 = call float @dx.op.tertiary.f32(i32 46, float %333, float %81, float %378)  ; FMad(a,b,c)
  %380 = fadd fast float %379, %86
  %381 = fmul fast float %331, %72
  %382 = call float @dx.op.tertiary.f32(i32 46, float %332, float %77, float %381)  ; FMad(a,b,c)
  %383 = call float @dx.op.tertiary.f32(i32 46, float %333, float %82, float %382)  ; FMad(a,b,c)
  %384 = fadd fast float %383, %87
  %385 = fmul fast float %331, %74
  %386 = call float @dx.op.tertiary.f32(i32 46, float %332, float %79, float %385)  ; FMad(a,b,c)
  %387 = call float @dx.op.tertiary.f32(i32 46, float %333, float %84, float %386)  ; FMad(a,b,c)
  %388 = fadd fast float %387, %89
  %389 = fdiv fast float %380, %388
  %390 = fdiv fast float %384, %388
  %391 = fcmp fast ole float %389, 1.000000e+00
  %392 = fcmp fast ole float %390, 1.000000e+00
  %393 = fcmp fast oge float %389, 0.000000e+00
  %394 = fcmp fast oge float %390, 0.000000e+00
  %395 = and i1 %393, %391
  %396 = and i1 %394, %392
  %397 = and i1 %395, %396
  br i1 %397, label %398, label %411

; <label>:398                                     ; preds = %376
  %399 = fmul fast float %331, %73
  %400 = call float @dx.op.tertiary.f32(i32 46, float %332, float %78, float %399)  ; FMad(a,b,c)
  %401 = call float @dx.op.tertiary.f32(i32 46, float %333, float %83, float %400)  ; FMad(a,b,c)
  %402 = fadd fast float %401, %88
  %403 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %404 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %405 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %403, %dx.types.Handle %404, float %389, float %390, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %406 = extractvalue %dx.types.ResRet.f32 %405, 0
  %407 = fcmp fast olt float %402, %406
  %408 = fcmp fast ogt float %406, 0x3FEFAE1480000000
  %409 = or i1 %407, %408
  %410 = uitofp i1 %409 to float
  br label %411

; <label>:411                                     ; preds = %398, %376, %374
  %412 = phi float [ %410, %398 ], [ 1.000000e+00, %376 ], [ 1.000000e+00, %374 ]
  %413 = icmp eq i32 %60, 0
  br i1 %413, label %493, label %414

; <label>:414                                     ; preds = %411
  %415 = fcmp fast oge float %276, %62
  %416 = fcmp fast oge float %276, %63
  %417 = fcmp fast oge float %276, %64
  %418 = fcmp fast oge float %276, %65
  %419 = zext i1 %415 to i32
  %420 = zext i1 %416 to i32
  %421 = zext i1 %417 to i32
  %422 = zext i1 %418 to i32
  %423 = add nuw nsw i32 %419, %420
  %424 = add nuw nsw i32 %423, %421
  %425 = add nuw nsw i32 %424, %422
  %426 = icmp ult i32 %425, %60
  br i1 %426, label %427, label %493

; <label>:427                                     ; preds = %414
  %428 = shl nuw nsw i32 %425, 2
  %429 = add nuw nsw i32 %428, 9
  %430 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 %429)  ; CBufferLoadLegacy(handle,regIndex)
  %431 = extractvalue %dx.types.CBufRet.f32 %430, 0
  %432 = extractvalue %dx.types.CBufRet.f32 %430, 1
  %433 = extractvalue %dx.types.CBufRet.f32 %430, 3
  %434 = add nuw nsw i32 %428, 10
  %435 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 %434)  ; CBufferLoadLegacy(handle,regIndex)
  %436 = extractvalue %dx.types.CBufRet.f32 %435, 0
  %437 = extractvalue %dx.types.CBufRet.f32 %435, 1
  %438 = extractvalue %dx.types.CBufRet.f32 %435, 3
  %439 = add nuw nsw i32 %428, 11
  %440 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 %439)  ; CBufferLoadLegacy(handle,regIndex)
  %441 = extractvalue %dx.types.CBufRet.f32 %440, 0
  %442 = extractvalue %dx.types.CBufRet.f32 %440, 1
  %443 = extractvalue %dx.types.CBufRet.f32 %440, 3
  %444 = add nuw nsw i32 %428, 12
  %445 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 %444)  ; CBufferLoadLegacy(handle,regIndex)
  %446 = extractvalue %dx.types.CBufRet.f32 %445, 0
  %447 = extractvalue %dx.types.CBufRet.f32 %445, 1
  %448 = extractvalue %dx.types.CBufRet.f32 %445, 3
  %449 = fmul fast float %431, %331
  %450 = call float @dx.op.tertiary.f32(i32 46, float %332, float %436, float %449)  ; FMad(a,b,c)
  %451 = call float @dx.op.tertiary.f32(i32 46, float %333, float %441, float %450)  ; FMad(a,b,c)
  %452 = fadd fast float %451, %446
  %453 = fmul fast float %432, %331
  %454 = call float @dx.op.tertiary.f32(i32 46, float %332, float %437, float %453)  ; FMad(a,b,c)
  %455 = call float @dx.op.tertiary.f32(i32 46, float %333, float %442, float %454)  ; FMad(a,b,c)
  %456 = fadd fast float %455, %447
  %457 = fmul fast float %433, %331
  %458 = call float @dx.op.tertiary.f32(i32 46, float %332, float %438, float %457)  ; FMad(a,b,c)
  %459 = call float @dx.op.tertiary.f32(i32 46, float %333, float %443, float %458)  ; FMad(a,b,c)
  %460 = fadd fast float %459, %448
  %461 = fdiv fast float %452, %460
  %462 = fdiv fast float %456, %460
  %463 = add nuw nsw i32 %425, 25
  %464 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 %463)  ; CBufferLoadLegacy(handle,regIndex)
  %465 = extractvalue %dx.types.CBufRet.f32 %464, 0
  %466 = extractvalue %dx.types.CBufRet.f32 %464, 1
  %467 = extractvalue %dx.types.CBufRet.f32 %464, 2
  %468 = extractvalue %dx.types.CBufRet.f32 %464, 3
  %469 = fcmp fast ole float %461, %467
  %470 = fcmp fast ole float %462, %468
  %471 = fcmp fast oge float %461, %465
  %472 = fcmp fast oge float %462, %466
  %473 = and i1 %471, %469
  %474 = and i1 %472, %470
  %475 = and i1 %473, %474
  br i1 %475, label %476, label %493

; <label>:476                                     ; preds = %427
  %477 = extractvalue %dx.types.CBufRet.f32 %445, 2
  %478 = extractvalue %dx.types.CBufRet.f32 %440, 2
  %479 = extractvalue %dx.types.CBufRet.f32 %435, 2
  %480 = extractvalue %dx.types.CBufRet.f32 %430, 2
  %481 = fmul fast float %480, %331
  %482 = call float @dx.op.tertiary.f32(i32 46, float %332, float %479, float %481)  ; FMad(a,b,c)
  %483 = call float @dx.op.tertiary.f32(i32 46, float %333, float %478, float %482)  ; FMad(a,b,c)
  %484 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %485 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %486 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %484, %dx.types.Handle %485, float %461, float %462, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %487 = extractvalue %dx.types.ResRet.f32 %486, 0
  %488 = fsub fast float 1.000000e+00, %477
  %489 = fsub fast float %488, %483
  %490 = fsub fast float %487, %67
  %491 = fcmp fast olt float %489, %490
  %492 = uitofp i1 %491 to float
  br label %493

; <label>:493                                     ; preds = %476, %427, %414, %411
  %494 = phi float [ %492, %476 ], [ 1.000000e+00, %427 ], [ 1.000000e+00, %414 ], [ 1.000000e+00, %411 ]
  %495 = fmul fast float %494, %412
  br label %496

; <label>:496                                     ; preds = %493, %370
  %497 = phi float [ %495, %493 ], [ 1.000000e+00, %370 ]
  %498 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %499 = extractvalue %dx.types.CBufRet.f32 %498, 0
  %500 = extractvalue %dx.types.CBufRet.f32 %498, 1
  %501 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 75)  ; CBufferLoadLegacy(handle,regIndex)
  %502 = extractvalue %dx.types.CBufRet.f32 %501, 0
  %503 = extractvalue %dx.types.CBufRet.f32 %501, 1
  %504 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %505 = extractvalue %dx.types.CBufRet.f32 %504, 0
  %506 = extractvalue %dx.types.CBufRet.f32 %504, 1
  %507 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 77)  ; CBufferLoadLegacy(handle,regIndex)
  %508 = extractvalue %dx.types.CBufRet.f32 %507, 0
  %509 = extractvalue %dx.types.CBufRet.f32 %507, 1
  %510 = fmul fast float %499, %331
  %511 = call float @dx.op.tertiary.f32(i32 46, float %332, float %502, float %510)  ; FMad(a,b,c)
  %512 = call float @dx.op.tertiary.f32(i32 46, float %333, float %505, float %511)  ; FMad(a,b,c)
  %513 = fadd fast float %512, %508
  %514 = fmul fast float %500, %331
  %515 = call float @dx.op.tertiary.f32(i32 46, float %332, float %503, float %514)  ; FMad(a,b,c)
  %516 = call float @dx.op.tertiary.f32(i32 46, float %333, float %506, float %515)  ; FMad(a,b,c)
  %517 = fadd fast float %516, %509
  %518 = fmul fast float %513, 5.000000e-01
  %519 = fmul fast float %517, 5.000000e-01
  %520 = fadd fast float %518, 5.000000e-01
  %521 = fsub fast float 5.000000e-01, %519
  %522 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %523 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %524 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %522, %dx.types.Handle %523, float %520, float %521, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %525 = extractvalue %dx.types.ResRet.f32 %524, 0
  %526 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %527 = extractvalue %dx.types.CBufRet.f32 %526, 2
  %528 = fcmp fast ogt float %527, 0.000000e+00
  br i1 %528, label %529, label %538

; <label>:529                                     ; preds = %496
  %530 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %531 = extractvalue %dx.types.CBufRet.f32 %530, 0
  %532 = extractvalue %dx.types.CBufRet.f32 %530, 1
  %533 = extractvalue %dx.types.CBufRet.f32 %530, 2
  %534 = call float @dx.op.dot3.f32(i32 55, float %55, float %56, float %57, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %535 = fmul fast float %531, %534
  %536 = fmul fast float %532, %534
  %537 = fmul fast float %533, %534
  br label %538

; <label>:538                                     ; preds = %529, %496
  %539 = phi float [ %535, %529 ], [ %55, %496 ]
  %540 = phi float [ %536, %529 ], [ %56, %496 ]
  %541 = phi float [ %537, %529 ], [ %57, %496 ]
  %542 = fsub fast float -0.000000e+00, %364
  %543 = fsub fast float -0.000000e+00, %365
  %544 = fsub fast float -0.000000e+00, %366
  %545 = call float @dx.op.dot3.f32(i32 55, float %51, float %52, float %53, float %542, float %543, float %544)  ; Dot3(ax,ay,az,bx,by,bz)
  %546 = extractvalue %dx.types.CBufRet.f32 %248, 1
  %547 = fmul fast float %546, %546
  %548 = fsub fast float 1.000000e+00, %547
  %549 = fmul fast float %545, 2.000000e+00
  %550 = fadd fast float %549, %546
  %551 = fmul fast float %550, %546
  %552 = fadd fast float %551, 1.000000e+00
  %553 = call float @dx.op.unary.f32(i32 24, float %552)  ; Sqrt(value)
  %554 = fmul fast float %553, 0x402921FB60000000
  %555 = fmul fast float %554, %552
  %556 = fdiv fast float %548, %555
  %557 = fmul fast float %497, %58
  %558 = fmul fast float %557, %525
  %559 = fmul fast float %558, %556
  %560 = fmul fast float %559, %539
  %561 = fmul fast float %559, %540
  %562 = fmul fast float %559, %541
  br label %563

; <label>:563                                     ; preds = %538, %368
  %564 = phi float [ %369, %368 ], [ %546, %538 ]
  %565 = phi float [ 0.000000e+00, %368 ], [ %560, %538 ]
  %566 = phi float [ 0.000000e+00, %368 ], [ %561, %538 ]
  %567 = phi float [ 0.000000e+00, %368 ], [ %562, %538 ]
  %568 = fmul fast float %564, %365
  %569 = fmul fast float %564, %366
  %570 = fmul fast float %564, %364
  %571 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 83)  ; CBufferLoadLegacy(handle,regIndex)
  %572 = extractvalue %dx.types.CBufRet.f32 %571, 3
  %573 = fcmp fast ogt float %572, 0.000000e+00
  %574 = extractvalue %dx.types.CBufRet.f32 %571, 2
  %575 = fcmp fast ogt float %574, 0.000000e+00
  %576 = or i1 %573, %575
  br i1 %576, label %577, label %645

; <label>:577                                     ; preds = %563
  %578 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 233)  ; CBufferLoadLegacy(handle,regIndex)
  %579 = extractvalue %dx.types.CBufRet.f32 %578, 0
  %580 = extractvalue %dx.types.CBufRet.f32 %578, 1
  %581 = extractvalue %dx.types.CBufRet.f32 %578, 2
  %582 = fmul fast float %579, %348
  %583 = fmul fast float %580, %349
  %584 = fmul fast float %581, %350
  %585 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 234)  ; CBufferLoadLegacy(handle,regIndex)
  %586 = extractvalue %dx.types.CBufRet.f32 %585, 0
  %587 = extractvalue %dx.types.CBufRet.f32 %585, 1
  %588 = extractvalue %dx.types.CBufRet.f32 %585, 2
  %589 = fadd fast float %582, %586
  %590 = fadd fast float %583, %587
  %591 = fadd fast float %584, %588
  %592 = call float @dx.op.binary.f32(i32 35, float %589, float 0.000000e+00)  ; FMax(a,b)
  %593 = call float @dx.op.binary.f32(i32 35, float %590, float 0.000000e+00)  ; FMax(a,b)
  %594 = call float @dx.op.binary.f32(i32 35, float %591, float 0.000000e+00)  ; FMax(a,b)
  %595 = call float @dx.op.binary.f32(i32 36, float %592, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %596 = call float @dx.op.binary.f32(i32 36, float %593, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %597 = call float @dx.op.binary.f32(i32 36, float %594, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %598 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 235)  ; CBufferLoadLegacy(handle,regIndex)
  %599 = extractvalue %dx.types.CBufRet.f32 %598, 0
  %600 = extractvalue %dx.types.CBufRet.f32 %598, 1
  %601 = extractvalue %dx.types.CBufRet.f32 %598, 2
  %602 = fmul fast float %599, %595
  %603 = fmul fast float %600, %596
  %604 = fmul fast float %601, %597
  %605 = fptosi float %602 to i32
  %606 = fptosi float %603 to i32
  %607 = fptosi float %604 to i32
  %608 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 4, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xU32>
  %609 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %608, i32 0, i32 %605, i32 %606, i32 %607, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %610 = extractvalue %dx.types.ResRet.i32 %609, 0
  %611 = extractvalue %dx.types.ResRet.i32 %609, 1
  %612 = extractvalue %dx.types.ResRet.i32 %609, 2
  %613 = extractvalue %dx.types.ResRet.i32 %609, 3
  %614 = uitofp i32 %610 to float
  %615 = uitofp i32 %611 to float
  %616 = uitofp i32 %612 to float
  %617 = uitofp i32 %613 to float
  %618 = extractvalue %dx.types.CBufRet.f32 %598, 3
  %619 = fadd fast float %618, 1.000000e+00
  %620 = fmul fast float %619, %614
  %621 = fmul fast float %619, %615
  %622 = fmul fast float %619, %616
  %623 = fdiv fast float %602, %617
  %624 = fdiv fast float %603, %617
  %625 = fdiv fast float %604, %617
  %626 = call float @dx.op.unary.f32(i32 22, float %623)  ; Frc(value)
  %627 = call float @dx.op.unary.f32(i32 22, float %624)  ; Frc(value)
  %628 = call float @dx.op.unary.f32(i32 22, float %625)  ; Frc(value)
  %629 = fmul fast float %618, %626
  %630 = fmul fast float %618, %627
  %631 = fmul fast float %618, %628
  %632 = fadd fast float %620, 5.000000e-01
  %633 = fadd fast float %632, %629
  %634 = fadd fast float %621, 5.000000e-01
  %635 = fadd fast float %634, %630
  %636 = fadd fast float %622, 5.000000e-01
  %637 = fadd fast float %636, %631
  %638 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 236)  ; CBufferLoadLegacy(handle,regIndex)
  %639 = extractvalue %dx.types.CBufRet.f32 %638, 0
  %640 = extractvalue %dx.types.CBufRet.f32 %638, 1
  %641 = extractvalue %dx.types.CBufRet.f32 %638, 2
  %642 = fmul fast float %633, %639
  %643 = fmul fast float %635, %640
  %644 = fmul fast float %637, %641
  br label %645

; <label>:645                                     ; preds = %577, %563
  %646 = phi float [ %642, %577 ], [ 0.000000e+00, %563 ]
  %647 = phi float [ %643, %577 ], [ 0.000000e+00, %563 ]
  %648 = phi float [ %644, %577 ], [ 0.000000e+00, %563 ]
  %649 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %650 = extractvalue %dx.types.CBufRet.f32 %649, 0
  %651 = extractvalue %dx.types.CBufRet.f32 %649, 1
  %652 = extractvalue %dx.types.CBufRet.f32 %649, 3
  %653 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %654 = extractvalue %dx.types.CBufRet.f32 %653, 0
  %655 = extractvalue %dx.types.CBufRet.f32 %653, 1
  %656 = extractvalue %dx.types.CBufRet.f32 %653, 3
  %657 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %658 = extractvalue %dx.types.CBufRet.f32 %657, 0
  %659 = extractvalue %dx.types.CBufRet.f32 %657, 1
  %660 = extractvalue %dx.types.CBufRet.f32 %657, 3
  %661 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %662 = extractvalue %dx.types.CBufRet.f32 %661, 0
  %663 = extractvalue %dx.types.CBufRet.f32 %661, 1
  %664 = extractvalue %dx.types.CBufRet.f32 %661, 3
  %665 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 65)  ; CBufferLoadLegacy(handle,regIndex)
  %666 = extractvalue %dx.types.CBufRet.f32 %665, 0
  %667 = extractvalue %dx.types.CBufRet.f32 %665, 1
  %668 = extractvalue %dx.types.CBufRet.f32 %665, 2
  %669 = fmul fast float %666, 2.097152e+06
  %670 = fmul fast float %667, 2.097152e+06
  %671 = fmul fast float %668, 2.097152e+06
  %672 = fsub fast float %348, %669
  %673 = fsub fast float %349, %670
  %674 = fsub fast float %350, %671
  %675 = fmul fast float %672, %650
  %676 = call float @dx.op.tertiary.f32(i32 46, float %673, float %654, float %675)  ; FMad(a,b,c)
  %677 = call float @dx.op.tertiary.f32(i32 46, float %674, float %658, float %676)  ; FMad(a,b,c)
  %678 = fadd fast float %677, %662
  %679 = fmul fast float %672, %651
  %680 = call float @dx.op.tertiary.f32(i32 46, float %673, float %655, float %679)  ; FMad(a,b,c)
  %681 = call float @dx.op.tertiary.f32(i32 46, float %674, float %659, float %680)  ; FMad(a,b,c)
  %682 = fadd fast float %681, %663
  %683 = fmul fast float %672, %652
  %684 = call float @dx.op.tertiary.f32(i32 46, float %673, float %656, float %683)  ; FMad(a,b,c)
  %685 = call float @dx.op.tertiary.f32(i32 46, float %674, float %660, float %684)  ; FMad(a,b,c)
  %686 = fadd fast float %685, %664
  %687 = fdiv fast float %678, %686
  %688 = fdiv fast float %682, %686
  %689 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %690 = extractvalue %dx.types.CBufRet.f32 %689, 0
  %691 = fmul fast float %690, %686
  %692 = extractvalue %dx.types.CBufRet.f32 %689, 1
  %693 = fadd fast float %691, %692
  %694 = call float @dx.op.unary.f32(i32 23, float %693)  ; Log(value)
  %695 = extractvalue %dx.types.CBufRet.f32 %689, 2
  %696 = fmul fast float %695, %694
  %697 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %698 = extractvalue %dx.types.CBufRet.i32 %697, 2
  %699 = sitofp i32 %698 to float
  %700 = fdiv fast float %696, %699
  %701 = fmul fast float %687, 5.000000e-01
  %702 = fmul fast float %688, 5.000000e-01
  %703 = fadd fast float %701, 5.000000e-01
  %704 = fsub fast float 5.000000e-01, %702
  %705 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %706 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %707 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %705, %dx.types.Handle %706, float %703, float %704, float %700, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %708 = extractvalue %dx.types.ResRet.f32 %707, 0
  %709 = extractvalue %dx.types.ResRet.f32 %707, 1
  %710 = extractvalue %dx.types.ResRet.f32 %707, 2
  %711 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %712 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %711, %dx.types.Handle %706, float %703, float %704, float %700, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %713 = extractvalue %dx.types.ResRet.f32 %712, 0
  %714 = extractvalue %dx.types.ResRet.f32 %712, 1
  %715 = extractvalue %dx.types.ResRet.f32 %712, 2
  %716 = call float @dx.op.dot3.f32(i32 55, float %708, float %709, float %710, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %717 = fadd fast float %716, 0x3EE4F8B580000000
  %718 = fdiv fast float %708, %717
  %719 = fdiv fast float %709, %717
  %720 = fdiv fast float %710, %717
  %721 = fmul fast float %718, %713
  %722 = fmul fast float %718, %714
  %723 = fmul fast float %718, %715
  %724 = fmul fast float %719, %713
  %725 = fmul fast float %719, %714
  %726 = fmul fast float %719, %715
  %727 = fmul fast float %720, %713
  %728 = fmul fast float %720, %714
  %729 = fmul fast float %720, %715
  %730 = call float @dx.op.dot4.f32(i32 56, float %708, float %721, float %722, float %723, float 1.000000e+00, float %568, float %569, float %570)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %731 = call float @dx.op.dot4.f32(i32 56, float %709, float %724, float %725, float %726, float 1.000000e+00, float %568, float %569, float %570)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %732 = call float @dx.op.dot4.f32(i32 56, float %710, float %727, float %728, float %729, float 1.000000e+00, float %568, float %569, float %570)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %733 = call float @dx.op.binary.f32(i32 35, float %730, float 0.000000e+00)  ; FMax(a,b)
  %734 = call float @dx.op.binary.f32(i32 35, float %731, float 0.000000e+00)  ; FMax(a,b)
  %735 = call float @dx.op.binary.f32(i32 35, float %732, float 0.000000e+00)  ; FMax(a,b)
  %736 = fadd fast float %733, %565
  %737 = fadd fast float %734, %566
  %738 = fadd fast float %735, %567
  %739 = fcmp fast ogt float %574, 0.000000e+00
  br i1 %739, label %740, label %805

; <label>:740                                     ; preds = %645
  %741 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %742 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %743 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %741, %dx.types.Handle %742, float %646, float %647, float %648, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %744 = extractvalue %dx.types.ResRet.f32 %743, 0
  %745 = extractvalue %dx.types.ResRet.f32 %743, 1
  %746 = extractvalue %dx.types.ResRet.f32 %743, 2
  %747 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %748 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %747, %dx.types.Handle %742, float %646, float %647, float %648, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %749 = extractvalue %dx.types.ResRet.f32 %748, 0
  %750 = extractvalue %dx.types.ResRet.f32 %748, 1
  %751 = extractvalue %dx.types.ResRet.f32 %748, 2
  %752 = fmul fast float %749, 2.000000e+00
  %753 = fmul fast float %750, 2.000000e+00
  %754 = fmul fast float %751, 2.000000e+00
  %755 = fadd fast float %752, -1.000000e+00
  %756 = fadd fast float %753, -1.000000e+00
  %757 = fadd fast float %754, -1.000000e+00
  %758 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %759 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %758, %dx.types.Handle %742, float %646, float %647, float %648, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %760 = extractvalue %dx.types.ResRet.f32 %759, 0
  %761 = extractvalue %dx.types.ResRet.f32 %759, 1
  %762 = extractvalue %dx.types.ResRet.f32 %759, 2
  %763 = fmul fast float %760, 2.000000e+00
  %764 = fmul fast float %761, 2.000000e+00
  %765 = fmul fast float %762, 2.000000e+00
  %766 = fadd fast float %763, -1.000000e+00
  %767 = fadd fast float %764, -1.000000e+00
  %768 = fadd fast float %765, -1.000000e+00
  %769 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %770 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %769, %dx.types.Handle %742, float %646, float %647, float %648, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %771 = extractvalue %dx.types.ResRet.f32 %770, 0
  %772 = extractvalue %dx.types.ResRet.f32 %770, 1
  %773 = extractvalue %dx.types.ResRet.f32 %770, 2
  %774 = fmul fast float %771, 2.000000e+00
  %775 = fmul fast float %772, 2.000000e+00
  %776 = fmul fast float %773, 2.000000e+00
  %777 = fadd fast float %774, -1.000000e+00
  %778 = fadd fast float %775, -1.000000e+00
  %779 = fadd fast float %776, -1.000000e+00
  %780 = fmul fast float %744, 0x3FFBB67B80000000
  %781 = fmul fast float %780, %755
  %782 = fmul fast float %780, %756
  %783 = fmul fast float %780, %757
  %784 = fmul fast float %745, 0x3FFBB67B80000000
  %785 = fmul fast float %784, %766
  %786 = fmul fast float %784, %767
  %787 = fmul fast float %784, %768
  %788 = fmul fast float %746, 0x3FFBB67B80000000
  %789 = fmul fast float %788, %777
  %790 = fmul fast float %788, %778
  %791 = fmul fast float %788, %779
  %792 = fmul fast float %574, 0x3FD45F3060000000
  %793 = call float @dx.op.dot4.f32(i32 56, float %744, float %781, float %782, float %783, float 1.000000e+00, float %568, float %569, float %570)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %794 = call float @dx.op.dot4.f32(i32 56, float %745, float %785, float %786, float %787, float 1.000000e+00, float %568, float %569, float %570)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %795 = call float @dx.op.dot4.f32(i32 56, float %746, float %789, float %790, float %791, float 1.000000e+00, float %568, float %569, float %570)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %796 = call float @dx.op.binary.f32(i32 35, float %793, float 0.000000e+00)  ; FMax(a,b)
  %797 = call float @dx.op.binary.f32(i32 35, float %794, float 0.000000e+00)  ; FMax(a,b)
  %798 = call float @dx.op.binary.f32(i32 35, float %795, float 0.000000e+00)  ; FMax(a,b)
  %799 = fmul fast float %796, %792
  %800 = fmul fast float %797, %792
  %801 = fmul fast float %798, %792
  %802 = fadd fast float %799, %736
  %803 = fadd fast float %800, %737
  %804 = fadd fast float %801, %738
  br label %805

; <label>:805                                     ; preds = %740, %645
  %806 = phi float [ %802, %740 ], [ %736, %645 ]
  %807 = phi float [ %803, %740 ], [ %737, %645 ]
  %808 = phi float [ %804, %740 ], [ %738, %645 ]
  %809 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %810 = extractvalue %dx.types.CBufRet.i32 %809, 0
  %811 = extractvalue %dx.types.CBufRet.i32 %809, 1
  %812 = mul i32 %810, %34
  %813 = mul i32 %811, %35
  %814 = fmul fast float %276, %47
  %815 = fadd fast float %814, %48
  %816 = call float @dx.op.unary.f32(i32 23, float %815)  ; Log(value)
  %817 = fmul fast float %816, %49
  %818 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %817)  ; FMax(a,b)
  %819 = fptoui float %818 to i32
  %820 = add nsw i32 %43, -1
  %821 = call i32 @dx.op.binary.i32(i32 40, i32 %819, i32 %820)  ; UMin(a,b)
  %822 = and i32 %45, 31
  %823 = lshr i32 %812, %822
  %824 = lshr i32 %813, %822
  %825 = mul i32 %821, %42
  %826 = add i32 %825, %824
  %827 = mul i32 %826, %41
  %828 = add i32 %827, %823
  %829 = shl i32 %828, 1
  %830 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %831 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %830, i32 %829, i32 undef)  ; BufferLoad(srv,index,wot)
  %832 = extractvalue %dx.types.ResRet.i32 %831, 0
  %833 = call i32 @dx.op.binary.i32(i32 40, i32 %832, i32 %38)  ; UMin(a,b)
  %834 = or i32 %829, 1
  %835 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %830, i32 %834, i32 undef)  ; BufferLoad(srv,index,wot)
  %836 = extractvalue %dx.types.ResRet.i32 %835, 0
  %837 = add i32 %34, 1
  %838 = add i32 %35, 1
  %839 = add i32 %36, 1
  %840 = uitofp i32 %837 to float
  %841 = uitofp i32 %838 to float
  %842 = fadd fast float %253, %840
  %843 = fadd fast float %254, %841
  %844 = fdiv fast float %842, %259
  %845 = fdiv fast float %843, %260
  %846 = fmul fast float %844, 2.000000e+00
  %847 = fmul fast float %845, 2.000000e+00
  %848 = fadd fast float %846, -1.000000e+00
  %849 = fadd fast float %847, -1.000000e+00
  %850 = fsub fast float -0.000000e+00, %849
  %851 = uitofp i32 %839 to float
  %852 = fadd fast float %255, %851
  %853 = fdiv fast float %852, %270
  %854 = call float @dx.op.unary.f32(i32 21, float %853)  ; Exp(value)
  %855 = fsub fast float %854, %273
  %856 = fdiv fast float %855, %275
  br i1 %279, label %863, label %857, !dx.controlflow.hints !43

; <label>:857                                     ; preds = %805
  %858 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %859 = extractvalue %dx.types.CBufRet.f32 %858, 2
  %860 = fmul fast float %859, %856
  %861 = extractvalue %dx.types.CBufRet.f32 %277, 2
  %862 = fadd fast float %860, %861
  br label %870

; <label>:863                                     ; preds = %805
  %864 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %865 = extractvalue %dx.types.CBufRet.f32 %864, 3
  %866 = fadd fast float %865, %856
  %867 = extractvalue %dx.types.CBufRet.f32 %864, 2
  %868 = fmul fast float %866, %867
  %869 = fdiv fast float 1.000000e+00, %868
  br label %870

; <label>:870                                     ; preds = %863, %857
  %871 = phi float [ %862, %857 ], [ %869, %863 ]
  %872 = fmul fast float %296, %848
  %873 = call float @dx.op.tertiary.f32(i32 46, float %850, float %301, float %872)  ; FMad(a,b,c)
  %874 = call float @dx.op.tertiary.f32(i32 46, float %871, float %306, float %873)  ; FMad(a,b,c)
  %875 = fadd fast float %874, %311
  %876 = fmul fast float %297, %848
  %877 = call float @dx.op.tertiary.f32(i32 46, float %850, float %302, float %876)  ; FMad(a,b,c)
  %878 = call float @dx.op.tertiary.f32(i32 46, float %871, float %307, float %877)  ; FMad(a,b,c)
  %879 = fadd fast float %878, %312
  %880 = fmul fast float %298, %848
  %881 = call float @dx.op.tertiary.f32(i32 46, float %850, float %303, float %880)  ; FMad(a,b,c)
  %882 = call float @dx.op.tertiary.f32(i32 46, float %871, float %308, float %881)  ; FMad(a,b,c)
  %883 = fadd fast float %882, %313
  %884 = fmul fast float %299, %848
  %885 = call float @dx.op.tertiary.f32(i32 46, float %850, float %304, float %884)  ; FMad(a,b,c)
  %886 = call float @dx.op.tertiary.f32(i32 46, float %871, float %309, float %885)  ; FMad(a,b,c)
  %887 = fadd fast float %886, %314
  %888 = fdiv fast float %875, %887
  %889 = fdiv fast float %879, %887
  %890 = fdiv fast float %883, %887
  %891 = fsub fast float %331, %888
  %892 = fsub fast float %332, %889
  %893 = fsub fast float %333, %890
  %894 = fmul fast float %891, %891
  %895 = fmul fast float %892, %892
  %896 = fadd fast float %895, %894
  %897 = fmul fast float %893, %893
  %898 = fadd fast float %896, %897
  %899 = call float @dx.op.unary.f32(i32 24, float %898)  ; Sqrt(value)
  %900 = extractvalue %dx.types.CBufRet.f32 %248, 2
  %901 = fmul fast float %900, %899
  %902 = call float @dx.op.binary.f32(i32 35, float %901, float 1.000000e+00)  ; FMax(a,b)
  %903 = fmul fast float %902, %902
  %904 = icmp eq i32 %833, 0
  br i1 %904, label %1314, label %905

; <label>:905                                     ; preds = %870
  br label %906

; <label>:906                                     ; preds = %1307, %905
  %907 = phi float [ %1308, %1307 ], [ %806, %905 ]
  %908 = phi float [ %1309, %1307 ], [ %807, %905 ]
  %909 = phi float [ %1310, %1307 ], [ %808, %905 ]
  %910 = phi i32 [ %1311, %1307 ], [ 0, %905 ]
  %911 = add i32 %910, %836
  %912 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %913 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %912, i32 %911, i32 undef)  ; BufferLoad(srv,index,wot)
  %914 = extractvalue %dx.types.ResRet.i32 %913, 0
  %915 = mul i32 %914, 6
  %916 = add i32 %915, 4
  %917 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 10, i32 1033 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<4xF32>
  %918 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %917, i32 %916, i32 undef)  ; BufferLoad(srv,index,wot)
  %919 = extractvalue %dx.types.ResRet.f32 %918, 0
  %920 = extractvalue %dx.types.ResRet.f32 %918, 1
  %921 = extractvalue %dx.types.ResRet.f32 %918, 2
  %922 = add i32 %915, 3
  %923 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %917, i32 %922, i32 undef)  ; BufferLoad(srv,index,wot)
  %924 = extractvalue %dx.types.ResRet.f32 %923, 3
  %925 = add i32 %915, 2
  %926 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %917, i32 %925, i32 undef)  ; BufferLoad(srv,index,wot)
  %927 = extractvalue %dx.types.ResRet.f32 %926, 0
  %928 = extractvalue %dx.types.ResRet.f32 %926, 1
  %929 = extractvalue %dx.types.ResRet.f32 %926, 2
  %930 = or i32 %915, 1
  %931 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %917, i32 %930, i32 undef)  ; BufferLoad(srv,index,wot)
  %932 = extractvalue %dx.types.ResRet.f32 %931, 0
  %933 = extractvalue %dx.types.ResRet.f32 %931, 1
  %934 = extractvalue %dx.types.ResRet.f32 %931, 2
  %935 = extractvalue %dx.types.ResRet.f32 %931, 3
  %936 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %917, i32 %915, i32 undef)  ; BufferLoad(srv,index,wot)
  %937 = extractvalue %dx.types.ResRet.f32 %936, 3
  %938 = bitcast float %924 to i32
  %939 = lshr i32 %938, 16
  %940 = call float @dx.op.legacyF16ToF32(i32 131, i32 %939)  ; LegacyF16ToF32(value)
  %941 = fcmp fast ogt float %940, 0.000000e+00
  br i1 %941, label %942, label %1307

; <label>:942                                     ; preds = %906
  %943 = extractvalue %dx.types.ResRet.f32 %936, 2
  %944 = extractvalue %dx.types.ResRet.f32 %936, 1
  %945 = extractvalue %dx.types.ResRet.f32 %936, 0
  %946 = extractvalue %dx.types.ResRet.f32 %926, 3
  %947 = extractvalue %dx.types.ResRet.f32 %923, 2
  %948 = extractvalue %dx.types.ResRet.f32 %923, 0
  %949 = add i32 %915, 5
  %950 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %917, i32 %949, i32 undef)  ; BufferLoad(srv,index,wot)
  %951 = extractvalue %dx.types.ResRet.f32 %950, 3
  %952 = bitcast float %946 to i32
  %953 = lshr i32 %952, 16
  %954 = and i32 %953, 3
  %955 = bitcast float %948 to i32
  %956 = and i32 %955, 65535
  %957 = call float @dx.op.legacyF16ToF32(i32 131, i32 %956)  ; LegacyF16ToF32(value)
  %958 = lshr i32 %955, 16
  %959 = call float @dx.op.legacyF16ToF32(i32 131, i32 %958)  ; LegacyF16ToF32(value)
  %960 = bitcast float %947 to i32
  %961 = and i32 %960, 65535
  %962 = call float @dx.op.legacyF16ToF32(i32 131, i32 %961)  ; LegacyF16ToF32(value)
  %963 = fsub fast float -0.000000e+00, %962
  %964 = call float @dx.op.legacyF16ToF32(i32 131, i32 %938)  ; LegacyF16ToF32(value)
  %965 = fsub fast float -0.000000e+00, %964
  %966 = fcmp fast oeq float %935, 0.000000e+00
  %967 = icmp eq i32 %954, 2
  %968 = icmp eq i32 %954, 3
  %969 = bitcast float %951 to i32
  %970 = and i32 %969, 65535
  %971 = call float @dx.op.legacyF16ToF32(i32 131, i32 %970)  ; LegacyF16ToF32(value)
  %972 = lshr i32 %969, 16
  %973 = and i32 %972, 1023
  %974 = uitofp i32 %973 to float
  %975 = fmul fast float %974, 9.765625e-04
  %976 = fsub fast float %945, %331
  %977 = fsub fast float %944, %332
  %978 = fsub fast float %943, %333
  %979 = call float @dx.op.dot3.f32(i32 55, float %976, float %977, float %978, float %976, float %977, float %978)  ; Dot3(ax,ay,az,bx,by,bz)
  %980 = call float @dx.op.unary.f32(i32 25, float %979)  ; Rsqrt(value)
  %981 = fmul fast float %980, %976
  %982 = fmul fast float %980, %977
  %983 = fmul fast float %980, %978
  br i1 %966, label %984, label %991

; <label>:984                                     ; preds = %942
  %985 = fmul fast float %937, %937
  %986 = fmul fast float %985, %979
  %987 = fmul fast float %986, %986
  %988 = fsub fast float 1.000000e+00, %987
  %989 = call float @dx.op.unary.f32(i32 7, float %988)  ; Saturate(value)
  %990 = fmul fast float %989, %989
  br label %1001

; <label>:991                                     ; preds = %942
  %992 = fmul fast float %976, %937
  %993 = fmul fast float %977, %937
  %994 = fmul fast float %978, %937
  %995 = call float @dx.op.dot3.f32(i32 55, float %992, float %993, float %994, float %992, float %993, float %994)  ; Dot3(ax,ay,az,bx,by,bz)
  %996 = call float @dx.op.unary.f32(i32 7, float %995)  ; Saturate(value)
  %997 = fsub fast float 1.000000e+00, %996
  %998 = call float @dx.op.unary.f32(i32 23, float %997)  ; Log(value)
  %999 = fmul fast float %998, %935
  %1000 = call float @dx.op.unary.f32(i32 21, float %999)  ; Exp(value)
  br label %1001

; <label>:1001                                    ; preds = %991, %984
  %1002 = phi float [ %990, %984 ], [ %1000, %991 ]
  br i1 %967, label %1003, label %1010

; <label>:1003                                    ; preds = %1001
  %1004 = call float @dx.op.dot3.f32(i32 55, float %981, float %982, float %983, float %927, float %928, float %929)  ; Dot3(ax,ay,az,bx,by,bz)
  %1005 = fsub fast float %1004, %957
  %1006 = fmul fast float %1005, %959
  %1007 = call float @dx.op.unary.f32(i32 7, float %1006)  ; Saturate(value)
  %1008 = fmul fast float %1007, %1007
  %1009 = fmul fast float %1008, %1002
  br label %1010

; <label>:1010                                    ; preds = %1003, %1001
  %1011 = phi float [ %1009, %1003 ], [ %1002, %1001 ]
  br i1 %968, label %1012, label %1016

; <label>:1012                                    ; preds = %1010
  %1013 = call float @dx.op.dot3.f32(i32 55, float %927, float %928, float %929, float %981, float %982, float %983)  ; Dot3(ax,ay,az,bx,by,bz)
  %1014 = fcmp fast olt float %1013, 0.000000e+00
  %1015 = select i1 %1014, float 0.000000e+00, float %1011
  br label %1016

; <label>:1016                                    ; preds = %1012, %1010
  %1017 = phi float [ %1015, %1012 ], [ %1011, %1010 ]
  br i1 %968, label %1018, label %1250

; <label>:1018                                    ; preds = %1016
  %1019 = fmul fast float %929, %920
  %1020 = fmul fast float %928, %921
  %1021 = fsub fast float %1019, %1020
  %1022 = fmul fast float %927, %921
  %1023 = fmul fast float %929, %919
  %1024 = fsub fast float %1022, %1023
  %1025 = fmul fast float %928, %919
  %1026 = fmul fast float %927, %920
  %1027 = fsub fast float %1025, %1026
  %1028 = fcmp fast ogt float %975, 0x3FA1EB8520000000
  br i1 %1028, label %1029, label %1124

; <label>:1029                                    ; preds = %1018
  %1030 = fmul fast float %976, %1021
  %1031 = call float @dx.op.tertiary.f32(i32 46, float %1024, float %977, float %1030)  ; FMad(a,b,c)
  %1032 = call float @dx.op.tertiary.f32(i32 46, float %1027, float %978, float %1031)  ; FMad(a,b,c)
  %1033 = fmul fast float %976, %919
  %1034 = call float @dx.op.tertiary.f32(i32 46, float %920, float %977, float %1033)  ; FMad(a,b,c)
  %1035 = call float @dx.op.tertiary.f32(i32 46, float %921, float %978, float %1034)  ; FMad(a,b,c)
  %1036 = fmul fast float %976, %927
  %1037 = call float @dx.op.tertiary.f32(i32 46, float %928, float %977, float %1036)  ; FMad(a,b,c)
  %1038 = call float @dx.op.tertiary.f32(i32 46, float %929, float %978, float %1037)  ; FMad(a,b,c)
  %1039 = fmul fast float %975, %975
  %1040 = fsub fast float 1.000000e+00, %1039
  %1041 = call float @dx.op.unary.f32(i32 24, float %1040)  ; Sqrt(value)
  %1042 = fmul fast float %975, %971
  %1043 = call float @dx.op.binary.f32(i32 36, float %1038, float %1042)  ; FMin(a,b)
  %1044 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %1042)  ; FMax(a,b)
  %1045 = fdiv fast float %1043, %1044
  %1046 = fmul fast float %1041, %971
  %1047 = fmul fast float %1046, %1045
  %1048 = fcmp fast ogt float %1032, 0.000000e+00
  %1049 = fcmp fast ogt float %1035, 0.000000e+00
  %1050 = fcmp fast olt float %1032, 0.000000e+00
  %1051 = fcmp fast olt float %1035, 0.000000e+00
  %1052 = zext i1 %1048 to i32
  %1053 = zext i1 %1049 to i32
  %1054 = zext i1 %1050 to i32
  %1055 = zext i1 %1051 to i32
  %1056 = sub nsw i32 %1052, %1054
  %1057 = sub nsw i32 %1053, %1055
  %1058 = sitofp i32 %1056 to float
  %1059 = sitofp i32 %1057 to float
  %1060 = fadd fast float %1047, %962
  %1061 = fadd fast float %1047, %964
  %1062 = call float @dx.op.unary.f32(i32 6, float %1032)  ; FAbs(value)
  %1063 = call float @dx.op.unary.f32(i32 6, float %1035)  ; FAbs(value)
  %1064 = call float @dx.op.binary.f32(i32 35, float %1062, float %1060)  ; FMax(a,b)
  %1065 = call float @dx.op.binary.f32(i32 35, float %1063, float %1061)  ; FMax(a,b)
  %1066 = fsub fast float %963, %1047
  %1067 = fadd fast float %1066, %1064
  %1068 = fmul fast float %1067, %1058
  %1069 = fsub fast float %965, %1047
  %1070 = fadd fast float %1069, %1065
  %1071 = fmul fast float %1070, %1059
  %1072 = fsub fast float %1038, %1043
  %1073 = call float @dx.op.binary.f32(i32 35, float %1072, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1074 = call float @dx.op.unary.f32(i32 6, float %1068)  ; FAbs(value)
  %1075 = call float @dx.op.unary.f32(i32 6, float %1071)  ; FAbs(value)
  %1076 = fdiv fast float %1074, %1073
  %1077 = fdiv fast float %1075, %1073
  %1078 = fmul fast float %1076, %1043
  %1079 = fmul fast float %1077, %1043
  %1080 = fsub fast float %1078, %1047
  %1081 = fsub fast float %1079, %1047
  %1082 = fsub fast float -0.000000e+00, %1058
  %1083 = fsub fast float -0.000000e+00, %1059
  %1084 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1082)  ; FMax(a,b)
  %1085 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1083)  ; FMax(a,b)
  %1086 = fmul fast float %1080, %1084
  %1087 = fmul fast float %1081, %1085
  %1088 = fsub fast float %1086, %962
  %1089 = fsub fast float %1087, %964
  %1090 = call float @dx.op.binary.f32(i32 35, float %1088, float %963)  ; FMax(a,b)
  %1091 = call float @dx.op.binary.f32(i32 35, float %1089, float %965)  ; FMax(a,b)
  %1092 = call float @dx.op.binary.f32(i32 36, float %1090, float %962)  ; FMin(a,b)
  %1093 = call float @dx.op.binary.f32(i32 36, float %1091, float %964)  ; FMin(a,b)
  %1094 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1058)  ; FMax(a,b)
  %1095 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1059)  ; FMax(a,b)
  %1096 = fmul fast float %1094, %1080
  %1097 = fmul fast float %1095, %1081
  %1098 = fsub fast float %962, %1096
  %1099 = fsub fast float %964, %1097
  %1100 = call float @dx.op.binary.f32(i32 35, float %1098, float %963)  ; FMax(a,b)
  %1101 = call float @dx.op.binary.f32(i32 35, float %1099, float %965)  ; FMax(a,b)
  %1102 = call float @dx.op.binary.f32(i32 36, float %1100, float %962)  ; FMin(a,b)
  %1103 = call float @dx.op.binary.f32(i32 36, float %1101, float %964)  ; FMin(a,b)
  %1104 = fadd fast float %1102, %1092
  %1105 = fadd fast float %1103, %1093
  %1106 = fmul fast float %1104, 5.000000e-01
  %1107 = fmul fast float %1105, 5.000000e-01
  %1108 = fsub fast float %1102, %1092
  %1109 = fsub fast float %1103, %1093
  %1110 = fmul fast float %1108, 5.000000e-01
  %1111 = fmul fast float %1109, 5.000000e-01
  %1112 = fmul fast float %1106, %1021
  %1113 = fmul fast float %1106, %1024
  %1114 = fmul fast float %1106, %1027
  %1115 = fsub fast float %976, %1112
  %1116 = fsub fast float %977, %1113
  %1117 = fsub fast float %978, %1114
  %1118 = fmul fast float %1107, %919
  %1119 = fmul fast float %1107, %920
  %1120 = fmul fast float %1107, %921
  %1121 = fsub fast float %1115, %1118
  %1122 = fsub fast float %1116, %1119
  %1123 = fsub fast float %1117, %1120
  br label %1124

; <label>:1124                                    ; preds = %1029, %1018
  %1125 = phi float [ %1121, %1029 ], [ %976, %1018 ]
  %1126 = phi float [ %1122, %1029 ], [ %977, %1018 ]
  %1127 = phi float [ %1123, %1029 ], [ %978, %1018 ]
  %1128 = phi float [ %1110, %1029 ], [ %962, %1018 ]
  %1129 = phi float [ %1111, %1029 ], [ %964, %1018 ]
  %1130 = fcmp fast oeq float %1128, 0.000000e+00
  %1131 = fcmp fast oeq float %1129, 0.000000e+00
  %1132 = or i1 %1130, %1131
  br i1 %1132, label %1280, label %1133

; <label>:1133                                    ; preds = %1124
  %1134 = call float @dx.op.dot3.f32(i32 55, float %1021, float %1024, float %1027, float %1125, float %1126, float %1127)  ; Dot3(ax,ay,az,bx,by,bz)
  %1135 = call float @dx.op.dot3.f32(i32 55, float %919, float %920, float %921, float %1125, float %1126, float %1127)  ; Dot3(ax,ay,az,bx,by,bz)
  %1136 = call float @dx.op.dot3.f32(i32 55, float %927, float %928, float %929, float %1125, float %1126, float %1127)  ; Dot3(ax,ay,az,bx,by,bz)
  %1137 = fsub fast float %1134, %1128
  %1138 = fadd fast float %1134, %1128
  %1139 = fsub fast float %1135, %1129
  %1140 = fadd fast float %1135, %1129
  %1141 = fmul fast float %1136, %1136
  %1142 = call float @dx.op.dot2.f32(i32 54, float %1137, float %1139, float %1137, float %1139)  ; Dot2(ax,ay,bx,by)
  %1143 = fadd fast float %1142, %1141
  %1144 = call float @dx.op.unary.f32(i32 25, float %1143)  ; Rsqrt(value)
  %1145 = fmul fast float %1144, %1137
  %1146 = fmul fast float %1144, %1139
  %1147 = fmul fast float %1144, %1136
  %1148 = call float @dx.op.dot2.f32(i32 54, float %1138, float %1139, float %1138, float %1139)  ; Dot2(ax,ay,bx,by)
  %1149 = fadd fast float %1148, %1141
  %1150 = call float @dx.op.unary.f32(i32 25, float %1149)  ; Rsqrt(value)
  %1151 = fmul fast float %1150, %1138
  %1152 = fmul fast float %1150, %1139
  %1153 = fmul fast float %1150, %1136
  %1154 = call float @dx.op.dot2.f32(i32 54, float %1138, float %1140, float %1138, float %1140)  ; Dot2(ax,ay,bx,by)
  %1155 = fadd fast float %1154, %1141
  %1156 = call float @dx.op.unary.f32(i32 25, float %1155)  ; Rsqrt(value)
  %1157 = fmul fast float %1156, %1138
  %1158 = fmul fast float %1156, %1140
  %1159 = fmul fast float %1156, %1136
  %1160 = call float @dx.op.dot2.f32(i32 54, float %1137, float %1140, float %1137, float %1140)  ; Dot2(ax,ay,bx,by)
  %1161 = fadd fast float %1160, %1141
  %1162 = call float @dx.op.unary.f32(i32 25, float %1161)  ; Rsqrt(value)
  %1163 = fmul fast float %1162, %1137
  %1164 = fmul fast float %1162, %1140
  %1165 = fmul fast float %1162, %1136
  %1166 = call float @dx.op.dot3.f32(i32 55, float %1145, float %1146, float %1147, float %1151, float %1152, float %1153)  ; Dot3(ax,ay,az,bx,by,bz)
  %1167 = call float @dx.op.dot3.f32(i32 55, float %1151, float %1152, float %1153, float %1157, float %1158, float %1159)  ; Dot3(ax,ay,az,bx,by,bz)
  %1168 = call float @dx.op.dot3.f32(i32 55, float %1157, float %1158, float %1159, float %1163, float %1164, float %1165)  ; Dot3(ax,ay,az,bx,by,bz)
  %1169 = call float @dx.op.dot3.f32(i32 55, float %1163, float %1164, float %1165, float %1145, float %1146, float %1147)  ; Dot3(ax,ay,az,bx,by,bz)
  %1170 = fmul fast float %1166, 0x3FC6666660000000
  %1171 = fsub fast float 0x3FF921FF20000000, %1170
  %1172 = fadd fast float %1166, 1.000000e+00
  %1173 = call float @dx.op.unary.f32(i32 25, float %1172)  ; Rsqrt(value)
  %1174 = fmul fast float %1167, 0x3FC6666660000000
  %1175 = fsub fast float 0x3FF921FF20000000, %1174
  %1176 = fadd fast float %1167, 1.000000e+00
  %1177 = call float @dx.op.unary.f32(i32 25, float %1176)  ; Rsqrt(value)
  %1178 = fmul fast float %1177, %1175
  %1179 = fmul fast float %1168, 0x3FC6666660000000
  %1180 = fsub fast float 0x3FF921FF20000000, %1179
  %1181 = fadd fast float %1168, 1.000000e+00
  %1182 = call float @dx.op.unary.f32(i32 25, float %1181)  ; Rsqrt(value)
  %1183 = fmul fast float %1169, 0x3FC6666660000000
  %1184 = fsub fast float 0x3FF921FF20000000, %1183
  %1185 = fadd fast float %1169, 1.000000e+00
  %1186 = call float @dx.op.unary.f32(i32 25, float %1185)  ; Rsqrt(value)
  %1187 = fmul fast float %1186, %1184
  %1188 = fmul fast float %1171, %1173
  %1189 = fsub fast float -0.000000e+00, %1188
  %1190 = fmul fast float %1145, %1189
  %1191 = fmul fast float %1146, %1189
  %1192 = fmul fast float %1147, %1189
  %1193 = fmul fast float %1178, %1157
  %1194 = fmul fast float %1178, %1158
  %1195 = fmul fast float %1178, %1159
  %1196 = fadd fast float %1193, %1190
  %1197 = fadd fast float %1194, %1191
  %1198 = fadd fast float %1195, %1192
  %1199 = fmul fast float %1198, %1152
  %1200 = fmul fast float %1197, %1153
  %1201 = fsub fast float %1199, %1200
  %1202 = fmul fast float %1196, %1153
  %1203 = fmul fast float %1198, %1151
  %1204 = fsub fast float %1202, %1203
  %1205 = fmul fast float %1197, %1151
  %1206 = fmul fast float %1196, %1152
  %1207 = fsub fast float %1205, %1206
  %1208 = fmul fast float %1187, %1145
  %1209 = fmul fast float %1187, %1146
  %1210 = fmul fast float %1187, %1147
  %1211 = fmul fast float %1180, %1182
  %1212 = fsub fast float -0.000000e+00, %1211
  %1213 = fmul fast float %1157, %1212
  %1214 = fmul fast float %1158, %1212
  %1215 = fmul fast float %1159, %1212
  %1216 = fadd fast float %1208, %1213
  %1217 = fadd fast float %1209, %1214
  %1218 = fadd fast float %1210, %1215
  %1219 = fmul fast float %1218, %1164
  %1220 = fmul fast float %1217, %1165
  %1221 = fsub fast float %1219, %1220
  %1222 = fmul fast float %1216, %1165
  %1223 = fmul fast float %1218, %1163
  %1224 = fsub fast float %1222, %1223
  %1225 = fmul fast float %1217, %1163
  %1226 = fmul fast float %1216, %1164
  %1227 = fsub fast float %1225, %1226
  %1228 = fadd fast float %1221, %1201
  %1229 = fadd fast float %1224, %1204
  %1230 = fadd fast float %1227, %1207
  %1231 = fmul fast float %1228, %1021
  %1232 = fmul fast float %1228, %1024
  %1233 = fmul fast float %1228, %1027
  %1234 = fmul fast float %1229, %919
  %1235 = fmul fast float %1229, %920
  %1236 = fmul fast float %1229, %921
  %1237 = fadd fast float %1231, %1234
  %1238 = fadd fast float %1232, %1235
  %1239 = fadd fast float %1233, %1236
  %1240 = fmul fast float %1230, %927
  %1241 = fmul fast float %1230, %928
  %1242 = fmul fast float %1230, %929
  %1243 = fadd fast float %1237, %1240
  %1244 = fadd fast float %1238, %1241
  %1245 = fadd fast float %1239, %1242
  %1246 = call float @dx.op.dot3.f32(i32 55, float %1243, float %1244, float %1245, float %1243, float %1244, float %1245)  ; Dot3(ax,ay,az,bx,by,bz)
  %1247 = call float @dx.op.unary.f32(i32 25, float %1246)  ; Rsqrt(value)
  %1248 = fmul fast float %1246, 5.000000e-01
  %1249 = fmul fast float %1248, %1247
  br label %1280

; <label>:1250                                    ; preds = %1016
  %1251 = fmul fast float %964, 5.000000e-01
  %1252 = fmul fast float %1251, %919
  %1253 = fmul fast float %1251, %920
  %1254 = fmul fast float %1251, %921
  %1255 = fsub fast float %976, %1252
  %1256 = fsub fast float %977, %1253
  %1257 = fsub fast float %978, %1254
  %1258 = fadd fast float %1252, %976
  %1259 = fadd fast float %1253, %977
  %1260 = fadd fast float %1254, %978
  %1261 = fcmp fast ogt float %964, 0.000000e+00
  %1262 = call float @dx.op.dot3.f32(i32 55, float %1255, float %1256, float %1257, float %1255, float %1256, float %1257)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %1261, label %1263, label %1274, !dx.controlflow.hints !46

; <label>:1263                                    ; preds = %1250
  %1264 = call float @dx.op.dot3.f32(i32 55, float %1258, float %1259, float %1260, float %1258, float %1259, float %1260)  ; Dot3(ax,ay,az,bx,by,bz)
  %1265 = call float @dx.op.unary.f32(i32 25, float %1262)  ; Rsqrt(value)
  %1266 = call float @dx.op.unary.f32(i32 25, float %1264)  ; Rsqrt(value)
  %1267 = fmul fast float %1266, %1265
  %1268 = call float @dx.op.dot3.f32(i32 55, float %1255, float %1256, float %1257, float %1258, float %1259, float %1260)  ; Dot3(ax,ay,az,bx,by,bz)
  %1269 = fmul fast float %1268, 5.000000e-01
  %1270 = fadd fast float %1269, %903
  %1271 = fmul fast float %1270, %1267
  %1272 = fadd fast float %1271, 5.000000e-01
  %1273 = fdiv fast float %1267, %1272
  br label %1277

; <label>:1274                                    ; preds = %1250
  %1275 = fadd fast float %1262, %903
  %1276 = fdiv fast float 1.000000e+00, %1275
  br label %1277

; <label>:1277                                    ; preds = %1274, %1263
  %1278 = phi float [ %1273, %1263 ], [ %1276, %1274 ]
  %1279 = select i1 %966, float %1278, float 1.000000e+00
  br label %1280

; <label>:1280                                    ; preds = %1277, %1133, %1124
  %1281 = phi float [ %1279, %1277 ], [ 0.000000e+00, %1124 ], [ %1249, %1133 ]
  %1282 = fsub fast float -0.000000e+00, %364
  %1283 = fsub fast float -0.000000e+00, %365
  %1284 = fsub fast float -0.000000e+00, %366
  %1285 = call float @dx.op.dot3.f32(i32 55, float %981, float %982, float %983, float %1282, float %1283, float %1284)  ; Dot3(ax,ay,az,bx,by,bz)
  %1286 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %1287 = extractvalue %dx.types.CBufRet.f32 %1286, 1
  %1288 = fmul fast float %1287, %1287
  %1289 = fsub fast float 1.000000e+00, %1288
  %1290 = fmul fast float %1285, 2.000000e+00
  %1291 = fadd fast float %1290, %1287
  %1292 = fmul fast float %1291, %1287
  %1293 = fadd fast float %1292, 1.000000e+00
  %1294 = call float @dx.op.unary.f32(i32 24, float %1293)  ; Sqrt(value)
  %1295 = fmul fast float %1294, 0x402921FB60000000
  %1296 = fmul fast float %1295, %1293
  %1297 = fdiv fast float %1289, %1296
  %1298 = fmul fast float %1017, %940
  %1299 = fmul fast float %1298, %1281
  %1300 = fmul fast float %1299, %1297
  %1301 = fmul fast float %1300, %932
  %1302 = fmul fast float %1300, %933
  %1303 = fmul fast float %1300, %934
  %1304 = fadd fast float %1301, %907
  %1305 = fadd fast float %1302, %908
  %1306 = fadd fast float %1303, %909
  br label %1307

; <label>:1307                                    ; preds = %1280, %906
  %1308 = phi float [ %1304, %1280 ], [ %907, %906 ]
  %1309 = phi float [ %1305, %1280 ], [ %908, %906 ]
  %1310 = phi float [ %1306, %1280 ], [ %909, %906 ]
  %1311 = add nuw i32 %910, 1
  %1312 = icmp eq i32 %1311, %833
  br i1 %1312, label %1313, label %906, !llvm.loop !47

; <label>:1313                                    ; preds = %1307
  br label %1314

; <label>:1314                                    ; preds = %1313, %870
  %1315 = phi float [ %806, %870 ], [ %1308, %1313 ]
  %1316 = phi float [ %807, %870 ], [ %1309, %1313 ]
  %1317 = phi float [ %808, %870 ], [ %1310, %1313 ]
  %1318 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1319 = extractvalue %dx.types.CBufRet.f32 %1318, 2
  %1320 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1321 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1320, i32 0, i32 %34, i32 %35, i32 %36, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1322 = extractvalue %dx.types.ResRet.f32 %1321, 0
  %1323 = extractvalue %dx.types.ResRet.f32 %1321, 1
  %1324 = extractvalue %dx.types.ResRet.f32 %1321, 2
  %1325 = fmul fast float %1322, %1319
  %1326 = fmul fast float %1323, %1319
  %1327 = fmul fast float %1324, %1319
  %1328 = fadd fast float %1325, %1315
  %1329 = fadd fast float %1326, %1316
  %1330 = fadd fast float %1327, %1317
  %1331 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1332 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1331, i32 0, i32 %34, i32 %35, i32 %36, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1333 = extractvalue %dx.types.ResRet.f32 %1332, 0
  %1334 = extractvalue %dx.types.ResRet.f32 %1332, 1
  %1335 = extractvalue %dx.types.ResRet.f32 %1332, 2
  %1336 = extractvalue %dx.types.ResRet.f32 %1332, 3
  %1337 = call float @dx.op.dot3.f32(i32 55, float %1333, float %1334, float %1335, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1338 = fadd fast float %1336, %1337
  %1339 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %33, i32 86)  ; CBufferLoadLegacy(handle,regIndex)
  %1340 = extractvalue %dx.types.CBufRet.i32 %1339, 0
  %1341 = icmp eq i32 %1340, 0
  br i1 %1341, label %1348, label %1342, !dx.controlflow.hints !49

; <label>:1342                                    ; preds = %1314
  %1343 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1344 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1343, i32 0, i32 %34, i32 %35, i32 %36, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1345 = extractvalue %dx.types.ResRet.f32 %1344, 0
  %1346 = extractvalue %dx.types.ResRet.f32 %1344, 1
  %1347 = extractvalue %dx.types.ResRet.f32 %1344, 2
  br label %1348

; <label>:1348                                    ; preds = %1342, %1314
  %1349 = phi float [ %1345, %1342 ], [ 0.000000e+00, %1314 ]
  %1350 = phi float [ %1346, %1342 ], [ 0.000000e+00, %1314 ]
  %1351 = phi float [ %1347, %1342 ], [ 0.000000e+00, %1314 ]
  %1352 = extractvalue %dx.types.CBufRet.f32 %1318, 1
  %1353 = fmul fast float %1333, %1328
  %1354 = fmul fast float %1334, %1329
  %1355 = fmul fast float %1335, %1330
  %1356 = fadd fast float %1349, %1353
  %1357 = fadd fast float %1350, %1354
  %1358 = fadd fast float %1351, %1355
  %1359 = fmul fast float %1352, %1356
  %1360 = fmul fast float %1352, %1357
  %1361 = fmul fast float %1352, %1358
  %1362 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1363 = extractvalue %dx.types.CBufRet.i32 %1362, 0
  %1364 = extractvalue %dx.types.CBufRet.i32 %1362, 1
  %1365 = extractvalue %dx.types.CBufRet.i32 %1362, 2
  %1366 = icmp slt i32 %34, %1363
  %1367 = icmp slt i32 %35, %1364
  %1368 = icmp slt i32 %36, %1365
  %1369 = and i1 %1366, %1367
  %1370 = and i1 %1368, %1369
  br i1 %1370, label %1371, label %1385

; <label>:1371                                    ; preds = %1348
  %1372 = bitcast float %1359 to i32
  %1373 = bitcast float %1360 to i32
  %1374 = bitcast float %1361 to i32
  %1375 = bitcast float %1338 to i32
  %1376 = icmp ult i32 %1372, 2139095040
  %1377 = icmp ult i32 %1373, 2139095040
  %1378 = icmp ult i32 %1374, 2139095040
  %1379 = icmp ult i32 %1375, 2139095040
  %1380 = select i1 %1376, float %1359, float 0.000000e+00
  %1381 = select i1 %1377, float %1360, float 0.000000e+00
  %1382 = select i1 %1378, float %1361, float 0.000000e+00
  %1383 = select i1 %1379, float %1338, float 0.000000e+00
  %1384 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1384, i32 %34, i32 %35, i32 %36, float %1380, float %1381, float %1382, float %1383, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %1385

; <label>:1385                                    ; preds = %1371, %1348, %200
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!39}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !25, !27, !33}
!5 = !{!6, !8, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24}
!6 = !{i32 0, %"class.Texture3D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 5}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 4, i32 0, !9}
!11 = !{i32 3, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 4, i32 0, !9}
!12 = !{i32 4, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 4, i32 0, !9}
!13 = !{i32 5, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 2, i32 0, !9}
!14 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !9}
!15 = !{i32 7, %"class.Buffer<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 10, i32 0, !9}
!16 = !{i32 8, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 8, i32 1, i32 10, i32 0, !7}
!17 = !{i32 9, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 9, i32 1, i32 10, i32 0, !7}
!18 = !{i32 10, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 4, i32 0, !9}
!19 = !{i32 11, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 4, i32 0, !9}
!20 = !{i32 12, %"class.Texture2D<float>"* undef, !"", i32 0, i32 12, i32 1, i32 2, i32 0, !9}
!21 = !{i32 13, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 4, i32 0, !9}
!22 = !{i32 14, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 4, i32 0, !9}
!23 = !{i32 15, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 4, i32 0, !9}
!24 = !{i32 16, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 16, i32 1, i32 2, i32 0, !9}
!25 = !{!26}
!26 = !{i32 0, %"class.RWTexture3D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i1 false, i1 false, i1 false, !9}
!27 = !{!28, !29, !30, !31, !32}
!28 = !{i32 0, %hostlayout._RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 1380, null}
!29 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!30 = !{i32 2, %hostlayout.UniformBufferConstants_ForwardLightData* undef, !"", i32 0, i32 2, i32 1, i32 708, null}
!31 = !{i32 3, %UniformBufferConstants_LumenGIVolumeStruct* undef, !"", i32 0, i32 3, i32 1, i32 572, null}
!32 = !{i32 4, %UniformBufferConstants_VolumetricFog* undef, !"", i32 0, i32 4, i32 1, i32 104, null}
!33 = !{!34, !35, !36, !37, !38}
!34 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!35 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!36 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!37 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!38 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!39 = !{void ()* @LightScatteringCS, !"LightScatteringCS", null, !4, !40}
!40 = !{i32 4, !41, i32 5, !42}
!41 = !{i32 4, i32 4, i32 4}
!42 = !{i32 0}
!43 = distinct !{!43, !"dx.controlflow.hints", i32 2}
!44 = distinct !{!44, !"dx.controlflow.hints", i32 1}
!45 = distinct !{!45, !"dx.controlflow.hints", i32 1}
!46 = distinct !{!46, !"dx.controlflow.hints", i32 1}
!47 = distinct !{!47, !48}
!48 = !{!"llvm.loop.unroll.disable"}
!49 = distinct !{!49, !"dx.controlflow.hints", i32 1}
