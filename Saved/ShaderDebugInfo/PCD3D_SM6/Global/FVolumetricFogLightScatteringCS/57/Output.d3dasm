;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 5408cd23d3b3658ccfa44573d320d8ef
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(4,4,4)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct hostlayout._RootShaderParameters
;   {
;
;       row_major float4x4 UnjitteredClipToTranslatedWorld;; Offset:   64
;       row_major float4x4 UnjitteredPrevTranslatedWorldToClip;; Offset:  128
;       float4 FrameJitterOffsets[16];                ; Offset:  192
;       float HistoryWeight;                          ; Offset:  448
;       uint HistoryMissSuperSampleCount;             ; Offset:  452
;       float AOObjectMaxDistance;                    ; Offset:  592
;       float AOStepScale;                            ; Offset:  596
;       float AOStepExponentScale;                    ; Offset:  600
;       float AOMaxViewDistance;                      ; Offset:  604
;       float AOGlobalMaxOcclusionDistance;           ; Offset:  608
;       float4 GlobalVolumeTranslatedCenterAndExtent[6];; Offset:  656
;       float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset:  752
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset:  848
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset:  944
;       float GlobalDistanceFieldMipFactor;           ; Offset: 1040
;       float GlobalDistanceFieldMipTransition;       ; Offset: 1044
;       uint GlobalDistanceFieldClipmapSizeInPages;   ; Offset: 1048
;       float3 GlobalDistanceFieldInvPageAtlasSize;   ; Offset: 1056
;       float3 GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 1072
;       float GlobalVolumeDimension;                  ; Offset: 1084
;       float GlobalVolumeTexelSize;                  ; Offset: 1088
;       float MaxGlobalDFAOConeDistance;              ; Offset: 1092
;       uint NumGlobalSDFClipmaps;                    ; Offset: 1096
;       float CoveredExpandSurfaceScale;              ; Offset: 1100
;       float NotCoveredExpandSurfaceScale;           ; Offset: 1104
;       float NotCoveredMinStepScale;                 ; Offset: 1108
;       float DitheredTransparencyStepThreshold;      ; Offset: 1112
;       float DitheredTransparencyTraceThreshold;     ; Offset: 1116
;       float4 SkySH[3];                              ; Offset: 1136
;       row_major float4x4 DirectionalLightFunctionTranslatedWorldToShadow;; Offset: 1184
;       float2 PrevConservativeDepthTextureSize;      ; Offset: 1312
;       float2 UseHeightFogColors;                    ; Offset: 1320
;       float2 LightScatteringHistoryPreExposureAndInv;; Offset: 1328
;       float StaticLightingScatteringIntensity;      ; Offset: 1336
;       float SkyLightVolumetricScatteringIntensity;  ; Offset: 1340
;       float SkyLightUseStaticShadowing;             ; Offset: 1344
;       float PhaseG;                                 ; Offset: 1348
;       float InverseSquaredLightDistanceBiasScale;   ; Offset: 1352
;       float LightScatteringSampleJitterMultiplier;  ; Offset: 1356
;       float UseDirectionalLightShadowing;           ; Offset: 1368
;       uint UseConservativeDepthTexture;             ; Offset: 1372
;       uint UseEmissive;                             ; Offset: 1376
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:  1380
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_ForwardLightData
; {
;
;   struct hostlayout.UniformBufferConstants_ForwardLightData
;   {
;
;       uint ForwardLightData_NumLocalLights;         ; Offset:    0
;       uint ForwardLightData_NumReflectionCaptures;  ; Offset:    4
;       uint ForwardLightData_HasDirectionalLight;    ; Offset:    8
;       uint ForwardLightData_NumGridCells;           ; Offset:   12
;       int3 ForwardLightData_CulledGridSize;         ; Offset:   16
;       uint ForwardLightData_MaxCulledLightsPerCell; ; Offset:   28
;       uint ForwardLightData_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_ForwardLightData_36;          ; Offset:   36
;       uint PrePadding_ForwardLightData_40;          ; Offset:   40
;       uint PrePadding_ForwardLightData_44;          ; Offset:   44
;       float3 ForwardLightData_LightGridZParams;     ; Offset:   48
;       float PrePadding_ForwardLightData_60;         ; Offset:   60
;       float3 ForwardLightData_DirectionalLightDirection;; Offset:   64
;       float ForwardLightData_DirectionalLightSourceRadius;; Offset:   76
;       float3 ForwardLightData_DirectionalLightColor;; Offset:   80
;       float ForwardLightData_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint ForwardLightData_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_ForwardLightData_100;         ; Offset:  100
;       float2 ForwardLightData_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint ForwardLightData_NumDirectionalLightCascades;; Offset:  112
;       int ForwardLightData_DirectionalLightVSM;     ; Offset:  116
;       int PrePadding_ForwardLightData_120;          ; Offset:  120
;       int PrePadding_ForwardLightData_124;          ; Offset:  124
;       float4 ForwardLightData_CascadeEndDepths;     ; Offset:  128
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 ForwardLightData_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float ForwardLightData_DirectionalLightDepthBias;; Offset:  480
;       uint ForwardLightData_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint ForwardLightData_SimpleLightsEndIndex;   ; Offset:  488
;       uint ForwardLightData_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint ForwardLightData_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_ForwardLightData_500;         ; Offset:  500
;       uint PrePadding_ForwardLightData_504;         ; Offset:  504
;       uint PrePadding_ForwardLightData_508;         ; Offset:  508
;       float4 ForwardLightData_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint ForwardLightData_DirectLightingShowFlag; ; Offset:  592
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_604;; Offset:  604
;       float ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_ForwardLightData_644;         ; Offset:  644
;       uint PrePadding_ForwardLightData_648;         ; Offset:  648
;       uint PrePadding_ForwardLightData_652;         ; Offset:  652
;       uint BindlessResource_ForwardLightData_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_ForwardLightData_660;         ; Offset:  660
;       uint BindlessSampler_ForwardLightData_ShadowmapSampler;; Offset:  664
;       uint PrePadding_ForwardLightData_668;         ; Offset:  668
;       uint BindlessResource_ForwardLightData_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_ForwardLightData_676;         ; Offset:  676
;       uint BindlessSampler_ForwardLightData_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_ForwardLightData_684;         ; Offset:  684
;       uint BindlessResource_ForwardLightData_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_ForwardLightData_692;         ; Offset:  692
;       uint BindlessResource_ForwardLightData_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_ForwardLightData_700;         ; Offset:  700
;       uint BindlessResource_ForwardLightData_CulledLightDataGrid;; Offset:  704
;   
;   } UniformBufferConstants_ForwardLightData;        ; Offset:    0 Size:   708
;
; }
;
; cbuffer UniformBufferConstants_LumenGIVolumeStruct
; {
;
;   struct UniformBufferConstants_LumenGIVolumeStruct
;   {
;
;       float LumenGIVolumeStruct_ReprojectionRadiusScale;; Offset:    0
;       float LumenGIVolumeStruct_ClipmapWorldExtent; ; Offset:    4
;       float LumenGIVolumeStruct_ClipmapDistributionBase;; Offset:    8
;       float LumenGIVolumeStruct_InvClipmapFadeSize; ; Offset:   12
;       int2 LumenGIVolumeStruct_ProbeAtlasResolutionInProbes;; Offset:   16
;       uint LumenGIVolumeStruct_RadianceProbeClipmapResolution;; Offset:   24
;       uint LumenGIVolumeStruct_NumRadianceProbeClipmaps;; Offset:   28
;       uint LumenGIVolumeStruct_RadianceProbeResolution;; Offset:   32
;       uint LumenGIVolumeStruct_FinalProbeResolution;; Offset:   36
;       uint LumenGIVolumeStruct_FinalRadianceAtlasMaxMip;; Offset:   40
;       uint LumenGIVolumeStruct_CalculateIrradiance; ; Offset:   44
;       uint LumenGIVolumeStruct_IrradianceProbeResolution;; Offset:   48
;       uint LumenGIVolumeStruct_OcclusionProbeResolution;; Offset:   52
;       uint LumenGIVolumeStruct_NumProbesToTraceBudget;; Offset:   56
;       uint LumenGIVolumeStruct_RadianceCacheStats;  ; Offset:   60
;       uint BindlessResource_LumenGIVolumeStruct_RadianceProbeIndirectionTexture;; Offset:   64
;       uint PrePadding_LumenGIVolumeStruct_68;       ; Offset:   68
;       uint BindlessResource_LumenGIVolumeStruct_RadianceCacheFinalRadianceAtlas;; Offset:   72
;       uint PrePadding_LumenGIVolumeStruct_76;       ; Offset:   76
;       uint BindlessResource_LumenGIVolumeStruct_RadianceCacheFinalIrradianceAtlas;; Offset:   80
;       uint PrePadding_LumenGIVolumeStruct_84;       ; Offset:   84
;       uint BindlessResource_LumenGIVolumeStruct_RadianceCacheProbeOcclusionAtlas;; Offset:   88
;       uint PrePadding_LumenGIVolumeStruct_92;       ; Offset:   92
;       uint BindlessResource_LumenGIVolumeStruct_RadianceCacheDepthAtlas;; Offset:   96
;       uint PrePadding_LumenGIVolumeStruct_100;      ; Offset:  100
;       uint BindlessResource_LumenGIVolumeStruct_ProbeWorldOffset;; Offset:  104
;       uint PrePadding_LumenGIVolumeStruct_108;      ; Offset:  108
;       float4 LumenGIVolumeStruct_RadianceProbeSettings[6];; Offset:  112
;       float4 LumenGIVolumeStruct_PaddedWorldPositionToRadianceProbeCoordBias[6];; Offset:  208
;       float4 LumenGIVolumeStruct_PaddedRadianceProbeCoordToWorldPositionBias[6];; Offset:  304
;       float2 LumenGIVolumeStruct_InvProbeFinalRadianceAtlasResolution;; Offset:  400
;       float2 LumenGIVolumeStruct_InvProbeFinalIrradianceAtlasResolution;; Offset:  408
;       float2 LumenGIVolumeStruct_InvProbeDepthAtlasResolution;; Offset:  416
;       uint LumenGIVolumeStruct_OverrideCacheOcclusionLighting;; Offset:  424
;       uint LumenGIVolumeStruct_ShowBlackRadianceCacheLighting;; Offset:  428
;       uint LumenGIVolumeStruct_ProbeAtlasResolutionModuloMask;; Offset:  432
;       uint LumenGIVolumeStruct_ProbeAtlasResolutionDivideShift;; Offset:  436
;       float PrePadding_LumenGIVolumeStruct_440;     ; Offset:  440
;       float PrePadding_LumenGIVolumeStruct_444;     ; Offset:  444
;       uint BindlessResource_LumenGIVolumeStruct_Radiance;; Offset:  448
;       uint PrePadding_LumenGIVolumeStruct_452;      ; Offset:  452
;       uint BindlessResource_LumenGIVolumeStruct_Normal;; Offset:  456
;       uint PrePadding_LumenGIVolumeStruct_460;      ; Offset:  460
;       uint BindlessResource_LumenGIVolumeStruct_SceneDepth;; Offset:  464
;       uint PrePadding_LumenGIVolumeStruct_468;      ; Offset:  468
;       uint LumenGIVolumeStruct_Enabled;             ; Offset:  472
;       float LumenGIVolumeStruct_RelativeDepthThreshold;; Offset:  476
;       float LumenGIVolumeStruct_SpecularScale;      ; Offset:  480
;       float LumenGIVolumeStruct_Contrast;           ; Offset:  484
;       float PrePadding_LumenGIVolumeStruct_488;     ; Offset:  488
;       float PrePadding_LumenGIVolumeStruct_492;     ; Offset:  492
;       uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolume0;; Offset:  496
;       uint PrePadding_LumenGIVolumeStruct_500;      ; Offset:  500
;       uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolume1;; Offset:  504
;       uint PrePadding_LumenGIVolumeStruct_508;      ; Offset:  508
;       uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolumeHistory0;; Offset:  512
;       uint PrePadding_LumenGIVolumeStruct_516;      ; Offset:  516
;       uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolumeHistory1;; Offset:  520
;       uint PrePadding_LumenGIVolumeStruct_524;      ; Offset:  524
;       uint BindlessSampler_LumenGIVolumeStruct_TranslucencyGIVolumeSampler;; Offset:  528
;       uint PrePadding_LumenGIVolumeStruct_532;      ; Offset:  532
;       uint PrePadding_LumenGIVolumeStruct_536;      ; Offset:  536
;       uint PrePadding_LumenGIVolumeStruct_540;      ; Offset:  540
;       float3 LumenGIVolumeStruct_TranslucencyGIGridZParams;; Offset:  544
;       uint LumenGIVolumeStruct_TranslucencyGIGridPixelSizeShift;; Offset:  556
;       int3 LumenGIVolumeStruct_TranslucencyGIGridSize;; Offset:  560
;   
;   } UniformBufferConstants_LumenGIVolumeStruct;     ; Offset:    0 Size:   572
;
; }
;
; cbuffer UniformBufferConstants_VolumetricFog
; {
;
;   struct UniformBufferConstants_VolumetricFog
;   {
;
;       int3 VolumetricFog_GridSizeInt;               ; Offset:    0
;       int PrePadding_VolumetricFog_12;              ; Offset:   12
;       float3 VolumetricFog_GridSize;                ; Offset:   16
;       float PrePadding_VolumetricFog_28;            ; Offset:   28
;       float3 VolumetricFog_GridZParams;             ; Offset:   32
;       float PrePadding_VolumetricFog_44;            ; Offset:   44
;       float2 VolumetricFog_SVPosToVolumeUV;         ; Offset:   48
;       float VolumetricFog_MaxDistance;              ; Offset:   56
;       float PrePadding_VolumetricFog_60;            ; Offset:   60
;       float3 VolumetricFog_HeightFogInscatteringColor;; Offset:   64
;       float PrePadding_VolumetricFog_76;            ; Offset:   76
;       float3 VolumetricFog_HeightFogDirectionalLightInscatteringColor;; Offset:   80
;       float PrePadding_VolumetricFog_92;            ; Offset:   92
;       int2 VolumetricFog_FogGridToPixelXY;          ; Offset:   96
;   
;   } UniformBufferConstants_VolumetricFog;           ; Offset:    0 Size:   104
;
; }
;
; Resource bind info for VirtualShadowMap_PageTable
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_ForwardLightData   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_LumenGIVolumeStruct   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_VolumetricFog   cbuffer      NA          NA     CB4            cb4     1
; View_SharedBilinearClampedSampler   sampler      NA          NA      S0             s0     1
; ForwardLightData_ShadowmapSampler   sampler      NA          NA      S1             s1     1
; ForwardLightData_StaticShadowmapSampler   sampler      NA          NA      S2             s2     1
; LumenGIVolumeStruct_TranslucencyGIVolumeSampler   sampler      NA          NA      S3             s3     1
; LightFunctionSampler              sampler      NA          NA      S4             s4     1
; View_VolumetricLightmapIndirectionTexture   texture     u32          3d      T0             t0     1
; View_VolumetricLightmapBrickAmbientVector   texture     f32          3d      T1             t1     1
; View_VolumetricLightmapBrickSHCoefficients0   texture     f32          3d      T2             t2     1
; View_VolumetricLightmapBrickSHCoefficients2   texture     f32          3d      T3             t3     1
; View_VolumetricLightmapBrickSHCoefficients4   texture     f32          3d      T4             t4     1
; VirtualShadowMap_ProjectionData   texture    byte         r/o      T5             t5     1
; VirtualShadowMap_PageTable        texture  struct         r/o      T6             t6     1
; VirtualShadowMap_PhysicalPagePool   texture     u32     2darray      T7             t7     1
; ForwardLightData_DirectionalLightShadowmapAtlas   texture     f32          2d      T8             t8     1
; ForwardLightData_DirectionalLightStaticShadowmap   texture     f32          2d      T9             t9     1
; ForwardLightData_ForwardLocalLightBuffer   texture     f32         buf     T10            t10     1
; ForwardLightData_NumCulledLightsGrid   texture     u32         buf     T11            t11     1
; ForwardLightData_CulledLightDataGrid   texture     u32         buf     T12            t12     1
; LumenGIVolumeStruct_TranslucencyGIVolume0   texture     f32          3d     T13            t13     1
; LumenGIVolumeStruct_TranslucencyGIVolume1   texture     f32          3d     T14            t14     1
; ConservativeDepthTexture          texture     f32          2d     T15            t15     1
; VBufferA                          texture     f32          3d     T16            t16     1
; VBufferB                          texture     f32          3d     T17            t17     1
; LocalShadowedLightScattering      texture     f32          3d     T18            t18     1
; LightFunctionTexture              texture     f32          2d     T19            t19     1
; RWLightScattering                     UAV     f32          3d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.Texture3D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture3D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture3D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Texture2DArray<unsigned int>" = type { i32, %"class.Texture2DArray<unsigned int>::mips_type" }
%"class.Texture2DArray<unsigned int>::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Buffer<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%"class.RWTexture3D<vector<float, 4> >" = type { <4 x float> }
%hostlayout._RootShaderParameters = type { [4 x <4 x float>], [4 x <4 x float>], [16 x <4 x float>], float, i32, float, float, float, float, float, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, <3 x float>, <3 x float>, float, float, float, i32, float, float, float, float, float, [3 x <4 x float>], [4 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, float, float, float, float, float, float, float, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%hostlayout.UniformBufferConstants_ForwardLightData = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_LumenGIVolumeStruct = type { float, float, float, float, <2 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, i32, <3 x i32> }
%UniformBufferConstants_VolumetricFog = type { <3 x i32>, i32, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, <3 x float>, float, <3 x float>, float, <2 x i32> }
%struct.SamplerState = type { i32 }

define void @LightScatteringCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 13, i32 104 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %33 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 13, i32 572 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %34 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 13, i32 708 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %35 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %36 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 13, i32 1380 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %37 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %38 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %39 = call i32 @dx.op.threadId.i32(i32 93, i32 2)  ; ThreadId(component)
  %40 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %34, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %41 = extractvalue %dx.types.CBufRet.i32 %40, 0
  %42 = extractvalue %dx.types.CBufRet.i32 %40, 2
  %43 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %34, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %44 = extractvalue %dx.types.CBufRet.i32 %43, 0
  %45 = extractvalue %dx.types.CBufRet.i32 %43, 1
  %46 = extractvalue %dx.types.CBufRet.i32 %43, 2
  %47 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %34, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %48 = extractvalue %dx.types.CBufRet.i32 %47, 0
  %49 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %50 = extractvalue %dx.types.CBufRet.f32 %49, 0
  %51 = extractvalue %dx.types.CBufRet.f32 %49, 1
  %52 = extractvalue %dx.types.CBufRet.f32 %49, 2
  %53 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %54 = extractvalue %dx.types.CBufRet.f32 %53, 0
  %55 = extractvalue %dx.types.CBufRet.f32 %53, 1
  %56 = extractvalue %dx.types.CBufRet.f32 %53, 2
  %57 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %58 = extractvalue %dx.types.CBufRet.f32 %57, 0
  %59 = extractvalue %dx.types.CBufRet.f32 %57, 1
  %60 = extractvalue %dx.types.CBufRet.f32 %57, 2
  %61 = extractvalue %dx.types.CBufRet.f32 %57, 3
  %62 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %34, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %63 = extractvalue %dx.types.CBufRet.i32 %62, 0
  %64 = extractvalue %dx.types.CBufRet.i32 %62, 1
  %65 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %66 = extractvalue %dx.types.CBufRet.f32 %65, 0
  %67 = extractvalue %dx.types.CBufRet.f32 %65, 1
  %68 = extractvalue %dx.types.CBufRet.f32 %65, 2
  %69 = extractvalue %dx.types.CBufRet.f32 %65, 3
  %70 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %71 = extractvalue %dx.types.CBufRet.f32 %70, 0
  %72 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %34, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %73 = extractvalue %dx.types.CBufRet.i32 %72, 1
  %74 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %75 = extractvalue %dx.types.CBufRet.f32 %74, 0
  %76 = extractvalue %dx.types.CBufRet.f32 %74, 1
  %77 = extractvalue %dx.types.CBufRet.f32 %74, 2
  %78 = extractvalue %dx.types.CBufRet.f32 %74, 3
  %79 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %80 = extractvalue %dx.types.CBufRet.f32 %79, 0
  %81 = extractvalue %dx.types.CBufRet.f32 %79, 1
  %82 = extractvalue %dx.types.CBufRet.f32 %79, 2
  %83 = extractvalue %dx.types.CBufRet.f32 %79, 3
  %84 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %85 = extractvalue %dx.types.CBufRet.f32 %84, 0
  %86 = extractvalue %dx.types.CBufRet.f32 %84, 1
  %87 = extractvalue %dx.types.CBufRet.f32 %84, 2
  %88 = extractvalue %dx.types.CBufRet.f32 %84, 3
  %89 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 36)  ; CBufferLoadLegacy(handle,regIndex)
  %90 = extractvalue %dx.types.CBufRet.f32 %89, 0
  %91 = extractvalue %dx.types.CBufRet.f32 %89, 1
  %92 = extractvalue %dx.types.CBufRet.f32 %89, 2
  %93 = extractvalue %dx.types.CBufRet.f32 %89, 3
  %94 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %36, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %95 = extractvalue %dx.types.CBufRet.i32 %94, 3
  %96 = icmp eq i32 %95, 0
  %97 = uitofp i32 %37 to float
  %98 = uitofp i32 %38 to float
  %99 = uitofp i32 %39 to float
  br i1 %96, label %206, label %100

; <label>:100                                     ; preds = %0
  %101 = fadd fast float %97, 5.000000e-01
  %102 = fadd fast float %98, 5.000000e-01
  %103 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %104 = extractvalue %dx.types.CBufRet.f32 %103, 0
  %105 = extractvalue %dx.types.CBufRet.f32 %103, 1
  %106 = fdiv fast float %101, %104
  %107 = fdiv fast float %102, %105
  %108 = fmul fast float %106, 2.000000e+00
  %109 = fmul fast float %107, 2.000000e+00
  %110 = fadd fast float %108, -1.000000e+00
  %111 = fadd fast float %109, -1.000000e+00
  %112 = fsub fast float -0.000000e+00, %111
  %113 = fadd fast float %99, -1.000000e+00
  %114 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %115 = extractvalue %dx.types.CBufRet.f32 %114, 2
  %116 = fdiv fast float %113, %115
  %117 = call float @dx.op.unary.f32(i32 21, float %116)  ; Exp(value)
  %118 = extractvalue %dx.types.CBufRet.f32 %114, 1
  %119 = fsub fast float %117, %118
  %120 = extractvalue %dx.types.CBufRet.f32 %114, 0
  %121 = fdiv fast float %119, %120
  %122 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %123 = extractvalue %dx.types.CBufRet.f32 %122, 3
  %124 = fcmp fast ult float %123, 1.000000e+00
  br i1 %124, label %131, label %125, !dx.controlflow.hints !47

; <label>:125                                     ; preds = %100
  %126 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %127 = extractvalue %dx.types.CBufRet.f32 %126, 2
  %128 = fmul fast float %127, %121
  %129 = extractvalue %dx.types.CBufRet.f32 %122, 2
  %130 = fadd fast float %128, %129
  br label %138

; <label>:131                                     ; preds = %100
  %132 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %133 = extractvalue %dx.types.CBufRet.f32 %132, 3
  %134 = fadd fast float %133, %121
  %135 = extractvalue %dx.types.CBufRet.f32 %132, 2
  %136 = fmul fast float %134, %135
  %137 = fdiv fast float 1.000000e+00, %136
  br label %138

; <label>:138                                     ; preds = %131, %125
  %139 = phi float [ %130, %125 ], [ %137, %131 ]
  %140 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %141 = extractvalue %dx.types.CBufRet.f32 %140, 0
  %142 = extractvalue %dx.types.CBufRet.f32 %140, 1
  %143 = extractvalue %dx.types.CBufRet.f32 %140, 2
  %144 = extractvalue %dx.types.CBufRet.f32 %140, 3
  %145 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %146 = extractvalue %dx.types.CBufRet.f32 %145, 0
  %147 = extractvalue %dx.types.CBufRet.f32 %145, 1
  %148 = extractvalue %dx.types.CBufRet.f32 %145, 2
  %149 = extractvalue %dx.types.CBufRet.f32 %145, 3
  %150 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %151 = extractvalue %dx.types.CBufRet.f32 %150, 0
  %152 = extractvalue %dx.types.CBufRet.f32 %150, 1
  %153 = extractvalue %dx.types.CBufRet.f32 %150, 2
  %154 = extractvalue %dx.types.CBufRet.f32 %150, 3
  %155 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %156 = extractvalue %dx.types.CBufRet.f32 %155, 0
  %157 = extractvalue %dx.types.CBufRet.f32 %155, 1
  %158 = extractvalue %dx.types.CBufRet.f32 %155, 2
  %159 = extractvalue %dx.types.CBufRet.f32 %155, 3
  %160 = fmul fast float %141, %110
  %161 = call float @dx.op.tertiary.f32(i32 46, float %112, float %146, float %160)  ; FMad(a,b,c)
  %162 = call float @dx.op.tertiary.f32(i32 46, float %139, float %151, float %161)  ; FMad(a,b,c)
  %163 = fadd fast float %162, %156
  %164 = fmul fast float %142, %110
  %165 = call float @dx.op.tertiary.f32(i32 46, float %112, float %147, float %164)  ; FMad(a,b,c)
  %166 = call float @dx.op.tertiary.f32(i32 46, float %139, float %152, float %165)  ; FMad(a,b,c)
  %167 = fadd fast float %166, %157
  %168 = fmul fast float %143, %110
  %169 = call float @dx.op.tertiary.f32(i32 46, float %112, float %148, float %168)  ; FMad(a,b,c)
  %170 = call float @dx.op.tertiary.f32(i32 46, float %139, float %153, float %169)  ; FMad(a,b,c)
  %171 = fadd fast float %170, %158
  %172 = fmul fast float %144, %110
  %173 = call float @dx.op.tertiary.f32(i32 46, float %112, float %149, float %172)  ; FMad(a,b,c)
  %174 = call float @dx.op.tertiary.f32(i32 46, float %139, float %154, float %173)  ; FMad(a,b,c)
  %175 = fadd fast float %174, %159
  %176 = fdiv fast float %163, %175
  %177 = fdiv fast float %167, %175
  %178 = fdiv fast float %171, %175
  %179 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %180 = extractvalue %dx.types.CBufRet.f32 %179, 2
  %181 = extractvalue %dx.types.CBufRet.f32 %179, 3
  %182 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %183 = extractvalue %dx.types.CBufRet.f32 %182, 2
  %184 = extractvalue %dx.types.CBufRet.f32 %182, 3
  %185 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %186 = extractvalue %dx.types.CBufRet.f32 %185, 2
  %187 = extractvalue %dx.types.CBufRet.f32 %185, 3
  %188 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %189 = extractvalue %dx.types.CBufRet.f32 %188, 2
  %190 = extractvalue %dx.types.CBufRet.f32 %188, 3
  %191 = fmul fast float %180, %176
  %192 = call float @dx.op.tertiary.f32(i32 46, float %177, float %183, float %191)  ; FMad(a,b,c)
  %193 = call float @dx.op.tertiary.f32(i32 46, float %178, float %186, float %192)  ; FMad(a,b,c)
  %194 = fadd fast float %193, %189
  %195 = fmul fast float %181, %176
  %196 = call float @dx.op.tertiary.f32(i32 46, float %177, float %184, float %195)  ; FMad(a,b,c)
  %197 = call float @dx.op.tertiary.f32(i32 46, float %178, float %187, float %196)  ; FMad(a,b,c)
  %198 = fadd fast float %197, %190
  %199 = fdiv fast float %194, %198
  %200 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %201 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %200, i32 0, i32 %37, i32 %38, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %202 = extractvalue %dx.types.ResRet.f32 %201, 0
  %203 = fcmp fast ogt float %202, %199
  br i1 %203, label %204, label %206

; <label>:204                                     ; preds = %138
  %205 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %205, i32 %37, i32 %38, i32 %39, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %1842

; <label>:206                                     ; preds = %138, %0
  %207 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %35, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %208 = extractvalue %dx.types.CBufRet.i32 %207, 0
  %209 = mul i32 %37, 1664525
  %210 = mul i32 %38, 1664525
  %211 = mul i32 %39, 1664525
  %212 = mul i32 %208, 1664525
  %213 = add i32 %209, 1013904223
  %214 = add i32 %210, 1013904223
  %215 = add i32 %211, 1013904223
  %216 = add i32 %212, 1013904223
  %217 = mul i32 %216, %214
  %218 = add i32 %213, %217
  %219 = mul i32 %218, %215
  %220 = add i32 %219, %214
  %221 = mul i32 %220, %218
  %222 = add i32 %221, %215
  %223 = mul i32 %222, %220
  %224 = add i32 %223, %216
  %225 = lshr i32 %218, 16
  %226 = lshr i32 %220, 16
  %227 = lshr i32 %222, 16
  %228 = lshr i32 %224, 16
  %229 = xor i32 %225, %218
  %230 = xor i32 %226, %220
  %231 = xor i32 %227, %222
  %232 = xor i32 %228, %224
  %233 = mul i32 %232, %230
  %234 = add i32 %233, %229
  %235 = mul i32 %234, %231
  %236 = add i32 %235, %230
  %237 = mul i32 %236, %234
  %238 = add i32 %237, %231
  %239 = uitofp i32 %234 to float
  %240 = uitofp i32 %236 to float
  %241 = uitofp i32 %238 to float
  %242 = fmul fast float %239, 0x3E00000000000000
  %243 = fmul fast float %240, 0x3E00000000000000
  %244 = fmul fast float %241, 0x3E00000000000000
  %245 = fadd fast float %242, -1.000000e+00
  %246 = fadd fast float %243, -1.000000e+00
  %247 = fadd fast float %244, -1.000000e+00
  %248 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %249 = extractvalue %dx.types.CBufRet.f32 %248, 0
  %250 = extractvalue %dx.types.CBufRet.f32 %248, 1
  %251 = extractvalue %dx.types.CBufRet.f32 %248, 2
  %252 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %253 = extractvalue %dx.types.CBufRet.f32 %252, 3
  %254 = fmul fast float %245, %253
  %255 = fmul fast float %246, %253
  %256 = fmul fast float %247, %253
  %257 = fadd fast float %254, %249
  %258 = fadd fast float %255, %250
  %259 = fadd fast float %256, %251
  %260 = fadd fast float %257, %97
  %261 = fadd fast float %258, %98
  %262 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %263 = extractvalue %dx.types.CBufRet.f32 %262, 0
  %264 = extractvalue %dx.types.CBufRet.f32 %262, 1
  %265 = fdiv fast float %260, %263
  %266 = fdiv fast float %261, %264
  %267 = fmul fast float %265, 2.000000e+00
  %268 = fmul fast float %266, 2.000000e+00
  %269 = fadd fast float %267, -1.000000e+00
  %270 = fadd fast float %268, -1.000000e+00
  %271 = fsub fast float -0.000000e+00, %270
  %272 = fadd fast float %259, %99
  %273 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %274 = extractvalue %dx.types.CBufRet.f32 %273, 2
  %275 = fdiv fast float %272, %274
  %276 = call float @dx.op.unary.f32(i32 21, float %275)  ; Exp(value)
  %277 = extractvalue %dx.types.CBufRet.f32 %273, 1
  %278 = fsub fast float %276, %277
  %279 = extractvalue %dx.types.CBufRet.f32 %273, 0
  %280 = fdiv fast float %278, %279
  %281 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %282 = extractvalue %dx.types.CBufRet.f32 %281, 3
  %283 = fcmp fast ult float %282, 1.000000e+00
  br i1 %283, label %290, label %284, !dx.controlflow.hints !47

; <label>:284                                     ; preds = %206
  %285 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %286 = extractvalue %dx.types.CBufRet.f32 %285, 2
  %287 = fmul fast float %286, %280
  %288 = extractvalue %dx.types.CBufRet.f32 %281, 2
  %289 = fadd fast float %287, %288
  br label %297

; <label>:290                                     ; preds = %206
  %291 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %292 = extractvalue %dx.types.CBufRet.f32 %291, 3
  %293 = fadd fast float %292, %280
  %294 = extractvalue %dx.types.CBufRet.f32 %291, 2
  %295 = fmul fast float %293, %294
  %296 = fdiv fast float 1.000000e+00, %295
  br label %297

; <label>:297                                     ; preds = %290, %284
  %298 = phi float [ %289, %284 ], [ %296, %290 ]
  %299 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %300 = extractvalue %dx.types.CBufRet.f32 %299, 0
  %301 = extractvalue %dx.types.CBufRet.f32 %299, 1
  %302 = extractvalue %dx.types.CBufRet.f32 %299, 2
  %303 = extractvalue %dx.types.CBufRet.f32 %299, 3
  %304 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %305 = extractvalue %dx.types.CBufRet.f32 %304, 0
  %306 = extractvalue %dx.types.CBufRet.f32 %304, 1
  %307 = extractvalue %dx.types.CBufRet.f32 %304, 2
  %308 = extractvalue %dx.types.CBufRet.f32 %304, 3
  %309 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %310 = extractvalue %dx.types.CBufRet.f32 %309, 0
  %311 = extractvalue %dx.types.CBufRet.f32 %309, 1
  %312 = extractvalue %dx.types.CBufRet.f32 %309, 2
  %313 = extractvalue %dx.types.CBufRet.f32 %309, 3
  %314 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %315 = extractvalue %dx.types.CBufRet.f32 %314, 0
  %316 = extractvalue %dx.types.CBufRet.f32 %314, 1
  %317 = extractvalue %dx.types.CBufRet.f32 %314, 2
  %318 = extractvalue %dx.types.CBufRet.f32 %314, 3
  %319 = fmul fast float %300, %269
  %320 = call float @dx.op.tertiary.f32(i32 46, float %271, float %305, float %319)  ; FMad(a,b,c)
  %321 = call float @dx.op.tertiary.f32(i32 46, float %298, float %310, float %320)  ; FMad(a,b,c)
  %322 = fadd fast float %321, %315
  %323 = fmul fast float %301, %269
  %324 = call float @dx.op.tertiary.f32(i32 46, float %271, float %306, float %323)  ; FMad(a,b,c)
  %325 = call float @dx.op.tertiary.f32(i32 46, float %298, float %311, float %324)  ; FMad(a,b,c)
  %326 = fadd fast float %325, %316
  %327 = fmul fast float %302, %269
  %328 = call float @dx.op.tertiary.f32(i32 46, float %271, float %307, float %327)  ; FMad(a,b,c)
  %329 = call float @dx.op.tertiary.f32(i32 46, float %298, float %312, float %328)  ; FMad(a,b,c)
  %330 = fadd fast float %329, %317
  %331 = fmul fast float %303, %269
  %332 = call float @dx.op.tertiary.f32(i32 46, float %271, float %308, float %331)  ; FMad(a,b,c)
  %333 = call float @dx.op.tertiary.f32(i32 46, float %298, float %313, float %332)  ; FMad(a,b,c)
  %334 = fadd fast float %333, %318
  %335 = fdiv fast float %322, %334
  %336 = fdiv fast float %326, %334
  %337 = fdiv fast float %330, %334
  %338 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %339 = extractvalue %dx.types.CBufRet.f32 %338, 0
  %340 = extractvalue %dx.types.CBufRet.f32 %338, 1
  %341 = extractvalue %dx.types.CBufRet.f32 %338, 2
  %342 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %343 = extractvalue %dx.types.CBufRet.f32 %342, 0
  %344 = extractvalue %dx.types.CBufRet.f32 %342, 1
  %345 = extractvalue %dx.types.CBufRet.f32 %342, 2
  %346 = fmul fast float %339, 2.097152e+06
  %347 = fmul fast float %340, 2.097152e+06
  %348 = fmul fast float %341, 2.097152e+06
  %349 = fsub fast float %343, %346
  %350 = fsub fast float %344, %347
  %351 = fsub fast float %345, %348
  %352 = fsub fast float %335, %349
  %353 = fsub fast float %336, %350
  %354 = fsub fast float %337, %351
  %355 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %356 = extractvalue %dx.types.CBufRet.f32 %355, 0
  %357 = extractvalue %dx.types.CBufRet.f32 %355, 1
  %358 = extractvalue %dx.types.CBufRet.f32 %355, 2
  %359 = fsub fast float %335, %356
  %360 = fsub fast float %336, %357
  %361 = fsub fast float %337, %358
  %362 = fmul fast float %359, %359
  %363 = fmul fast float %360, %360
  %364 = fadd fast float %362, %363
  %365 = fmul fast float %361, %361
  %366 = fadd fast float %364, %365
  %367 = call float @dx.op.unary.f32(i32 24, float %366)  ; Sqrt(value)
  %368 = fdiv fast float %359, %367
  %369 = fdiv fast float %360, %367
  %370 = fdiv fast float %361, %367
  %371 = icmp eq i32 %42, 0
  br i1 %371, label %372, label %374, !dx.controlflow.hints !48

; <label>:372                                     ; preds = %297
  %373 = extractvalue %dx.types.CBufRet.f32 %252, 1
  br label %1020

; <label>:374                                     ; preds = %297
  %375 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %376 = extractvalue %dx.types.CBufRet.f32 %375, 2
  %377 = fcmp fast ogt float %376, 0.000000e+00
  br i1 %377, label %378, label %953

; <label>:378                                     ; preds = %374
  %379 = icmp eq i32 %73, 0
  br i1 %379, label %415, label %380, !dx.controlflow.hints !49

; <label>:380                                     ; preds = %378
  %381 = fmul fast float %335, %75
  %382 = call float @dx.op.tertiary.f32(i32 46, float %336, float %80, float %381)  ; FMad(a,b,c)
  %383 = call float @dx.op.tertiary.f32(i32 46, float %337, float %85, float %382)  ; FMad(a,b,c)
  %384 = fadd fast float %383, %90
  %385 = fmul fast float %335, %76
  %386 = call float @dx.op.tertiary.f32(i32 46, float %336, float %81, float %385)  ; FMad(a,b,c)
  %387 = call float @dx.op.tertiary.f32(i32 46, float %337, float %86, float %386)  ; FMad(a,b,c)
  %388 = fadd fast float %387, %91
  %389 = fmul fast float %335, %78
  %390 = call float @dx.op.tertiary.f32(i32 46, float %336, float %83, float %389)  ; FMad(a,b,c)
  %391 = call float @dx.op.tertiary.f32(i32 46, float %337, float %88, float %390)  ; FMad(a,b,c)
  %392 = fadd fast float %391, %93
  %393 = fdiv fast float %384, %392
  %394 = fdiv fast float %388, %392
  %395 = fcmp fast ole float %393, 1.000000e+00
  %396 = fcmp fast ole float %394, 1.000000e+00
  %397 = fcmp fast oge float %393, 0.000000e+00
  %398 = fcmp fast oge float %394, 0.000000e+00
  %399 = and i1 %397, %395
  %400 = and i1 %398, %396
  %401 = and i1 %399, %400
  br i1 %401, label %402, label %415

; <label>:402                                     ; preds = %380
  %403 = fmul fast float %335, %77
  %404 = call float @dx.op.tertiary.f32(i32 46, float %336, float %82, float %403)  ; FMad(a,b,c)
  %405 = call float @dx.op.tertiary.f32(i32 46, float %337, float %87, float %404)  ; FMad(a,b,c)
  %406 = fadd fast float %405, %92
  %407 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %408 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %409 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %407, %dx.types.Handle %408, float %393, float %394, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %410 = extractvalue %dx.types.ResRet.f32 %409, 0
  %411 = fcmp fast olt float %406, %410
  %412 = fcmp fast ogt float %410, 0x3FEFAE1480000000
  %413 = or i1 %411, %412
  %414 = uitofp i1 %413 to float
  br label %415

; <label>:415                                     ; preds = %402, %380, %378
  %416 = phi float [ %414, %402 ], [ 1.000000e+00, %380 ], [ 1.000000e+00, %378 ]
  %417 = icmp eq i32 %63, 0
  br i1 %417, label %497, label %418

; <label>:418                                     ; preds = %415
  %419 = fcmp fast oge float %280, %66
  %420 = fcmp fast oge float %280, %67
  %421 = fcmp fast oge float %280, %68
  %422 = fcmp fast oge float %280, %69
  %423 = zext i1 %419 to i32
  %424 = zext i1 %420 to i32
  %425 = zext i1 %421 to i32
  %426 = zext i1 %422 to i32
  %427 = add nuw nsw i32 %423, %424
  %428 = add nuw nsw i32 %427, %425
  %429 = add nuw nsw i32 %428, %426
  %430 = icmp ult i32 %429, %63
  br i1 %430, label %431, label %497

; <label>:431                                     ; preds = %418
  %432 = shl nuw nsw i32 %429, 2
  %433 = add nuw nsw i32 %432, 9
  %434 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 %433)  ; CBufferLoadLegacy(handle,regIndex)
  %435 = extractvalue %dx.types.CBufRet.f32 %434, 0
  %436 = extractvalue %dx.types.CBufRet.f32 %434, 1
  %437 = extractvalue %dx.types.CBufRet.f32 %434, 3
  %438 = add nuw nsw i32 %432, 10
  %439 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 %438)  ; CBufferLoadLegacy(handle,regIndex)
  %440 = extractvalue %dx.types.CBufRet.f32 %439, 0
  %441 = extractvalue %dx.types.CBufRet.f32 %439, 1
  %442 = extractvalue %dx.types.CBufRet.f32 %439, 3
  %443 = add nuw nsw i32 %432, 11
  %444 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 %443)  ; CBufferLoadLegacy(handle,regIndex)
  %445 = extractvalue %dx.types.CBufRet.f32 %444, 0
  %446 = extractvalue %dx.types.CBufRet.f32 %444, 1
  %447 = extractvalue %dx.types.CBufRet.f32 %444, 3
  %448 = add nuw nsw i32 %432, 12
  %449 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 %448)  ; CBufferLoadLegacy(handle,regIndex)
  %450 = extractvalue %dx.types.CBufRet.f32 %449, 0
  %451 = extractvalue %dx.types.CBufRet.f32 %449, 1
  %452 = extractvalue %dx.types.CBufRet.f32 %449, 3
  %453 = fmul fast float %435, %335
  %454 = call float @dx.op.tertiary.f32(i32 46, float %336, float %440, float %453)  ; FMad(a,b,c)
  %455 = call float @dx.op.tertiary.f32(i32 46, float %337, float %445, float %454)  ; FMad(a,b,c)
  %456 = fadd fast float %455, %450
  %457 = fmul fast float %436, %335
  %458 = call float @dx.op.tertiary.f32(i32 46, float %336, float %441, float %457)  ; FMad(a,b,c)
  %459 = call float @dx.op.tertiary.f32(i32 46, float %337, float %446, float %458)  ; FMad(a,b,c)
  %460 = fadd fast float %459, %451
  %461 = fmul fast float %437, %335
  %462 = call float @dx.op.tertiary.f32(i32 46, float %336, float %442, float %461)  ; FMad(a,b,c)
  %463 = call float @dx.op.tertiary.f32(i32 46, float %337, float %447, float %462)  ; FMad(a,b,c)
  %464 = fadd fast float %463, %452
  %465 = fdiv fast float %456, %464
  %466 = fdiv fast float %460, %464
  %467 = add nuw nsw i32 %429, 25
  %468 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 %467)  ; CBufferLoadLegacy(handle,regIndex)
  %469 = extractvalue %dx.types.CBufRet.f32 %468, 0
  %470 = extractvalue %dx.types.CBufRet.f32 %468, 1
  %471 = extractvalue %dx.types.CBufRet.f32 %468, 2
  %472 = extractvalue %dx.types.CBufRet.f32 %468, 3
  %473 = fcmp fast ole float %465, %471
  %474 = fcmp fast ole float %466, %472
  %475 = fcmp fast oge float %465, %469
  %476 = fcmp fast oge float %466, %470
  %477 = and i1 %475, %473
  %478 = and i1 %476, %474
  %479 = and i1 %477, %478
  br i1 %479, label %480, label %497

; <label>:480                                     ; preds = %431
  %481 = extractvalue %dx.types.CBufRet.f32 %449, 2
  %482 = extractvalue %dx.types.CBufRet.f32 %444, 2
  %483 = extractvalue %dx.types.CBufRet.f32 %439, 2
  %484 = extractvalue %dx.types.CBufRet.f32 %434, 2
  %485 = fmul fast float %484, %335
  %486 = call float @dx.op.tertiary.f32(i32 46, float %336, float %483, float %485)  ; FMad(a,b,c)
  %487 = call float @dx.op.tertiary.f32(i32 46, float %337, float %482, float %486)  ; FMad(a,b,c)
  %488 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %489 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %490 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %488, %dx.types.Handle %489, float %465, float %466, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %491 = extractvalue %dx.types.ResRet.f32 %490, 0
  %492 = fsub fast float 1.000000e+00, %481
  %493 = fsub fast float %492, %487
  %494 = fsub fast float %491, %71
  %495 = fcmp fast olt float %493, %494
  %496 = uitofp i1 %495 to float
  br label %497

; <label>:497                                     ; preds = %480, %431, %418, %415
  %498 = phi float [ %496, %480 ], [ 1.000000e+00, %431 ], [ 1.000000e+00, %418 ], [ 1.000000e+00, %415 ]
  %499 = fmul fast float %498, %416
  %500 = fsub fast float %335, %343
  %501 = fsub fast float %336, %344
  %502 = fsub fast float %337, %345
  %503 = mul i32 %64, 336
  %504 = add i32 %503, 128
  %505 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %506 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %504, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %507 = add i32 %503, 144
  %508 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %507, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %509 = add i32 %503, 160
  %510 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %509, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %511 = add i32 %503, 176
  %512 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %511, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %513 = add i32 %503, 256
  %514 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %513, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %515 = extractvalue %dx.types.ResRet.i32 %514, 0
  %516 = extractvalue %dx.types.ResRet.i32 %514, 1
  %517 = extractvalue %dx.types.ResRet.i32 %514, 2
  %518 = bitcast i32 %515 to float
  %519 = bitcast i32 %516 to float
  %520 = bitcast i32 %517 to float
  %521 = add i32 %503, 268
  %522 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %521, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %523 = extractvalue %dx.types.ResRet.i32 %522, 0
  %524 = add i32 %503, 272
  %525 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %524, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %526 = add i32 %503, 288
  %527 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %526, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %528 = icmp eq i32 %523, 0
  %529 = fadd fast float %518, %339
  %530 = fadd fast float %519, %340
  %531 = fadd fast float %520, %341
  %532 = fmul fast float %529, 2.097152e+06
  %533 = fmul fast float %530, 2.097152e+06
  %534 = fmul fast float %531, 2.097152e+06
  %535 = fadd fast float %532, %500
  %536 = fadd fast float %533, %501
  %537 = fadd fast float %534, %502
  br i1 %528, label %538, label %778

; <label>:538                                     ; preds = %497
  %539 = extractvalue %dx.types.ResRet.i32 %527, 2
  %540 = bitcast i32 %539 to float
  %541 = extractvalue %dx.types.ResRet.i32 %527, 1
  %542 = bitcast i32 %541 to float
  %543 = extractvalue %dx.types.ResRet.i32 %527, 0
  %544 = bitcast i32 %543 to float
  %545 = add i32 %503, 320
  %546 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %545, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %547 = extractvalue %dx.types.ResRet.i32 %546, 0
  %548 = add i32 %503, 316
  %549 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %548, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %550 = extractvalue %dx.types.ResRet.i32 %549, 0
  %551 = add i32 %503, 300
  %552 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %551, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %553 = extractvalue %dx.types.ResRet.i32 %552, 0
  %554 = bitcast i32 %553 to float
  %555 = fadd fast float %535, %544
  %556 = fadd fast float %536, %542
  %557 = fadd fast float %537, %540
  %558 = fmul fast float %555, %555
  %559 = fmul fast float %556, %556
  %560 = fadd fast float %558, %559
  %561 = fmul fast float %557, %557
  %562 = fadd fast float %560, %561
  %563 = call float @dx.op.unary.f32(i32 24, float %562)  ; Sqrt(value)
  %564 = call float @dx.op.unary.f32(i32 23, float %563)  ; Log(value)
  %565 = fadd fast float %564, %554
  %566 = call float @dx.op.unary.f32(i32 27, float %565)  ; Round_ni(value)
  %567 = fptosi float %566 to i32
  %568 = sub nsw i32 %567, %550
  %569 = call i32 @dx.op.binary.i32(i32 37, i32 0, i32 %568)  ; IMax(a,b)
  %570 = icmp slt i32 %569, %547
  br i1 %570, label %571, label %950

; <label>:571                                     ; preds = %538
  %572 = add nsw i32 %569, %64
  %573 = mul i32 %572, 336
  %574 = add i32 %573, 128
  %575 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %574, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %576 = extractvalue %dx.types.ResRet.i32 %575, 0
  %577 = extractvalue %dx.types.ResRet.i32 %575, 1
  %578 = extractvalue %dx.types.ResRet.i32 %575, 2
  %579 = bitcast i32 %576 to float
  %580 = bitcast i32 %577 to float
  %581 = bitcast i32 %578 to float
  %582 = add i32 %573, 144
  %583 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %582, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %584 = extractvalue %dx.types.ResRet.i32 %583, 0
  %585 = extractvalue %dx.types.ResRet.i32 %583, 1
  %586 = extractvalue %dx.types.ResRet.i32 %583, 2
  %587 = bitcast i32 %584 to float
  %588 = bitcast i32 %585 to float
  %589 = bitcast i32 %586 to float
  %590 = add i32 %573, 160
  %591 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %590, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %592 = extractvalue %dx.types.ResRet.i32 %591, 0
  %593 = extractvalue %dx.types.ResRet.i32 %591, 1
  %594 = extractvalue %dx.types.ResRet.i32 %591, 2
  %595 = bitcast i32 %592 to float
  %596 = bitcast i32 %593 to float
  %597 = bitcast i32 %594 to float
  %598 = add i32 %573, 176
  %599 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %598, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %600 = extractvalue %dx.types.ResRet.i32 %599, 0
  %601 = extractvalue %dx.types.ResRet.i32 %599, 1
  %602 = extractvalue %dx.types.ResRet.i32 %599, 2
  %603 = bitcast i32 %600 to float
  %604 = bitcast i32 %601 to float
  %605 = bitcast i32 %602 to float
  %606 = add i32 %573, 256
  %607 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %606, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %608 = extractvalue %dx.types.ResRet.i32 %607, 0
  %609 = extractvalue %dx.types.ResRet.i32 %607, 1
  %610 = extractvalue %dx.types.ResRet.i32 %607, 2
  %611 = bitcast i32 %608 to float
  %612 = bitcast i32 %609 to float
  %613 = bitcast i32 %610 to float
  %614 = add i32 %573, 272
  %615 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %614, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %616 = extractvalue %dx.types.ResRet.i32 %615, 0
  %617 = extractvalue %dx.types.ResRet.i32 %615, 1
  %618 = extractvalue %dx.types.ResRet.i32 %615, 2
  %619 = bitcast i32 %616 to float
  %620 = bitcast i32 %617 to float
  %621 = bitcast i32 %618 to float
  %622 = fadd fast float %611, %339
  %623 = fadd fast float %612, %340
  %624 = fadd fast float %613, %341
  %625 = fmul fast float %622, 2.097152e+06
  %626 = fmul fast float %623, 2.097152e+06
  %627 = fmul fast float %624, 2.097152e+06
  %628 = fadd fast float %625, %500
  %629 = fadd fast float %628, %619
  %630 = fadd fast float %626, %501
  %631 = fadd fast float %630, %620
  %632 = fadd fast float %627, %502
  %633 = fadd fast float %632, %621
  %634 = fmul fast float %629, %579
  %635 = call float @dx.op.tertiary.f32(i32 46, float %631, float %587, float %634)  ; FMad(a,b,c)
  %636 = call float @dx.op.tertiary.f32(i32 46, float %633, float %595, float %635)  ; FMad(a,b,c)
  %637 = fadd fast float %636, %603
  %638 = fmul fast float %629, %580
  %639 = call float @dx.op.tertiary.f32(i32 46, float %631, float %588, float %638)  ; FMad(a,b,c)
  %640 = call float @dx.op.tertiary.f32(i32 46, float %633, float %596, float %639)  ; FMad(a,b,c)
  %641 = fadd fast float %640, %604
  %642 = fmul fast float %629, %581
  %643 = call float @dx.op.tertiary.f32(i32 46, float %631, float %589, float %642)  ; FMad(a,b,c)
  %644 = call float @dx.op.tertiary.f32(i32 46, float %633, float %597, float %643)  ; FMad(a,b,c)
  %645 = fadd fast float %644, %605
  %646 = fmul fast float %637, 1.280000e+02
  %647 = fmul fast float %641, 1.280000e+02
  %648 = fptoui float %646 to i32
  %649 = fptoui float %647 to i32
  %650 = icmp ult i32 %572, 8192
  br i1 %650, label %657, label %651

; <label>:651                                     ; preds = %571
  %652 = mul i32 %572, 21845
  %653 = shl i32 %649, 7
  %654 = add i32 %652, -178946048
  %655 = add i32 %654, %648
  %656 = add i32 %655, %653
  br label %657

; <label>:657                                     ; preds = %651, %571
  %658 = phi i32 [ %656, %651 ], [ %572, %571 ]
  %659 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %660 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %659, i32 %658, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %661 = extractvalue %dx.types.ResRet.i32 %660, 0
  %662 = lshr i32 %661, 20
  %663 = and i32 %662, 63
  %664 = and i32 %661, 134217728
  %665 = icmp eq i32 %664, 0
  br i1 %665, label %772, label %666

; <label>:666                                     ; preds = %657
  %667 = icmp eq i32 %663, 0
  %668 = zext i1 %667 to i32
  %669 = add i32 %663, %572
  %670 = fmul fast float %637, 1.638400e+04
  %671 = fmul fast float %641, 1.638400e+04
  %672 = fptoui float %670 to i32
  %673 = fptoui float %671 to i32
  br i1 %667, label %749, label %674

; <label>:674                                     ; preds = %666
  %675 = add i32 %573, 304
  %676 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %675, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %677 = extractvalue %dx.types.ResRet.i32 %676, 0
  %678 = extractvalue %dx.types.ResRet.i32 %676, 1
  %679 = mul i32 %669, 336
  %680 = add i32 %679, 304
  %681 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %680, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %682 = extractvalue %dx.types.ResRet.i32 %681, 0
  %683 = extractvalue %dx.types.ResRet.i32 %681, 1
  %684 = shl i32 %677, 5
  %685 = shl i32 %678, 5
  %686 = shl i32 %682, 5
  %687 = shl i32 %683, 5
  %688 = sub i32 %648, %684
  %689 = sub i32 %649, %685
  %690 = and i32 %662, 31
  %691 = shl i32 %686, %690
  %692 = shl i32 %687, %690
  %693 = add i32 %688, %691
  %694 = add i32 %689, %692
  %695 = lshr i32 %693, %690
  %696 = lshr i32 %694, %690
  %697 = shl i32 %695, 7
  %698 = shl i32 %696, 7
  %699 = or i32 %697, 127
  %700 = or i32 %698, 127
  %701 = add i32 %573, 112
  %702 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %701, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %703 = extractvalue %dx.types.ResRet.i32 %702, 2
  %704 = bitcast i32 %703 to float
  %705 = add i32 %679, 112
  %706 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %705, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %707 = extractvalue %dx.types.ResRet.i32 %706, 2
  %708 = bitcast i32 %707 to float
  %709 = sitofp i32 %677 to float
  %710 = sitofp i32 %678 to float
  %711 = sitofp i32 %682 to float
  %712 = sitofp i32 %683 to float
  %713 = shl i32 1, %690
  %714 = uitofp i32 %713 to float
  %715 = fdiv fast float 1.000000e+00, %714
  %716 = fmul fast float %715, %709
  %717 = fmul fast float %715, %710
  %718 = fsub fast float %711, %716
  %719 = fsub fast float %712, %717
  %720 = fmul fast float %718, 2.500000e-01
  %721 = fmul fast float %719, 2.500000e-01
  %722 = fmul fast float %715, %704
  %723 = fsub fast float %708, %722
  %724 = fmul fast float %715, %637
  %725 = fmul fast float %715, %641
  %726 = fadd fast float %720, %724
  %727 = fadd fast float %721, %725
  %728 = fmul fast float %726, 1.638400e+04
  %729 = fmul fast float %727, 1.638400e+04
  %730 = fptoui float %728 to i32
  %731 = fptoui float %729 to i32
  %732 = call i32 @dx.op.binary.i32(i32 39, i32 %730, i32 %697)  ; UMax(a,b)
  %733 = call i32 @dx.op.binary.i32(i32 39, i32 %731, i32 %698)  ; UMax(a,b)
  %734 = call i32 @dx.op.binary.i32(i32 40, i32 %732, i32 %699)  ; UMin(a,b)
  %735 = call i32 @dx.op.binary.i32(i32 40, i32 %733, i32 %700)  ; UMin(a,b)
  %736 = icmp ult i32 %669, 8192
  br i1 %736, label %742, label %737

; <label>:737                                     ; preds = %674
  %738 = mul i32 %669, 21845
  %739 = add i32 %738, -178946048
  %740 = add i32 %739, %695
  %741 = add i32 %740, %698
  br label %742

; <label>:742                                     ; preds = %737, %674
  %743 = phi i32 [ %741, %737 ], [ %669, %674 ]
  %744 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %659, i32 %743, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %745 = extractvalue %dx.types.ResRet.i32 %744, 0
  %746 = and i32 %745, 200278016
  %747 = icmp eq i32 %746, 134217728
  %748 = zext i1 %747 to i32
  br label %749

; <label>:749                                     ; preds = %742, %666
  %750 = phi i32 [ %734, %742 ], [ %672, %666 ]
  %751 = phi i32 [ %735, %742 ], [ %673, %666 ]
  %752 = phi i32 [ %748, %742 ], [ %668, %666 ]
  %753 = phi i32 [ %745, %742 ], [ %661, %666 ]
  %754 = phi float [ %715, %742 ], [ 1.000000e+00, %666 ]
  %755 = phi float [ %723, %742 ], [ 0.000000e+00, %666 ]
  %756 = icmp eq i32 %752, 0
  br i1 %756, label %772, label %757

; <label>:757                                     ; preds = %749
  %758 = shl i32 %753, 7
  %759 = and i32 %758, 130944
  %760 = lshr i32 %753, 3
  %761 = and i32 %760, 130944
  %762 = and i32 %750, 127
  %763 = and i32 %751, 127
  %764 = or i32 %759, %762
  %765 = or i32 %761, %763
  %766 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %767 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %766, i32 0, i32 %764, i32 %765, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %768 = extractvalue %dx.types.ResRet.i32 %767, 0
  %769 = bitcast i32 %768 to float
  %770 = fsub fast float %769, %755
  %771 = fdiv fast float %770, %754
  br label %772

; <label>:772                                     ; preds = %757, %749, %657
  %773 = phi float [ %771, %757 ], [ 0.000000e+00, %749 ], [ 0.000000e+00, %657 ]
  %774 = phi i1 [ true, %757 ], [ false, %749 ], [ false, %657 ]
  %775 = fcmp fast ogt float %773, %645
  %776 = and i1 %774, %775
  %777 = select i1 %776, float 0.000000e+00, float 1.000000e+00
  br label %950

; <label>:778                                     ; preds = %497
  %779 = extractvalue %dx.types.ResRet.i32 %512, 3
  %780 = extractvalue %dx.types.ResRet.i32 %512, 2
  %781 = extractvalue %dx.types.ResRet.i32 %512, 1
  %782 = extractvalue %dx.types.ResRet.i32 %512, 0
  %783 = extractvalue %dx.types.ResRet.i32 %510, 3
  %784 = extractvalue %dx.types.ResRet.i32 %510, 2
  %785 = extractvalue %dx.types.ResRet.i32 %510, 1
  %786 = extractvalue %dx.types.ResRet.i32 %510, 0
  %787 = extractvalue %dx.types.ResRet.i32 %508, 3
  %788 = extractvalue %dx.types.ResRet.i32 %508, 2
  %789 = extractvalue %dx.types.ResRet.i32 %508, 1
  %790 = extractvalue %dx.types.ResRet.i32 %508, 0
  %791 = extractvalue %dx.types.ResRet.i32 %506, 3
  %792 = extractvalue %dx.types.ResRet.i32 %506, 2
  %793 = extractvalue %dx.types.ResRet.i32 %506, 1
  %794 = extractvalue %dx.types.ResRet.i32 %506, 0
  %795 = extractvalue %dx.types.ResRet.i32 %525, 2
  %796 = bitcast i32 %795 to float
  %797 = extractvalue %dx.types.ResRet.i32 %525, 1
  %798 = bitcast i32 %797 to float
  %799 = extractvalue %dx.types.ResRet.i32 %525, 0
  %800 = bitcast i32 %799 to float
  %801 = fadd fast float %535, %800
  %802 = fadd fast float %536, %798
  %803 = fadd fast float %537, %796
  %804 = icmp eq i32 %523, 2
  br i1 %804, label %851, label %805

; <label>:805                                     ; preds = %778
  %806 = call float @dx.op.unary.f32(i32 6, float %801)  ; FAbs(value)
  %807 = call float @dx.op.unary.f32(i32 6, float %802)  ; FAbs(value)
  %808 = fcmp fast ult float %806, %807
  %809 = call float @dx.op.unary.f32(i32 6, float %803)  ; FAbs(value)
  %810 = fcmp fast ult float %806, %809
  %811 = or i1 %808, %810
  br i1 %811, label %815, label %812

; <label>:812                                     ; preds = %805
  %813 = fcmp ule float %801, 0.000000e+00
  %814 = zext i1 %813 to i32
  br label %823

; <label>:815                                     ; preds = %805
  %816 = fcmp fast ogt float %807, %809
  br i1 %816, label %817, label %820

; <label>:817                                     ; preds = %815
  %818 = fcmp fast ogt float %802, 0.000000e+00
  %819 = select i1 %818, i32 2, i32 3
  br label %823

; <label>:820                                     ; preds = %815
  %821 = fcmp fast ogt float %803, 0.000000e+00
  %822 = select i1 %821, i32 4, i32 5
  br label %823

; <label>:823                                     ; preds = %820, %817, %812
  %824 = phi i32 [ %814, %812 ], [ %819, %817 ], [ %822, %820 ]
  %825 = add i32 %824, %64
  %826 = mul i32 %825, 336
  %827 = add i32 %826, 128
  %828 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %827, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %829 = extractvalue %dx.types.ResRet.i32 %828, 0
  %830 = extractvalue %dx.types.ResRet.i32 %828, 1
  %831 = extractvalue %dx.types.ResRet.i32 %828, 2
  %832 = extractvalue %dx.types.ResRet.i32 %828, 3
  %833 = add i32 %826, 144
  %834 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %833, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %835 = extractvalue %dx.types.ResRet.i32 %834, 0
  %836 = extractvalue %dx.types.ResRet.i32 %834, 1
  %837 = extractvalue %dx.types.ResRet.i32 %834, 2
  %838 = extractvalue %dx.types.ResRet.i32 %834, 3
  %839 = add i32 %826, 160
  %840 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %839, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %841 = extractvalue %dx.types.ResRet.i32 %840, 0
  %842 = extractvalue %dx.types.ResRet.i32 %840, 1
  %843 = extractvalue %dx.types.ResRet.i32 %840, 2
  %844 = extractvalue %dx.types.ResRet.i32 %840, 3
  %845 = add i32 %826, 176
  %846 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %505, i32 %845, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %847 = extractvalue %dx.types.ResRet.i32 %846, 0
  %848 = extractvalue %dx.types.ResRet.i32 %846, 1
  %849 = extractvalue %dx.types.ResRet.i32 %846, 2
  %850 = extractvalue %dx.types.ResRet.i32 %846, 3
  br label %851

; <label>:851                                     ; preds = %823, %778
  %852 = phi i32 [ %829, %823 ], [ %794, %778 ]
  %853 = phi i32 [ %830, %823 ], [ %793, %778 ]
  %854 = phi i32 [ %831, %823 ], [ %792, %778 ]
  %855 = phi i32 [ %832, %823 ], [ %791, %778 ]
  %856 = phi i32 [ %835, %823 ], [ %790, %778 ]
  %857 = phi i32 [ %836, %823 ], [ %789, %778 ]
  %858 = phi i32 [ %837, %823 ], [ %788, %778 ]
  %859 = phi i32 [ %838, %823 ], [ %787, %778 ]
  %860 = phi i32 [ %841, %823 ], [ %786, %778 ]
  %861 = phi i32 [ %842, %823 ], [ %785, %778 ]
  %862 = phi i32 [ %843, %823 ], [ %784, %778 ]
  %863 = phi i32 [ %844, %823 ], [ %783, %778 ]
  %864 = phi i32 [ %847, %823 ], [ %782, %778 ]
  %865 = phi i32 [ %848, %823 ], [ %781, %778 ]
  %866 = phi i32 [ %849, %823 ], [ %780, %778 ]
  %867 = phi i32 [ %850, %823 ], [ %779, %778 ]
  %868 = phi i32 [ %825, %823 ], [ %64, %778 ]
  %869 = bitcast i32 %867 to float
  %870 = bitcast i32 %866 to float
  %871 = bitcast i32 %865 to float
  %872 = bitcast i32 %864 to float
  %873 = bitcast i32 %863 to float
  %874 = bitcast i32 %862 to float
  %875 = bitcast i32 %861 to float
  %876 = bitcast i32 %860 to float
  %877 = bitcast i32 %859 to float
  %878 = bitcast i32 %858 to float
  %879 = bitcast i32 %857 to float
  %880 = bitcast i32 %856 to float
  %881 = bitcast i32 %855 to float
  %882 = bitcast i32 %854 to float
  %883 = bitcast i32 %853 to float
  %884 = bitcast i32 %852 to float
  %885 = fmul fast float %884, %801
  %886 = call float @dx.op.tertiary.f32(i32 46, float %802, float %880, float %885)  ; FMad(a,b,c)
  %887 = call float @dx.op.tertiary.f32(i32 46, float %803, float %876, float %886)  ; FMad(a,b,c)
  %888 = fadd fast float %887, %872
  %889 = fmul fast float %883, %801
  %890 = call float @dx.op.tertiary.f32(i32 46, float %802, float %879, float %889)  ; FMad(a,b,c)
  %891 = call float @dx.op.tertiary.f32(i32 46, float %803, float %875, float %890)  ; FMad(a,b,c)
  %892 = fadd fast float %891, %871
  %893 = fmul fast float %882, %801
  %894 = call float @dx.op.tertiary.f32(i32 46, float %802, float %878, float %893)  ; FMad(a,b,c)
  %895 = call float @dx.op.tertiary.f32(i32 46, float %803, float %874, float %894)  ; FMad(a,b,c)
  %896 = fadd fast float %895, %870
  %897 = fmul fast float %881, %801
  %898 = call float @dx.op.tertiary.f32(i32 46, float %802, float %877, float %897)  ; FMad(a,b,c)
  %899 = call float @dx.op.tertiary.f32(i32 46, float %803, float %873, float %898)  ; FMad(a,b,c)
  %900 = fadd fast float %899, %869
  %901 = fdiv fast float %888, %900
  %902 = fdiv fast float %892, %900
  %903 = fdiv fast float %896, %900
  %904 = icmp ult i32 %868, 8192
  br i1 %904, label %915, label %905

; <label>:905                                     ; preds = %851
  %906 = fmul fast float %902, 1.280000e+02
  %907 = fptoui float %906 to i32
  %908 = fmul fast float %901, 1.280000e+02
  %909 = fptoui float %908 to i32
  %910 = mul i32 %868, 21845
  %911 = shl i32 %907, 7
  %912 = add i32 %910, -178946048
  %913 = add i32 %912, %909
  %914 = add i32 %913, %911
  br label %915

; <label>:915                                     ; preds = %905, %851
  %916 = phi i32 [ %914, %905 ], [ %868, %851 ]
  %917 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %918 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %917, i32 %916, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %919 = extractvalue %dx.types.ResRet.i32 %918, 0
  %920 = lshr i32 %919, 20
  %921 = and i32 %919, 134217728
  %922 = icmp eq i32 %921, 0
  %923 = and i32 %920, 31
  %924 = lshr i32 16384, %923
  %925 = uitofp i32 %924 to float
  %926 = select i1 %904, float 1.280000e+02, float %925
  br i1 %922, label %944, label %927

; <label>:927                                     ; preds = %915
  %928 = lshr i32 %919, 3
  %929 = and i32 %928, 130944
  %930 = fmul fast float %926, %902
  %931 = fptoui float %930 to i32
  %932 = and i32 %931, 127
  %933 = or i32 %932, %929
  %934 = shl i32 %919, 7
  %935 = and i32 %934, 130944
  %936 = fmul fast float %926, %901
  %937 = fptoui float %936 to i32
  %938 = and i32 %937, 127
  %939 = or i32 %938, %935
  %940 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %941 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %940, i32 0, i32 %939, i32 %933, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %942 = extractvalue %dx.types.ResRet.i32 %941, 0
  %943 = bitcast i32 %942 to float
  br label %944

; <label>:944                                     ; preds = %927, %915
  %945 = phi float [ %943, %927 ], [ 0.000000e+00, %915 ]
  %946 = phi i1 [ true, %927 ], [ false, %915 ]
  %947 = fcmp fast ogt float %945, %903
  %948 = and i1 %946, %947
  %949 = select i1 %948, float 0.000000e+00, float 1.000000e+00
  br label %950

; <label>:950                                     ; preds = %944, %772, %538
  %951 = phi float [ 1.000000e+00, %538 ], [ %777, %772 ], [ %949, %944 ]
  %952 = fmul fast float %499, %951
  br label %953

; <label>:953                                     ; preds = %950, %374
  %954 = phi float [ %952, %950 ], [ 1.000000e+00, %374 ]
  %955 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %956 = extractvalue %dx.types.CBufRet.f32 %955, 0
  %957 = extractvalue %dx.types.CBufRet.f32 %955, 1
  %958 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 75)  ; CBufferLoadLegacy(handle,regIndex)
  %959 = extractvalue %dx.types.CBufRet.f32 %958, 0
  %960 = extractvalue %dx.types.CBufRet.f32 %958, 1
  %961 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %962 = extractvalue %dx.types.CBufRet.f32 %961, 0
  %963 = extractvalue %dx.types.CBufRet.f32 %961, 1
  %964 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 77)  ; CBufferLoadLegacy(handle,regIndex)
  %965 = extractvalue %dx.types.CBufRet.f32 %964, 0
  %966 = extractvalue %dx.types.CBufRet.f32 %964, 1
  %967 = fmul fast float %956, %335
  %968 = call float @dx.op.tertiary.f32(i32 46, float %336, float %959, float %967)  ; FMad(a,b,c)
  %969 = call float @dx.op.tertiary.f32(i32 46, float %337, float %962, float %968)  ; FMad(a,b,c)
  %970 = fadd fast float %969, %965
  %971 = fmul fast float %957, %335
  %972 = call float @dx.op.tertiary.f32(i32 46, float %336, float %960, float %971)  ; FMad(a,b,c)
  %973 = call float @dx.op.tertiary.f32(i32 46, float %337, float %963, float %972)  ; FMad(a,b,c)
  %974 = fadd fast float %973, %966
  %975 = fmul fast float %970, 5.000000e-01
  %976 = fmul fast float %974, 5.000000e-01
  %977 = fadd fast float %975, 5.000000e-01
  %978 = fsub fast float 5.000000e-01, %976
  %979 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %980 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %981 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %979, %dx.types.Handle %980, float %977, float %978, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %982 = extractvalue %dx.types.ResRet.f32 %981, 0
  %983 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %984 = extractvalue %dx.types.CBufRet.f32 %983, 2
  %985 = fcmp fast ogt float %984, 0.000000e+00
  br i1 %985, label %986, label %995

; <label>:986                                     ; preds = %953
  %987 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %988 = extractvalue %dx.types.CBufRet.f32 %987, 0
  %989 = extractvalue %dx.types.CBufRet.f32 %987, 1
  %990 = extractvalue %dx.types.CBufRet.f32 %987, 2
  %991 = call float @dx.op.dot3.f32(i32 55, float %58, float %59, float %60, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %992 = fmul fast float %988, %991
  %993 = fmul fast float %989, %991
  %994 = fmul fast float %990, %991
  br label %995

; <label>:995                                     ; preds = %986, %953
  %996 = phi float [ %992, %986 ], [ %58, %953 ]
  %997 = phi float [ %993, %986 ], [ %59, %953 ]
  %998 = phi float [ %994, %986 ], [ %60, %953 ]
  %999 = fsub fast float -0.000000e+00, %368
  %1000 = fsub fast float -0.000000e+00, %369
  %1001 = fsub fast float -0.000000e+00, %370
  %1002 = call float @dx.op.dot3.f32(i32 55, float %54, float %55, float %56, float %999, float %1000, float %1001)  ; Dot3(ax,ay,az,bx,by,bz)
  %1003 = extractvalue %dx.types.CBufRet.f32 %252, 1
  %1004 = fmul fast float %1003, %1003
  %1005 = fsub fast float 1.000000e+00, %1004
  %1006 = fmul fast float %1002, 2.000000e+00
  %1007 = fadd fast float %1006, %1003
  %1008 = fmul fast float %1007, %1003
  %1009 = fadd fast float %1008, 1.000000e+00
  %1010 = call float @dx.op.unary.f32(i32 24, float %1009)  ; Sqrt(value)
  %1011 = fmul fast float %1010, 0x402921FB60000000
  %1012 = fmul fast float %1011, %1009
  %1013 = fdiv fast float %1005, %1012
  %1014 = fmul fast float %954, %61
  %1015 = fmul fast float %1014, %982
  %1016 = fmul fast float %1015, %1013
  %1017 = fmul fast float %1016, %996
  %1018 = fmul fast float %1016, %997
  %1019 = fmul fast float %1016, %998
  br label %1020

; <label>:1020                                    ; preds = %995, %372
  %1021 = phi float [ %373, %372 ], [ %1003, %995 ]
  %1022 = phi float [ 0.000000e+00, %372 ], [ %1017, %995 ]
  %1023 = phi float [ 0.000000e+00, %372 ], [ %1018, %995 ]
  %1024 = phi float [ 0.000000e+00, %372 ], [ %1019, %995 ]
  %1025 = fmul fast float %1021, %369
  %1026 = fmul fast float %1021, %370
  %1027 = fmul fast float %1021, %368
  %1028 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 83)  ; CBufferLoadLegacy(handle,regIndex)
  %1029 = extractvalue %dx.types.CBufRet.f32 %1028, 3
  %1030 = fcmp fast ogt float %1029, 0.000000e+00
  %1031 = extractvalue %dx.types.CBufRet.f32 %1028, 2
  %1032 = fcmp fast ogt float %1031, 0.000000e+00
  %1033 = or i1 %1030, %1032
  br i1 %1033, label %1034, label %1102

; <label>:1034                                    ; preds = %1020
  %1035 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 233)  ; CBufferLoadLegacy(handle,regIndex)
  %1036 = extractvalue %dx.types.CBufRet.f32 %1035, 0
  %1037 = extractvalue %dx.types.CBufRet.f32 %1035, 1
  %1038 = extractvalue %dx.types.CBufRet.f32 %1035, 2
  %1039 = fmul fast float %1036, %352
  %1040 = fmul fast float %1037, %353
  %1041 = fmul fast float %1038, %354
  %1042 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 234)  ; CBufferLoadLegacy(handle,regIndex)
  %1043 = extractvalue %dx.types.CBufRet.f32 %1042, 0
  %1044 = extractvalue %dx.types.CBufRet.f32 %1042, 1
  %1045 = extractvalue %dx.types.CBufRet.f32 %1042, 2
  %1046 = fadd fast float %1039, %1043
  %1047 = fadd fast float %1040, %1044
  %1048 = fadd fast float %1041, %1045
  %1049 = call float @dx.op.binary.f32(i32 35, float %1046, float 0.000000e+00)  ; FMax(a,b)
  %1050 = call float @dx.op.binary.f32(i32 35, float %1047, float 0.000000e+00)  ; FMax(a,b)
  %1051 = call float @dx.op.binary.f32(i32 35, float %1048, float 0.000000e+00)  ; FMax(a,b)
  %1052 = call float @dx.op.binary.f32(i32 36, float %1049, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1053 = call float @dx.op.binary.f32(i32 36, float %1050, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1054 = call float @dx.op.binary.f32(i32 36, float %1051, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1055 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 235)  ; CBufferLoadLegacy(handle,regIndex)
  %1056 = extractvalue %dx.types.CBufRet.f32 %1055, 0
  %1057 = extractvalue %dx.types.CBufRet.f32 %1055, 1
  %1058 = extractvalue %dx.types.CBufRet.f32 %1055, 2
  %1059 = fmul fast float %1056, %1052
  %1060 = fmul fast float %1057, %1053
  %1061 = fmul fast float %1058, %1054
  %1062 = fptosi float %1059 to i32
  %1063 = fptosi float %1060 to i32
  %1064 = fptosi float %1061 to i32
  %1065 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xU32>
  %1066 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1065, i32 0, i32 %1062, i32 %1063, i32 %1064, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1067 = extractvalue %dx.types.ResRet.i32 %1066, 0
  %1068 = extractvalue %dx.types.ResRet.i32 %1066, 1
  %1069 = extractvalue %dx.types.ResRet.i32 %1066, 2
  %1070 = extractvalue %dx.types.ResRet.i32 %1066, 3
  %1071 = uitofp i32 %1067 to float
  %1072 = uitofp i32 %1068 to float
  %1073 = uitofp i32 %1069 to float
  %1074 = uitofp i32 %1070 to float
  %1075 = extractvalue %dx.types.CBufRet.f32 %1055, 3
  %1076 = fadd fast float %1075, 1.000000e+00
  %1077 = fmul fast float %1076, %1071
  %1078 = fmul fast float %1076, %1072
  %1079 = fmul fast float %1076, %1073
  %1080 = fdiv fast float %1059, %1074
  %1081 = fdiv fast float %1060, %1074
  %1082 = fdiv fast float %1061, %1074
  %1083 = call float @dx.op.unary.f32(i32 22, float %1080)  ; Frc(value)
  %1084 = call float @dx.op.unary.f32(i32 22, float %1081)  ; Frc(value)
  %1085 = call float @dx.op.unary.f32(i32 22, float %1082)  ; Frc(value)
  %1086 = fmul fast float %1075, %1083
  %1087 = fmul fast float %1075, %1084
  %1088 = fmul fast float %1075, %1085
  %1089 = fadd fast float %1077, 5.000000e-01
  %1090 = fadd fast float %1089, %1086
  %1091 = fadd fast float %1078, 5.000000e-01
  %1092 = fadd fast float %1091, %1087
  %1093 = fadd fast float %1079, 5.000000e-01
  %1094 = fadd fast float %1093, %1088
  %1095 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 236)  ; CBufferLoadLegacy(handle,regIndex)
  %1096 = extractvalue %dx.types.CBufRet.f32 %1095, 0
  %1097 = extractvalue %dx.types.CBufRet.f32 %1095, 1
  %1098 = extractvalue %dx.types.CBufRet.f32 %1095, 2
  %1099 = fmul fast float %1090, %1096
  %1100 = fmul fast float %1092, %1097
  %1101 = fmul fast float %1094, %1098
  br label %1102

; <label>:1102                                    ; preds = %1034, %1020
  %1103 = phi float [ %1099, %1034 ], [ 0.000000e+00, %1020 ]
  %1104 = phi float [ %1100, %1034 ], [ 0.000000e+00, %1020 ]
  %1105 = phi float [ %1101, %1034 ], [ 0.000000e+00, %1020 ]
  %1106 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1107 = extractvalue %dx.types.CBufRet.f32 %1106, 0
  %1108 = extractvalue %dx.types.CBufRet.f32 %1106, 1
  %1109 = extractvalue %dx.types.CBufRet.f32 %1106, 3
  %1110 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1111 = extractvalue %dx.types.CBufRet.f32 %1110, 0
  %1112 = extractvalue %dx.types.CBufRet.f32 %1110, 1
  %1113 = extractvalue %dx.types.CBufRet.f32 %1110, 3
  %1114 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1115 = extractvalue %dx.types.CBufRet.f32 %1114, 0
  %1116 = extractvalue %dx.types.CBufRet.f32 %1114, 1
  %1117 = extractvalue %dx.types.CBufRet.f32 %1114, 3
  %1118 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %1119 = extractvalue %dx.types.CBufRet.f32 %1118, 0
  %1120 = extractvalue %dx.types.CBufRet.f32 %1118, 1
  %1121 = extractvalue %dx.types.CBufRet.f32 %1118, 3
  %1122 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 65)  ; CBufferLoadLegacy(handle,regIndex)
  %1123 = extractvalue %dx.types.CBufRet.f32 %1122, 0
  %1124 = extractvalue %dx.types.CBufRet.f32 %1122, 1
  %1125 = extractvalue %dx.types.CBufRet.f32 %1122, 2
  %1126 = fmul fast float %1123, 2.097152e+06
  %1127 = fmul fast float %1124, 2.097152e+06
  %1128 = fmul fast float %1125, 2.097152e+06
  %1129 = fsub fast float %352, %1126
  %1130 = fsub fast float %353, %1127
  %1131 = fsub fast float %354, %1128
  %1132 = fmul fast float %1129, %1107
  %1133 = call float @dx.op.tertiary.f32(i32 46, float %1130, float %1111, float %1132)  ; FMad(a,b,c)
  %1134 = call float @dx.op.tertiary.f32(i32 46, float %1131, float %1115, float %1133)  ; FMad(a,b,c)
  %1135 = fadd fast float %1134, %1119
  %1136 = fmul fast float %1129, %1108
  %1137 = call float @dx.op.tertiary.f32(i32 46, float %1130, float %1112, float %1136)  ; FMad(a,b,c)
  %1138 = call float @dx.op.tertiary.f32(i32 46, float %1131, float %1116, float %1137)  ; FMad(a,b,c)
  %1139 = fadd fast float %1138, %1120
  %1140 = fmul fast float %1129, %1109
  %1141 = call float @dx.op.tertiary.f32(i32 46, float %1130, float %1113, float %1140)  ; FMad(a,b,c)
  %1142 = call float @dx.op.tertiary.f32(i32 46, float %1131, float %1117, float %1141)  ; FMad(a,b,c)
  %1143 = fadd fast float %1142, %1121
  %1144 = fdiv fast float %1135, %1143
  %1145 = fdiv fast float %1139, %1143
  %1146 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %1147 = extractvalue %dx.types.CBufRet.f32 %1146, 0
  %1148 = fmul fast float %1147, %1143
  %1149 = extractvalue %dx.types.CBufRet.f32 %1146, 1
  %1150 = fadd fast float %1148, %1149
  %1151 = call float @dx.op.unary.f32(i32 23, float %1150)  ; Log(value)
  %1152 = extractvalue %dx.types.CBufRet.f32 %1146, 2
  %1153 = fmul fast float %1152, %1151
  %1154 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %33, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %1155 = extractvalue %dx.types.CBufRet.i32 %1154, 2
  %1156 = sitofp i32 %1155 to float
  %1157 = fdiv fast float %1153, %1156
  %1158 = fmul fast float %1144, 5.000000e-01
  %1159 = fmul fast float %1145, 5.000000e-01
  %1160 = fadd fast float %1158, 5.000000e-01
  %1161 = fsub fast float 5.000000e-01, %1159
  %1162 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1163 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1164 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1162, %dx.types.Handle %1163, float %1160, float %1161, float %1157, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1165 = extractvalue %dx.types.ResRet.f32 %1164, 0
  %1166 = extractvalue %dx.types.ResRet.f32 %1164, 1
  %1167 = extractvalue %dx.types.ResRet.f32 %1164, 2
  %1168 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1169 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1168, %dx.types.Handle %1163, float %1160, float %1161, float %1157, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1170 = extractvalue %dx.types.ResRet.f32 %1169, 0
  %1171 = extractvalue %dx.types.ResRet.f32 %1169, 1
  %1172 = extractvalue %dx.types.ResRet.f32 %1169, 2
  %1173 = call float @dx.op.dot3.f32(i32 55, float %1165, float %1166, float %1167, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1174 = fadd fast float %1173, 0x3EE4F8B580000000
  %1175 = fdiv fast float %1165, %1174
  %1176 = fdiv fast float %1166, %1174
  %1177 = fdiv fast float %1167, %1174
  %1178 = fmul fast float %1175, %1170
  %1179 = fmul fast float %1175, %1171
  %1180 = fmul fast float %1175, %1172
  %1181 = fmul fast float %1176, %1170
  %1182 = fmul fast float %1176, %1171
  %1183 = fmul fast float %1176, %1172
  %1184 = fmul fast float %1177, %1170
  %1185 = fmul fast float %1177, %1171
  %1186 = fmul fast float %1177, %1172
  %1187 = call float @dx.op.dot4.f32(i32 56, float %1165, float %1178, float %1179, float %1180, float 1.000000e+00, float %1025, float %1026, float %1027)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1188 = call float @dx.op.dot4.f32(i32 56, float %1166, float %1181, float %1182, float %1183, float 1.000000e+00, float %1025, float %1026, float %1027)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1189 = call float @dx.op.dot4.f32(i32 56, float %1167, float %1184, float %1185, float %1186, float 1.000000e+00, float %1025, float %1026, float %1027)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1190 = call float @dx.op.binary.f32(i32 35, float %1187, float 0.000000e+00)  ; FMax(a,b)
  %1191 = call float @dx.op.binary.f32(i32 35, float %1188, float 0.000000e+00)  ; FMax(a,b)
  %1192 = call float @dx.op.binary.f32(i32 35, float %1189, float 0.000000e+00)  ; FMax(a,b)
  %1193 = fadd fast float %1190, %1022
  %1194 = fadd fast float %1191, %1023
  %1195 = fadd fast float %1192, %1024
  %1196 = fcmp fast ogt float %1031, 0.000000e+00
  br i1 %1196, label %1197, label %1262

; <label>:1197                                    ; preds = %1102
  %1198 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1199 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1200 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1198, %dx.types.Handle %1199, float %1103, float %1104, float %1105, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1201 = extractvalue %dx.types.ResRet.f32 %1200, 0
  %1202 = extractvalue %dx.types.ResRet.f32 %1200, 1
  %1203 = extractvalue %dx.types.ResRet.f32 %1200, 2
  %1204 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1205 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1204, %dx.types.Handle %1199, float %1103, float %1104, float %1105, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1206 = extractvalue %dx.types.ResRet.f32 %1205, 0
  %1207 = extractvalue %dx.types.ResRet.f32 %1205, 1
  %1208 = extractvalue %dx.types.ResRet.f32 %1205, 2
  %1209 = fmul fast float %1206, 2.000000e+00
  %1210 = fmul fast float %1207, 2.000000e+00
  %1211 = fmul fast float %1208, 2.000000e+00
  %1212 = fadd fast float %1209, -1.000000e+00
  %1213 = fadd fast float %1210, -1.000000e+00
  %1214 = fadd fast float %1211, -1.000000e+00
  %1215 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1216 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1215, %dx.types.Handle %1199, float %1103, float %1104, float %1105, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1217 = extractvalue %dx.types.ResRet.f32 %1216, 0
  %1218 = extractvalue %dx.types.ResRet.f32 %1216, 1
  %1219 = extractvalue %dx.types.ResRet.f32 %1216, 2
  %1220 = fmul fast float %1217, 2.000000e+00
  %1221 = fmul fast float %1218, 2.000000e+00
  %1222 = fmul fast float %1219, 2.000000e+00
  %1223 = fadd fast float %1220, -1.000000e+00
  %1224 = fadd fast float %1221, -1.000000e+00
  %1225 = fadd fast float %1222, -1.000000e+00
  %1226 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1227 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1226, %dx.types.Handle %1199, float %1103, float %1104, float %1105, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1228 = extractvalue %dx.types.ResRet.f32 %1227, 0
  %1229 = extractvalue %dx.types.ResRet.f32 %1227, 1
  %1230 = extractvalue %dx.types.ResRet.f32 %1227, 2
  %1231 = fmul fast float %1228, 2.000000e+00
  %1232 = fmul fast float %1229, 2.000000e+00
  %1233 = fmul fast float %1230, 2.000000e+00
  %1234 = fadd fast float %1231, -1.000000e+00
  %1235 = fadd fast float %1232, -1.000000e+00
  %1236 = fadd fast float %1233, -1.000000e+00
  %1237 = fmul fast float %1201, 0x3FFBB67B80000000
  %1238 = fmul fast float %1237, %1212
  %1239 = fmul fast float %1237, %1213
  %1240 = fmul fast float %1237, %1214
  %1241 = fmul fast float %1202, 0x3FFBB67B80000000
  %1242 = fmul fast float %1241, %1223
  %1243 = fmul fast float %1241, %1224
  %1244 = fmul fast float %1241, %1225
  %1245 = fmul fast float %1203, 0x3FFBB67B80000000
  %1246 = fmul fast float %1245, %1234
  %1247 = fmul fast float %1245, %1235
  %1248 = fmul fast float %1245, %1236
  %1249 = fmul fast float %1031, 0x3FD45F3060000000
  %1250 = call float @dx.op.dot4.f32(i32 56, float %1201, float %1238, float %1239, float %1240, float 1.000000e+00, float %1025, float %1026, float %1027)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1251 = call float @dx.op.dot4.f32(i32 56, float %1202, float %1242, float %1243, float %1244, float 1.000000e+00, float %1025, float %1026, float %1027)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1252 = call float @dx.op.dot4.f32(i32 56, float %1203, float %1246, float %1247, float %1248, float 1.000000e+00, float %1025, float %1026, float %1027)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1253 = call float @dx.op.binary.f32(i32 35, float %1250, float 0.000000e+00)  ; FMax(a,b)
  %1254 = call float @dx.op.binary.f32(i32 35, float %1251, float 0.000000e+00)  ; FMax(a,b)
  %1255 = call float @dx.op.binary.f32(i32 35, float %1252, float 0.000000e+00)  ; FMax(a,b)
  %1256 = fmul fast float %1253, %1249
  %1257 = fmul fast float %1254, %1249
  %1258 = fmul fast float %1255, %1249
  %1259 = fadd fast float %1256, %1193
  %1260 = fadd fast float %1257, %1194
  %1261 = fadd fast float %1258, %1195
  br label %1262

; <label>:1262                                    ; preds = %1197, %1102
  %1263 = phi float [ %1259, %1197 ], [ %1193, %1102 ]
  %1264 = phi float [ %1260, %1197 ], [ %1194, %1102 ]
  %1265 = phi float [ %1261, %1197 ], [ %1195, %1102 ]
  %1266 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %32, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1267 = extractvalue %dx.types.CBufRet.i32 %1266, 0
  %1268 = extractvalue %dx.types.CBufRet.i32 %1266, 1
  %1269 = mul i32 %1267, %37
  %1270 = mul i32 %1268, %38
  %1271 = fmul fast float %280, %50
  %1272 = fadd fast float %1271, %51
  %1273 = call float @dx.op.unary.f32(i32 23, float %1272)  ; Log(value)
  %1274 = fmul fast float %1273, %52
  %1275 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1274)  ; FMax(a,b)
  %1276 = fptoui float %1275 to i32
  %1277 = add nsw i32 %46, -1
  %1278 = call i32 @dx.op.binary.i32(i32 40, i32 %1276, i32 %1277)  ; UMin(a,b)
  %1279 = and i32 %48, 31
  %1280 = lshr i32 %1269, %1279
  %1281 = lshr i32 %1270, %1279
  %1282 = mul i32 %1278, %45
  %1283 = add i32 %1282, %1281
  %1284 = mul i32 %1283, %44
  %1285 = add i32 %1284, %1280
  %1286 = shl i32 %1285, 1
  %1287 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1288 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1287, i32 %1286, i32 undef)  ; BufferLoad(srv,index,wot)
  %1289 = extractvalue %dx.types.ResRet.i32 %1288, 0
  %1290 = call i32 @dx.op.binary.i32(i32 40, i32 %1289, i32 %41)  ; UMin(a,b)
  %1291 = or i32 %1286, 1
  %1292 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1287, i32 %1291, i32 undef)  ; BufferLoad(srv,index,wot)
  %1293 = extractvalue %dx.types.ResRet.i32 %1292, 0
  %1294 = add i32 %37, 1
  %1295 = add i32 %38, 1
  %1296 = add i32 %39, 1
  %1297 = uitofp i32 %1294 to float
  %1298 = uitofp i32 %1295 to float
  %1299 = fadd fast float %257, %1297
  %1300 = fadd fast float %258, %1298
  %1301 = fdiv fast float %1299, %263
  %1302 = fdiv fast float %1300, %264
  %1303 = fmul fast float %1301, 2.000000e+00
  %1304 = fmul fast float %1302, 2.000000e+00
  %1305 = fadd fast float %1303, -1.000000e+00
  %1306 = fadd fast float %1304, -1.000000e+00
  %1307 = fsub fast float -0.000000e+00, %1306
  %1308 = uitofp i32 %1296 to float
  %1309 = fadd fast float %259, %1308
  %1310 = fdiv fast float %1309, %274
  %1311 = call float @dx.op.unary.f32(i32 21, float %1310)  ; Exp(value)
  %1312 = fsub fast float %1311, %277
  %1313 = fdiv fast float %1312, %279
  br i1 %283, label %1320, label %1314, !dx.controlflow.hints !47

; <label>:1314                                    ; preds = %1262
  %1315 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %1316 = extractvalue %dx.types.CBufRet.f32 %1315, 2
  %1317 = fmul fast float %1316, %1313
  %1318 = extractvalue %dx.types.CBufRet.f32 %281, 2
  %1319 = fadd fast float %1317, %1318
  br label %1327

; <label>:1320                                    ; preds = %1262
  %1321 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %1322 = extractvalue %dx.types.CBufRet.f32 %1321, 3
  %1323 = fadd fast float %1322, %1313
  %1324 = extractvalue %dx.types.CBufRet.f32 %1321, 2
  %1325 = fmul fast float %1323, %1324
  %1326 = fdiv fast float 1.000000e+00, %1325
  br label %1327

; <label>:1327                                    ; preds = %1320, %1314
  %1328 = phi float [ %1319, %1314 ], [ %1326, %1320 ]
  %1329 = fmul fast float %300, %1305
  %1330 = call float @dx.op.tertiary.f32(i32 46, float %1307, float %305, float %1329)  ; FMad(a,b,c)
  %1331 = call float @dx.op.tertiary.f32(i32 46, float %1328, float %310, float %1330)  ; FMad(a,b,c)
  %1332 = fadd fast float %1331, %315
  %1333 = fmul fast float %301, %1305
  %1334 = call float @dx.op.tertiary.f32(i32 46, float %1307, float %306, float %1333)  ; FMad(a,b,c)
  %1335 = call float @dx.op.tertiary.f32(i32 46, float %1328, float %311, float %1334)  ; FMad(a,b,c)
  %1336 = fadd fast float %1335, %316
  %1337 = fmul fast float %302, %1305
  %1338 = call float @dx.op.tertiary.f32(i32 46, float %1307, float %307, float %1337)  ; FMad(a,b,c)
  %1339 = call float @dx.op.tertiary.f32(i32 46, float %1328, float %312, float %1338)  ; FMad(a,b,c)
  %1340 = fadd fast float %1339, %317
  %1341 = fmul fast float %303, %1305
  %1342 = call float @dx.op.tertiary.f32(i32 46, float %1307, float %308, float %1341)  ; FMad(a,b,c)
  %1343 = call float @dx.op.tertiary.f32(i32 46, float %1328, float %313, float %1342)  ; FMad(a,b,c)
  %1344 = fadd fast float %1343, %318
  %1345 = fdiv fast float %1332, %1344
  %1346 = fdiv fast float %1336, %1344
  %1347 = fdiv fast float %1340, %1344
  %1348 = fsub fast float %335, %1345
  %1349 = fsub fast float %336, %1346
  %1350 = fsub fast float %337, %1347
  %1351 = fmul fast float %1348, %1348
  %1352 = fmul fast float %1349, %1349
  %1353 = fadd fast float %1352, %1351
  %1354 = fmul fast float %1350, %1350
  %1355 = fadd fast float %1353, %1354
  %1356 = call float @dx.op.unary.f32(i32 24, float %1355)  ; Sqrt(value)
  %1357 = extractvalue %dx.types.CBufRet.f32 %252, 2
  %1358 = fmul fast float %1357, %1356
  %1359 = call float @dx.op.binary.f32(i32 35, float %1358, float 1.000000e+00)  ; FMax(a,b)
  %1360 = fmul fast float %1359, %1359
  %1361 = icmp eq i32 %1290, 0
  br i1 %1361, label %1771, label %1362

; <label>:1362                                    ; preds = %1327
  br label %1363

; <label>:1363                                    ; preds = %1764, %1362
  %1364 = phi float [ %1765, %1764 ], [ %1263, %1362 ]
  %1365 = phi float [ %1766, %1764 ], [ %1264, %1362 ]
  %1366 = phi float [ %1767, %1764 ], [ %1265, %1362 ]
  %1367 = phi i32 [ %1768, %1764 ], [ 0, %1362 ]
  %1368 = add i32 %1367, %1293
  %1369 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1370 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1369, i32 %1368, i32 undef)  ; BufferLoad(srv,index,wot)
  %1371 = extractvalue %dx.types.ResRet.i32 %1370, 0
  %1372 = mul i32 %1371, 6
  %1373 = add i32 %1372, 4
  %1374 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 10, i32 1033 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<4xF32>
  %1375 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1374, i32 %1373, i32 undef)  ; BufferLoad(srv,index,wot)
  %1376 = extractvalue %dx.types.ResRet.f32 %1375, 0
  %1377 = extractvalue %dx.types.ResRet.f32 %1375, 1
  %1378 = extractvalue %dx.types.ResRet.f32 %1375, 2
  %1379 = add i32 %1372, 3
  %1380 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1374, i32 %1379, i32 undef)  ; BufferLoad(srv,index,wot)
  %1381 = extractvalue %dx.types.ResRet.f32 %1380, 3
  %1382 = add i32 %1372, 2
  %1383 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1374, i32 %1382, i32 undef)  ; BufferLoad(srv,index,wot)
  %1384 = extractvalue %dx.types.ResRet.f32 %1383, 0
  %1385 = extractvalue %dx.types.ResRet.f32 %1383, 1
  %1386 = extractvalue %dx.types.ResRet.f32 %1383, 2
  %1387 = or i32 %1372, 1
  %1388 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1374, i32 %1387, i32 undef)  ; BufferLoad(srv,index,wot)
  %1389 = extractvalue %dx.types.ResRet.f32 %1388, 0
  %1390 = extractvalue %dx.types.ResRet.f32 %1388, 1
  %1391 = extractvalue %dx.types.ResRet.f32 %1388, 2
  %1392 = extractvalue %dx.types.ResRet.f32 %1388, 3
  %1393 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1374, i32 %1372, i32 undef)  ; BufferLoad(srv,index,wot)
  %1394 = extractvalue %dx.types.ResRet.f32 %1393, 3
  %1395 = bitcast float %1381 to i32
  %1396 = lshr i32 %1395, 16
  %1397 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1396)  ; LegacyF16ToF32(value)
  %1398 = fcmp fast ogt float %1397, 0.000000e+00
  br i1 %1398, label %1399, label %1764

; <label>:1399                                    ; preds = %1363
  %1400 = extractvalue %dx.types.ResRet.f32 %1393, 2
  %1401 = extractvalue %dx.types.ResRet.f32 %1393, 1
  %1402 = extractvalue %dx.types.ResRet.f32 %1393, 0
  %1403 = extractvalue %dx.types.ResRet.f32 %1383, 3
  %1404 = extractvalue %dx.types.ResRet.f32 %1380, 2
  %1405 = extractvalue %dx.types.ResRet.f32 %1380, 0
  %1406 = add i32 %1372, 5
  %1407 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1374, i32 %1406, i32 undef)  ; BufferLoad(srv,index,wot)
  %1408 = extractvalue %dx.types.ResRet.f32 %1407, 3
  %1409 = bitcast float %1403 to i32
  %1410 = lshr i32 %1409, 16
  %1411 = and i32 %1410, 3
  %1412 = bitcast float %1405 to i32
  %1413 = and i32 %1412, 65535
  %1414 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1413)  ; LegacyF16ToF32(value)
  %1415 = lshr i32 %1412, 16
  %1416 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1415)  ; LegacyF16ToF32(value)
  %1417 = bitcast float %1404 to i32
  %1418 = and i32 %1417, 65535
  %1419 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1418)  ; LegacyF16ToF32(value)
  %1420 = fsub fast float -0.000000e+00, %1419
  %1421 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1395)  ; LegacyF16ToF32(value)
  %1422 = fsub fast float -0.000000e+00, %1421
  %1423 = fcmp fast oeq float %1392, 0.000000e+00
  %1424 = icmp eq i32 %1411, 2
  %1425 = icmp eq i32 %1411, 3
  %1426 = bitcast float %1408 to i32
  %1427 = and i32 %1426, 65535
  %1428 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1427)  ; LegacyF16ToF32(value)
  %1429 = lshr i32 %1426, 16
  %1430 = and i32 %1429, 1023
  %1431 = uitofp i32 %1430 to float
  %1432 = fmul fast float %1431, 9.765625e-04
  %1433 = fsub fast float %1402, %335
  %1434 = fsub fast float %1401, %336
  %1435 = fsub fast float %1400, %337
  %1436 = call float @dx.op.dot3.f32(i32 55, float %1433, float %1434, float %1435, float %1433, float %1434, float %1435)  ; Dot3(ax,ay,az,bx,by,bz)
  %1437 = call float @dx.op.unary.f32(i32 25, float %1436)  ; Rsqrt(value)
  %1438 = fmul fast float %1437, %1433
  %1439 = fmul fast float %1437, %1434
  %1440 = fmul fast float %1437, %1435
  br i1 %1423, label %1441, label %1448

; <label>:1441                                    ; preds = %1399
  %1442 = fmul fast float %1394, %1394
  %1443 = fmul fast float %1442, %1436
  %1444 = fmul fast float %1443, %1443
  %1445 = fsub fast float 1.000000e+00, %1444
  %1446 = call float @dx.op.unary.f32(i32 7, float %1445)  ; Saturate(value)
  %1447 = fmul fast float %1446, %1446
  br label %1458

; <label>:1448                                    ; preds = %1399
  %1449 = fmul fast float %1433, %1394
  %1450 = fmul fast float %1434, %1394
  %1451 = fmul fast float %1435, %1394
  %1452 = call float @dx.op.dot3.f32(i32 55, float %1449, float %1450, float %1451, float %1449, float %1450, float %1451)  ; Dot3(ax,ay,az,bx,by,bz)
  %1453 = call float @dx.op.unary.f32(i32 7, float %1452)  ; Saturate(value)
  %1454 = fsub fast float 1.000000e+00, %1453
  %1455 = call float @dx.op.unary.f32(i32 23, float %1454)  ; Log(value)
  %1456 = fmul fast float %1455, %1392
  %1457 = call float @dx.op.unary.f32(i32 21, float %1456)  ; Exp(value)
  br label %1458

; <label>:1458                                    ; preds = %1448, %1441
  %1459 = phi float [ %1447, %1441 ], [ %1457, %1448 ]
  br i1 %1424, label %1460, label %1467

; <label>:1460                                    ; preds = %1458
  %1461 = call float @dx.op.dot3.f32(i32 55, float %1438, float %1439, float %1440, float %1384, float %1385, float %1386)  ; Dot3(ax,ay,az,bx,by,bz)
  %1462 = fsub fast float %1461, %1414
  %1463 = fmul fast float %1462, %1416
  %1464 = call float @dx.op.unary.f32(i32 7, float %1463)  ; Saturate(value)
  %1465 = fmul fast float %1464, %1464
  %1466 = fmul fast float %1465, %1459
  br label %1467

; <label>:1467                                    ; preds = %1460, %1458
  %1468 = phi float [ %1466, %1460 ], [ %1459, %1458 ]
  br i1 %1425, label %1469, label %1473

; <label>:1469                                    ; preds = %1467
  %1470 = call float @dx.op.dot3.f32(i32 55, float %1384, float %1385, float %1386, float %1438, float %1439, float %1440)  ; Dot3(ax,ay,az,bx,by,bz)
  %1471 = fcmp fast olt float %1470, 0.000000e+00
  %1472 = select i1 %1471, float 0.000000e+00, float %1468
  br label %1473

; <label>:1473                                    ; preds = %1469, %1467
  %1474 = phi float [ %1472, %1469 ], [ %1468, %1467 ]
  br i1 %1425, label %1475, label %1707

; <label>:1475                                    ; preds = %1473
  %1476 = fmul fast float %1386, %1377
  %1477 = fmul fast float %1385, %1378
  %1478 = fsub fast float %1476, %1477
  %1479 = fmul fast float %1384, %1378
  %1480 = fmul fast float %1386, %1376
  %1481 = fsub fast float %1479, %1480
  %1482 = fmul fast float %1385, %1376
  %1483 = fmul fast float %1384, %1377
  %1484 = fsub fast float %1482, %1483
  %1485 = fcmp fast ogt float %1432, 0x3FA1EB8520000000
  br i1 %1485, label %1486, label %1581

; <label>:1486                                    ; preds = %1475
  %1487 = fmul fast float %1433, %1478
  %1488 = call float @dx.op.tertiary.f32(i32 46, float %1481, float %1434, float %1487)  ; FMad(a,b,c)
  %1489 = call float @dx.op.tertiary.f32(i32 46, float %1484, float %1435, float %1488)  ; FMad(a,b,c)
  %1490 = fmul fast float %1433, %1376
  %1491 = call float @dx.op.tertiary.f32(i32 46, float %1377, float %1434, float %1490)  ; FMad(a,b,c)
  %1492 = call float @dx.op.tertiary.f32(i32 46, float %1378, float %1435, float %1491)  ; FMad(a,b,c)
  %1493 = fmul fast float %1433, %1384
  %1494 = call float @dx.op.tertiary.f32(i32 46, float %1385, float %1434, float %1493)  ; FMad(a,b,c)
  %1495 = call float @dx.op.tertiary.f32(i32 46, float %1386, float %1435, float %1494)  ; FMad(a,b,c)
  %1496 = fmul fast float %1432, %1432
  %1497 = fsub fast float 1.000000e+00, %1496
  %1498 = call float @dx.op.unary.f32(i32 24, float %1497)  ; Sqrt(value)
  %1499 = fmul fast float %1432, %1428
  %1500 = call float @dx.op.binary.f32(i32 36, float %1495, float %1499)  ; FMin(a,b)
  %1501 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %1499)  ; FMax(a,b)
  %1502 = fdiv fast float %1500, %1501
  %1503 = fmul fast float %1498, %1428
  %1504 = fmul fast float %1503, %1502
  %1505 = fcmp fast ogt float %1489, 0.000000e+00
  %1506 = fcmp fast ogt float %1492, 0.000000e+00
  %1507 = fcmp fast olt float %1489, 0.000000e+00
  %1508 = fcmp fast olt float %1492, 0.000000e+00
  %1509 = zext i1 %1505 to i32
  %1510 = zext i1 %1506 to i32
  %1511 = zext i1 %1507 to i32
  %1512 = zext i1 %1508 to i32
  %1513 = sub nsw i32 %1509, %1511
  %1514 = sub nsw i32 %1510, %1512
  %1515 = sitofp i32 %1513 to float
  %1516 = sitofp i32 %1514 to float
  %1517 = fadd fast float %1504, %1419
  %1518 = fadd fast float %1504, %1421
  %1519 = call float @dx.op.unary.f32(i32 6, float %1489)  ; FAbs(value)
  %1520 = call float @dx.op.unary.f32(i32 6, float %1492)  ; FAbs(value)
  %1521 = call float @dx.op.binary.f32(i32 35, float %1519, float %1517)  ; FMax(a,b)
  %1522 = call float @dx.op.binary.f32(i32 35, float %1520, float %1518)  ; FMax(a,b)
  %1523 = fsub fast float %1420, %1504
  %1524 = fadd fast float %1523, %1521
  %1525 = fmul fast float %1524, %1515
  %1526 = fsub fast float %1422, %1504
  %1527 = fadd fast float %1526, %1522
  %1528 = fmul fast float %1527, %1516
  %1529 = fsub fast float %1495, %1500
  %1530 = call float @dx.op.binary.f32(i32 35, float %1529, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1531 = call float @dx.op.unary.f32(i32 6, float %1525)  ; FAbs(value)
  %1532 = call float @dx.op.unary.f32(i32 6, float %1528)  ; FAbs(value)
  %1533 = fdiv fast float %1531, %1530
  %1534 = fdiv fast float %1532, %1530
  %1535 = fmul fast float %1533, %1500
  %1536 = fmul fast float %1534, %1500
  %1537 = fsub fast float %1535, %1504
  %1538 = fsub fast float %1536, %1504
  %1539 = fsub fast float -0.000000e+00, %1515
  %1540 = fsub fast float -0.000000e+00, %1516
  %1541 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1539)  ; FMax(a,b)
  %1542 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1540)  ; FMax(a,b)
  %1543 = fmul fast float %1537, %1541
  %1544 = fmul fast float %1538, %1542
  %1545 = fsub fast float %1543, %1419
  %1546 = fsub fast float %1544, %1421
  %1547 = call float @dx.op.binary.f32(i32 35, float %1545, float %1420)  ; FMax(a,b)
  %1548 = call float @dx.op.binary.f32(i32 35, float %1546, float %1422)  ; FMax(a,b)
  %1549 = call float @dx.op.binary.f32(i32 36, float %1547, float %1419)  ; FMin(a,b)
  %1550 = call float @dx.op.binary.f32(i32 36, float %1548, float %1421)  ; FMin(a,b)
  %1551 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1515)  ; FMax(a,b)
  %1552 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1516)  ; FMax(a,b)
  %1553 = fmul fast float %1551, %1537
  %1554 = fmul fast float %1552, %1538
  %1555 = fsub fast float %1419, %1553
  %1556 = fsub fast float %1421, %1554
  %1557 = call float @dx.op.binary.f32(i32 35, float %1555, float %1420)  ; FMax(a,b)
  %1558 = call float @dx.op.binary.f32(i32 35, float %1556, float %1422)  ; FMax(a,b)
  %1559 = call float @dx.op.binary.f32(i32 36, float %1557, float %1419)  ; FMin(a,b)
  %1560 = call float @dx.op.binary.f32(i32 36, float %1558, float %1421)  ; FMin(a,b)
  %1561 = fadd fast float %1559, %1549
  %1562 = fadd fast float %1560, %1550
  %1563 = fmul fast float %1561, 5.000000e-01
  %1564 = fmul fast float %1562, 5.000000e-01
  %1565 = fsub fast float %1559, %1549
  %1566 = fsub fast float %1560, %1550
  %1567 = fmul fast float %1565, 5.000000e-01
  %1568 = fmul fast float %1566, 5.000000e-01
  %1569 = fmul fast float %1563, %1478
  %1570 = fmul fast float %1563, %1481
  %1571 = fmul fast float %1563, %1484
  %1572 = fsub fast float %1433, %1569
  %1573 = fsub fast float %1434, %1570
  %1574 = fsub fast float %1435, %1571
  %1575 = fmul fast float %1564, %1376
  %1576 = fmul fast float %1564, %1377
  %1577 = fmul fast float %1564, %1378
  %1578 = fsub fast float %1572, %1575
  %1579 = fsub fast float %1573, %1576
  %1580 = fsub fast float %1574, %1577
  br label %1581

; <label>:1581                                    ; preds = %1486, %1475
  %1582 = phi float [ %1578, %1486 ], [ %1433, %1475 ]
  %1583 = phi float [ %1579, %1486 ], [ %1434, %1475 ]
  %1584 = phi float [ %1580, %1486 ], [ %1435, %1475 ]
  %1585 = phi float [ %1567, %1486 ], [ %1419, %1475 ]
  %1586 = phi float [ %1568, %1486 ], [ %1421, %1475 ]
  %1587 = fcmp fast oeq float %1585, 0.000000e+00
  %1588 = fcmp fast oeq float %1586, 0.000000e+00
  %1589 = or i1 %1587, %1588
  br i1 %1589, label %1737, label %1590

; <label>:1590                                    ; preds = %1581
  %1591 = call float @dx.op.dot3.f32(i32 55, float %1478, float %1481, float %1484, float %1582, float %1583, float %1584)  ; Dot3(ax,ay,az,bx,by,bz)
  %1592 = call float @dx.op.dot3.f32(i32 55, float %1376, float %1377, float %1378, float %1582, float %1583, float %1584)  ; Dot3(ax,ay,az,bx,by,bz)
  %1593 = call float @dx.op.dot3.f32(i32 55, float %1384, float %1385, float %1386, float %1582, float %1583, float %1584)  ; Dot3(ax,ay,az,bx,by,bz)
  %1594 = fsub fast float %1591, %1585
  %1595 = fadd fast float %1591, %1585
  %1596 = fsub fast float %1592, %1586
  %1597 = fadd fast float %1592, %1586
  %1598 = fmul fast float %1593, %1593
  %1599 = call float @dx.op.dot2.f32(i32 54, float %1594, float %1596, float %1594, float %1596)  ; Dot2(ax,ay,bx,by)
  %1600 = fadd fast float %1599, %1598
  %1601 = call float @dx.op.unary.f32(i32 25, float %1600)  ; Rsqrt(value)
  %1602 = fmul fast float %1601, %1594
  %1603 = fmul fast float %1601, %1596
  %1604 = fmul fast float %1601, %1593
  %1605 = call float @dx.op.dot2.f32(i32 54, float %1595, float %1596, float %1595, float %1596)  ; Dot2(ax,ay,bx,by)
  %1606 = fadd fast float %1605, %1598
  %1607 = call float @dx.op.unary.f32(i32 25, float %1606)  ; Rsqrt(value)
  %1608 = fmul fast float %1607, %1595
  %1609 = fmul fast float %1607, %1596
  %1610 = fmul fast float %1607, %1593
  %1611 = call float @dx.op.dot2.f32(i32 54, float %1595, float %1597, float %1595, float %1597)  ; Dot2(ax,ay,bx,by)
  %1612 = fadd fast float %1611, %1598
  %1613 = call float @dx.op.unary.f32(i32 25, float %1612)  ; Rsqrt(value)
  %1614 = fmul fast float %1613, %1595
  %1615 = fmul fast float %1613, %1597
  %1616 = fmul fast float %1613, %1593
  %1617 = call float @dx.op.dot2.f32(i32 54, float %1594, float %1597, float %1594, float %1597)  ; Dot2(ax,ay,bx,by)
  %1618 = fadd fast float %1617, %1598
  %1619 = call float @dx.op.unary.f32(i32 25, float %1618)  ; Rsqrt(value)
  %1620 = fmul fast float %1619, %1594
  %1621 = fmul fast float %1619, %1597
  %1622 = fmul fast float %1619, %1593
  %1623 = call float @dx.op.dot3.f32(i32 55, float %1602, float %1603, float %1604, float %1608, float %1609, float %1610)  ; Dot3(ax,ay,az,bx,by,bz)
  %1624 = call float @dx.op.dot3.f32(i32 55, float %1608, float %1609, float %1610, float %1614, float %1615, float %1616)  ; Dot3(ax,ay,az,bx,by,bz)
  %1625 = call float @dx.op.dot3.f32(i32 55, float %1614, float %1615, float %1616, float %1620, float %1621, float %1622)  ; Dot3(ax,ay,az,bx,by,bz)
  %1626 = call float @dx.op.dot3.f32(i32 55, float %1620, float %1621, float %1622, float %1602, float %1603, float %1604)  ; Dot3(ax,ay,az,bx,by,bz)
  %1627 = fmul fast float %1623, 0x3FC6666660000000
  %1628 = fsub fast float 0x3FF921FF20000000, %1627
  %1629 = fadd fast float %1623, 1.000000e+00
  %1630 = call float @dx.op.unary.f32(i32 25, float %1629)  ; Rsqrt(value)
  %1631 = fmul fast float %1624, 0x3FC6666660000000
  %1632 = fsub fast float 0x3FF921FF20000000, %1631
  %1633 = fadd fast float %1624, 1.000000e+00
  %1634 = call float @dx.op.unary.f32(i32 25, float %1633)  ; Rsqrt(value)
  %1635 = fmul fast float %1634, %1632
  %1636 = fmul fast float %1625, 0x3FC6666660000000
  %1637 = fsub fast float 0x3FF921FF20000000, %1636
  %1638 = fadd fast float %1625, 1.000000e+00
  %1639 = call float @dx.op.unary.f32(i32 25, float %1638)  ; Rsqrt(value)
  %1640 = fmul fast float %1626, 0x3FC6666660000000
  %1641 = fsub fast float 0x3FF921FF20000000, %1640
  %1642 = fadd fast float %1626, 1.000000e+00
  %1643 = call float @dx.op.unary.f32(i32 25, float %1642)  ; Rsqrt(value)
  %1644 = fmul fast float %1643, %1641
  %1645 = fmul fast float %1628, %1630
  %1646 = fsub fast float -0.000000e+00, %1645
  %1647 = fmul fast float %1602, %1646
  %1648 = fmul fast float %1603, %1646
  %1649 = fmul fast float %1604, %1646
  %1650 = fmul fast float %1635, %1614
  %1651 = fmul fast float %1635, %1615
  %1652 = fmul fast float %1635, %1616
  %1653 = fadd fast float %1650, %1647
  %1654 = fadd fast float %1651, %1648
  %1655 = fadd fast float %1652, %1649
  %1656 = fmul fast float %1655, %1609
  %1657 = fmul fast float %1654, %1610
  %1658 = fsub fast float %1656, %1657
  %1659 = fmul fast float %1653, %1610
  %1660 = fmul fast float %1655, %1608
  %1661 = fsub fast float %1659, %1660
  %1662 = fmul fast float %1654, %1608
  %1663 = fmul fast float %1653, %1609
  %1664 = fsub fast float %1662, %1663
  %1665 = fmul fast float %1644, %1602
  %1666 = fmul fast float %1644, %1603
  %1667 = fmul fast float %1644, %1604
  %1668 = fmul fast float %1637, %1639
  %1669 = fsub fast float -0.000000e+00, %1668
  %1670 = fmul fast float %1614, %1669
  %1671 = fmul fast float %1615, %1669
  %1672 = fmul fast float %1616, %1669
  %1673 = fadd fast float %1665, %1670
  %1674 = fadd fast float %1666, %1671
  %1675 = fadd fast float %1667, %1672
  %1676 = fmul fast float %1675, %1621
  %1677 = fmul fast float %1674, %1622
  %1678 = fsub fast float %1676, %1677
  %1679 = fmul fast float %1673, %1622
  %1680 = fmul fast float %1675, %1620
  %1681 = fsub fast float %1679, %1680
  %1682 = fmul fast float %1674, %1620
  %1683 = fmul fast float %1673, %1621
  %1684 = fsub fast float %1682, %1683
  %1685 = fadd fast float %1678, %1658
  %1686 = fadd fast float %1681, %1661
  %1687 = fadd fast float %1684, %1664
  %1688 = fmul fast float %1685, %1478
  %1689 = fmul fast float %1685, %1481
  %1690 = fmul fast float %1685, %1484
  %1691 = fmul fast float %1686, %1376
  %1692 = fmul fast float %1686, %1377
  %1693 = fmul fast float %1686, %1378
  %1694 = fadd fast float %1688, %1691
  %1695 = fadd fast float %1689, %1692
  %1696 = fadd fast float %1690, %1693
  %1697 = fmul fast float %1687, %1384
  %1698 = fmul fast float %1687, %1385
  %1699 = fmul fast float %1687, %1386
  %1700 = fadd fast float %1694, %1697
  %1701 = fadd fast float %1695, %1698
  %1702 = fadd fast float %1696, %1699
  %1703 = call float @dx.op.dot3.f32(i32 55, float %1700, float %1701, float %1702, float %1700, float %1701, float %1702)  ; Dot3(ax,ay,az,bx,by,bz)
  %1704 = call float @dx.op.unary.f32(i32 25, float %1703)  ; Rsqrt(value)
  %1705 = fmul fast float %1703, 5.000000e-01
  %1706 = fmul fast float %1705, %1704
  br label %1737

; <label>:1707                                    ; preds = %1473
  %1708 = fmul fast float %1421, 5.000000e-01
  %1709 = fmul fast float %1708, %1376
  %1710 = fmul fast float %1708, %1377
  %1711 = fmul fast float %1708, %1378
  %1712 = fsub fast float %1433, %1709
  %1713 = fsub fast float %1434, %1710
  %1714 = fsub fast float %1435, %1711
  %1715 = fadd fast float %1709, %1433
  %1716 = fadd fast float %1710, %1434
  %1717 = fadd fast float %1711, %1435
  %1718 = fcmp fast ogt float %1421, 0.000000e+00
  %1719 = call float @dx.op.dot3.f32(i32 55, float %1712, float %1713, float %1714, float %1712, float %1713, float %1714)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %1718, label %1720, label %1731, !dx.controlflow.hints !50

; <label>:1720                                    ; preds = %1707
  %1721 = call float @dx.op.dot3.f32(i32 55, float %1715, float %1716, float %1717, float %1715, float %1716, float %1717)  ; Dot3(ax,ay,az,bx,by,bz)
  %1722 = call float @dx.op.unary.f32(i32 25, float %1719)  ; Rsqrt(value)
  %1723 = call float @dx.op.unary.f32(i32 25, float %1721)  ; Rsqrt(value)
  %1724 = fmul fast float %1723, %1722
  %1725 = call float @dx.op.dot3.f32(i32 55, float %1712, float %1713, float %1714, float %1715, float %1716, float %1717)  ; Dot3(ax,ay,az,bx,by,bz)
  %1726 = fmul fast float %1725, 5.000000e-01
  %1727 = fadd fast float %1726, %1360
  %1728 = fmul fast float %1727, %1724
  %1729 = fadd fast float %1728, 5.000000e-01
  %1730 = fdiv fast float %1724, %1729
  br label %1734

; <label>:1731                                    ; preds = %1707
  %1732 = fadd fast float %1719, %1360
  %1733 = fdiv fast float 1.000000e+00, %1732
  br label %1734

; <label>:1734                                    ; preds = %1731, %1720
  %1735 = phi float [ %1730, %1720 ], [ %1733, %1731 ]
  %1736 = select i1 %1423, float %1735, float 1.000000e+00
  br label %1737

; <label>:1737                                    ; preds = %1734, %1590, %1581
  %1738 = phi float [ %1736, %1734 ], [ 0.000000e+00, %1581 ], [ %1706, %1590 ]
  %1739 = fsub fast float -0.000000e+00, %368
  %1740 = fsub fast float -0.000000e+00, %369
  %1741 = fsub fast float -0.000000e+00, %370
  %1742 = call float @dx.op.dot3.f32(i32 55, float %1438, float %1439, float %1440, float %1739, float %1740, float %1741)  ; Dot3(ax,ay,az,bx,by,bz)
  %1743 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %1744 = extractvalue %dx.types.CBufRet.f32 %1743, 1
  %1745 = fmul fast float %1744, %1744
  %1746 = fsub fast float 1.000000e+00, %1745
  %1747 = fmul fast float %1742, 2.000000e+00
  %1748 = fadd fast float %1747, %1744
  %1749 = fmul fast float %1748, %1744
  %1750 = fadd fast float %1749, 1.000000e+00
  %1751 = call float @dx.op.unary.f32(i32 24, float %1750)  ; Sqrt(value)
  %1752 = fmul fast float %1751, 0x402921FB60000000
  %1753 = fmul fast float %1752, %1750
  %1754 = fdiv fast float %1746, %1753
  %1755 = fmul fast float %1474, %1397
  %1756 = fmul fast float %1755, %1738
  %1757 = fmul fast float %1756, %1754
  %1758 = fmul fast float %1757, %1389
  %1759 = fmul fast float %1757, %1390
  %1760 = fmul fast float %1757, %1391
  %1761 = fadd fast float %1758, %1364
  %1762 = fadd fast float %1759, %1365
  %1763 = fadd fast float %1760, %1366
  br label %1764

; <label>:1764                                    ; preds = %1737, %1363
  %1765 = phi float [ %1761, %1737 ], [ %1364, %1363 ]
  %1766 = phi float [ %1762, %1737 ], [ %1365, %1363 ]
  %1767 = phi float [ %1763, %1737 ], [ %1366, %1363 ]
  %1768 = add nuw i32 %1367, 1
  %1769 = icmp eq i32 %1768, %1290
  br i1 %1769, label %1770, label %1363, !llvm.loop !51

; <label>:1770                                    ; preds = %1764
  br label %1771

; <label>:1771                                    ; preds = %1770, %1327
  %1772 = phi float [ %1263, %1327 ], [ %1765, %1770 ]
  %1773 = phi float [ %1264, %1327 ], [ %1766, %1770 ]
  %1774 = phi float [ %1265, %1327 ], [ %1767, %1770 ]
  %1775 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1776 = extractvalue %dx.types.CBufRet.f32 %1775, 2
  %1777 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1778 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1777, i32 0, i32 %37, i32 %38, i32 %39, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1779 = extractvalue %dx.types.ResRet.f32 %1778, 0
  %1780 = extractvalue %dx.types.ResRet.f32 %1778, 1
  %1781 = extractvalue %dx.types.ResRet.f32 %1778, 2
  %1782 = fmul fast float %1779, %1776
  %1783 = fmul fast float %1780, %1776
  %1784 = fmul fast float %1781, %1776
  %1785 = fadd fast float %1782, %1772
  %1786 = fadd fast float %1783, %1773
  %1787 = fadd fast float %1784, %1774
  %1788 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1789 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1788, i32 0, i32 %37, i32 %38, i32 %39, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1790 = extractvalue %dx.types.ResRet.f32 %1789, 0
  %1791 = extractvalue %dx.types.ResRet.f32 %1789, 1
  %1792 = extractvalue %dx.types.ResRet.f32 %1789, 2
  %1793 = extractvalue %dx.types.ResRet.f32 %1789, 3
  %1794 = call float @dx.op.dot3.f32(i32 55, float %1790, float %1791, float %1792, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1795 = fadd fast float %1793, %1794
  %1796 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %36, i32 86)  ; CBufferLoadLegacy(handle,regIndex)
  %1797 = extractvalue %dx.types.CBufRet.i32 %1796, 0
  %1798 = icmp eq i32 %1797, 0
  br i1 %1798, label %1805, label %1799, !dx.controlflow.hints !53

; <label>:1799                                    ; preds = %1771
  %1800 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1801 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1800, i32 0, i32 %37, i32 %38, i32 %39, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1802 = extractvalue %dx.types.ResRet.f32 %1801, 0
  %1803 = extractvalue %dx.types.ResRet.f32 %1801, 1
  %1804 = extractvalue %dx.types.ResRet.f32 %1801, 2
  br label %1805

; <label>:1805                                    ; preds = %1799, %1771
  %1806 = phi float [ %1802, %1799 ], [ 0.000000e+00, %1771 ]
  %1807 = phi float [ %1803, %1799 ], [ 0.000000e+00, %1771 ]
  %1808 = phi float [ %1804, %1799 ], [ 0.000000e+00, %1771 ]
  %1809 = extractvalue %dx.types.CBufRet.f32 %1775, 1
  %1810 = fmul fast float %1790, %1785
  %1811 = fmul fast float %1791, %1786
  %1812 = fmul fast float %1792, %1787
  %1813 = fadd fast float %1806, %1810
  %1814 = fadd fast float %1807, %1811
  %1815 = fadd fast float %1808, %1812
  %1816 = fmul fast float %1809, %1813
  %1817 = fmul fast float %1809, %1814
  %1818 = fmul fast float %1809, %1815
  %1819 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %32, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1820 = extractvalue %dx.types.CBufRet.i32 %1819, 0
  %1821 = extractvalue %dx.types.CBufRet.i32 %1819, 1
  %1822 = extractvalue %dx.types.CBufRet.i32 %1819, 2
  %1823 = icmp slt i32 %37, %1820
  %1824 = icmp slt i32 %38, %1821
  %1825 = icmp slt i32 %39, %1822
  %1826 = and i1 %1823, %1824
  %1827 = and i1 %1825, %1826
  br i1 %1827, label %1828, label %1842

; <label>:1828                                    ; preds = %1805
  %1829 = bitcast float %1816 to i32
  %1830 = bitcast float %1817 to i32
  %1831 = bitcast float %1818 to i32
  %1832 = bitcast float %1795 to i32
  %1833 = icmp ult i32 %1829, 2139095040
  %1834 = icmp ult i32 %1830, 2139095040
  %1835 = icmp ult i32 %1831, 2139095040
  %1836 = icmp ult i32 %1832, 2139095040
  %1837 = select i1 %1833, float %1816, float 0.000000e+00
  %1838 = select i1 %1834, float %1817, float 0.000000e+00
  %1839 = select i1 %1835, float %1818, float 0.000000e+00
  %1840 = select i1 %1836, float %1795, float 0.000000e+00
  %1841 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1841, i32 %37, i32 %38, i32 %39, float %1837, float %1838, float %1839, float %1840, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %1842

; <label>:1842                                    ; preds = %1828, %1805, %204
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!43}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !29, !31, !37}
!5 = !{!6, !8, !10, !11, !12, !13, !14, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28}
!6 = !{i32 0, %"class.Texture3D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 5}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 4, i32 0, !9}
!11 = !{i32 3, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 4, i32 0, !9}
!12 = !{i32 4, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 4, i32 0, !9}
!13 = !{i32 5, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 5, i32 1, i32 11, i32 0, null}
!14 = !{i32 6, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 6, i32 1, i32 12, i32 0, !15}
!15 = !{i32 1, i32 4}
!16 = !{i32 7, %"class.Texture2DArray<unsigned int>"* undef, !"", i32 0, i32 7, i32 1, i32 7, i32 0, !7}
!17 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 2, i32 0, !9}
!18 = !{i32 9, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 2, i32 0, !9}
!19 = !{i32 10, %"class.Buffer<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 10, i32 0, !9}
!20 = !{i32 11, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 11, i32 1, i32 10, i32 0, !7}
!21 = !{i32 12, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 12, i32 1, i32 10, i32 0, !7}
!22 = !{i32 13, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 4, i32 0, !9}
!23 = !{i32 14, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 4, i32 0, !9}
!24 = !{i32 15, %"class.Texture2D<float>"* undef, !"", i32 0, i32 15, i32 1, i32 2, i32 0, !9}
!25 = !{i32 16, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 16, i32 1, i32 4, i32 0, !9}
!26 = !{i32 17, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 17, i32 1, i32 4, i32 0, !9}
!27 = !{i32 18, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 18, i32 1, i32 4, i32 0, !9}
!28 = !{i32 19, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 19, i32 1, i32 2, i32 0, !9}
!29 = !{!30}
!30 = !{i32 0, %"class.RWTexture3D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i1 false, i1 false, i1 false, !9}
!31 = !{!32, !33, !34, !35, !36}
!32 = !{i32 0, %hostlayout._RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 1380, null}
!33 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!34 = !{i32 2, %hostlayout.UniformBufferConstants_ForwardLightData* undef, !"", i32 0, i32 2, i32 1, i32 708, null}
!35 = !{i32 3, %UniformBufferConstants_LumenGIVolumeStruct* undef, !"", i32 0, i32 3, i32 1, i32 572, null}
!36 = !{i32 4, %UniformBufferConstants_VolumetricFog* undef, !"", i32 0, i32 4, i32 1, i32 104, null}
!37 = !{!38, !39, !40, !41, !42}
!38 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!39 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!40 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!41 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!42 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!43 = !{void ()* @LightScatteringCS, !"LightScatteringCS", null, !4, !44}
!44 = !{i32 0, i64 16, i32 4, !45, i32 5, !46}
!45 = !{i32 4, i32 4, i32 4}
!46 = !{i32 0}
!47 = distinct !{!47, !"dx.controlflow.hints", i32 2}
!48 = distinct !{!48, !"dx.controlflow.hints", i32 1}
!49 = distinct !{!49, !"dx.controlflow.hints", i32 1}
!50 = distinct !{!50, !"dx.controlflow.hints", i32 1}
!51 = distinct !{!51, !52}
!52 = !{!"llvm.loop.unroll.disable"}
!53 = distinct !{!53, !"dx.controlflow.hints", i32 1}
