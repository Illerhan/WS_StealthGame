;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 2577230d4754a4271fcb5b8349052e81
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(4,4,4)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       uint NumSceneObjects;                         ; Offset:   64
;       uint NumSceneHeightfieldObjects;              ; Offset:   88
;       float3 DistanceFieldBrickSize;                ; Offset:  144
;       float3 DistanceFieldUniqueDataBrickSize;      ; Offset:  160
;       uint3 DistanceFieldBrickAtlasSizeInBricks;    ; Offset:  176
;       uint3 DistanceFieldBrickAtlasMask;            ; Offset:  192
;       uint3 DistanceFieldBrickAtlasSizeLog2;        ; Offset:  208
;       float3 DistanceFieldBrickAtlasTexelSize;      ; Offset:  224
;       float3 DistanceFieldBrickAtlasHalfTexelSize;  ; Offset:  240
;       float3 DistanceFieldBrickOffsetToAtlasUVScale;; Offset:  256
;       float3 DistanceFieldUniqueDataBrickSizeInAtlasTexels;; Offset:  272
;       float ClipmapVoxelExtent;                     ; Offset:  288
;       float InfluenceRadius;                        ; Offset:  292
;       float InfluenceRadiusSq;                      ; Offset:  296
;       uint3 CullGridResolution;                     ; Offset:  304
;       float3 GlobalDistanceFieldInvPageAtlasSize;   ; Offset:  320
;       uint3 PageGridResolution;                     ; Offset:  352
;       uint3 ClipmapResolution;                      ; Offset:  368
;       float3 PageCoordToVoxelTranslatedCenterScale; ; Offset:  384
;       float3 PageCoordToVoxelTranslatedCenterBias;  ; Offset:  400
;       float3 PageCoordToPageTranslatedWorldCenterScale;; Offset:  416
;       float3 PageCoordToPageTranslatedWorldCenterBias;; Offset:  432
;       float4 ClipmapVolumeTranslatedWorldToUVAddAndMul;; Offset:  448
;       float3 ComposeTileWorldExtent;                ; Offset:  464
;       float3 ClipmapMinBounds;                      ; Offset:  480
;       uint PageTableClipmapOffsetZ;                 ; Offset:  492
;       float3 ViewTilePosition;                      ; Offset:  496
;       float3 RelativePreViewTranslation;            ; Offset:  512
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   524
;
; }
;
; Resource bind info for SceneDistanceFieldAssetData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for SceneObjectBounds
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for SceneObjectData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for ComposeTileBuffer
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for CullGridObjectHeader
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for CullGridObjectArray
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for RWPageObjectGridBuffer
; {
;
;   uint4 $Element;                                   ; Offset:    0 Size:    16
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; DistanceFieldSampler              sampler      NA          NA      S0             s0     1
; DistanceFieldIndirection2Table    texture     f32         buf      T0             t0     1
; DistanceFieldBrickTexture         texture     f32          3d      T1             t1     1
; SceneDistanceFieldAssetData       texture  struct         r/o      T2             t2     1
; SceneObjectBounds                 texture  struct         r/o      T3             t3     1
; SceneObjectData                   texture  struct         r/o      T4             t4     1
; PageTableLayerTexture             texture     u32          3d      T5             t5     1
; ParentPageTableLayerTexture       texture     u32          3d      T6             t6     1
; ComposeTileBuffer                 texture  struct         r/o      T7             t7     1
; CullGridObjectHeader              texture  struct         r/o      T8             t8     1
; CullGridObjectArray               texture  struct         r/o      T9             t9     1
; RWPageObjectGridBuffer                UAV  struct         r/w      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Buffer<vector<float, 4> >" = type { <4 x float> }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%"class.Texture3D<unsigned int>" = type { i32, %"class.Texture3D<unsigned int>::mips_type" }
%"class.Texture3D<unsigned int>::mips_type" = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.RWStructuredBuffer<vector<unsigned int, 4> >" = type { <4 x i32> }
%_RootShaderParameters = type { i32, i32, <3 x float>, <3 x float>, <3 x i32>, <3 x i32>, <3 x i32>, <3 x float>, <3 x float>, <3 x float>, <3 x float>, float, float, float, <3 x i32>, <3 x float>, <3 x i32>, <3 x i32>, <3 x float>, <3 x float>, <3 x float>, <3 x float>, <4 x float>, <3 x float>, <3 x float>, i32, <3 x float>, <3 x float> }
%struct.SamplerState = type { i32 }

@"\01?SharedCulledObjectList@@3PAIA" = external addrspace(3) global [511 x i32], align 4
@"\01?NumTileCulledObjects@@3IA" = external addrspace(3) global i32, align 4

define void @CompositeObjectsIntoObjectGridPagesCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 13, i32 524 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %15 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %16 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 0)  ; ThreadIdInGroup(component)
  %17 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 1)  ; ThreadIdInGroup(component)
  %18 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 2)  ; ThreadIdInGroup(component)
  %19 = alloca [4 x i32], align 4
  %20 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %14, i32 32)  ; CBufferLoadLegacy(handle,regIndex)
  %21 = extractvalue %dx.types.CBufRet.f32 %20, 0
  %22 = extractvalue %dx.types.CBufRet.f32 %20, 1
  %23 = extractvalue %dx.types.CBufRet.f32 %20, 2
  %24 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %14, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %25 = extractvalue %dx.types.CBufRet.f32 %24, 0
  %26 = extractvalue %dx.types.CBufRet.f32 %24, 1
  %27 = extractvalue %dx.types.CBufRet.f32 %24, 2
  %28 = shl i32 %18, 2
  %29 = add i32 %28, %17
  %30 = shl i32 %29, 2
  %31 = add i32 %30, %16
  %32 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %33 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %32, i32 %15, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %34 = extractvalue %dx.types.ResRet.i32 %33, 0
  %35 = and i32 %34, 255
  %36 = lshr i32 %34, 8
  %37 = and i32 %36, 255
  %38 = lshr i32 %34, 16
  %39 = and i32 %38, 255
  %40 = and i32 %16, 1
  %41 = shl i32 %17, 1
  %42 = and i32 %41, 2
  %43 = and i32 %28, 4
  %44 = shl i32 %16, 2
  %45 = and i32 %44, 8
  %46 = shl i32 %17, 3
  %47 = and i32 %46, 16
  %48 = shl i32 %18, 4
  %49 = and i32 %48, 32
  %50 = or i32 %45, %40
  %51 = or i32 %50, %42
  %52 = or i32 %51, %47
  %53 = or i32 %52, %43
  %54 = or i32 %53, %49
  %55 = uitofp i32 %35 to float
  %56 = uitofp i32 %37 to float
  %57 = uitofp i32 %39 to float
  %58 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %14, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %59 = extractvalue %dx.types.CBufRet.f32 %58, 0
  %60 = extractvalue %dx.types.CBufRet.f32 %58, 1
  %61 = extractvalue %dx.types.CBufRet.f32 %58, 2
  %62 = fmul fast float %55, %59
  %63 = fmul fast float %56, %60
  %64 = fmul fast float %57, %61
  %65 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %14, i32 27)  ; CBufferLoadLegacy(handle,regIndex)
  %66 = extractvalue %dx.types.CBufRet.f32 %65, 0
  %67 = extractvalue %dx.types.CBufRet.f32 %65, 1
  %68 = extractvalue %dx.types.CBufRet.f32 %65, 2
  %69 = fadd fast float %62, %66
  %70 = fadd fast float %63, %67
  %71 = fadd fast float %64, %68
  %72 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %14, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %73 = extractvalue %dx.types.CBufRet.f32 %72, 3
  %74 = fmul fast float %69, %73
  %75 = fmul fast float %70, %73
  %76 = fmul fast float %71, %73
  %77 = extractvalue %dx.types.CBufRet.f32 %72, 0
  %78 = extractvalue %dx.types.CBufRet.f32 %72, 1
  %79 = extractvalue %dx.types.CBufRet.f32 %72, 2
  %80 = fadd fast float %74, %77
  %81 = fadd fast float %75, %78
  %82 = fadd fast float %76, %79
  %83 = call float @dx.op.unary.f32(i32 22, float %80)  ; Frc(value)
  %84 = call float @dx.op.unary.f32(i32 22, float %81)  ; Frc(value)
  %85 = call float @dx.op.unary.f32(i32 22, float %82)  ; Frc(value)
  %86 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %14, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %87 = extractvalue %dx.types.CBufRet.i32 %86, 0
  %88 = extractvalue %dx.types.CBufRet.i32 %86, 1
  %89 = extractvalue %dx.types.CBufRet.i32 %86, 2
  %90 = add i32 %87, -1
  %91 = add i32 %88, -1
  %92 = add i32 %89, -1
  %93 = uitofp i32 %90 to float
  %94 = uitofp i32 %91 to float
  %95 = uitofp i32 %92 to float
  %96 = call float @dx.op.unary.f32(i32 7, float %83)  ; Saturate(value)
  %97 = call float @dx.op.unary.f32(i32 7, float %84)  ; Saturate(value)
  %98 = call float @dx.op.unary.f32(i32 7, float %85)  ; Saturate(value)
  %99 = uitofp i32 %87 to float
  %100 = uitofp i32 %88 to float
  %101 = uitofp i32 %89 to float
  %102 = fmul fast float %99, %96
  %103 = fmul fast float %100, %97
  %104 = fmul fast float %101, %98
  %105 = call float @dx.op.binary.f32(i32 35, float %102, float 0.000000e+00)  ; FMax(a,b)
  %106 = call float @dx.op.binary.f32(i32 35, float %103, float 0.000000e+00)  ; FMax(a,b)
  %107 = call float @dx.op.binary.f32(i32 35, float %104, float 0.000000e+00)  ; FMax(a,b)
  %108 = call float @dx.op.binary.f32(i32 36, float %105, float %93)  ; FMin(a,b)
  %109 = call float @dx.op.binary.f32(i32 36, float %106, float %94)  ; FMin(a,b)
  %110 = call float @dx.op.binary.f32(i32 36, float %107, float %95)  ; FMin(a,b)
  %111 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %14, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %112 = extractvalue %dx.types.CBufRet.i32 %111, 3
  %113 = sitofp i32 %112 to float
  %114 = fadd fast float %113, %110
  %115 = fptosi float %108 to i32
  %116 = fptosi float %109 to i32
  %117 = fptosi float %114 to i32
  %118 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %119 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %118, i32 0, i32 %115, i32 %116, i32 %117, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %120 = extractvalue %dx.types.ResRet.i32 %119, 0
  %121 = lshr i32 %35, 2
  %122 = lshr i32 %37, 2
  %123 = lshr i32 %39, 2
  %124 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %14, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %125 = extractvalue %dx.types.CBufRet.i32 %124, 1
  %126 = mul i32 %125, %123
  %127 = add i32 %126, %122
  %128 = extractvalue %dx.types.CBufRet.i32 %124, 0
  %129 = mul i32 %127, %128
  %130 = add i32 %129, %121
  %131 = shl i32 %130, 1
  %132 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %133 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %132, i32 %131, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %134 = extractvalue %dx.types.ResRet.i32 %133, 0
  %135 = or i32 %131, 1
  %136 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %132, i32 %135, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %137 = extractvalue %dx.types.ResRet.i32 %136, 0
  %138 = mul nuw nsw i32 %35, 7
  %139 = mul nuw nsw i32 %37, 7
  %140 = mul nuw nsw i32 %39, 7
  %141 = uitofp i32 %138 to float
  %142 = uitofp i32 %139 to float
  %143 = uitofp i32 %140 to float
  %144 = uitofp i32 %16 to float
  %145 = uitofp i32 %17 to float
  %146 = uitofp i32 %18 to float
  %147 = fmul fast float %144, 2.000000e+00
  %148 = fmul fast float %145, 2.000000e+00
  %149 = fmul fast float %146, 2.000000e+00
  %150 = fadd fast float %141, %147
  %151 = fadd fast float %142, %148
  %152 = fadd fast float %143, %149
  %153 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %14, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %154 = extractvalue %dx.types.CBufRet.f32 %153, 0
  %155 = extractvalue %dx.types.CBufRet.f32 %153, 1
  %156 = extractvalue %dx.types.CBufRet.f32 %153, 2
  %157 = fmul fast float %154, %150
  %158 = fmul fast float %155, %151
  %159 = fmul fast float %156, %152
  %160 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %14, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %161 = extractvalue %dx.types.CBufRet.f32 %160, 0
  %162 = extractvalue %dx.types.CBufRet.f32 %160, 1
  %163 = extractvalue %dx.types.CBufRet.f32 %160, 2
  %164 = fadd fast float %157, %161
  %165 = fadd fast float %158, %162
  %166 = fadd fast float %159, %163
  %167 = fsub fast float %164, %21
  %168 = fsub fast float %165, %22
  %169 = fsub fast float %166, %23
  %170 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %14, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %171 = extractvalue %dx.types.CBufRet.f32 %170, 0
  %172 = fmul fast float %171, 1.750000e+00
  %173 = fsub fast float -0.000000e+00, %172
  %174 = fmul fast float %171, 2.000000e+00
  %175 = fmul fast float %171, 0x4012147AE0000000
  %176 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i32 0, i32 0
  store i32 -1, i32* %176, align 4
  %177 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i32 0, i32 1
  store i32 -1, i32* %177, align 4
  %178 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i32 0, i32 2
  store i32 -1, i32* %178, align 4
  %179 = getelementptr inbounds [4 x i32], [4 x i32]* %19, i32 0, i32 3
  store i32 -1, i32* %179, align 4
  %180 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %181 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %180, i32 0, i32 %115, i32 %116, i32 %117, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %182 = extractvalue %dx.types.ResRet.i32 %181, 0
  %183 = icmp eq i32 %182, -1
  br i1 %183, label %194, label %184

; <label>:184                                     ; preds = %0
  %185 = shl i32 %182, 6
  %186 = and i32 %185, 1073741760
  %187 = or i32 %186, %54
  %188 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4108, i32 16 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=16>
  %189 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %188, i32 %187, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %190 = extractvalue %dx.types.ResRet.i32 %189, 0
  %191 = extractvalue %dx.types.ResRet.i32 %189, 1
  %192 = extractvalue %dx.types.ResRet.i32 %189, 2
  %193 = extractvalue %dx.types.ResRet.i32 %189, 3
  store i32 %190, i32* %176, align 4
  store i32 %191, i32* %177, align 4
  store i32 %192, i32* %178, align 4
  store i32 %193, i32* %179, align 4
  br label %194

; <label>:194                                     ; preds = %184, %0
  %195 = phi i32 [ -1, %0 ], [ %193, %184 ]
  %196 = phi i32 [ -1, %0 ], [ %192, %184 ]
  %197 = phi i32 [ -1, %0 ], [ %190, %184 ]
  %198 = phi i32 [ -1, %0 ], [ %191, %184 ]
  %199 = add i32 %134, 510
  %200 = udiv i32 %199, 511
  %201 = icmp ugt i32 %199, 510
  br i1 %201, label %202, label %607

; <label>:202                                     ; preds = %194
  br label %203

; <label>:203                                     ; preds = %599, %202
  %204 = phi i32 [ %600, %599 ], [ 0, %202 ]
  %205 = mul nuw i32 %204, 511
  %206 = sub i32 %134, %205
  %207 = call i32 @dx.op.binary.i32(i32 40, i32 %206, i32 511)  ; UMin(a,b)
  %208 = add i32 %205, %207
  %209 = or i32 %17, %16
  %210 = or i32 %209, %18
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %212, label %213

; <label>:212                                     ; preds = %203
  store i32 0, i32 addrspace(3)* @"\01?NumTileCulledObjects@@3IA", align 4, !tbaa !30
  br label %213

; <label>:213                                     ; preds = %212, %203
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  %214 = fadd fast float %141, 3.500000e+00
  %215 = fadd fast float %142, 3.500000e+00
  %216 = fadd fast float %143, 3.500000e+00
  %217 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %14, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %218 = extractvalue %dx.types.CBufRet.f32 %217, 0
  %219 = extractvalue %dx.types.CBufRet.f32 %217, 1
  %220 = extractvalue %dx.types.CBufRet.f32 %217, 2
  %221 = fmul fast float %218, %214
  %222 = fmul fast float %219, %215
  %223 = fmul fast float %220, %216
  %224 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %14, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %225 = extractvalue %dx.types.CBufRet.f32 %224, 0
  %226 = extractvalue %dx.types.CBufRet.f32 %224, 1
  %227 = extractvalue %dx.types.CBufRet.f32 %224, 2
  %228 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %14, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %229 = extractvalue %dx.types.CBufRet.f32 %228, 0
  %230 = fmul fast float %229, 7.000000e+00
  %231 = fsub fast float -0.000000e+00, %230
  %232 = fmul fast float %229, 0x402428F5C0000000
  %233 = fadd fast float %232, %174
  %234 = add i32 %31, %205
  %235 = icmp ult i32 %234, %208
  br i1 %235, label %236, label %299

; <label>:236                                     ; preds = %213
  br label %237

; <label>:237                                     ; preds = %295, %236
  %238 = phi i32 [ %296, %295 ], [ %234, %236 ]
  %239 = add i32 %238, %137
  %240 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %241 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %240, i32 %239, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %242 = extractvalue %dx.types.ResRet.i32 %241, 0
  %243 = mul i32 %242, 3
  %244 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %245 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %244, i32 %243, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %246 = extractvalue %dx.types.ResRet.f32 %245, 0
  %247 = extractvalue %dx.types.ResRet.f32 %245, 1
  %248 = extractvalue %dx.types.ResRet.f32 %245, 2
  %249 = add i32 %243, 1
  %250 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %244, i32 %249, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %251 = extractvalue %dx.types.ResRet.f32 %250, 0
  %252 = extractvalue %dx.types.ResRet.f32 %250, 1
  %253 = extractvalue %dx.types.ResRet.f32 %250, 2
  %254 = add i32 %243, 2
  %255 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %244, i32 %254, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %256 = extractvalue %dx.types.ResRet.f32 %255, 0
  %257 = extractvalue %dx.types.ResRet.f32 %255, 1
  %258 = extractvalue %dx.types.ResRet.f32 %255, 2
  %259 = fsub fast float %246, %25
  %260 = fsub fast float %247, %26
  %261 = fsub fast float %248, %27
  %262 = fmul fast float %259, 2.097152e+06
  %263 = fmul fast float %260, 2.097152e+06
  %264 = fmul fast float %261, 2.097152e+06
  %265 = fsub fast float %21, %225
  %266 = fsub fast float %265, %221
  %267 = fadd fast float %266, %262
  %268 = fadd fast float %267, %251
  %269 = fsub fast float %22, %226
  %270 = fsub fast float %269, %222
  %271 = fadd fast float %270, %263
  %272 = fadd fast float %271, %252
  %273 = fsub fast float %23, %227
  %274 = fsub fast float %273, %223
  %275 = fadd fast float %274, %264
  %276 = fadd fast float %275, %253
  %277 = call float @dx.op.unary.f32(i32 6, float %268)  ; FAbs(value)
  %278 = call float @dx.op.unary.f32(i32 6, float %272)  ; FAbs(value)
  %279 = call float @dx.op.unary.f32(i32 6, float %276)  ; FAbs(value)
  %280 = fsub fast float %231, %256
  %281 = fadd fast float %280, %277
  %282 = fsub fast float %231, %257
  %283 = fadd fast float %282, %278
  %284 = fsub fast float %231, %258
  %285 = fadd fast float %284, %279
  %286 = call float @dx.op.binary.f32(i32 35, float %281, float 0.000000e+00)  ; FMax(a,b)
  %287 = call float @dx.op.binary.f32(i32 35, float %283, float 0.000000e+00)  ; FMax(a,b)
  %288 = call float @dx.op.binary.f32(i32 35, float %285, float 0.000000e+00)  ; FMax(a,b)
  %289 = call float @dx.op.dot3.f32(i32 55, float %286, float %287, float %288, float %286, float %287, float %288)  ; Dot3(ax,ay,az,bx,by,bz)
  %290 = fmul fast float %233, %233
  %291 = fcmp fast olt float %289, %290
  br i1 %291, label %292, label %295

; <label>:292                                     ; preds = %237
  %293 = atomicrmw add i32 addrspace(3)* @"\01?NumTileCulledObjects@@3IA", i32 1 seq_cst
  %294 = getelementptr [511 x i32], [511 x i32] addrspace(3)* @"\01?SharedCulledObjectList@@3PAIA", i32 0, i32 %293
  store i32 %242, i32 addrspace(3)* %294, align 4, !tbaa !30
  br label %295

; <label>:295                                     ; preds = %292, %237
  %296 = add i32 %238, 64
  %297 = icmp ult i32 %296, %208
  br i1 %297, label %237, label %298

; <label>:298                                     ; preds = %295
  br label %299

; <label>:299                                     ; preds = %298, %213
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  %300 = load i32, i32 addrspace(3)* @"\01?NumTileCulledObjects@@3IA", align 4, !tbaa !30
  %301 = icmp eq i32 %300, 0
  br i1 %301, label %599, label %302

; <label>:302                                     ; preds = %299
  br label %303

; <label>:303                                     ; preds = %595, %302
  %304 = phi i32 [ %596, %595 ], [ 0, %302 ]
  %305 = getelementptr [511 x i32], [511 x i32] addrspace(3)* @"\01?SharedCulledObjectList@@3PAIA", i32 0, i32 %304
  %306 = load i32, i32 addrspace(3)* %305, align 4, !tbaa !30
  %307 = mul i32 %306, 3
  %308 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %309 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %308, i32 %307, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %310 = extractvalue %dx.types.ResRet.f32 %309, 0
  %311 = extractvalue %dx.types.ResRet.f32 %309, 1
  %312 = extractvalue %dx.types.ResRet.f32 %309, 2
  %313 = add i32 %307, 1
  %314 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %308, i32 %313, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %315 = extractvalue %dx.types.ResRet.f32 %314, 0
  %316 = extractvalue %dx.types.ResRet.f32 %314, 1
  %317 = extractvalue %dx.types.ResRet.f32 %314, 2
  %318 = add i32 %307, 2
  %319 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %308, i32 %318, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %320 = extractvalue %dx.types.ResRet.f32 %319, 0
  %321 = extractvalue %dx.types.ResRet.f32 %319, 1
  %322 = extractvalue %dx.types.ResRet.f32 %319, 2
  %323 = fsub fast float %310, %25
  %324 = fsub fast float %311, %26
  %325 = fsub fast float %312, %27
  %326 = fmul fast float %323, 2.097152e+06
  %327 = fmul fast float %324, 2.097152e+06
  %328 = fmul fast float %325, 2.097152e+06
  %329 = fsub fast float %21, %164
  %330 = fadd fast float %329, %326
  %331 = fadd fast float %330, %315
  %332 = fsub fast float %22, %165
  %333 = fadd fast float %332, %327
  %334 = fadd fast float %333, %316
  %335 = fsub fast float %23, %166
  %336 = fadd fast float %335, %328
  %337 = fadd fast float %336, %317
  %338 = call float @dx.op.unary.f32(i32 6, float %331)  ; FAbs(value)
  %339 = call float @dx.op.unary.f32(i32 6, float %334)  ; FAbs(value)
  %340 = call float @dx.op.unary.f32(i32 6, float %337)  ; FAbs(value)
  %341 = fsub fast float %173, %320
  %342 = fadd fast float %341, %338
  %343 = fsub fast float %173, %321
  %344 = fadd fast float %343, %339
  %345 = fsub fast float %173, %322
  %346 = fadd fast float %345, %340
  %347 = call float @dx.op.binary.f32(i32 35, float %342, float 0.000000e+00)  ; FMax(a,b)
  %348 = call float @dx.op.binary.f32(i32 35, float %344, float 0.000000e+00)  ; FMax(a,b)
  %349 = call float @dx.op.binary.f32(i32 35, float %346, float 0.000000e+00)  ; FMax(a,b)
  %350 = call float @dx.op.dot3.f32(i32 55, float %347, float %348, float %349, float %347, float %348, float %349)  ; Dot3(ax,ay,az,bx,by,bz)
  %351 = fmul fast float %174, %174
  %352 = fcmp fast ugt float %350, %351
  br i1 %352, label %595, label %353

; <label>:353                                     ; preds = %303
  %354 = mul i32 %306, 10
  %355 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %356 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %355, i32 %354, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %357 = extractvalue %dx.types.ResRet.f32 %356, 0
  %358 = extractvalue %dx.types.ResRet.f32 %356, 1
  %359 = extractvalue %dx.types.ResRet.f32 %356, 2
  %360 = or i32 %354, 1
  %361 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %355, i32 %360, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %362 = extractvalue %dx.types.ResRet.f32 %361, 0
  %363 = extractvalue %dx.types.ResRet.f32 %361, 1
  %364 = extractvalue %dx.types.ResRet.f32 %361, 2
  %365 = extractvalue %dx.types.ResRet.f32 %361, 3
  %366 = add i32 %354, 2
  %367 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %355, i32 %366, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %368 = extractvalue %dx.types.ResRet.f32 %367, 0
  %369 = extractvalue %dx.types.ResRet.f32 %367, 1
  %370 = extractvalue %dx.types.ResRet.f32 %367, 2
  %371 = extractvalue %dx.types.ResRet.f32 %367, 3
  %372 = add i32 %354, 3
  %373 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %355, i32 %372, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %374 = extractvalue %dx.types.ResRet.f32 %373, 0
  %375 = extractvalue %dx.types.ResRet.f32 %373, 1
  %376 = extractvalue %dx.types.ResRet.f32 %373, 2
  %377 = extractvalue %dx.types.ResRet.f32 %373, 3
  %378 = add i32 %354, 4
  %379 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %355, i32 %378, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %380 = extractvalue %dx.types.ResRet.f32 %379, 0
  %381 = extractvalue %dx.types.ResRet.f32 %379, 1
  %382 = extractvalue %dx.types.ResRet.f32 %379, 2
  %383 = add i32 %354, 5
  %384 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %355, i32 %383, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %385 = extractvalue %dx.types.ResRet.f32 %384, 3
  %386 = bitcast float %385 to i32
  %387 = add i32 %354, 9
  %388 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %355, i32 %387, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %389 = extractvalue %dx.types.ResRet.f32 %388, 0
  %390 = extractvalue %dx.types.ResRet.f32 %388, 1
  %391 = extractvalue %dx.types.ResRet.f32 %388, 2
  %392 = call float @dx.op.binary.f32(i32 36, float %390, float %391)  ; FMin(a,b)
  %393 = call float @dx.op.binary.f32(i32 36, float %389, float %392)  ; FMin(a,b)
  %394 = fsub fast float %25, %357
  %395 = fsub fast float %26, %358
  %396 = fsub fast float %27, %359
  %397 = fmul fast float %394, 2.097152e+06
  %398 = fmul fast float %395, 2.097152e+06
  %399 = fmul fast float %396, 2.097152e+06
  %400 = fadd fast float %397, %167
  %401 = fadd fast float %398, %168
  %402 = fadd fast float %399, %169
  %403 = fmul fast float %400, %362
  %404 = fmul fast float %368, %400
  %405 = fmul fast float %374, %400
  %406 = fmul fast float %401, %363
  %407 = fmul fast float %369, %401
  %408 = fmul fast float %375, %401
  %409 = fmul fast float %402, %364
  %410 = fmul fast float %370, %402
  %411 = fmul fast float %376, %402
  %412 = fadd fast float %406, %365
  %413 = fadd fast float %412, %403
  %414 = fadd fast float %413, %409
  %415 = fadd fast float %407, %371
  %416 = fadd fast float %415, %404
  %417 = fadd fast float %416, %410
  %418 = fadd fast float %408, %377
  %419 = fadd fast float %418, %405
  %420 = fadd fast float %419, %411
  %421 = fsub fast float -0.000000e+00, %380
  %422 = fsub fast float -0.000000e+00, %381
  %423 = fsub fast float -0.000000e+00, %382
  %424 = call float @dx.op.binary.f32(i32 35, float %414, float %421)  ; FMax(a,b)
  %425 = call float @dx.op.binary.f32(i32 35, float %417, float %422)  ; FMax(a,b)
  %426 = call float @dx.op.binary.f32(i32 35, float %420, float %423)  ; FMax(a,b)
  %427 = call float @dx.op.binary.f32(i32 36, float %424, float %380)  ; FMin(a,b)
  %428 = call float @dx.op.binary.f32(i32 36, float %425, float %381)  ; FMin(a,b)
  %429 = call float @dx.op.binary.f32(i32 36, float %426, float %382)  ; FMin(a,b)
  %430 = call float @dx.op.unary.f32(i32 6, float %414)  ; FAbs(value)
  %431 = call float @dx.op.unary.f32(i32 6, float %417)  ; FAbs(value)
  %432 = call float @dx.op.unary.f32(i32 6, float %420)  ; FAbs(value)
  %433 = fsub fast float %430, %380
  %434 = fsub fast float %431, %381
  %435 = fsub fast float %432, %382
  %436 = fmul fast float %433, %389
  %437 = fmul fast float %434, %390
  %438 = fmul fast float %435, %391
  %439 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %436)  ; FMax(a,b)
  %440 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %437)  ; FMax(a,b)
  %441 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %438)  ; FMax(a,b)
  %442 = fmul fast float %439, %439
  %443 = fmul fast float %440, %440
  %444 = fadd fast float %443, %442
  %445 = fmul fast float %441, %441
  %446 = fadd fast float %444, %445
  %447 = call float @dx.op.unary.f32(i32 24, float %446)  ; Sqrt(value)
  %448 = call float @dx.op.binary.f32(i32 35, float %437, float %438)  ; FMax(a,b)
  %449 = call float @dx.op.binary.f32(i32 35, float %436, float %448)  ; FMax(a,b)
  %450 = call float @dx.op.binary.f32(i32 36, float 0.000000e+00, float %449)  ; FMin(a,b)
  %451 = fadd fast float %450, %447
  %452 = fcmp fast olt float %451, %175
  br i1 %452, label %453, label %563, !dx.controlflow.hints !34

; <label>:453                                     ; preds = %353
  %454 = extractvalue %dx.types.ResRet.f32 %388, 3
  %455 = bitcast float %454 to i32
  %456 = mul i32 %455, 9
  %457 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %458 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %457, i32 %456, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %459 = extractvalue %dx.types.ResRet.f32 %458, 0
  %460 = bitcast float %459 to i32
  %461 = lshr i32 %460, 30
  %462 = icmp eq i32 %461, 0
  br i1 %462, label %557, label %463

; <label>:463                                     ; preds = %453
  br label %464

; <label>:464                                     ; preds = %553, %463
  %465 = phi i32 [ %554, %553 ], [ 0, %463 ]
  %466 = mul nuw nsw i32 %465, 3
  %467 = add i32 %466, %456
  %468 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %469 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %468, i32 %467, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %470 = extractvalue %dx.types.ResRet.f32 %469, 0
  %471 = extractvalue %dx.types.ResRet.f32 %469, 1
  %472 = bitcast float %470 to i32
  %473 = bitcast float %471 to i32
  %474 = add i32 %467, 1
  %475 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %468, i32 %474, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %476 = extractvalue %dx.types.ResRet.f32 %475, 0
  %477 = extractvalue %dx.types.ResRet.f32 %475, 1
  %478 = extractvalue %dx.types.ResRet.f32 %475, 2
  %479 = extractvalue %dx.types.ResRet.f32 %475, 3
  %480 = add i32 %467, 2
  %481 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %468, i32 %480, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %482 = extractvalue %dx.types.ResRet.f32 %481, 0
  %483 = extractvalue %dx.types.ResRet.f32 %481, 1
  %484 = extractvalue %dx.types.ResRet.f32 %481, 2
  %485 = extractvalue %dx.types.ResRet.f32 %481, 3
  %486 = and i32 %472, 1023
  %487 = lshr i32 %472, 10
  %488 = and i32 %487, 1023
  %489 = fmul fast float %476, %427
  %490 = fmul fast float %477, %428
  %491 = fmul fast float %478, %429
  %492 = fadd fast float %482, %489
  %493 = fadd fast float %483, %490
  %494 = fadd fast float %484, %491
  %495 = fptosi float %492 to i32
  %496 = fptosi float %493 to i32
  %497 = fptosi float %494 to i32
  %498 = mul i32 %497, %488
  %499 = add i32 %498, %496
  %500 = mul i32 %499, %486
  %501 = add i32 %495, %473
  %502 = add i32 %501, %500
  %503 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 10, i32 1033 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<4xF32>
  %504 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %503, i32 %502, i32 undef)  ; BufferLoad(srv,index,wot)
  %505 = extractvalue %dx.types.ResRet.f32 %504, 3
  %506 = fcmp fast ogt float %505, 0.000000e+00
  br i1 %506, label %507, label %546

; <label>:507                                     ; preds = %464
  %508 = extractvalue %dx.types.ResRet.f32 %504, 2
  %509 = extractvalue %dx.types.ResRet.f32 %504, 1
  %510 = extractvalue %dx.types.ResRet.f32 %504, 0
  %511 = sitofp i32 %495 to float
  %512 = sitofp i32 %496 to float
  %513 = sitofp i32 %497 to float
  %514 = fsub fast float %492, %511
  %515 = fsub fast float %493, %512
  %516 = fsub fast float %494, %513
  %517 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %14, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %518 = extractvalue %dx.types.CBufRet.f32 %517, 0
  %519 = extractvalue %dx.types.CBufRet.f32 %517, 1
  %520 = extractvalue %dx.types.CBufRet.f32 %517, 2
  %521 = fmul fast float %518, %510
  %522 = fmul fast float %519, %509
  %523 = fmul fast float %520, %508
  %524 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %14, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %525 = extractvalue %dx.types.CBufRet.f32 %524, 0
  %526 = extractvalue %dx.types.CBufRet.f32 %524, 1
  %527 = extractvalue %dx.types.CBufRet.f32 %524, 2
  %528 = fmul fast float %525, %514
  %529 = fmul fast float %526, %515
  %530 = fmul fast float %527, %516
  %531 = fadd fast float %528, %521
  %532 = fadd fast float %529, %522
  %533 = fadd fast float %530, %523
  %534 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %14, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %535 = extractvalue %dx.types.CBufRet.f32 %534, 0
  %536 = extractvalue %dx.types.CBufRet.f32 %534, 1
  %537 = extractvalue %dx.types.CBufRet.f32 %534, 2
  %538 = fadd fast float %531, %535
  %539 = fadd fast float %532, %536
  %540 = fadd fast float %533, %537
  %541 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %542 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %543 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %541, %dx.types.Handle %542, float %538, float %539, float %540, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %544 = extractvalue %dx.types.ResRet.f32 %543, 0
  %545 = fmul fast float %544, %479
  br label %546

; <label>:546                                     ; preds = %507, %464
  %547 = phi float [ %545, %507 ], [ %479, %464 ]
  %548 = fadd float %485, %547
  %549 = fadd fast float %485, %479
  %550 = call float @dx.op.unary.f32(i32 6, float %548)  ; FAbs(value)
  %551 = fmul fast float %549, 2.500000e-01
  %552 = fcmp fast ogt float %550, %551
  br i1 %552, label %556, label %553

; <label>:553                                     ; preds = %546
  %554 = add nuw nsw i32 %465, 1
  %555 = icmp ult i32 %554, %461
  br i1 %555, label %464, label %556

; <label>:556                                     ; preds = %553, %546
  br label %557

; <label>:557                                     ; preds = %556, %453
  %558 = phi float [ 0.000000e+00, %453 ], [ %548, %556 ]
  %559 = fmul fast float %558, %393
  %560 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %451)  ; FMax(a,b)
  %561 = fadd fast float %559, %560
  %562 = call float @dx.op.binary.f32(i32 35, float %561, float %451)  ; FMax(a,b)
  br label %563

; <label>:563                                     ; preds = %557, %353
  %564 = phi float [ %562, %557 ], [ %175, %353 ]
  %565 = call float @dx.op.unary.f32(i32 6, float %564)  ; FAbs(value)
  %566 = fcmp fast olt float %565, %175
  br i1 %566, label %567, label %595

; <label>:567                                     ; preds = %563
  %568 = fmul fast float %171, 4.375000e-01
  %569 = fadd fast float %564, %568
  %570 = fmul fast float %171, 0x4013D47AE0000000
  %571 = fdiv fast float %569, %570
  %572 = call float @dx.op.unary.f32(i32 7, float %571)  ; Saturate(value)
  %573 = fmul fast float %572, 2.560000e+02
  %574 = call float @dx.op.binary.f32(i32 35, float %573, float 0.000000e+00)  ; FMax(a,b)
  %575 = call float @dx.op.binary.f32(i32 36, float %574, float 2.550000e+02)  ; FMin(a,b)
  %576 = fptoui float %575 to i32
  %577 = and i32 %386, 16777215
  %578 = shl i32 %576, 24
  %579 = or i32 %578, %577
  %580 = load i32, i32* %176, align 4, !tbaa !30, !alias.scope !35
  %581 = load i32, i32* %177, align 4, !tbaa !30, !alias.scope !35
  %582 = call i32 @dx.op.binary.i32(i32 39, i32 %580, i32 %581)  ; UMax(a,b)
  %583 = load i32, i32* %178, align 4, !tbaa !30, !alias.scope !35
  %584 = call i32 @dx.op.binary.i32(i32 39, i32 %582, i32 %583)  ; UMax(a,b)
  %585 = load i32, i32* %179, align 4, !tbaa !30, !alias.scope !35
  %586 = call i32 @dx.op.binary.i32(i32 39, i32 %584, i32 %585)  ; UMax(a,b)
  %587 = icmp ult i32 %579, %586
  br i1 %587, label %588, label %595

; <label>:588                                     ; preds = %567
  %589 = icmp eq i32 %580, %586
  br i1 %589, label %590, label %593

; <label>:590                                     ; preds = %630, %628, %593, %588
  %591 = phi i32 [ 0, %588 ], [ 1, %593 ], [ 2, %628 ], [ 3, %630 ]
  %592 = getelementptr [4 x i32], [4 x i32]* %19, i32 0, i32 %591
  store i32 %579, i32* %592, align 4, !tbaa !30, !alias.scope !35
  br label %595

; <label>:593                                     ; preds = %588
  %594 = icmp eq i32 %581, %586
  br i1 %594, label %590, label %628

; <label>:595                                     ; preds = %630, %590, %567, %563, %303
  %596 = add nuw i32 %304, 1
  %597 = icmp eq i32 %596, %300
  br i1 %597, label %598, label %303

; <label>:598                                     ; preds = %595
  br label %599

; <label>:599                                     ; preds = %598, %299
  %600 = add nuw nsw i32 %204, 1
  %601 = icmp ult i32 %600, %200
  br i1 %601, label %203, label %602

; <label>:602                                     ; preds = %599
  %603 = load i32, i32* %177, align 4, !tbaa !30, !alias.scope !38
  %604 = load i32, i32* %176, align 4, !tbaa !30, !alias.scope !38
  %605 = load i32, i32* %178, align 4, !tbaa !30, !alias.scope !38
  %606 = load i32, i32* %179, align 4, !tbaa !30, !alias.scope !38
  br label %607

; <label>:607                                     ; preds = %602, %194
  %608 = phi i32 [ %606, %602 ], [ %195, %194 ]
  %609 = phi i32 [ %605, %602 ], [ %196, %194 ]
  %610 = phi i32 [ %604, %602 ], [ %197, %194 ]
  %611 = phi i32 [ %603, %602 ], [ %198, %194 ]
  %612 = call i32 @dx.op.binary.i32(i32 40, i32 %610, i32 %611)  ; UMin(a,b)
  %613 = call i32 @dx.op.binary.i32(i32 39, i32 %610, i32 %611)  ; UMax(a,b)
  %614 = call i32 @dx.op.binary.i32(i32 40, i32 %613, i32 %609)  ; UMin(a,b)
  %615 = call i32 @dx.op.binary.i32(i32 39, i32 %613, i32 %609)  ; UMax(a,b)
  %616 = call i32 @dx.op.binary.i32(i32 40, i32 %615, i32 %608)  ; UMin(a,b)
  %617 = call i32 @dx.op.binary.i32(i32 39, i32 %615, i32 %608)  ; UMax(a,b)
  %618 = call i32 @dx.op.binary.i32(i32 40, i32 %612, i32 %614)  ; UMin(a,b)
  %619 = call i32 @dx.op.binary.i32(i32 39, i32 %612, i32 %614)  ; UMax(a,b)
  %620 = call i32 @dx.op.binary.i32(i32 40, i32 %619, i32 %616)  ; UMin(a,b)
  %621 = call i32 @dx.op.binary.i32(i32 39, i32 %619, i32 %616)  ; UMax(a,b)
  %622 = call i32 @dx.op.binary.i32(i32 40, i32 %618, i32 %620)  ; UMin(a,b)
  %623 = call i32 @dx.op.binary.i32(i32 39, i32 %618, i32 %620)  ; UMax(a,b)
  %624 = shl i32 %120, 6
  %625 = and i32 %624, 1073741760
  %626 = or i32 %625, %54
  %627 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4108, i32 16 })  ; AnnotateHandle(res,props)  resource: RWStructuredBuffer<stride=16>
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %627, i32 %626, i32 0, i32 %622, i32 %623, i32 %621, i32 %617, i8 15, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  ret void

; <label>:628                                     ; preds = %593
  %629 = icmp eq i32 %583, %586
  br i1 %629, label %590, label %630

; <label>:630                                     ; preds = %628
  %631 = icmp eq i32 %585, %586
  br i1 %631, label %590, label %595
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadIdInGroup.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.rawBufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: noduplicate nounwind
declare void @dx.op.barrier(i32, i32) #3

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }
attributes #3 = { noduplicate nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!26}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !20, !22, !24}
!5 = !{!6, !8, !9, !11, !12, !13, !15, !16, !18, !19}
!6 = !{i32 0, %"class.Buffer<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 10, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !7}
!9 = !{i32 2, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 12, i32 0, !10}
!10 = !{i32 1, i32 16}
!11 = !{i32 3, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 12, i32 0, !10}
!12 = !{i32 4, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 12, i32 0, !10}
!13 = !{i32 5, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 5, i32 1, i32 4, i32 0, !14}
!14 = !{i32 0, i32 5}
!15 = !{i32 6, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 6, i32 1, i32 4, i32 0, !14}
!16 = !{i32 7, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 7, i32 1, i32 12, i32 0, !17}
!17 = !{i32 1, i32 4}
!18 = !{i32 8, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 8, i32 1, i32 12, i32 0, !17}
!19 = !{i32 9, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 9, i32 1, i32 12, i32 0, !17}
!20 = !{!21}
!21 = !{i32 0, %"class.RWStructuredBuffer<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 12, i1 false, i1 false, i1 false, !10}
!22 = !{!23}
!23 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 524, null}
!24 = !{!25}
!25 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!26 = !{void ()* @CompositeObjectsIntoObjectGridPagesCS, !"CompositeObjectsIntoObjectGridPagesCS", null, !4, !27}
!27 = !{i32 0, i64 16, i32 4, !28, i32 5, !29}
!28 = !{i32 4, i32 4, i32 4}
!29 = !{i32 0}
!30 = !{!31, !31, i64 0}
!31 = !{!"int", !32, i64 0}
!32 = !{!"omnipotent char", !33, i64 0}
!33 = !{!"Simple C/C++ TBAA"}
!34 = distinct !{!34, !"dx.controlflow.hints", i32 1}
!35 = !{!36}
!36 = distinct !{!36, !37, !"\01?AddToObjectGridCell@@YAXUFObjectGridCell@@IMMM@Z: %ObjectGridCell"}
!37 = distinct !{!37, !"\01?AddToObjectGridCell@@YAXUFObjectGridCell@@IMMM@Z"}
!38 = !{!39}
!39 = distinct !{!39, !40, !"\01?SortObjectGridCell@@YAXUFObjectGridCell@@@Z: %ObjectGridCell"}
!40 = distinct !{!40, !"\01?SortObjectGridCell@@YAXUFObjectGridCell@@@Z"}
