;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: c80f16c87c6a1c29b7c01beae18cf46e
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(8,8,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       float DiffuseColorBoost;                      ; Offset:   48
;       float SkylightLeaking;                        ; Offset:   52
;       float SkylightLeakingRoughness;               ; Offset:   56
;       float InvFullSkylightLeakingDistance;         ; Offset:   60
;       uint SampleHeightFog;                         ; Offset:   64
;       uint SurfaceCacheUpdateFrameIndex;            ; Offset:  172
;       float4 HZBUvFactorAndInvFactor;               ; Offset:  288
;       float2 PrevSceneColorBilinearUVMin;           ; Offset:  304
;       float2 PrevSceneColorBilinearUVMax;           ; Offset:  312
;       float4 PrevScreenPositionScaleBias;           ; Offset:  320
;       float4 PrevScreenPositionScaleBiasForDepth;   ; Offset:  336
;       float PrevSceneColorPreExposureCorrection;    ; Offset:  352
;       float2 HZBBaseTexelSize;                      ; Offset:  360
;       float4 HZBUVToScreenUVScaleBias;              ; Offset:  368
;       float MaxHierarchicalScreenTraceIterations;   ; Offset:  496
;       float RelativeDepthThickness;                 ; Offset:  500
;       float HistoryDepthTestRelativeThickness;      ; Offset:  504
;       float NumThicknessStepsToDetermineCertainty;  ; Offset:  508
;       uint MinimumTracingThreadOccupancy;           ; Offset:  512
;       uint SkipFoliageHits;                         ; Offset:  516
;       uint ScreenProbeTracingOctahedronResolution;  ; Offset:  528
;       uint ScreenProbeLightSampleResolutionXY;      ; Offset:  532
;       uint ScreenProbeGatherOctahedronResolution;   ; Offset:  536
;       uint ScreenProbeGatherOctahedronResolutionWithBorder;; Offset:  540
;       uint ScreenProbeDownsampleFactor;             ; Offset:  544
;       uint2 ScreenProbeViewSize;                    ; Offset:  552
;       uint2 ScreenProbeAtlasViewSize;               ; Offset:  560
;       uint2 ScreenProbeAtlasBufferSize;             ; Offset:  568
;       float ScreenProbeGatherMaxMip;                ; Offset:  576
;       float RelativeSpeedDifferenceToConsiderLightingMoving;; Offset:  580
;       float ScreenTraceNoFallbackThicknessScale;    ; Offset:  584
;       float2 SampleRadianceProbeUVMul;              ; Offset:  592
;       float2 SampleRadianceProbeUVAdd;              ; Offset:  600
;       float2 SampleRadianceAtlasUVMul;              ; Offset:  608
;       uint NumUniformScreenProbes;                  ; Offset:  620
;       uint MaxNumAdaptiveProbes;                    ; Offset:  624
;       int FixedJitterIndex;                         ; Offset:  628
;       uint MaxImportanceSamplingOctahedronResolution;; Offset:  784
;       uint ScreenProbeBRDFOctahedronResolution;     ; Offset:  788
;       float StepFactor;                             ; Offset:  832
;       float CardTraceEndDistanceFromCamera;         ; Offset:  836
;       float MinSampleRadius;                        ; Offset:  848
;       float MinTraceDistance;                       ; Offset:  852
;       float MaxTraceDistance;                       ; Offset:  856
;       float MaxMeshSDFTraceDistance;                ; Offset:  860
;       float SurfaceBias;                            ; Offset:  864
;       float CardInterpolateInfluenceRadius;         ; Offset:  868
;       int HeightfieldMaxTracingSteps;               ; Offset:  880
;       float ReprojectionRadiusScale;                ; Offset:  896
;       float InvClipmapFadeSize;                     ; Offset:  908
;       uint2 ProbeAtlasResolutionInProbes;           ; Offset:  912
;       uint RadianceProbeClipmapResolution;          ; Offset:  920
;       uint NumRadianceProbeClipmaps;                ; Offset:  924
;       uint RadianceProbeResolution;                 ; Offset:  928
;       uint FinalProbeResolution;                    ; Offset:  932
;       uint FinalRadianceAtlasMaxMip;                ; Offset:  936
;       uint CalculateIrradiance;                     ; Offset:  940
;       uint IrradianceProbeResolution;               ; Offset:  944
;       uint OcclusionProbeResolution;                ; Offset:  948
;       float4 RadianceProbeSettings[6];              ; Offset: 1008
;       float4 PaddedWorldPositionToRadianceProbeCoordBias[6];; Offset: 1104
;       float4 PaddedRadianceProbeCoordToWorldPositionBias[6];; Offset: 1200
;       float2 InvProbeFinalRadianceAtlasResolution;  ; Offset: 1296
;       float2 InvProbeFinalIrradianceAtlasResolution;; Offset: 1304
;       float2 InvProbeDepthAtlasResolution;          ; Offset: 1312
;       uint OverrideCacheOcclusionLighting;          ; Offset: 1320
;       uint ShowBlackRadianceCacheLighting;          ; Offset: 1324
;       uint ProbeAtlasResolutionModuloMask;          ; Offset: 1328
;       uint ProbeAtlasResolutionDivideShift;         ; Offset: 1332
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:  1336
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_ReflectionStruct
; {
;
;   struct UniformBufferConstants_ReflectionStruct
;   {
;
;       float4 ReflectionStruct_SkyLightParameters;   ; Offset:    0
;       uint BindlessResource_ReflectionStruct_SkyLightCubemap;; Offset:   16
;       uint PrePadding_ReflectionStruct_20;          ; Offset:   20
;       uint BindlessSampler_ReflectionStruct_SkyLightCubemapSampler;; Offset:   24
;       uint PrePadding_ReflectionStruct_28;          ; Offset:   28
;       uint BindlessResource_ReflectionStruct_SkyLightBlendDestinationCubemap;; Offset:   32
;       uint PrePadding_ReflectionStruct_36;          ; Offset:   36
;       uint BindlessSampler_ReflectionStruct_SkyLightBlendDestinationCubemapSampler;; Offset:   40
;       uint PrePadding_ReflectionStruct_44;          ; Offset:   44
;       uint BindlessResource_ReflectionStruct_ReflectionCubemap;; Offset:   48
;       uint PrePadding_ReflectionStruct_52;          ; Offset:   52
;       uint BindlessSampler_ReflectionStruct_ReflectionCubemapSampler;; Offset:   56
;       uint PrePadding_ReflectionStruct_60;          ; Offset:   60
;       uint BindlessResource_ReflectionStruct_PreIntegratedGF;; Offset:   64
;       uint PrePadding_ReflectionStruct_68;          ; Offset:   68
;       uint BindlessSampler_ReflectionStruct_PreIntegratedGFSampler;; Offset:   72
;   
;   } UniformBufferConstants_ReflectionStruct;        ; Offset:    0 Size:    76
;
; }
;
; cbuffer UniformBufferConstants_BlueNoise
; {
;
;   struct UniformBufferConstants_BlueNoise
;   {
;
;       int3 BlueNoise_Dimensions;                    ; Offset:    0
;       int PrePadding_BlueNoise_12;                  ; Offset:   12
;       int3 BlueNoise_ModuloMasks;                   ; Offset:   16
;       int PrePadding_BlueNoise_28;                  ; Offset:   28
;       uint BindlessResource_BlueNoise_ScalarTexture;; Offset:   32
;       uint PrePadding_BlueNoise_36;                 ; Offset:   36
;       uint BindlessResource_BlueNoise_Vec2Texture;  ; Offset:   40
;   
;   } UniformBufferConstants_BlueNoise;               ; Offset:    0 Size:    44
;
; }
;
; Resource bind info for NumAdaptiveScreenProbes
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for AdaptiveScreenProbeData
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_ReflectionStruct   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_BlueNoise   cbuffer      NA          NA     CB3            cb3     1
; D3DStaticPointClampedSampler      sampler      NA          NA      S0   s1,space1000     1
; ReflectionStruct_SkyLightCubemapSampler   sampler      NA          NA      S1             s0     1
; ReflectionStruct_SkyLightCubemap   texture     f32        cube      T0             t0     1
; BlueNoise_Vec2Texture             texture     f32          2d      T1             t1     1
; HairStrands_HairOnlyDepthClosestHZBTexture   texture     f32          2d      T2             t2     1
; GBufferBTexture                   texture     f32          2d      T3             t3     1
; GBufferVelocityTexture            texture     f32          2d      T4             t4     1
; ScreenProbeSceneDepth             texture     u32          2d      T5             t5     1
; ScreenProbeWorldNormal            texture     f32          2d      T6             t6     1
; ScreenProbeWorldSpeed             texture     u32          2d      T7             t7     1
; NumAdaptiveScreenProbes           texture  struct         r/o      T8             t8     1
; AdaptiveScreenProbeData           texture  struct         r/o      T9             t9     1
; LightingChannelsTexture           texture     u32          2d     T10            t10     1
; ClosestHZBTexture                 texture     f32          2d     T11            t11     1
; PrevSceneColorTexture             texture     f32          2d     T12            t12     1
; HistorySceneDepth                 texture     f32          2d     T13            t13     1
; RWTraceHit                            UAV     u32          2d      U0             u0     1
; RWTraceRadiance                       UAV     f32          2d      U1             u1     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<unsigned int>" = type { i32, %"class.Texture2D<unsigned int>::mips_type" }
%"class.Texture2D<unsigned int>::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 2> >" = type { <2 x float>, %"class.Texture2D<vector<float, 2> >::mips_type" }
%"class.Texture2D<vector<float, 2> >::mips_type" = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.RWTexture2D<unsigned int>" = type { i32 }
%"class.RWTexture2D<vector<float, 3> >" = type { <3 x float> }
%_RootShaderParameters = type { float, float, float, float, i32, i32, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, float, <2 x float>, <4 x float>, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, <2 x i32>, <2 x i32>, <2 x i32>, float, float, float, <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, i32, float, float, <2 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_ReflectionStruct = type { <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_BlueNoise = type { <3 x i32>, i32, <3 x i32>, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @ScreenProbeTraceScreenTexturesCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 1 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 1000, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 13, i32 44 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %24 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 13, i32 76 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %25 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %26 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 13, i32 1336 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %27 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %28 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %29 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %30 = extractvalue %dx.types.CBufRet.i32 %29, 0
  %31 = udiv i32 %27, %30
  %32 = udiv i32 %28, %30
  %33 = mul i32 %31, %30
  %34 = mul i32 %32, %30
  %35 = sub i32 %27, %33
  %36 = sub i32 %28, %34
  %37 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %38 = extractvalue %dx.types.CBufRet.i32 %37, 0
  %39 = mul i32 %38, %32
  %40 = add i32 %39, %31
  %41 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %42 = extractvalue %dx.types.CBufRet.i32 %41, 2
  %43 = urem i32 %40, %42
  %44 = udiv i32 %40, %42
  %45 = extractvalue %dx.types.CBufRet.i32 %41, 0
  %46 = mul i32 %45, %43
  %47 = mul i32 %45, %44
  %48 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 39)  ; CBufferLoadLegacy(handle,regIndex)
  %49 = extractvalue %dx.types.CBufRet.i32 %48, 1
  %50 = icmp slt i32 %49, 0
  br i1 %50, label %51, label %54

; <label>:51                                      ; preds = %0
  %52 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %25, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %53 = extractvalue %dx.types.CBufRet.i32 %52, 0
  br label %54

; <label>:54                                      ; preds = %51, %0
  %55 = phi i32 [ %53, %51 ], [ %49, %0 ]
  %56 = uitofp i32 %55 to float
  %57 = fmul fast float %56, 1.250000e-01
  %58 = call float @dx.op.unary.f32(i32 22, float %57)  ; Frc(value)
  %59 = call i32 @dx.op.unary.i32(i32 30, i32 %55)  ; Bfrev(value)
  %60 = lshr i32 %59, 16
  %61 = uitofp i32 %60 to float
  %62 = fmul fast float %61, 0x3EF0000000000000
  %63 = uitofp i32 %45 to float
  %64 = fmul fast float %63, %58
  %65 = fmul fast float %62, %63
  %66 = fptoui float %64 to i32
  %67 = fptoui float %65 to i32
  %68 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %25, i32 130)  ; CBufferLoadLegacy(handle,regIndex)
  %69 = extractvalue %dx.types.CBufRet.i32 %68, 0
  %70 = extractvalue %dx.types.CBufRet.i32 %68, 1
  %71 = add i32 %69, %46
  %72 = add i32 %71, %66
  %73 = add i32 %70, %47
  %74 = add i32 %73, %67
  %75 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %76 = extractvalue %dx.types.CBufRet.i32 %75, 3
  %77 = icmp ult i32 %40, %76
  br i1 %77, label %85, label %78

; <label>:78                                      ; preds = %54
  %79 = sub i32 %40, %76
  %80 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %81 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %80, i32 %79, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %82 = extractvalue %dx.types.ResRet.i32 %81, 0
  %83 = and i32 %82, 65535
  %84 = lshr i32 %82, 16
  br label %85

; <label>:85                                      ; preds = %78, %54
  %86 = phi i32 [ %83, %78 ], [ %72, %54 ]
  %87 = phi i32 [ %84, %78 ], [ %74, %54 ]
  br i1 %50, label %88, label %91

; <label>:88                                      ; preds = %85
  %89 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %25, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %90 = extractvalue %dx.types.CBufRet.i32 %89, 0
  br label %91

; <label>:91                                      ; preds = %88, %85
  %92 = phi i32 [ %90, %88 ], [ %49, %85 ]
  %93 = uitofp i32 %92 to float
  %94 = fmul fast float %93, 1.250000e-01
  %95 = call float @dx.op.unary.f32(i32 22, float %94)  ; Frc(value)
  %96 = call i32 @dx.op.unary.i32(i32 30, i32 %92)  ; Bfrev(value)
  %97 = lshr i32 %96, 16
  %98 = uitofp i32 %97 to float
  %99 = fmul fast float %98, 0x3EF0000000000000
  %100 = fmul fast float %63, %95
  %101 = fmul fast float %99, %63
  %102 = fptoui float %100 to i32
  %103 = fptoui float %101 to i32
  %104 = sub i32 %86, %69
  %105 = sub i32 %104, %102
  %106 = sub i32 %87, %70
  %107 = sub i32 %106, %103
  %108 = udiv i32 %105, %45
  %109 = udiv i32 %107, %45
  %110 = extractvalue %dx.types.CBufRet.i32 %48, 0
  %111 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %112 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %111, i32 0, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %113 = extractvalue %dx.types.ResRet.i32 %112, 0
  %114 = call i32 @dx.op.binary.i32(i32 40, i32 %113, i32 %110)  ; UMin(a,b)
  %115 = add i32 %114, %76
  %116 = icmp ult i32 %40, %115
  %117 = icmp ult i32 %31, %38
  %118 = and i1 %116, %117
  br i1 %118, label %119, label %1438

; <label>:119                                     ; preds = %91
  %120 = icmp ult i32 %35, %30
  %121 = icmp ult i32 %36, %30
  %122 = and i1 %120, %121
  br i1 %122, label %123, label %1438

; <label>:123                                     ; preds = %119
  %124 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %125 = extractvalue %dx.types.CBufRet.f32 %124, 0
  %126 = extractvalue %dx.types.CBufRet.f32 %124, 1
  %127 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 129)  ; CBufferLoadLegacy(handle,regIndex)
  %128 = extractvalue %dx.types.CBufRet.f32 %127, 0
  %129 = extractvalue %dx.types.CBufRet.f32 %127, 1
  %130 = fadd fast float %125, -1.000000e+00
  %131 = fadd fast float %130, %128
  %132 = fadd fast float %126, -1.000000e+00
  %133 = fadd fast float %132, %129
  %134 = uitofp i32 %86 to float
  %135 = uitofp i32 %87 to float
  %136 = call float @dx.op.binary.f32(i32 36, float %134, float %131)  ; FMin(a,b)
  %137 = call float @dx.op.binary.f32(i32 36, float %135, float %133)  ; FMin(a,b)
  %138 = fadd fast float %136, 5.000000e-01
  %139 = fadd fast float %137, 5.000000e-01
  %140 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %141 = extractvalue %dx.types.CBufRet.f32 %140, 2
  %142 = extractvalue %dx.types.CBufRet.f32 %140, 3
  %143 = fmul fast float %141, %138
  %144 = fmul fast float %142, %139
  %145 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %146 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %145, i32 0, i32 %31, i32 %32, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %147 = extractvalue %dx.types.ResRet.i32 %146, 0
  %148 = bitcast i32 %147 to float
  %149 = fcmp fast ogt float %148, 0.000000e+00
  br i1 %149, label %150, label %1438

; <label>:150                                     ; preds = %123
  %151 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %152 = extractvalue %dx.types.CBufRet.f32 %151, 2
  %153 = extractvalue %dx.types.CBufRet.f32 %151, 3
  %154 = fsub fast float %143, %153
  %155 = fsub fast float %144, %152
  %156 = extractvalue %dx.types.CBufRet.f32 %151, 0
  %157 = extractvalue %dx.types.CBufRet.f32 %151, 1
  %158 = fdiv fast float %154, %156
  %159 = fdiv fast float %155, %157
  %160 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 56)  ; CBufferLoadLegacy(handle,regIndex)
  %161 = extractvalue %dx.types.CBufRet.f32 %160, 0
  %162 = extractvalue %dx.types.CBufRet.f32 %160, 1
  %163 = extractvalue %dx.types.CBufRet.f32 %160, 2
  %164 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 57)  ; CBufferLoadLegacy(handle,regIndex)
  %165 = extractvalue %dx.types.CBufRet.f32 %164, 0
  %166 = extractvalue %dx.types.CBufRet.f32 %164, 1
  %167 = extractvalue %dx.types.CBufRet.f32 %164, 2
  %168 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 58)  ; CBufferLoadLegacy(handle,regIndex)
  %169 = extractvalue %dx.types.CBufRet.f32 %168, 0
  %170 = extractvalue %dx.types.CBufRet.f32 %168, 1
  %171 = extractvalue %dx.types.CBufRet.f32 %168, 2
  %172 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 59)  ; CBufferLoadLegacy(handle,regIndex)
  %173 = extractvalue %dx.types.CBufRet.f32 %172, 0
  %174 = extractvalue %dx.types.CBufRet.f32 %172, 1
  %175 = extractvalue %dx.types.CBufRet.f32 %172, 2
  %176 = fmul fast float %158, %148
  %177 = fmul fast float %159, %148
  %178 = fmul fast float %161, %176
  %179 = call float @dx.op.tertiary.f32(i32 46, float %177, float %165, float %178)  ; FMad(a,b,c)
  %180 = call float @dx.op.tertiary.f32(i32 46, float %148, float %169, float %179)  ; FMad(a,b,c)
  %181 = fadd fast float %180, %173
  %182 = fmul fast float %162, %176
  %183 = call float @dx.op.tertiary.f32(i32 46, float %177, float %166, float %182)  ; FMad(a,b,c)
  %184 = call float @dx.op.tertiary.f32(i32 46, float %148, float %170, float %183)  ; FMad(a,b,c)
  %185 = fadd fast float %184, %174
  %186 = fmul fast float %163, %176
  %187 = call float @dx.op.tertiary.f32(i32 46, float %177, float %167, float %186)  ; FMad(a,b,c)
  %188 = call float @dx.op.tertiary.f32(i32 46, float %148, float %171, float %187)  ; FMad(a,b,c)
  %189 = fadd fast float %188, %175
  %190 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %191 = extractvalue %dx.types.CBufRet.f32 %190, 2
  br i1 %50, label %192, label %195

; <label>:192                                     ; preds = %150
  %193 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %25, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %194 = extractvalue %dx.types.CBufRet.i32 %193, 1
  br label %195

; <label>:195                                     ; preds = %192, %150
  %196 = phi i32 [ %194, %192 ], [ %49, %150 ]
  %197 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %198 = extractvalue %dx.types.CBufRet.i32 %197, 0
  %199 = extractvalue %dx.types.CBufRet.i32 %197, 1
  %200 = extractvalue %dx.types.CBufRet.i32 %197, 2
  %201 = and i32 %198, %108
  %202 = and i32 %199, %109
  %203 = and i32 %200, %196
  %204 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %205 = extractvalue %dx.types.CBufRet.i32 %204, 1
  %206 = mul i32 %203, %205
  %207 = add i32 %206, %202
  %208 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %209 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %208, i32 0, i32 %201, i32 %207, i32 undef, i32 0, i32 0, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %210 = extractvalue %dx.types.ResRet.f32 %209, 0
  %211 = extractvalue %dx.types.ResRet.f32 %209, 1
  %212 = uitofp i32 %35 to float
  %213 = uitofp i32 %36 to float
  %214 = fadd fast float %210, %212
  %215 = fadd fast float %211, %213
  %216 = uitofp i32 %30 to float
  %217 = fdiv fast float %214, %216
  %218 = fdiv fast float %215, %216
  %219 = fmul fast float %217, 2.000000e+00
  %220 = fmul fast float %218, 2.000000e+00
  %221 = fadd fast float %219, -1.000000e+00
  %222 = fadd fast float %220, -1.000000e+00
  %223 = call float @dx.op.unary.f32(i32 6, float %221)  ; FAbs(value)
  %224 = call float @dx.op.unary.f32(i32 6, float %222)  ; FAbs(value)
  %225 = fsub fast float 1.000000e+00, %223
  %226 = fsub fast float %225, %224
  %227 = call float @dx.op.unary.f32(i32 6, float %226)  ; FAbs(value)
  %228 = fsub fast float 1.000000e+00, %227
  %229 = fcmp fast oeq float %228, 0.000000e+00
  br i1 %229, label %235, label %230

; <label>:230                                     ; preds = %195
  %231 = fsub fast float %224, %223
  %232 = fdiv fast float %231, %228
  %233 = fadd fast float %232, 1.000000e+00
  %234 = fmul fast float %233, 0x3FE921FB60000000
  br label %235

; <label>:235                                     ; preds = %230, %195
  %236 = phi float [ %234, %230 ], [ 0.000000e+00, %195 ]
  %237 = fmul fast float %228, %228
  %238 = fsub fast float 2.000000e+00, %237
  %239 = call float @dx.op.unary.f32(i32 24, float %238)  ; Sqrt(value)
  %240 = fmul fast float %239, %228
  %241 = fcmp fast ogt float %221, 0.000000e+00
  %242 = fcmp fast olt float %221, 0.000000e+00
  %243 = zext i1 %241 to i32
  %244 = zext i1 %242 to i32
  %245 = sub nsw i32 %243, %244
  %246 = sitofp i32 %245 to float
  %247 = fmul fast float %240, %246
  %248 = call float @dx.op.unary.f32(i32 12, float %236)  ; Cos(value)
  %249 = call float @dx.op.unary.f32(i32 6, float %248)  ; FAbs(value)
  %250 = fmul fast float %247, %249
  %251 = fcmp fast ogt float %222, 0.000000e+00
  %252 = fcmp fast olt float %222, 0.000000e+00
  %253 = zext i1 %251 to i32
  %254 = zext i1 %252 to i32
  %255 = sub nsw i32 %253, %254
  %256 = sitofp i32 %255 to float
  %257 = fmul fast float %240, %256
  %258 = call float @dx.op.unary.f32(i32 13, float %236)  ; Sin(value)
  %259 = call float @dx.op.unary.f32(i32 6, float %258)  ; FAbs(value)
  %260 = fmul fast float %257, %259
  %261 = fcmp fast ogt float %226, 0.000000e+00
  %262 = fcmp fast olt float %226, 0.000000e+00
  %263 = zext i1 %261 to i32
  %264 = zext i1 %262 to i32
  %265 = sub nsw i32 %263, %264
  %266 = sitofp i32 %265 to float
  %267 = fsub fast float 1.000000e+00, %237
  %268 = fmul fast float %266, %267
  %269 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 521 })  ; AnnotateHandle(res,props)  resource: Texture2D<2xF32>
  %270 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %269, i32 0, i32 %31, i32 %32, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %271 = extractvalue %dx.types.ResRet.f32 %270, 0
  %272 = extractvalue %dx.types.ResRet.f32 %270, 1
  %273 = fmul fast float %271, 2.000000e+00
  %274 = fmul fast float %272, 2.000000e+00
  %275 = fadd fast float %273, -1.000000e+00
  %276 = fadd fast float %274, -1.000000e+00
  %277 = call float @dx.op.unary.f32(i32 6, float %275)  ; FAbs(value)
  %278 = call float @dx.op.unary.f32(i32 6, float %276)  ; FAbs(value)
  %279 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %277, float %278)  ; Dot2(ax,ay,bx,by)
  %280 = fsub fast float 1.000000e+00, %279
  %281 = fsub fast float -0.000000e+00, %280
  %282 = call float @dx.op.binary.f32(i32 35, float %281, float 0.000000e+00)  ; FMax(a,b)
  %283 = fsub fast float -0.000000e+00, %282
  %284 = fcmp fast oge float %275, 0.000000e+00
  %285 = fcmp fast oge float %276, 0.000000e+00
  %286 = select i1 %284, float %283, float %282
  %287 = select i1 %285, float %283, float %282
  %288 = fadd fast float %286, %275
  %289 = fadd fast float %287, %276
  %290 = call float @dx.op.dot3.f32(i32 55, float %288, float %289, float %280, float %288, float %289, float %280)  ; Dot3(ax,ay,az,bx,by,bz)
  %291 = call float @dx.op.unary.f32(i32 25, float %290)  ; Rsqrt(value)
  %292 = fmul fast float %288, %291
  %293 = fmul fast float %289, %291
  %294 = fmul fast float %291, %280
  %295 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %296 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %295, i32 0, i32 %31, i32 %32, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %297 = extractvalue %dx.types.ResRet.i32 %296, 0
  %298 = and i32 %297, 32768
  %299 = icmp eq i32 %298, 0
  br i1 %299, label %308, label %300

; <label>:300                                     ; preds = %235
  %301 = call float @dx.op.dot3.f32(i32 55, float %292, float %293, float %294, float %250, float %260, float %268)  ; Dot3(ax,ay,az,bx,by,bz)
  %302 = fcmp fast olt float %301, 0.000000e+00
  %303 = zext i1 %302 to i32
  br i1 %302, label %304, label %308

; <label>:304                                     ; preds = %300
  %305 = fsub fast float -0.000000e+00, %292
  %306 = fsub fast float -0.000000e+00, %293
  %307 = fsub fast float -0.000000e+00, %294
  br label %308

; <label>:308                                     ; preds = %304, %300, %235
  %309 = phi i32 [ %303, %304 ], [ %303, %300 ], [ 0, %235 ]
  %310 = phi float [ %305, %304 ], [ %292, %300 ], [ %292, %235 ]
  %311 = phi float [ %306, %304 ], [ %293, %300 ], [ %293, %235 ]
  %312 = phi float [ %307, %304 ], [ %294, %300 ], [ %294, %235 ]
  %313 = icmp eq i32 %309, 0
  %314 = or i1 %313, %299
  br i1 %314, label %315, label %1438

; <label>:315                                     ; preds = %308
  %316 = fadd fast float %136, 1.000000e+00
  %317 = fmul fast float %141, %316
  %318 = fadd fast float %137, 1.000000e+00
  %319 = fmul fast float %142, %318
  %320 = fsub fast float %317, %153
  %321 = fsub fast float %319, %152
  %322 = fdiv fast float %320, %156
  %323 = fdiv fast float %321, %157
  %324 = fmul fast float %322, %148
  %325 = fmul fast float %323, %148
  %326 = fmul fast float %161, %324
  %327 = call float @dx.op.tertiary.f32(i32 46, float %325, float %165, float %326)  ; FMad(a,b,c)
  %328 = call float @dx.op.tertiary.f32(i32 46, float %148, float %169, float %327)  ; FMad(a,b,c)
  %329 = fmul fast float %162, %324
  %330 = call float @dx.op.tertiary.f32(i32 46, float %325, float %166, float %329)  ; FMad(a,b,c)
  %331 = call float @dx.op.tertiary.f32(i32 46, float %148, float %170, float %330)  ; FMad(a,b,c)
  %332 = fmul fast float %163, %324
  %333 = call float @dx.op.tertiary.f32(i32 46, float %325, float %167, float %332)  ; FMad(a,b,c)
  %334 = call float @dx.op.tertiary.f32(i32 46, float %148, float %171, float %333)  ; FMad(a,b,c)
  %335 = fsub fast float %328, %180
  %336 = fsub fast float %331, %184
  %337 = fsub fast float %334, %188
  %338 = call float @dx.op.dot3.f32(i32 55, float %335, float %336, float %337, float %310, float %311, float %312)  ; Dot3(ax,ay,az,bx,by,bz)
  %339 = call float @dx.op.unary.f32(i32 6, float %338)  ; FAbs(value)
  %340 = fmul fast float %339, 2.000000e+00
  %341 = fmul fast float %340, %310
  %342 = fmul fast float %340, %311
  %343 = fmul fast float %340, %312
  %344 = fadd fast float %341, %181
  %345 = fadd fast float %342, %185
  %346 = fadd fast float %343, %189
  %347 = extractvalue %dx.types.CBufRet.f32 %140, 0
  %348 = extractvalue %dx.types.CBufRet.f32 %140, 1
  %349 = fmul fast float %347, %143
  %350 = fmul fast float %348, %144
  %351 = fptosi float %349 to i32
  %352 = fptosi float %350 to i32
  %353 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %354 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %353, i32 0, i32 %351, i32 %352, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %355 = extractvalue %dx.types.ResRet.i32 %354, 0
  %356 = and i32 %355, 8
  %357 = icmp eq i32 %356, 0
  br i1 %357, label %358, label %361

; <label>:358                                     ; preds = %315
  %359 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 36)  ; CBufferLoadLegacy(handle,regIndex)
  %360 = extractvalue %dx.types.CBufRet.f32 %359, 2
  br label %361

; <label>:361                                     ; preds = %358, %315
  %362 = phi float [ %360, %358 ], [ 1.000000e+00, %315 ]
  %363 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %364 = extractvalue %dx.types.CBufRet.f32 %363, 3
  %365 = extractvalue %dx.types.CBufRet.f32 %363, 1
  %366 = fmul fast float %365, %362
  %367 = extractvalue %dx.types.CBufRet.f32 %363, 0
  %368 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %369 = extractvalue %dx.types.CBufRet.f32 %368, 0
  %370 = extractvalue %dx.types.CBufRet.f32 %368, 1
  %371 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %372 = extractvalue %dx.types.CBufRet.f32 %371, 0
  %373 = extractvalue %dx.types.CBufRet.f32 %371, 1
  %374 = extractvalue %dx.types.CBufRet.f32 %371, 2
  %375 = extractvalue %dx.types.CBufRet.f32 %371, 3
  %376 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %377 = extractvalue %dx.types.CBufRet.f32 %376, 2
  %378 = extractvalue %dx.types.CBufRet.f32 %376, 3
  %379 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %380 = extractvalue %dx.types.CBufRet.f32 %379, 0
  %381 = extractvalue %dx.types.CBufRet.f32 %379, 1
  %382 = extractvalue %dx.types.CBufRet.f32 %379, 2
  %383 = extractvalue %dx.types.CBufRet.f32 %379, 3
  %384 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %385 = extractvalue %dx.types.CBufRet.f32 %384, 0
  %386 = extractvalue %dx.types.CBufRet.f32 %384, 1
  %387 = extractvalue %dx.types.CBufRet.f32 %384, 2
  %388 = extractvalue %dx.types.CBufRet.f32 %384, 3
  %389 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %390 = extractvalue %dx.types.CBufRet.f32 %389, 0
  %391 = extractvalue %dx.types.CBufRet.f32 %389, 1
  %392 = extractvalue %dx.types.CBufRet.f32 %389, 2
  %393 = extractvalue %dx.types.CBufRet.f32 %389, 3
  %394 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %395 = extractvalue %dx.types.CBufRet.f32 %394, 0
  %396 = extractvalue %dx.types.CBufRet.f32 %394, 1
  %397 = extractvalue %dx.types.CBufRet.f32 %394, 2
  %398 = extractvalue %dx.types.CBufRet.f32 %394, 3
  %399 = fmul fast float %380, %344
  %400 = call float @dx.op.tertiary.f32(i32 46, float %345, float %385, float %399)  ; FMad(a,b,c)
  %401 = call float @dx.op.tertiary.f32(i32 46, float %346, float %390, float %400)  ; FMad(a,b,c)
  %402 = fadd fast float %401, %395
  %403 = fmul fast float %381, %344
  %404 = call float @dx.op.tertiary.f32(i32 46, float %345, float %386, float %403)  ; FMad(a,b,c)
  %405 = call float @dx.op.tertiary.f32(i32 46, float %346, float %391, float %404)  ; FMad(a,b,c)
  %406 = fadd fast float %405, %396
  %407 = fmul fast float %382, %344
  %408 = call float @dx.op.tertiary.f32(i32 46, float %345, float %387, float %407)  ; FMad(a,b,c)
  %409 = call float @dx.op.tertiary.f32(i32 46, float %346, float %392, float %408)  ; FMad(a,b,c)
  %410 = fadd fast float %409, %397
  %411 = fmul fast float %383, %344
  %412 = call float @dx.op.tertiary.f32(i32 46, float %345, float %388, float %411)  ; FMad(a,b,c)
  %413 = call float @dx.op.tertiary.f32(i32 46, float %346, float %393, float %412)  ; FMad(a,b,c)
  %414 = fadd fast float %413, %398
  %415 = call float @dx.op.binary.f32(i32 35, float %414, float 1.000000e+00)  ; FMax(a,b)
  %416 = fdiv fast float %402, %415
  %417 = fdiv fast float %406, %415
  %418 = fdiv fast float %410, %415
  %419 = fmul fast float %416, 5.000000e-01
  %420 = fmul fast float %417, 5.000000e-01
  %421 = fadd fast float %419, 5.000000e-01
  %422 = fsub fast float 5.000000e-01, %420
  %423 = fmul fast float %421, %369
  %424 = fmul fast float %422, %370
  %425 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %426 = extractvalue %dx.types.CBufRet.f32 %425, 2
  %427 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %428 = extractvalue %dx.types.CBufRet.f32 %427, 2
  %429 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %430 = extractvalue %dx.types.CBufRet.f32 %429, 2
  %431 = fmul fast float %426, %250
  %432 = call float @dx.op.tertiary.f32(i32 46, float %260, float %428, float %431)  ; FMad(a,b,c)
  %433 = call float @dx.op.tertiary.f32(i32 46, float %268, float %430, float %432)  ; FMad(a,b,c)
  %434 = fcmp fast olt float %433, 0.000000e+00
  br i1 %434, label %435, label %445

; <label>:435                                     ; preds = %361
  %436 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %437 = extractvalue %dx.types.CBufRet.f32 %436, 2
  %438 = fmul fast float %426, %344
  %439 = call float @dx.op.tertiary.f32(i32 46, float %345, float %428, float %438)  ; FMad(a,b,c)
  %440 = call float @dx.op.tertiary.f32(i32 46, float %346, float %430, float %439)  ; FMad(a,b,c)
  %441 = fadd fast float %440, %437
  %442 = fmul fast float %441, 0xBFEFAE1480000000
  %443 = fdiv fast float %442, %433
  %444 = call float @dx.op.binary.f32(i32 36, float %443, float %191)  ; FMin(a,b)
  br label %445

; <label>:445                                     ; preds = %435, %361
  %446 = phi float [ %444, %435 ], [ %191, %361 ]
  %447 = fmul fast float %446, %250
  %448 = fmul fast float %446, %260
  %449 = fmul fast float %446, %268
  %450 = fadd fast float %447, %344
  %451 = fadd fast float %448, %345
  %452 = fadd fast float %449, %346
  %453 = fmul fast float %450, %380
  %454 = call float @dx.op.tertiary.f32(i32 46, float %451, float %385, float %453)  ; FMad(a,b,c)
  %455 = call float @dx.op.tertiary.f32(i32 46, float %452, float %390, float %454)  ; FMad(a,b,c)
  %456 = fadd fast float %455, %395
  %457 = fmul fast float %450, %381
  %458 = call float @dx.op.tertiary.f32(i32 46, float %451, float %386, float %457)  ; FMad(a,b,c)
  %459 = call float @dx.op.tertiary.f32(i32 46, float %452, float %391, float %458)  ; FMad(a,b,c)
  %460 = fadd fast float %459, %396
  %461 = fmul fast float %450, %382
  %462 = call float @dx.op.tertiary.f32(i32 46, float %451, float %387, float %461)  ; FMad(a,b,c)
  %463 = call float @dx.op.tertiary.f32(i32 46, float %452, float %392, float %462)  ; FMad(a,b,c)
  %464 = fadd fast float %463, %397
  %465 = fmul fast float %450, %383
  %466 = call float @dx.op.tertiary.f32(i32 46, float %451, float %388, float %465)  ; FMad(a,b,c)
  %467 = call float @dx.op.tertiary.f32(i32 46, float %452, float %393, float %466)  ; FMad(a,b,c)
  %468 = fadd fast float %467, %398
  %469 = fdiv fast float %456, %468
  %470 = fdiv fast float %460, %468
  %471 = fdiv fast float %464, %468
  %472 = fmul fast float %469, 5.000000e-01
  %473 = fmul fast float %470, 5.000000e-01
  %474 = fadd fast float %472, 5.000000e-01
  %475 = fsub fast float 5.000000e-01, %473
  %476 = fsub fast float %474, %421
  %477 = fmul fast float %476, %369
  %478 = fsub fast float %475, %422
  %479 = fmul fast float %478, %370
  %480 = fsub fast float %471, %418
  %481 = fdiv fast float 1.000000e+00, %477
  %482 = fdiv fast float 1.000000e+00, %479
  %483 = fdiv fast float 1.000000e+00, %480
  %484 = fmul fast float %423, %481
  %485 = fsub fast float -0.000000e+00, %484
  %486 = fmul fast float %424, %482
  %487 = fsub fast float -0.000000e+00, %486
  %488 = fmul fast float %418, %483
  %489 = fsub fast float -0.000000e+00, %488
  %490 = fsub fast float %369, %423
  %491 = fsub fast float %370, %424
  %492 = fsub fast float 1.000000e+00, %418
  %493 = fmul fast float %481, %490
  %494 = fmul fast float %482, %491
  %495 = fmul fast float %483, %492
  %496 = call float @dx.op.binary.f32(i32 35, float %485, float %493)  ; FMax(a,b)
  %497 = call float @dx.op.binary.f32(i32 35, float %487, float %494)  ; FMax(a,b)
  %498 = call float @dx.op.binary.f32(i32 35, float %489, float %495)  ; FMax(a,b)
  %499 = call float @dx.op.binary.f32(i32 36, float %497, float %498)  ; FMin(a,b)
  %500 = call float @dx.op.binary.f32(i32 36, float %496, float %499)  ; FMin(a,b)
  %501 = call float @dx.op.unary.f32(i32 7, float %500)  ; Saturate(value)
  %502 = fmul fast float %477, %501
  %503 = fmul fast float %479, %501
  %504 = fmul fast float %501, %480
  %505 = fadd fast float %502, %423
  %506 = fadd fast float %503, %424
  %507 = fadd fast float %504, %418
  %508 = fcmp fast olt float %502, 0.000000e+00
  %509 = fcmp fast olt float %503, 0.000000e+00
  %510 = select i1 %508, float 0.000000e+00, float 1.000000e+00
  %511 = select i1 %509, float 0.000000e+00, float 1.000000e+00
  %512 = fdiv fast float 1.000000e+00, %377
  %513 = fdiv fast float 1.000000e+00, %378
  %514 = fmul fast float %377, 0x3F747AE140000000
  %515 = fmul fast float %378, 0x3F747AE140000000
  %516 = fsub fast float -0.000000e+00, %514
  %517 = fsub fast float -0.000000e+00, %515
  %518 = select i1 %508, float %516, float %514
  %519 = select i1 %509, float %517, float %515
  %520 = fmul fast float %512, %423
  %521 = fmul fast float %513, %424
  %522 = call float @dx.op.unary.f32(i32 27, float %520)  ; Round_ni(value)
  %523 = call float @dx.op.unary.f32(i32 27, float %521)  ; Round_ni(value)
  %524 = fadd fast float %522, %510
  %525 = fadd fast float %523, %511
  %526 = fmul fast float %524, %377
  %527 = fmul fast float %525, %378
  %528 = fsub fast float %518, %423
  %529 = fadd fast float %528, %526
  %530 = fsub fast float %519, %424
  %531 = fadd fast float %530, %527
  %532 = fdiv fast float %529, %502
  %533 = fdiv fast float %531, %503
  %534 = call float @dx.op.binary.f32(i32 36, float %532, float %533)  ; FMin(a,b)
  %535 = fmul float %504, %534
  %536 = fmul float %503, %534
  %537 = fmul float %502, %534
  %538 = fadd float %418, %535
  %539 = fadd float %424, %536
  %540 = fadd float %423, %537
  %541 = fcmp fast ogt float %367, 0.000000e+00
  %542 = fcmp fast olt float %534, 1.000000e+00
  %543 = and i1 %542, %541
  br i1 %543, label %544, label %614

; <label>:544                                     ; preds = %445
  br label %545

; <label>:545                                     ; preds = %545, %544
  %546 = phi float [ %607, %545 ], [ %540, %544 ]
  %547 = phi float [ %606, %545 ], [ %539, %544 ]
  %548 = phi float [ %605, %545 ], [ %538, %544 ]
  %549 = phi float [ %596, %545 ], [ %534, %544 ]
  %550 = phi float [ %601, %545 ], [ 0.000000e+00, %544 ]
  %551 = phi float [ %597, %545 ], [ %534, %544 ]
  %552 = phi float [ %600, %545 ], [ 0.000000e+00, %544 ]
  %553 = call float @dx.op.unary.f32(i32 21, float %552)  ; Exp(value)
  %554 = fmul fast float %553, %377
  %555 = fmul fast float %553, %378
  %556 = fdiv fast float 1.000000e+00, %554
  %557 = fdiv fast float 1.000000e+00, %555
  %558 = fmul fast float %554, 0x3F747AE140000000
  %559 = fmul fast float %555, 0x3F747AE140000000
  %560 = fsub fast float -0.000000e+00, %558
  %561 = fsub fast float -0.000000e+00, %559
  %562 = select i1 %508, float %560, float %558
  %563 = select i1 %509, float %561, float %559
  %564 = fmul fast float %556, %546
  %565 = fmul fast float %557, %547
  %566 = call float @dx.op.unary.f32(i32 27, float %564)  ; Round_ni(value)
  %567 = call float @dx.op.unary.f32(i32 27, float %565)  ; Round_ni(value)
  %568 = fadd fast float %566, %510
  %569 = fadd fast float %567, %511
  %570 = fmul fast float %568, %554
  %571 = fmul fast float %569, %555
  %572 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %573 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %574 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %572, %dx.types.Handle %573, float %546, float %547, float undef, float undef, i32 0, i32 0, i32 undef, float %552)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %575 = extractvalue %dx.types.ResRet.f32 %574, 0
  %576 = fmul fast float %551, 1.000000e+01
  %577 = call float @dx.op.unary.f32(i32 7, float %576)  ; Saturate(value)
  %578 = fmul fast float %577, 0x3F847AE000000000
  %579 = fadd fast float %578, 0x3FEFAE1480000000
  %580 = fmul fast float %579, %575
  %581 = fsub fast float %562, %423
  %582 = fadd fast float %581, %570
  %583 = fsub fast float %563, %424
  %584 = fadd fast float %583, %571
  %585 = fsub fast float %580, %418
  %586 = fdiv fast float %582, %502
  %587 = fdiv fast float %584, %503
  %588 = fdiv fast float %585, %504
  %589 = fcmp fast olt float %504, 0.000000e+00
  %590 = select i1 %589, float %588, float 1.000000e+00
  %591 = call float @dx.op.binary.f32(i32 36, float %587, float %590)  ; FMin(a,b)
  %592 = call float @dx.op.binary.f32(i32 36, float %586, float %591)  ; FMin(a,b)
  %593 = fcmp fast ogt float %548, %580
  %594 = fcmp fast une float %592, %590
  %595 = and i1 %593, %594
  %596 = select i1 %595, float %592, float %549
  %597 = select i1 %593, float %592, float %551
  %598 = call float @dx.op.binary.f32(i32 36, float %597, float 1.000000e+00)  ; FMin(a,b)
  %599 = select i1 %595, float 1.000000e+00, float -1.000000e+00
  %600 = fadd fast float %599, %552
  %601 = fadd fast float %550, 1.000000e+00
  %602 = fmul float %504, %598
  %603 = fmul float %503, %598
  %604 = fmul float %502, %598
  %605 = fadd float %418, %602
  %606 = fadd float %424, %603
  %607 = fadd float %423, %604
  %608 = fcmp fast oge float %600, 0.000000e+00
  %609 = fcmp fast olt float %601, %367
  %610 = and i1 %608, %609
  %611 = fcmp fast olt float %597, 1.000000e+00
  %612 = and i1 %611, %610
  br i1 %612, label %545, label %613

; <label>:613                                     ; preds = %545
  br label %614

; <label>:614                                     ; preds = %613, %445
  %615 = phi float [ %540, %445 ], [ %607, %613 ]
  %616 = phi float [ %539, %445 ], [ %606, %613 ]
  %617 = phi float [ %538, %445 ], [ %605, %613 ]
  %618 = phi float [ %534, %445 ], [ %596, %613 ]
  %619 = phi float [ 0.000000e+00, %445 ], [ %600, %613 ]
  %620 = fcmp fast olt float %619, 0.000000e+00
  br i1 %620, label %621, label %655

; <label>:621                                     ; preds = %614
  %622 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %623 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %624 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %622, %dx.types.Handle %623, float %615, float %616, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %625 = extractvalue %dx.types.ResRet.f32 %624, 0
  %626 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %627 = extractvalue %dx.types.CBufRet.f32 %626, 0
  %628 = fmul fast float %627, %625
  %629 = extractvalue %dx.types.CBufRet.f32 %626, 1
  %630 = fadd fast float %628, %629
  %631 = extractvalue %dx.types.CBufRet.f32 %626, 2
  %632 = fmul fast float %631, %625
  %633 = extractvalue %dx.types.CBufRet.f32 %626, 3
  %634 = fsub fast float %632, %633
  %635 = fdiv fast float 1.000000e+00, %634
  %636 = fadd fast float %630, %635
  %637 = fmul fast float %627, %617
  %638 = fmul fast float %631, %617
  %639 = fsub fast float %638, %633
  %640 = fdiv fast float 1.000000e+00, %639
  %641 = fsub fast float %629, %636
  %642 = fadd fast float %641, %637
  %643 = fadd fast float %642, %640
  %644 = call float @dx.op.binary.f32(i32 35, float %636, float 0x3EE4F8B580000000)  ; FMax(a,b)
  %645 = fmul fast float %366, %644
  %646 = fcmp fast olt float %643, %645
  %647 = zext i1 %646 to i32
  br i1 %646, label %655, label %648

; <label>:648                                     ; preds = %621
  %649 = fmul fast float %618, %502
  %650 = fmul fast float %618, %503
  %651 = fmul fast float %618, %504
  %652 = fadd fast float %649, %423
  %653 = fadd fast float %650, %424
  %654 = fadd fast float %651, %418
  br label %655

; <label>:655                                     ; preds = %648, %621, %614
  %656 = phi float [ %615, %621 ], [ %652, %648 ], [ %615, %614 ]
  %657 = phi float [ %616, %621 ], [ %653, %648 ], [ %616, %614 ]
  %658 = phi float [ %617, %621 ], [ %654, %648 ], [ %617, %614 ]
  %659 = phi i32 [ %647, %621 ], [ %647, %648 ], [ 0, %614 ]
  %660 = icmp ne i32 %659, 0
  %661 = fcmp fast ogt float %364, 0.000000e+00
  %662 = and i1 %661, %660
  br i1 %662, label %663, label %711

; <label>:663                                     ; preds = %655
  %664 = fmul fast float %377, %364
  %665 = fmul fast float %664, %502
  %666 = fmul fast float %378, %364
  %667 = fmul fast float %666, %503
  %668 = fmul fast float %665, %665
  %669 = fmul fast float %667, %667
  %670 = fadd fast float %668, %669
  %671 = call float @dx.op.unary.f32(i32 24, float %670)  ; Sqrt(value)
  %672 = fsub fast float %505, %656
  %673 = fsub fast float %506, %657
  %674 = fmul fast float %672, %672
  %675 = fmul fast float %673, %673
  %676 = fadd fast float %675, %674
  %677 = call float @dx.op.unary.f32(i32 24, float %676)  ; Sqrt(value)
  %678 = fdiv fast float %671, %677
  %679 = call float @dx.op.binary.f32(i32 36, float %678, float 1.000000e+00)  ; FMin(a,b)
  br label %680

; <label>:680                                     ; preds = %706, %663
  %681 = phi float [ %708, %706 ], [ 0.000000e+00, %663 ]
  %682 = phi i32 [ %707, %706 ], [ 0, %663 ]
  %683 = fdiv fast float %681, %364
  %684 = fmul fast float %683, %679
  %685 = fmul fast float %684, %672
  %686 = fmul fast float %684, %673
  %687 = fadd fast float %685, %656
  %688 = fadd fast float %686, %657
  %689 = fcmp fast olt float %687, %369
  %690 = fcmp fast olt float %688, %370
  %691 = fcmp fast ogt float %687, 0.000000e+00
  %692 = fcmp fast ogt float %688, 0.000000e+00
  %693 = and i1 %691, %689
  %694 = and i1 %692, %690
  %695 = and i1 %693, %694
  br i1 %695, label %696, label %706

; <label>:696                                     ; preds = %680
  %697 = fsub fast float %507, %658
  %698 = fmul fast float %684, %697
  %699 = fadd fast float %698, %658
  %700 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %701 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %702 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %700, %dx.types.Handle %701, float %687, float %688, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %703 = extractvalue %dx.types.ResRet.f32 %702, 0
  %704 = fcmp fast ogt float %699, %703
  br i1 %704, label %705, label %706

; <label>:705                                     ; preds = %696
  br label %706

; <label>:706                                     ; preds = %705, %696, %680
  %707 = phi i32 [ 1, %705 ], [ %682, %696 ], [ %682, %680 ]
  %708 = fadd fast float %681, 1.000000e+00
  %709 = fcmp fast olt float %708, %364
  br i1 %709, label %680, label %710

; <label>:710                                     ; preds = %706
  br label %711

; <label>:711                                     ; preds = %710, %655
  %712 = phi i32 [ 0, %655 ], [ %707, %710 ]
  %713 = fmul fast float %656, %372
  %714 = fmul fast float %657, %373
  %715 = fadd fast float %713, %374
  %716 = fadd fast float %714, %375
  %717 = icmp eq i32 %659, 0
  %718 = icmp ne i32 %712, 0
  %719 = zext i1 %718 to i32
  br i1 %717, label %720, label %1025

; <label>:720                                     ; preds = %711
  %721 = fmul fast float %380, %181
  %722 = call float @dx.op.tertiary.f32(i32 46, float %185, float %385, float %721)  ; FMad(a,b,c)
  %723 = call float @dx.op.tertiary.f32(i32 46, float %189, float %390, float %722)  ; FMad(a,b,c)
  %724 = fadd fast float %723, %395
  %725 = fmul fast float %381, %181
  %726 = call float @dx.op.tertiary.f32(i32 46, float %185, float %386, float %725)  ; FMad(a,b,c)
  %727 = call float @dx.op.tertiary.f32(i32 46, float %189, float %391, float %726)  ; FMad(a,b,c)
  %728 = fadd fast float %727, %396
  %729 = fmul fast float %382, %181
  %730 = call float @dx.op.tertiary.f32(i32 46, float %185, float %387, float %729)  ; FMad(a,b,c)
  %731 = call float @dx.op.tertiary.f32(i32 46, float %189, float %392, float %730)  ; FMad(a,b,c)
  %732 = fadd fast float %731, %397
  %733 = fmul fast float %383, %181
  %734 = call float @dx.op.tertiary.f32(i32 46, float %185, float %388, float %733)  ; FMad(a,b,c)
  %735 = call float @dx.op.tertiary.f32(i32 46, float %189, float %393, float %734)  ; FMad(a,b,c)
  %736 = fadd fast float %735, %398
  %737 = call float @dx.op.binary.f32(i32 35, float %736, float 1.000000e+00)  ; FMax(a,b)
  %738 = fdiv fast float %724, %737
  %739 = fdiv fast float %728, %737
  %740 = fdiv fast float %732, %737
  %741 = fmul fast float %738, 5.000000e-01
  %742 = fmul fast float %739, 5.000000e-01
  %743 = fadd fast float %741, 5.000000e-01
  %744 = fsub fast float 5.000000e-01, %742
  %745 = fmul fast float %743, %369
  %746 = fmul fast float %744, %370
  br i1 %434, label %747, label %757

; <label>:747                                     ; preds = %720
  %748 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %749 = extractvalue %dx.types.CBufRet.f32 %748, 2
  %750 = fmul fast float %426, %181
  %751 = call float @dx.op.tertiary.f32(i32 46, float %185, float %428, float %750)  ; FMad(a,b,c)
  %752 = call float @dx.op.tertiary.f32(i32 46, float %189, float %430, float %751)  ; FMad(a,b,c)
  %753 = fadd fast float %752, %749
  %754 = fmul fast float %753, 0xBFEFAE1480000000
  %755 = fdiv fast float %754, %433
  %756 = call float @dx.op.binary.f32(i32 36, float %755, float %191)  ; FMin(a,b)
  br label %757

; <label>:757                                     ; preds = %747, %720
  %758 = phi float [ %756, %747 ], [ %191, %720 ]
  %759 = fmul fast float %758, %250
  %760 = fmul fast float %758, %260
  %761 = fmul fast float %758, %268
  %762 = fadd fast float %759, %181
  %763 = fadd fast float %760, %185
  %764 = fadd fast float %761, %189
  %765 = fmul fast float %762, %380
  %766 = call float @dx.op.tertiary.f32(i32 46, float %763, float %385, float %765)  ; FMad(a,b,c)
  %767 = call float @dx.op.tertiary.f32(i32 46, float %764, float %390, float %766)  ; FMad(a,b,c)
  %768 = fadd fast float %767, %395
  %769 = fmul fast float %762, %381
  %770 = call float @dx.op.tertiary.f32(i32 46, float %763, float %386, float %769)  ; FMad(a,b,c)
  %771 = call float @dx.op.tertiary.f32(i32 46, float %764, float %391, float %770)  ; FMad(a,b,c)
  %772 = fadd fast float %771, %396
  %773 = fmul fast float %762, %382
  %774 = call float @dx.op.tertiary.f32(i32 46, float %763, float %387, float %773)  ; FMad(a,b,c)
  %775 = call float @dx.op.tertiary.f32(i32 46, float %764, float %392, float %774)  ; FMad(a,b,c)
  %776 = fadd fast float %775, %397
  %777 = fmul fast float %762, %383
  %778 = call float @dx.op.tertiary.f32(i32 46, float %763, float %388, float %777)  ; FMad(a,b,c)
  %779 = call float @dx.op.tertiary.f32(i32 46, float %764, float %393, float %778)  ; FMad(a,b,c)
  %780 = fadd fast float %779, %398
  %781 = fdiv fast float %768, %780
  %782 = fdiv fast float %772, %780
  %783 = fdiv fast float %776, %780
  %784 = fmul fast float %781, 5.000000e-01
  %785 = fmul fast float %782, 5.000000e-01
  %786 = fadd fast float %784, 5.000000e-01
  %787 = fsub fast float 5.000000e-01, %785
  %788 = fsub fast float %786, %743
  %789 = fmul fast float %788, %369
  %790 = fsub fast float %787, %744
  %791 = fmul fast float %790, %370
  %792 = fsub fast float %783, %740
  %793 = fdiv fast float 1.000000e+00, %789
  %794 = fdiv fast float 1.000000e+00, %791
  %795 = fdiv fast float 1.000000e+00, %792
  %796 = fmul fast float %745, %793
  %797 = fsub fast float -0.000000e+00, %796
  %798 = fmul fast float %746, %794
  %799 = fsub fast float -0.000000e+00, %798
  %800 = fmul fast float %740, %795
  %801 = fsub fast float -0.000000e+00, %800
  %802 = fsub fast float %369, %745
  %803 = fsub fast float %370, %746
  %804 = fsub fast float 1.000000e+00, %740
  %805 = fmul fast float %793, %802
  %806 = fmul fast float %794, %803
  %807 = fmul fast float %795, %804
  %808 = call float @dx.op.binary.f32(i32 35, float %797, float %805)  ; FMax(a,b)
  %809 = call float @dx.op.binary.f32(i32 35, float %799, float %806)  ; FMax(a,b)
  %810 = call float @dx.op.binary.f32(i32 35, float %801, float %807)  ; FMax(a,b)
  %811 = call float @dx.op.binary.f32(i32 36, float %809, float %810)  ; FMin(a,b)
  %812 = call float @dx.op.binary.f32(i32 36, float %808, float %811)  ; FMin(a,b)
  %813 = call float @dx.op.unary.f32(i32 7, float %812)  ; Saturate(value)
  %814 = fmul fast float %789, %813
  %815 = fmul fast float %791, %813
  %816 = fmul fast float %813, %792
  %817 = fadd fast float %814, %745
  %818 = fadd fast float %815, %746
  %819 = fadd fast float %816, %740
  %820 = fcmp fast olt float %814, 0.000000e+00
  %821 = fcmp fast olt float %815, 0.000000e+00
  %822 = select i1 %820, float 0.000000e+00, float 1.000000e+00
  %823 = select i1 %821, float 0.000000e+00, float 1.000000e+00
  %824 = select i1 %820, float %516, float %514
  %825 = select i1 %821, float %517, float %515
  %826 = fmul fast float %512, %745
  %827 = fmul fast float %513, %746
  %828 = call float @dx.op.unary.f32(i32 27, float %826)  ; Round_ni(value)
  %829 = call float @dx.op.unary.f32(i32 27, float %827)  ; Round_ni(value)
  %830 = fadd fast float %828, %822
  %831 = fadd fast float %829, %823
  %832 = fmul fast float %830, %377
  %833 = fmul fast float %831, %378
  %834 = fsub fast float %824, %745
  %835 = fadd fast float %834, %832
  %836 = fsub fast float %825, %746
  %837 = fadd fast float %836, %833
  %838 = fdiv fast float %835, %814
  %839 = fdiv fast float %837, %815
  %840 = call float @dx.op.binary.f32(i32 36, float %838, float %839)  ; FMin(a,b)
  %841 = fmul float %816, %840
  %842 = fmul float %815, %840
  %843 = fmul float %814, %840
  %844 = fadd float %740, %841
  %845 = fadd float %746, %842
  %846 = fadd float %745, %843
  %847 = fcmp fast olt float %840, 1.000000e+00
  %848 = and i1 %847, %541
  br i1 %848, label %849, label %920

; <label>:849                                     ; preds = %757
  br label %850

; <label>:850                                     ; preds = %850, %849
  %851 = phi float [ %912, %850 ], [ %846, %849 ]
  %852 = phi float [ %911, %850 ], [ %845, %849 ]
  %853 = phi float [ %910, %850 ], [ %844, %849 ]
  %854 = phi float [ %901, %850 ], [ %840, %849 ]
  %855 = phi float [ %906, %850 ], [ 0.000000e+00, %849 ]
  %856 = phi float [ %902, %850 ], [ %840, %849 ]
  %857 = phi float [ %905, %850 ], [ 0.000000e+00, %849 ]
  %858 = call float @dx.op.unary.f32(i32 21, float %857)  ; Exp(value)
  %859 = fmul fast float %858, %377
  %860 = fmul fast float %858, %378
  %861 = fdiv fast float 1.000000e+00, %859
  %862 = fdiv fast float 1.000000e+00, %860
  %863 = fmul fast float %859, 0x3F747AE140000000
  %864 = fmul fast float %860, 0x3F747AE140000000
  %865 = fsub fast float -0.000000e+00, %863
  %866 = fsub fast float -0.000000e+00, %864
  %867 = select i1 %820, float %865, float %863
  %868 = select i1 %821, float %866, float %864
  %869 = fmul fast float %861, %851
  %870 = fmul fast float %862, %852
  %871 = call float @dx.op.unary.f32(i32 27, float %869)  ; Round_ni(value)
  %872 = call float @dx.op.unary.f32(i32 27, float %870)  ; Round_ni(value)
  %873 = fadd fast float %871, %822
  %874 = fadd fast float %872, %823
  %875 = fmul fast float %873, %859
  %876 = fmul fast float %874, %860
  %877 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %878 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %879 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %877, %dx.types.Handle %878, float %851, float %852, float undef, float undef, i32 0, i32 0, i32 undef, float %857)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %880 = extractvalue %dx.types.ResRet.f32 %879, 0
  %881 = fmul fast float %856, 1.000000e+01
  %882 = call float @dx.op.unary.f32(i32 7, float %881)  ; Saturate(value)
  %883 = fmul fast float %882, 0x3F847AE000000000
  %884 = fadd fast float %883, 0x3FEFAE1480000000
  %885 = fmul fast float %884, %880
  %886 = fsub fast float %867, %745
  %887 = fadd fast float %886, %875
  %888 = fsub fast float %868, %746
  %889 = fadd fast float %888, %876
  %890 = fsub fast float %885, %740
  %891 = fdiv fast float %887, %814
  %892 = fdiv fast float %889, %815
  %893 = fdiv fast float %890, %816
  %894 = fcmp fast olt float %816, 0.000000e+00
  %895 = select i1 %894, float %893, float 1.000000e+00
  %896 = call float @dx.op.binary.f32(i32 36, float %892, float %895)  ; FMin(a,b)
  %897 = call float @dx.op.binary.f32(i32 36, float %891, float %896)  ; FMin(a,b)
  %898 = fcmp fast ogt float %853, %885
  %899 = fcmp fast une float %897, %895
  %900 = and i1 %898, %899
  %901 = select i1 %900, float %897, float %854
  %902 = select i1 %898, float %897, float %856
  %903 = call float @dx.op.binary.f32(i32 36, float %902, float 1.000000e+00)  ; FMin(a,b)
  %904 = select i1 %900, float 1.000000e+00, float -1.000000e+00
  %905 = fadd fast float %904, %857
  %906 = fadd fast float %855, 1.000000e+00
  %907 = fmul float %816, %903
  %908 = fmul float %815, %903
  %909 = fmul float %814, %903
  %910 = fadd float %740, %907
  %911 = fadd float %746, %908
  %912 = fadd float %745, %909
  %913 = fcmp fast oge float %905, 0.000000e+00
  %914 = fcmp fast olt float %906, %367
  %915 = and i1 %913, %914
  %916 = fcmp fast olt float %902, 1.000000e+00
  %917 = and i1 %916, %915
  br i1 %917, label %850, label %918

; <label>:918                                     ; preds = %850
  %919 = fcmp olt float %905, 0.000000e+00
  br label %920

; <label>:920                                     ; preds = %918, %757
  %921 = phi float [ %912, %918 ], [ %846, %757 ]
  %922 = phi float [ %911, %918 ], [ %845, %757 ]
  %923 = phi float [ %910, %918 ], [ %844, %757 ]
  %924 = phi float [ %901, %918 ], [ %840, %757 ]
  %925 = phi i1 [ %919, %918 ], [ false, %757 ]
  br i1 %925, label %926, label %960

; <label>:926                                     ; preds = %920
  %927 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %928 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %929 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %927, %dx.types.Handle %928, float %921, float %922, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %930 = extractvalue %dx.types.ResRet.f32 %929, 0
  %931 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %932 = extractvalue %dx.types.CBufRet.f32 %931, 0
  %933 = fmul fast float %932, %930
  %934 = extractvalue %dx.types.CBufRet.f32 %931, 1
  %935 = fadd fast float %933, %934
  %936 = extractvalue %dx.types.CBufRet.f32 %931, 2
  %937 = fmul fast float %936, %930
  %938 = extractvalue %dx.types.CBufRet.f32 %931, 3
  %939 = fsub fast float %937, %938
  %940 = fdiv fast float 1.000000e+00, %939
  %941 = fadd fast float %935, %940
  %942 = fmul fast float %932, %923
  %943 = fmul fast float %936, %923
  %944 = fsub fast float %943, %938
  %945 = fdiv fast float 1.000000e+00, %944
  %946 = fsub fast float %934, %941
  %947 = fadd fast float %946, %942
  %948 = fadd fast float %947, %945
  %949 = call float @dx.op.binary.f32(i32 35, float %941, float 0x3EE4F8B580000000)  ; FMax(a,b)
  %950 = fmul fast float %366, %949
  %951 = fcmp fast olt float %948, %950
  %952 = zext i1 %951 to i32
  br i1 %951, label %960, label %953

; <label>:953                                     ; preds = %926
  %954 = fmul fast float %924, %814
  %955 = fmul fast float %924, %815
  %956 = fmul fast float %924, %816
  %957 = fadd fast float %954, %745
  %958 = fadd fast float %955, %746
  %959 = fadd fast float %956, %740
  br label %960

; <label>:960                                     ; preds = %953, %926, %920
  %961 = phi float [ %921, %926 ], [ %957, %953 ], [ %921, %920 ]
  %962 = phi float [ %922, %926 ], [ %958, %953 ], [ %922, %920 ]
  %963 = phi float [ %923, %926 ], [ %959, %953 ], [ %923, %920 ]
  %964 = phi i32 [ %952, %926 ], [ %952, %953 ], [ 0, %920 ]
  %965 = icmp ne i32 %964, 0
  %966 = and i1 %661, %965
  br i1 %966, label %967, label %1015

; <label>:967                                     ; preds = %960
  %968 = fmul fast float %377, %364
  %969 = fmul fast float %968, %814
  %970 = fmul fast float %378, %364
  %971 = fmul fast float %970, %815
  %972 = fmul fast float %969, %969
  %973 = fmul fast float %971, %971
  %974 = fadd fast float %972, %973
  %975 = call float @dx.op.unary.f32(i32 24, float %974)  ; Sqrt(value)
  %976 = fsub fast float %817, %961
  %977 = fsub fast float %818, %962
  %978 = fmul fast float %976, %976
  %979 = fmul fast float %977, %977
  %980 = fadd fast float %979, %978
  %981 = call float @dx.op.unary.f32(i32 24, float %980)  ; Sqrt(value)
  %982 = fdiv fast float %975, %981
  %983 = call float @dx.op.binary.f32(i32 36, float %982, float 1.000000e+00)  ; FMin(a,b)
  br label %984

; <label>:984                                     ; preds = %1010, %967
  %985 = phi float [ %1012, %1010 ], [ 0.000000e+00, %967 ]
  %986 = phi i32 [ %1011, %1010 ], [ 0, %967 ]
  %987 = fdiv fast float %985, %364
  %988 = fmul fast float %987, %983
  %989 = fmul fast float %988, %976
  %990 = fmul fast float %988, %977
  %991 = fadd fast float %989, %961
  %992 = fadd fast float %990, %962
  %993 = fcmp fast olt float %991, %369
  %994 = fcmp fast olt float %992, %370
  %995 = fcmp fast ogt float %991, 0.000000e+00
  %996 = fcmp fast ogt float %992, 0.000000e+00
  %997 = and i1 %995, %993
  %998 = and i1 %996, %994
  %999 = and i1 %997, %998
  br i1 %999, label %1000, label %1010

; <label>:1000                                    ; preds = %984
  %1001 = fsub fast float %819, %963
  %1002 = fmul fast float %988, %1001
  %1003 = fadd fast float %1002, %963
  %1004 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1005 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1006 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1004, %dx.types.Handle %1005, float %991, float %992, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1007 = extractvalue %dx.types.ResRet.f32 %1006, 0
  %1008 = fcmp fast ogt float %1003, %1007
  br i1 %1008, label %1009, label %1010

; <label>:1009                                    ; preds = %1000
  br label %1010

; <label>:1010                                    ; preds = %1009, %1000, %984
  %1011 = phi i32 [ 1, %1009 ], [ %986, %1000 ], [ %986, %984 ]
  %1012 = fadd fast float %985, 1.000000e+00
  %1013 = fcmp fast olt float %1012, %364
  br i1 %1013, label %984, label %1014

; <label>:1014                                    ; preds = %1010
  br label %1015

; <label>:1015                                    ; preds = %1014, %960
  %1016 = phi i32 [ 0, %960 ], [ %1011, %1014 ]
  %1017 = icmp ne i32 %1016, 0
  %1018 = icmp eq i32 %964, 0
  %1019 = or i1 %1018, %1017
  br i1 %1019, label %1025, label %1020

; <label>:1020                                    ; preds = %1015
  %1021 = fmul fast float %962, %373
  %1022 = fadd fast float %1021, %375
  %1023 = fmul fast float %961, %372
  %1024 = fadd fast float %1023, %374
  br label %1025

; <label>:1025                                    ; preds = %1020, %1015, %711
  %1026 = phi i32 [ %659, %711 ], [ 0, %1015 ], [ %964, %1020 ]
  %1027 = phi i32 [ %719, %711 ], [ %719, %1015 ], [ 0, %1020 ]
  %1028 = phi float [ %715, %711 ], [ %715, %1015 ], [ %1024, %1020 ]
  %1029 = phi float [ %716, %711 ], [ %716, %1015 ], [ %1022, %1020 ]
  %1030 = phi float [ %658, %711 ], [ %658, %1015 ], [ %963, %1020 ]
  %1031 = icmp eq i32 %1027, 0
  %1032 = icmp ne i32 %1026, 0
  %1033 = and i1 %1032, %1031
  %1034 = zext i1 %1033 to i32
  %1035 = fsub fast float %1028, %153
  %1036 = fsub fast float %1029, %152
  %1037 = fdiv fast float %1035, %156
  %1038 = fdiv fast float %1036, %157
  %1039 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %1040 = extractvalue %dx.types.CBufRet.f32 %1039, 0
  %1041 = fmul fast float %1040, %1030
  %1042 = extractvalue %dx.types.CBufRet.f32 %1039, 1
  %1043 = fadd fast float %1041, %1042
  %1044 = extractvalue %dx.types.CBufRet.f32 %1039, 2
  %1045 = fmul fast float %1044, %1030
  %1046 = extractvalue %dx.types.CBufRet.f32 %1039, 3
  %1047 = fsub fast float %1045, %1046
  %1048 = fdiv fast float 1.000000e+00, %1047
  %1049 = fadd fast float %1043, %1048
  %1050 = fmul fast float %1049, %1037
  %1051 = fmul fast float %1049, %1038
  %1052 = fmul fast float %1050, %161
  %1053 = call float @dx.op.tertiary.f32(i32 46, float %1051, float %165, float %1052)  ; FMad(a,b,c)
  %1054 = call float @dx.op.tertiary.f32(i32 46, float %1049, float %169, float %1053)  ; FMad(a,b,c)
  %1055 = fmul fast float %1050, %162
  %1056 = call float @dx.op.tertiary.f32(i32 46, float %1051, float %166, float %1055)  ; FMad(a,b,c)
  %1057 = call float @dx.op.tertiary.f32(i32 46, float %1049, float %170, float %1056)  ; FMad(a,b,c)
  %1058 = fmul fast float %1050, %163
  %1059 = call float @dx.op.tertiary.f32(i32 46, float %1051, float %167, float %1058)  ; FMad(a,b,c)
  %1060 = call float @dx.op.tertiary.f32(i32 46, float %1049, float %171, float %1059)  ; FMad(a,b,c)
  %1061 = fsub fast float %344, %173
  %1062 = fsub fast float %1061, %1054
  %1063 = fsub fast float %345, %174
  %1064 = fsub fast float %1063, %1057
  %1065 = fsub fast float %346, %175
  %1066 = fsub fast float %1065, %1060
  %1067 = call float @dx.op.dot3.f32(i32 55, float %1062, float %1064, float %1066, float %1062, float %1064, float %1066)  ; Dot3(ax,ay,az,bx,by,bz)
  %1068 = call float @dx.op.unary.f32(i32 24, float %1067)  ; Sqrt(value)
  %1069 = call float @dx.op.binary.f32(i32 36, float %1068, float %191)  ; FMin(a,b)
  br i1 %1033, label %1070, label %1425

; <label>:1070                                    ; preds = %1025
  %1071 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 117)  ; CBufferLoadLegacy(handle,regIndex)
  %1072 = extractvalue %dx.types.CBufRet.f32 %1071, 0
  %1073 = extractvalue %dx.types.CBufRet.f32 %1071, 1
  %1074 = extractvalue %dx.types.CBufRet.f32 %1071, 2
  %1075 = extractvalue %dx.types.CBufRet.f32 %1071, 3
  %1076 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 118)  ; CBufferLoadLegacy(handle,regIndex)
  %1077 = extractvalue %dx.types.CBufRet.f32 %1076, 0
  %1078 = extractvalue %dx.types.CBufRet.f32 %1076, 1
  %1079 = extractvalue %dx.types.CBufRet.f32 %1076, 2
  %1080 = extractvalue %dx.types.CBufRet.f32 %1076, 3
  %1081 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 119)  ; CBufferLoadLegacy(handle,regIndex)
  %1082 = extractvalue %dx.types.CBufRet.f32 %1081, 0
  %1083 = extractvalue %dx.types.CBufRet.f32 %1081, 1
  %1084 = extractvalue %dx.types.CBufRet.f32 %1081, 2
  %1085 = extractvalue %dx.types.CBufRet.f32 %1081, 3
  %1086 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 120)  ; CBufferLoadLegacy(handle,regIndex)
  %1087 = extractvalue %dx.types.CBufRet.f32 %1086, 0
  %1088 = extractvalue %dx.types.CBufRet.f32 %1086, 1
  %1089 = extractvalue %dx.types.CBufRet.f32 %1086, 2
  %1090 = extractvalue %dx.types.CBufRet.f32 %1086, 3
  %1091 = fmul fast float %1072, %1037
  %1092 = call float @dx.op.tertiary.f32(i32 46, float %1038, float %1077, float %1091)  ; FMad(a,b,c)
  %1093 = call float @dx.op.tertiary.f32(i32 46, float %1030, float %1082, float %1092)  ; FMad(a,b,c)
  %1094 = fadd fast float %1093, %1087
  %1095 = fmul fast float %1073, %1037
  %1096 = call float @dx.op.tertiary.f32(i32 46, float %1038, float %1078, float %1095)  ; FMad(a,b,c)
  %1097 = call float @dx.op.tertiary.f32(i32 46, float %1030, float %1083, float %1096)  ; FMad(a,b,c)
  %1098 = fadd fast float %1097, %1088
  %1099 = fmul fast float %1074, %1037
  %1100 = call float @dx.op.tertiary.f32(i32 46, float %1038, float %1079, float %1099)  ; FMad(a,b,c)
  %1101 = call float @dx.op.tertiary.f32(i32 46, float %1030, float %1084, float %1100)  ; FMad(a,b,c)
  %1102 = fadd fast float %1101, %1089
  %1103 = fmul fast float %1075, %1037
  %1104 = call float @dx.op.tertiary.f32(i32 46, float %1038, float %1080, float %1103)  ; FMad(a,b,c)
  %1105 = call float @dx.op.tertiary.f32(i32 46, float %1030, float %1085, float %1104)  ; FMad(a,b,c)
  %1106 = fadd fast float %1105, %1090
  %1107 = fdiv fast float %1094, %1106
  %1108 = fdiv fast float %1098, %1106
  %1109 = fdiv fast float %1102, %1106
  %1110 = fsub fast float %1037, %1107
  %1111 = fsub fast float %1038, %1108
  %1112 = fsub fast float %1030, %1109
  %1113 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1114 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1115 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1113, %dx.types.Handle %1114, float %1028, float %1029, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1116 = extractvalue %dx.types.ResRet.f32 %1115, 0
  %1117 = fcmp fast ogt float %1116, 0.000000e+00
  br i1 %1117, label %1118, label %1143

; <label>:1118                                    ; preds = %1070
  %1119 = extractvalue %dx.types.ResRet.f32 %1115, 3
  %1120 = extractvalue %dx.types.ResRet.f32 %1115, 2
  %1121 = extractvalue %dx.types.ResRet.f32 %1115, 1
  %1122 = fmul fast float %1116, 0x4010083560000000
  %1123 = fmul fast float %1121, 0x4010083560000000
  %1124 = fadd fast float %1122, 0xC000082560000000
  %1125 = fadd fast float %1123, 0xC000082560000000
  %1126 = fmul fast float %1120, 6.553500e+04
  %1127 = call float @dx.op.unary.f32(i32 26, float %1126)  ; Round_ne(value)
  %1128 = fptoui float %1127 to i32
  %1129 = shl i32 %1128, 16
  %1130 = fmul fast float %1119, 6.553500e+04
  %1131 = call float @dx.op.unary.f32(i32 26, float %1130)  ; Round_ne(value)
  %1132 = fptoui float %1131 to i32
  %1133 = or i32 %1129, %1132
  %1134 = bitcast i32 %1133 to float
  %1135 = call float @dx.op.unary.f32(i32 6, float %1124)  ; FAbs(value)
  %1136 = call float @dx.op.unary.f32(i32 6, float %1125)  ; FAbs(value)
  %1137 = fmul fast float %1116, 0x4000083560000000
  %1138 = fadd fast float %1137, 0xBFF0082560000000
  %1139 = fmul fast float %1138, %1135
  %1140 = fmul fast float %1121, 0x4000083560000000
  %1141 = fadd fast float %1140, 0xBFF0082560000000
  %1142 = fmul fast float %1141, %1136
  br label %1143

; <label>:1143                                    ; preds = %1118, %1070
  %1144 = phi float [ %1139, %1118 ], [ %1110, %1070 ]
  %1145 = phi float [ %1142, %1118 ], [ %1111, %1070 ]
  %1146 = phi float [ %1134, %1118 ], [ %1112, %1070 ]
  %1147 = fsub fast float %1037, %1144
  %1148 = fsub fast float %1038, %1145
  %1149 = fsub fast float %1030, %1146
  %1150 = call float @dx.op.unary.f32(i32 6, float %1147)  ; FAbs(value)
  %1151 = call float @dx.op.unary.f32(i32 6, float %1148)  ; FAbs(value)
  %1152 = fmul fast float %1150, 5.000000e+00
  %1153 = fmul fast float %1151, 5.000000e+00
  %1154 = fadd fast float %1152, -4.000000e+00
  %1155 = fadd fast float %1153, -4.000000e+00
  %1156 = call float @dx.op.unary.f32(i32 7, float %1154)  ; Saturate(value)
  %1157 = call float @dx.op.unary.f32(i32 7, float %1155)  ; Saturate(value)
  %1158 = call float @dx.op.dot2.f32(i32 54, float %1156, float %1157, float %1156, float %1157)  ; Dot2(ax,ay,bx,by)
  %1159 = fsub fast float 1.000000e+00, %1158
  %1160 = call float @dx.op.unary.f32(i32 7, float %1159)  ; Saturate(value)
  %1161 = call float @dx.op.unary.f32(i32 6, float %1037)  ; FAbs(value)
  %1162 = call float @dx.op.unary.f32(i32 6, float %1038)  ; FAbs(value)
  %1163 = fmul fast float %1161, 5.000000e+00
  %1164 = fmul fast float %1162, 5.000000e+00
  %1165 = fadd fast float %1163, -4.000000e+00
  %1166 = fadd fast float %1164, -4.000000e+00
  %1167 = call float @dx.op.unary.f32(i32 7, float %1165)  ; Saturate(value)
  %1168 = call float @dx.op.unary.f32(i32 7, float %1166)  ; Saturate(value)
  %1169 = call float @dx.op.dot2.f32(i32 54, float %1167, float %1168, float %1167, float %1168)  ; Dot2(ax,ay,bx,by)
  %1170 = fsub fast float 1.000000e+00, %1169
  %1171 = call float @dx.op.unary.f32(i32 7, float %1170)  ; Saturate(value)
  %1172 = call float @dx.op.binary.f32(i32 36, float %1171, float %1160)  ; FMin(a,b)
  %1173 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %25, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %1174 = extractvalue %dx.types.CBufRet.i32 %1173, 0
  %1175 = uitofp i32 %1174 to float
  %1176 = uitofp i32 %27 to float
  %1177 = uitofp i32 %28 to float
  %1178 = fadd fast float %1176, 5.000000e-01
  %1179 = fadd fast float %1177, 5.000000e-01
  %1180 = fmul fast float %1175, 0x4040551EC0000000
  %1181 = fmul fast float %1175, 0x4027A147A0000000
  %1182 = fadd fast float %1178, %1180
  %1183 = fadd fast float %1179, %1181
  %1184 = call float @dx.op.dot2.f32(i32 54, float %1182, float %1183, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %1185 = call float @dx.op.unary.f32(i32 22, float %1184)  ; Frc(value)
  %1186 = fmul fast float %1185, 0x404A7DD040000000
  %1187 = call float @dx.op.unary.f32(i32 22, float %1186)  ; Frc(value)
  %1188 = fcmp fast olt float %1172, %1187
  br i1 %1188, label %1210, label %1189

; <label>:1189                                    ; preds = %1143
  %1190 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %1191 = extractvalue %dx.types.CBufRet.f32 %1190, 0
  %1192 = extractvalue %dx.types.CBufRet.f32 %1190, 1
  %1193 = fmul fast float %1191, %1147
  %1194 = fmul fast float %1192, %1148
  %1195 = extractvalue %dx.types.CBufRet.f32 %1190, 2
  %1196 = extractvalue %dx.types.CBufRet.f32 %1190, 3
  %1197 = fadd fast float %1193, %1195
  %1198 = fadd fast float %1194, %1196
  %1199 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1200 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1199, %dx.types.Handle %1114, float %1197, float %1198, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1201 = extractvalue %dx.types.ResRet.f32 %1200, 0
  %1202 = fsub fast float %1201, %1149
  %1203 = call float @dx.op.unary.f32(i32 6, float %1202)  ; FAbs(value)
  %1204 = extractvalue %dx.types.CBufRet.f32 %363, 2
  %1205 = fmul fast float %1187, 1.500000e+00
  %1206 = fadd fast float %1205, 5.000000e-01
  %1207 = fmul fast float %1204, %1206
  %1208 = fcmp fast olt float %1203, %1207
  %1209 = zext i1 %1208 to i32
  br label %1210

; <label>:1210                                    ; preds = %1189, %1143
  %1211 = phi i32 [ %1209, %1189 ], [ 0, %1143 ]
  %1212 = icmp eq i32 %1211, 0
  br i1 %1212, label %1227, label %1213

; <label>:1213                                    ; preds = %1210
  %1214 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 32)  ; CBufferLoadLegacy(handle,regIndex)
  %1215 = extractvalue %dx.types.CBufRet.i32 %1214, 1
  %1216 = icmp eq i32 %1215, 0
  br i1 %1216, label %1227, label %1217

; <label>:1217                                    ; preds = %1213
  %1218 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1219 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1218, %dx.types.Handle %1114, float %1028, float %1029, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1220 = extractvalue %dx.types.ResRet.f32 %1219, 3
  %1221 = fmul fast float %1220, 2.550000e+02
  %1222 = fadd fast float %1221, 5.000000e-01
  %1223 = fptoui float %1222 to i32
  %1224 = and i32 %1223, 11
  %1225 = icmp eq i32 %1224, 2
  %1226 = select i1 %1225, i32 0, i32 %1211
  br label %1227

; <label>:1227                                    ; preds = %1217, %1213, %1210
  %1228 = phi i32 [ %1211, %1213 ], [ 0, %1210 ], [ %1226, %1217 ]
  %1229 = icmp eq i32 %1228, 0
  br i1 %1229, label %1425, label %1230

; <label>:1230                                    ; preds = %1227
  %1231 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %1232 = extractvalue %dx.types.CBufRet.f32 %1231, 0
  %1233 = extractvalue %dx.types.CBufRet.f32 %1231, 1
  %1234 = fmul fast float %1232, %1147
  %1235 = fmul fast float %1233, %1148
  %1236 = extractvalue %dx.types.CBufRet.f32 %1231, 2
  %1237 = extractvalue %dx.types.CBufRet.f32 %1231, 3
  %1238 = fadd fast float %1234, %1236
  %1239 = fadd fast float %1235, %1237
  %1240 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %1241 = extractvalue %dx.types.CBufRet.f32 %1240, 2
  %1242 = extractvalue %dx.types.CBufRet.f32 %1240, 3
  %1243 = extractvalue %dx.types.CBufRet.f32 %1240, 0
  %1244 = extractvalue %dx.types.CBufRet.f32 %1240, 1
  %1245 = call float @dx.op.binary.f32(i32 35, float %1238, float %1243)  ; FMax(a,b)
  %1246 = call float @dx.op.binary.f32(i32 35, float %1239, float %1244)  ; FMax(a,b)
  %1247 = call float @dx.op.binary.f32(i32 36, float %1245, float %1241)  ; FMin(a,b)
  %1248 = call float @dx.op.binary.f32(i32 36, float %1246, float %1242)  ; FMin(a,b)
  %1249 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1250 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1249, %dx.types.Handle %1114, float %1247, float %1248, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1251 = extractvalue %dx.types.ResRet.f32 %1250, 0
  %1252 = extractvalue %dx.types.ResRet.f32 %1250, 1
  %1253 = extractvalue %dx.types.ResRet.f32 %1250, 2
  %1254 = fsub fast float -0.000000e+00, %1251
  %1255 = fsub fast float -0.000000e+00, %1252
  %1256 = fsub fast float -0.000000e+00, %1253
  %1257 = call float @dx.op.binary.f32(i32 36, float %1254, float 0.000000e+00)  ; FMin(a,b)
  %1258 = call float @dx.op.binary.f32(i32 36, float %1255, float 0.000000e+00)  ; FMin(a,b)
  %1259 = call float @dx.op.binary.f32(i32 36, float %1256, float 0.000000e+00)  ; FMin(a,b)
  %1260 = extractvalue %dx.types.CBufRet.f32 %376, 0
  %1261 = fmul fast float %1260, %1257
  %1262 = fmul fast float %1260, %1258
  %1263 = fmul fast float %1260, %1259
  %1264 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %24, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1265 = extractvalue %dx.types.CBufRet.f32 %1264, 1
  %1266 = fcmp fast ogt float %1265, 0.000000e+00
  br i1 %1266, label %1267, label %1299

; <label>:1267                                    ; preds = %1230
  %1268 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1269 = extractvalue %dx.types.CBufRet.f32 %1268, 1
  %1270 = fcmp fast ogt float %1269, 0.000000e+00
  br i1 %1270, label %1271, label %1299

; <label>:1271                                    ; preds = %1267
  %1272 = extractvalue %dx.types.CBufRet.f32 %1268, 2
  %1273 = extractvalue %dx.types.CBufRet.f32 %1264, 0
  %1274 = call float @dx.op.binary.f32(i32 35, float %1272, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1275 = call float @dx.op.unary.f32(i32 23, float %1274)  ; Log(value)
  %1276 = fmul fast float %1275, 0x3FF3333340000000
  %1277 = fadd fast float %1273, -2.000000e+00
  %1278 = fadd fast float %1277, %1276
  %1279 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %1280 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1281 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1279, %dx.types.Handle %1280, float %250, float %260, float %268, float undef, i32 undef, i32 undef, i32 undef, float %1278)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1282 = extractvalue %dx.types.ResRet.f32 %1281, 0
  %1283 = extractvalue %dx.types.ResRet.f32 %1281, 1
  %1284 = extractvalue %dx.types.ResRet.f32 %1281, 2
  %1285 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 187)  ; CBufferLoadLegacy(handle,regIndex)
  %1286 = extractvalue %dx.types.CBufRet.f32 %1285, 0
  %1287 = extractvalue %dx.types.CBufRet.f32 %1285, 1
  %1288 = extractvalue %dx.types.CBufRet.f32 %1285, 2
  %1289 = fmul fast float %1286, %1282
  %1290 = fmul fast float %1287, %1283
  %1291 = fmul fast float %1288, %1284
  %1292 = extractvalue %dx.types.CBufRet.f32 %1268, 3
  %1293 = fmul fast float %1292, %1069
  %1294 = call float @dx.op.unary.f32(i32 7, float %1293)  ; Saturate(value)
  %1295 = fmul fast float %1294, %1269
  %1296 = fmul fast float %1289, %1295
  %1297 = fmul fast float %1290, %1295
  %1298 = fmul fast float %1291, %1295
  br label %1299

; <label>:1299                                    ; preds = %1271, %1267, %1230
  %1300 = phi float [ %1296, %1271 ], [ 0.000000e+00, %1267 ], [ 0.000000e+00, %1230 ]
  %1301 = phi float [ %1297, %1271 ], [ 0.000000e+00, %1267 ], [ 0.000000e+00, %1230 ]
  %1302 = phi float [ %1298, %1271 ], [ 0.000000e+00, %1267 ], [ 0.000000e+00, %1230 ]
  %1303 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1304 = extractvalue %dx.types.CBufRet.f32 %1303, 1
  %1305 = fmul fast float %1304, %1300
  %1306 = fmul fast float %1304, %1301
  %1307 = fmul fast float %1304, %1302
  %1308 = fsub fast float %1305, %1261
  %1309 = fsub fast float %1306, %1262
  %1310 = fsub fast float %1307, %1263
  %1311 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 777 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<3xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1311, i32 %27, i32 %28, i32 undef, float %1308, float %1309, float %1310, float %1308, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %1312 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %1313 = extractvalue %dx.types.CBufRet.f32 %1312, 0
  %1314 = fmul fast float %1313, %1030
  %1315 = extractvalue %dx.types.CBufRet.f32 %1312, 1
  %1316 = fadd fast float %1314, %1315
  %1317 = extractvalue %dx.types.CBufRet.f32 %1312, 2
  %1318 = fmul fast float %1317, %1030
  %1319 = extractvalue %dx.types.CBufRet.f32 %1312, 3
  %1320 = fsub fast float %1318, %1319
  %1321 = fdiv fast float 1.000000e+00, %1320
  %1322 = fadd fast float %1316, %1321
  %1323 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 56)  ; CBufferLoadLegacy(handle,regIndex)
  %1324 = extractvalue %dx.types.CBufRet.f32 %1323, 0
  %1325 = extractvalue %dx.types.CBufRet.f32 %1323, 1
  %1326 = extractvalue %dx.types.CBufRet.f32 %1323, 2
  %1327 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 57)  ; CBufferLoadLegacy(handle,regIndex)
  %1328 = extractvalue %dx.types.CBufRet.f32 %1327, 0
  %1329 = extractvalue %dx.types.CBufRet.f32 %1327, 1
  %1330 = extractvalue %dx.types.CBufRet.f32 %1327, 2
  %1331 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 58)  ; CBufferLoadLegacy(handle,regIndex)
  %1332 = extractvalue %dx.types.CBufRet.f32 %1331, 0
  %1333 = extractvalue %dx.types.CBufRet.f32 %1331, 1
  %1334 = extractvalue %dx.types.CBufRet.f32 %1331, 2
  %1335 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 59)  ; CBufferLoadLegacy(handle,regIndex)
  %1336 = extractvalue %dx.types.CBufRet.f32 %1335, 0
  %1337 = extractvalue %dx.types.CBufRet.f32 %1335, 1
  %1338 = extractvalue %dx.types.CBufRet.f32 %1335, 2
  %1339 = fmul fast float %1322, %1037
  %1340 = fmul fast float %1322, %1038
  %1341 = fmul fast float %1339, %1324
  %1342 = call float @dx.op.tertiary.f32(i32 46, float %1340, float %1328, float %1341)  ; FMad(a,b,c)
  %1343 = call float @dx.op.tertiary.f32(i32 46, float %1322, float %1332, float %1342)  ; FMad(a,b,c)
  %1344 = fmul fast float %1339, %1325
  %1345 = call float @dx.op.tertiary.f32(i32 46, float %1340, float %1329, float %1344)  ; FMad(a,b,c)
  %1346 = call float @dx.op.tertiary.f32(i32 46, float %1322, float %1333, float %1345)  ; FMad(a,b,c)
  %1347 = fmul fast float %1339, %1326
  %1348 = call float @dx.op.tertiary.f32(i32 46, float %1340, float %1330, float %1347)  ; FMad(a,b,c)
  %1349 = call float @dx.op.tertiary.f32(i32 46, float %1322, float %1334, float %1348)  ; FMad(a,b,c)
  %1350 = fmul fast float %1313, %1149
  %1351 = fadd fast float %1350, %1315
  %1352 = fmul fast float %1317, %1149
  %1353 = fsub fast float %1352, %1319
  %1354 = fdiv fast float 1.000000e+00, %1353
  %1355 = fadd fast float %1351, %1354
  %1356 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 113)  ; CBufferLoadLegacy(handle,regIndex)
  %1357 = extractvalue %dx.types.CBufRet.f32 %1356, 0
  %1358 = extractvalue %dx.types.CBufRet.f32 %1356, 1
  %1359 = extractvalue %dx.types.CBufRet.f32 %1356, 2
  %1360 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 114)  ; CBufferLoadLegacy(handle,regIndex)
  %1361 = extractvalue %dx.types.CBufRet.f32 %1360, 0
  %1362 = extractvalue %dx.types.CBufRet.f32 %1360, 1
  %1363 = extractvalue %dx.types.CBufRet.f32 %1360, 2
  %1364 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 115)  ; CBufferLoadLegacy(handle,regIndex)
  %1365 = extractvalue %dx.types.CBufRet.f32 %1364, 0
  %1366 = extractvalue %dx.types.CBufRet.f32 %1364, 1
  %1367 = extractvalue %dx.types.CBufRet.f32 %1364, 2
  %1368 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 116)  ; CBufferLoadLegacy(handle,regIndex)
  %1369 = extractvalue %dx.types.CBufRet.f32 %1368, 0
  %1370 = extractvalue %dx.types.CBufRet.f32 %1368, 1
  %1371 = extractvalue %dx.types.CBufRet.f32 %1368, 2
  %1372 = fmul fast float %1355, %1147
  %1373 = fmul fast float %1355, %1148
  %1374 = fmul fast float %1372, %1357
  %1375 = call float @dx.op.tertiary.f32(i32 46, float %1373, float %1361, float %1374)  ; FMad(a,b,c)
  %1376 = call float @dx.op.tertiary.f32(i32 46, float %1355, float %1365, float %1375)  ; FMad(a,b,c)
  %1377 = fmul fast float %1372, %1358
  %1378 = call float @dx.op.tertiary.f32(i32 46, float %1373, float %1362, float %1377)  ; FMad(a,b,c)
  %1379 = call float @dx.op.tertiary.f32(i32 46, float %1355, float %1366, float %1378)  ; FMad(a,b,c)
  %1380 = fmul fast float %1372, %1359
  %1381 = call float @dx.op.tertiary.f32(i32 46, float %1373, float %1363, float %1380)  ; FMad(a,b,c)
  %1382 = call float @dx.op.tertiary.f32(i32 46, float %1355, float %1367, float %1381)  ; FMad(a,b,c)
  %1383 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %1384 = extractvalue %dx.types.CBufRet.f32 %1383, 0
  %1385 = extractvalue %dx.types.CBufRet.f32 %1383, 1
  %1386 = extractvalue %dx.types.CBufRet.f32 %1383, 2
  %1387 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 108)  ; CBufferLoadLegacy(handle,regIndex)
  %1388 = extractvalue %dx.types.CBufRet.f32 %1387, 0
  %1389 = extractvalue %dx.types.CBufRet.f32 %1387, 1
  %1390 = extractvalue %dx.types.CBufRet.f32 %1387, 2
  %1391 = fadd fast float %1343, %1336
  %1392 = fsub fast float %1391, %1369
  %1393 = fsub fast float %1392, %1376
  %1394 = fsub fast float %1393, %1384
  %1395 = fadd fast float %1394, %1388
  %1396 = fadd fast float %1346, %1337
  %1397 = fsub fast float %1396, %1370
  %1398 = fsub fast float %1397, %1379
  %1399 = fsub fast float %1398, %1385
  %1400 = fadd fast float %1399, %1389
  %1401 = fadd fast float %1349, %1338
  %1402 = fsub fast float %1401, %1371
  %1403 = fsub fast float %1402, %1382
  %1404 = fsub fast float %1403, %1386
  %1405 = fadd fast float %1404, %1390
  %1406 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %1407 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1406, i32 0, i32 %31, i32 %32, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1408 = extractvalue %dx.types.ResRet.i32 %1407, 0
  %1409 = and i32 %1408, 32767
  %1410 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1409)  ; LegacyF16ToF32(value)
  %1411 = fmul fast float %1395, %1395
  %1412 = fmul fast float %1400, %1400
  %1413 = fadd fast float %1411, %1412
  %1414 = fmul fast float %1405, %1405
  %1415 = fadd fast float %1413, %1414
  %1416 = call float @dx.op.unary.f32(i32 24, float %1415)  ; Sqrt(value)
  %1417 = fsub fast float %1410, %1416
  %1418 = call float @dx.op.unary.f32(i32 6, float %1417)  ; FAbs(value)
  %1419 = call float @dx.op.binary.f32(i32 35, float %148, float 1.000000e+02)  ; FMax(a,b)
  %1420 = fdiv fast float %1418, %1419
  %1421 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 36)  ; CBufferLoadLegacy(handle,regIndex)
  %1422 = extractvalue %dx.types.CBufRet.f32 %1421, 1
  %1423 = fcmp fast ogt float %1420, %1422
  %1424 = select i1 %1423, i32 -2147483648, i32 0
  br label %1425

; <label>:1425                                    ; preds = %1299, %1227, %1025
  %1426 = phi i32 [ %1228, %1299 ], [ 0, %1227 ], [ %1034, %1025 ]
  %1427 = phi i32 [ %1424, %1299 ], [ 0, %1227 ], [ 0, %1025 ]
  %1428 = icmp ne i32 %1426, 0
  %1429 = call float @dx.op.binary.f32(i32 35, float %1069, float 0.000000e+00)  ; FMax(a,b)
  %1430 = fmul fast float %1429, 0x3FB99999A0000000
  %1431 = fadd fast float %1430, 5.000000e-01
  %1432 = fptoui float %1431 to i32
  %1433 = call i32 @dx.op.binary.i32(i32 40, i32 %1432, i32 1073741823)  ; UMin(a,b)
  %1434 = select i1 %1428, i32 1073741824, i32 0
  %1435 = or i32 %1434, %1427
  %1436 = or i32 %1435, %1433
  %1437 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  call void @dx.op.textureStore.i32(i32 67, %dx.types.Handle %1437, i32 %27, i32 %28, i32 undef, i32 %1436, i32 %1436, i32 %1436, i32 %1436, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %1438

; <label>:1438                                    ; preds = %1425, %308, %123, %119, %91
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.unary.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind
declare void @dx.op.textureStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32, i8) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!34}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !23, !26, !31}
!5 = !{!6, !8, !9, !10, !11, !12, !14, !15, !16, !18, !19, !20, !21, !22}
!6 = !{i32 0, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 5, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{i32 2, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !7}
!10 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!11 = !{i32 4, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i32 0, !7}
!12 = !{i32 5, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 5, i32 1, i32 2, i32 0, !13}
!13 = !{i32 0, i32 5}
!14 = !{i32 6, %"class.Texture2D<vector<float, 2> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !7}
!15 = !{i32 7, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !13}
!16 = !{i32 8, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 8, i32 1, i32 12, i32 0, !17}
!17 = !{i32 1, i32 4}
!18 = !{i32 9, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 9, i32 1, i32 12, i32 0, !17}
!19 = !{i32 10, %"class.Texture2D<unsigned int>"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !13}
!20 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !7}
!21 = !{i32 12, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 2, i32 0, !7}
!22 = !{i32 13, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !7}
!23 = !{!24, !25}
!24 = !{i32 0, %"class.RWTexture2D<unsigned int>"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !13}
!25 = !{i32 1, %"class.RWTexture2D<vector<float, 3> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!26 = !{!27, !28, !29, !30}
!27 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 1336, null}
!28 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!29 = !{i32 2, %UniformBufferConstants_ReflectionStruct* undef, !"", i32 0, i32 2, i32 1, i32 76, null}
!30 = !{i32 3, %UniformBufferConstants_BlueNoise* undef, !"", i32 0, i32 3, i32 1, i32 44, null}
!31 = !{!32, !33}
!32 = !{i32 0, %struct.SamplerState* undef, !"", i32 1000, i32 1, i32 1, i32 0, null}
!33 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!34 = !{void ()* @ScreenProbeTraceScreenTexturesCS, !"ScreenProbeTraceScreenTexturesCS", null, !4, !35}
!35 = !{i32 0, i64 16, i32 4, !36, i32 5, !37}
!36 = !{i32 8, i32 8, i32 1}
!37 = !{i32 0}
